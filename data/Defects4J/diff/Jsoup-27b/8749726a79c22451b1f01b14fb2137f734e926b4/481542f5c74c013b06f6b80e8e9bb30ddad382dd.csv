is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,9,import java.nio.MappedByteBuffer;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,10,import java.nio.channels.FileChannel;
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,33,nputStream inStream = null;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,35,FileInputStream inStream = null;
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,36,"eturn load(inStream, charsetName, baseUri);"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,38,"MappedByteBuffer byteData = inStream.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, in.length());"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,39,"return parseByteData(byteData, charsetName, baseUri);"
True,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,124,"public static boolean in(String needle, String... haystack) {"
True,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,125,for (String hay : haystack) {
True,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,126,if (hay.equals(needle))
True,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,127,return true;
True,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,129,return false;
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,49,* Validates that the value is false
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,50,* @param val object to test
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,52,public static void isFalse(boolean val) {
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,53,if (val)
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,54,"throw new IllegalArgumentException(""Must be false"");"
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,58,* Validates that the value is false
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,59,* @param val object to test
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,60,* @param msg message to output if validation fails
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,62,"public static void isFalse(boolean val, String msg) {"
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,63,if (val)
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,64,throw new IllegalArgumentException(msg);
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,106,Cause a failure.
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,107,@param msg message to output.
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,109,public static void fail(String msg) {
True,src/main/java/org/jsoup/helper/Validate.java,src/main/java/org/jsoup/helper/Validate.java,110,throw new IllegalArgumentException(msg);
False,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,20,"rivate LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>(2);"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,20,"private LinkedHashMap<String, Attribute> attributes = null;"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,22,// null be default as so many elements have no attributes -- saves a good chunk of memory
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,33,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,34,"return """";"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,56,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,57,"attributes = new LinkedHashMap<String, Attribute>(2);"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,67,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,68,return;
False,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,70,eturn attributes.containsKey(key.toLowerCase());
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,78,return attributes != null && attributes.containsKey(key.toLowerCase());
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,86,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,87,return 0;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,96,if (incoming.size() == 0)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,97,return;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,98,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,99,"attributes = new LinkedHashMap<String, Attribute>(incoming.size());"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,113,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,114,return Collections.emptyList();
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,143,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,144,return;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,176,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,177,return new Attributes();
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,193,private Dataset() {
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,194,if (attributes == null)
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,195,"attributes = new LinkedHashMap<String, Attribute>(2);"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,18,private QuirksMode quirksMode = QuirksMode.noQuirks;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,337,public enum QuirksMode {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,338,"noQuirks, quirks, limitedQuirks;"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,341,public QuirksMode quirksMode() {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,342,return quirksMode;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,345,public Document quirksMode(QuirksMode quirksMode) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,346,this.quirksMode = quirksMode;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,347,return this;
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,1,package org.jsoup.nodes;
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,3,import org.jsoup.helper.StringUtil;
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,6,* A {@code <!DOCTPYE>} node.
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,8,public class DocumentType extends Node {
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,9,// todo: quirk mode from publicId and systemId
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,11,private DocumentType() {}
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,13,"public DocumentType(String name, String publicId, String systemId, String baseUri) {"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,14,super(baseUri);
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,16,"attr(""name"", name);"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,17,"attr(""publicId"", publicId);"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,18,"attr(""systemId"", systemId);"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,21,@Override
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,22,public String nodeName() {
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,23,"return ""#doctype"";"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,26,@Override
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,27,"void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,28,"accum.append(""<!DOCTYPE html"");"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,29,"if (!StringUtil.isBlank(attr(""publicId"")))"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,30,"accum.append("" PUBLIC \"""").append(attr(""publicId"")).append(""\"""");"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,31,"if (!StringUtil.isBlank(attr(""systemId"")))"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,32,"accum.append(' ').append(attr(""systemId"")).append(""\"""");"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,33,accum.append('>');
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,36,@Override
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,37,"void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,217, Add a node to the last child of this element.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,217,* Add a node child node to this element.
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,301,"lement fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,302,ddChildren(fragment.childNodesAsArray());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,301,"List<Node> nodes = Parser.parseFragment(html, this, baseUri());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,302,addChildren(nodes.toArray(new Node[nodes.size()]));
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,315,"lement fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,316,"ddChildren(0, fragment.childNodesAsArray());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,315,"List<Node> nodes = Parser.parseFragment(html, this, baseUri());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,316,"addChildren(0, nodes.toArray(new Node[nodes.size()]));"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,333,* Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,334,* @param node to add before this element
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,335,"* @return this Element, for chaining"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,336,* @see #after(Node)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,338,@Override
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,339,public Element before(Node node) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,340,return (Element) super.before(node);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,356,* Insert the specified node into the DOM after this node (i.e. as a following sibling).
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,357,* @param node to add after this element
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,358,"* @return this element, for chaining"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,359,* @see #before(Node)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,361,@Override
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,362,public Element after(Node node) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,363,return (Element) super.after(node);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,851,"eturn attributes.hasKey(""class"") ? attributes.get(""class"") : """";"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,873,"return attr(""class"");"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1023,f (this == o) return true;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1024,f (!(o instanceof Element)) return false;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1025,f (!super.equals(o)) return false;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1027,lement element = (Element) o;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1029,f (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1031,eturn true;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1045,return this == o;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1050,"// todo: fixup, not very useful"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,41,private Entities() {}
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,44,* Check if the input is a known named entity
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,45,"* @param name the possible entity name (e.g. ""lt"" or ""amp"""
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,46,* @return true if a known named entity
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,48,public static boolean isNamedEntity(String name) {
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,49,return full.containsKey(name);
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,53,* Get the Character value of the named entity
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,54,"* @param name named entity (e.g. ""lt"" or ""amp"")"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,55,* @return the Character value of the named entity (e.g. '<' or '&')
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,57,public static Character getCharacterByName(String name) {
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,58,return full.get(name);
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,93,// todo: change this method to use Tokeniser.consumeCharacterReference
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,6,mport org.jsoup.select.Elements;
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,238, @param html HTML to add before this element
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,237,* @param html HTML to add before this node
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,247,* Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,248,* @param node to add before this node
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,249,"* @return this node, for chaining"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,250,* @see #after(Node)
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,252,public Node before(Node node) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,253,Validate.notNull(node);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,254,Validate.notNull(parentNode);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,256,"parentNode.addChildren(siblingIndex(), node);"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,257,return this;
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,249, @param html HTML to add after this element
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,262,* @param html HTML to add after this node
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,272,* Insert the specified node into the DOM after this node (i.e. as a following sibling).
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,273,* @param node to add after this node
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,274,"* @return this node, for chaining"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,275,* @see #before(Node)
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,277,public Node after(Node node) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,278,Validate.notNull(node);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,279,Validate.notNull(parentNode);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,281,"parentNode.addChildren(siblingIndex()+1, node);"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,282,return this;
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,262,"lement fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,263,"arentNode.addChildren(index, fragment.childNodesAsArray());"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,289,Element context = parent() instanceof Element ? (Element) parent() : null;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,290,"List<Node> nodes = Parser.parseFragment(html, context, baseUri());"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,291,"parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,274,"lement wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,275,lements wrapChildren = wrapBody.children();
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,276,lement wrap = wrapChildren.first();
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,277,f (wrap == null) // nothing to wrap with; noop
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,302,Element context = parent() instanceof Element ? (Element) parent() : null;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,303,"List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,304,Node wrapNode = wrapChildren.get(0);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,305,if (wrapNode == null || !(wrapNode instanceof Element)) // nothing to wrap with; noop
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,308,Element wrap = (Element) wrapNode;
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,285,f (wrapChildren.size() > 1) {
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,286,or (int i = 1; i < wrapChildren.size(); i++) { // skip first
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,287,lement remainder = wrapChildren.get(i);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,314,if (wrapChildren.size() > 0) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,315,for (int i = 0; i < wrapChildren.size(); i++) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,316,Node remainder = wrapChildren.get(i);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,4,CharacterReader cosumes tokens off a string. To replace the old TokenQueue.
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,6,class CharacterReader {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,7,static final char EOF = (char) -1;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,9,private final String input;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,10,private final int length;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,11,private int pos = 0;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,12,private int mark = 0;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,14,CharacterReader(String input) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,15,this.input = input;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,16,this.length = input.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,19,int pos() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,20,return pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,23,boolean isEmpty() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,24,return pos >= length;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,27,char current() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,28,return isEmpty() ? EOF : input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,31,char consume() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,32,return isEmpty() ? EOF : input.charAt(pos++);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,35,void unconsume() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,36,pos--;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,39,void advance() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,40,pos++;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,43,void mark() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,44,mark = pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,47,void rewindToMark() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,48,pos = mark;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,51,String consumeAsString() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,52,"return input.substring(pos, pos++);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,55,String consumeTo(char c) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,56,"int offset = input.indexOf(c, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,57,if (offset != -1) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,58,"String consumed = input.substring(pos, offset);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,59,pos += consumed.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,60,return consumed;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,61,} else {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,62,return consumeToEnd();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,66,String consumeTo(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,67,"int offset = input.indexOf(seq, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,68,if (offset != -1) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,69,"String consumed = input.substring(pos, offset);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,70,pos += consumed.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,71,return consumed;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,72,} else {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,73,return consumeToEnd();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,77,String consumeToAny(char... seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,78,int start = pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,80,OUTER: while (!isEmpty()) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,81,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,82,for (char seek : seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,83,if (seek == c)
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,84,break OUTER;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,86,pos++;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,89,"return pos > start ? input.substring(start, pos) : """";"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,92,String consumeToEnd() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,93,"String data = input.substring(pos, input.length() - 1);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,94,pos = input.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,95,return data;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,98,String consumeLetterSequence() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,99,int start = pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,100,while (!isEmpty()) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,101,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,102,if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,103,pos++;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,104,else
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,105,break;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,108,"return input.substring(start, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,111,String consumeHexSequence() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,112,int start = pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,113,while (!isEmpty()) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,114,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,115,if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,116,pos++;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,117,else
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,118,break;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,120,"return input.substring(start, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,123,String consumeDigitSequence() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,124,int start = pos;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,125,while (!isEmpty()) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,126,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,127,if (c >= '0' && c <= '9')
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,128,pos++;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,129,else
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,130,break;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,132,"return input.substring(start, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,135,boolean matches(char c) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,136,return !isEmpty() && input.charAt(pos) == c;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,140,boolean matches(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,141,"return input.startsWith(seq, pos);"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,144,boolean matchesIgnoreCase(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,145,"return input.regionMatches(true, pos, seq, 0, seq.length());"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,148,boolean matchesAny(char... seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,149,if (isEmpty())
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,150,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,152,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,153,for (char seek : seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,154,if (seek == c)
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,155,return true;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,157,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,160,boolean matchesLetter() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,161,if (isEmpty())
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,162,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,163,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,164,return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,167,boolean matchesDigit() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,168,if (isEmpty())
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,169,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,170,char c = input.charAt(pos);
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,171,return (c >= '0' && c <= '9');
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,174,boolean matchConsume(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,175,if (matches(seq)) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,176,pos += seq.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,177,return true;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,178,} else {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,179,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,183,boolean matchConsumeIgnoreCase(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,184,if (matchesIgnoreCase(seq)) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,185,pos += seq.length();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,186,return true;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,187,} else {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,188,return false;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,192,@Override
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,193,public String toString() {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,194,return input.substring(pos);
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,5,public class ParseError {
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,6,private String errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,7,private int pos;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,8,private char c;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,9,private TokeniserState tokeniserState;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,10,private TreeBuilderState treeBuilderState;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,11,private Token token;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,13,"public ParseError(String errorMsg, char c, TokeniserState tokeniserState, int pos) {"
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,14,this.errorMsg = errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,15,this.c = c;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,16,this.tokeniserState = tokeniserState;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,17,this.pos = pos;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,20,"public ParseError(String errorMsg, TokeniserState tokeniserState, int pos) {"
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,21,this.errorMsg = errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,22,this.tokeniserState = tokeniserState;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,23,this.pos = pos;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,26,"public ParseError(String errorMsg, int pos) {"
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,27,this.errorMsg = errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,28,this.pos = pos;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,31,"public ParseError(String errorMsg, TreeBuilderState treeBuilderState, Token token, int pos) {"
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,32,this.errorMsg = errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,33,this.treeBuilderState = treeBuilderState;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,34,this.token = token;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,35,this.pos = pos;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,38,public String getErrorMsg() {
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,39,return errorMsg;
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,42,public int getPos() {
True,src/main/java/org/jsoup/parser/ParseError.java,src/main/java/org/jsoup/parser/ParseError.java,43,return pos;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,3,import org.jsoup.nodes.Document;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,4,import org.jsoup.nodes.Element;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,5,import org.jsoup.nodes.Node;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,4,mport org.jsoup.helper.Validate;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,5,mport org.jsoup.nodes.*;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,7,mport java.util.LinkedList;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,7,import java.util.List;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,10,arses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,12,"author Jonathan Hedley, jonathan@hedley.net */"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,10,* Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,11,* in {@link org.jsoup.Jsoup}.
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,14,"rivate static final String SQ = ""'"";"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,15,"rivate static final String DQ = ""\"""";"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,17,"rivate static final Tag htmlTag = Tag.valueOf(""html"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,18,"rivate static final Tag headTag = Tag.valueOf(""head"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,19,"rivate static final Tag bodyTag = Tag.valueOf(""body"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,20,"rivate static final Tag titleTag = Tag.valueOf(""title"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,21,"rivate static final Tag textareaTag = Tag.valueOf(""textarea"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,23,rivate final LinkedList<Element> stack;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,24,rivate final TokenQueue tq;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,25,rivate final Document doc;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,26,rivate String baseUri;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,27,rivate boolean relaxed = false;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,29,"rivate Parser(String html, String baseUri, boolean isBodyFragment) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,30,alidate.notNull(html);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,31,alidate.notNull(baseUri);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,33,tack = new LinkedList<Element>();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,34,q = new TokenQueue(html);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,35,his.baseUri = baseUri;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,37,f (isBodyFragment) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,38,oc = Document.createShell(baseUri);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,39,tack.add(doc.body());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,40, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,41,oc = new Document(baseUri);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,42,tack.add(doc);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,47,arse HTML into a Document.
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,48,param html HTML to parse
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,49,"param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,50,return parsed Document
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,15,* Parse HTML into a Document.
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,17,* @param html HTML to parse
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,18,"* @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,20,* @return parsed Document
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,53,"arser parser = new Parser(html, baseUri, false);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,54,eturn parser.parse();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,23,TreeBuilder treeBuilder = new TreeBuilder();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,24,"return treeBuilder.parse(html, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,58,arse a fragment of HTML into the {@code body} of a Document.
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,59,param bodyHtml fragment of HTML
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,60,"param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,61,"return Document, with empty head, and HTML parsed into body"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,28,"* Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,30,* @param fragmentHtml the fragment of HTML to parse
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,31,* @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,32,* provides stack context (for implicit element creation).
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,33,"* @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,35,"* @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modifed."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,63,"ublic static Document parseBodyFragment(String bodyHtml, String baseUri) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,64,"arser parser = new Parser(bodyHtml, baseUri, true);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,65,eturn parser.parse();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,37,"public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,38,TreeBuilder treeBuilder = new TreeBuilder();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,39,"return treeBuilder.parseFragment(fragmentHtml, context, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,69,"arse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,70,"ontext, means that implicit tags are not automatically created when missing."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,71,param bodyHtml fragment of HTML
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,72,"param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,73,"return Document, with empty head, and HTML parsed into body"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,43,* Parse a fragment of HTML into the {@code body} of a Document.
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,45,* @param bodyHtml fragment of HTML
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,46,"* @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,48,"* @return Document, with empty head, and HTML parsed into body"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,75,"ublic static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,76,"arser parser = new Parser(bodyHtml, baseUri, true);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,77,arser.relaxed = true;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,78,eturn parser.parse();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,81,rivate Document parse() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,82,hile (!tq.isEmpty()) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,83,f (tq.matchesStartTag()) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,84,arseStartTag();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,85," else if (tq.matchesCS(""</"")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,86,arseEndTag();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,87," else if (tq.matchesCS(""<!--"")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,88,arseComment();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,89," else if (tq.matches(""<![CDATA["")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,90,arseCdata();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,91," else if (tq.matchesCS(""<?"") || tq.matchesCS(""<!"")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,92,arseXmlDecl();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,93, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,94,arseTextNode();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,97,eturn doc.normalise();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,100,rivate void parseComment() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,101,"q.consume(""<!--"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,102,"tring data = tq.chompTo(""->"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,104,"f (data.endsWith(""-"")) // i.e. was -->"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,105,"ata = data.substring(0, data.length()-1);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,106,"omment comment = new Comment(data, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,107,ast().appendChild(comment);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,110,rivate void parseXmlDecl() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,111,"q.consume(""<"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,112,"haracter firstChar = tq.consume(); // <? or <!, from initial match."
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,113,"oolean procInstr = firstChar.toString().equals(""!"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,114,"tring data = tq.chompTo("">"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,116,"mlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,117,ast().appendChild(decl);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,120,rivate void parseEndTag() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,121,"q.consume(""</"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,122,tring tagName = tq.consumeTagName();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,123,"q.chompTo("">"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,125,f (tagName.length() != 0) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,126,ag tag = Tag.valueOf(tagName);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,127,f (!last().tag().isIgnorableEndTag(tag)) // skips </tr> if in <table>
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,128,opStackToClose(tag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,132,rivate void parseStartTag() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,133,"q.consume(""<"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,134,tring tagName = tq.consumeTagName();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,135,"alidate.notEmpty(tagName, ""Unexpectedly empty tagname. (This should not occur, please report!)"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,137,q.consumeWhitespace();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,138,ttributes attributes = new Attributes();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,139,"hile (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,140,ttribute attribute = parseAttribute();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,141,f (attribute != null)
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,142,ttributes.put(attribute);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,145,ag tag = Tag.valueOf(tagName);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,146,"lement child = new Element(tag, baseUri, attributes);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,148,oolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,149,"f (tq.matchChomp(""/>"")) { // close empty element or tag"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,150,sEmptyElement = true;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,151,"f (!tag.isKnownTag()) // if unknown and a self closed, allow it to be self closed on output. this doesn't force all instances to be empty"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,152,ag.setSelfClosing();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,153, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,154,"q.matchChomp("">"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,156,"ddChildToParent(child, isEmptyElement);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,158,"/ pc data only tags (textarea, script): chomp to end tag, add content as text node"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,159,f (tag.isData()) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,160,"tring data = tq.chompToIgnoreCase(""</"" + tagName);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,161,"q.chompTo("">"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,162,opStackToClose(tag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,164,ode dataNode;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,165,"f (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,166,"ataNode = TextNode.createFromEncoded(data, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,167,lse
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,168,"ataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,169,hild.appendChild(dataNode);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,172,/ <base href>: update the base uri
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,173,"f (child.tagName().equals(""base"")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,174,"tring href = child.absUrl(""href"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,175,f (href.length() != 0) { // ignore <base target> etc
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,176,aseUri = href;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,177,oc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,182,rivate Attribute parseAttribute() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,183,q.consumeWhitespace();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,184,tring key = tq.consumeAttributeKey();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,185,"tring value = """";"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,186,q.consumeWhitespace();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,187,"f (tq.matchChomp(""="")) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,188,q.consumeWhitespace();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,190,f (tq.matchChomp(SQ)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,191,alue = tq.chompTo(SQ);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,192, else if (tq.matchChomp(DQ)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,193,alue = tq.chompTo(DQ);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,194, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,195,tringBuilder valueAccum = new StringBuilder();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,196,"/ no ' or "" to look for, so scan to end tag or space (or end of stream)"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,197,"hile (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,198,alueAccum.append(tq.consume());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,200,alue = valueAccum.toString();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,202,q.consumeWhitespace();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,204,f (key.length() != 0)
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,205,"eturn Attribute.createFromEncoded(key, value);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,206,lse {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,207,"f (value.length() == 0) // no key, no val; unknown char, keep popping so not get stuck"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,208,q.advance();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,210,eturn null;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,214,rivate void parseTextNode() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,215,extNode textNode;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,216,"/ special case: handle string like ""hello < there"". first char will be ""<"", because of matchStartTag"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,217,f (tq.peek() == '<') {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,218,q.advance();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,219,"extNode = new TextNode(""<"", baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,220, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,221,"tring text = tq.consumeTo(""<"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,222,"extNode = TextNode.createFromEncoded(text, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,224,ast().appendChild(textNode);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,227,rivate void parseCdata() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,228,"q.consume(""<![CDATA["");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,229,"tring rawText = tq.chompTo(""]]>"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,230,"extNode textNode = new TextNode(rawText, baseUri); // constructor does not escape"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,231,ast().appendChild(textNode);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,234,"rivate Element addChildToParent(Element child, boolean isEmptyElement) {"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,235,lement parent = popStackToSuitableContainer(child.tag());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,236,ag childTag = child.tag();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,237,oolean validAncestor = stackHasValidParent(childTag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,239,f (!validAncestor && !relaxed) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,240,/ create implicit parent around this child
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,241,ag parentTag = childTag.getImplicitParent();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,242,"lement implicit = new Element(parentTag, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,243,/ special case: make sure there's a head before putting in body
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,244,f (child.tag().equals(bodyTag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,245,"lement head = new Element(headTag, baseUri);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,246,mplicit.appendChild(head);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,248,mplicit.appendChild(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,250,/ recurse to ensure somewhere to put parent
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,251,"lement root = addChildToParent(implicit, false);"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,252,f (!isEmptyElement)
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,253,tack.addLast(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,254,eturn root;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,257,arent.appendChild(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,259,f (!isEmptyElement)
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,260,tack.addLast(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,261,eturn parent;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,264,rivate boolean stackHasValidParent(Tag childTag) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,265,f (stack.size() == 1 && childTag.equals(htmlTag))
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,266,eturn true; // root is valid for html node
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,268,f (childTag.requiresSpecificParent())
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,269,eturn stack.getLast().tag().isValidParent(childTag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,271,"/ otherwise, look up the stack for valid ancestors"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,272,or (int i = stack.size() -1; i >= 0; i--) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,273,lement el = stack.get(i);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,274,ag parent2 = el.tag();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,275,f (parent2.isValidAncestor(childTag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,276,eturn true;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,279,eturn false;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,282,rivate Element popStackToSuitableContainer(Tag tag) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,283,hile (!stack.isEmpty()) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,284,f (last().tag().canContain(tag))
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,285,eturn last();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,286,lse
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,287,tack.removeLast();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,289,eturn null;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,292,rivate Element popStackToClose(Tag tag) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,293,"/ first check to see if stack contains this tag; if so pop to there, otherwise ignore"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,294,nt counter = 0;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,295,lement elToClose = null;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,296,or (int i = stack.size() -1; i > 0; i--) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,297,ounter++;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,298,lement el = stack.get(i);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,299,ag elTag = el.tag();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,300,"f (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,301,reak;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,302, else if (elTag.equals(tag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,303,lToClose = el;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,304,reak;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,307,f (elToClose != null) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,308,or (int i = 0; i < counter; i++) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,309,tack.removeLast();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,50,"public static Document parseBodyFragment(String bodyHtml, String baseUri) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,51,Document doc = Document.createShell(baseUri);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,52,Element body = doc.body();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,53,"List<Node> nodeList = parseFragment(bodyHtml, body, baseUri);"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,54,Node[] nodes = nodeList.toArray(new Node[nodeList.size()]); // the node list gets modified when re-parented
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,55,for (Node node : nodes) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,56,body.appendChild(node);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,312,eturn elToClose;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,58,return doc;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,315,rivate Element last() {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,316,eturn stack.getLast();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,62,* @param bodyHtml HTML to parse
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,63,"* @param baseUri baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,65,* @return parsed Document
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,66,* @deprecated Use {@link #parseBodyFragment} or {@link #parseFragment} instead.
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,68,"public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,69,"return parse(bodyHtml, baseUri);"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,5,mport java.util.*;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,5,import java.util.HashMap;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,6,import java.util.Map;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,8,"TML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,9,ut it should capture most of what we need to know to intelligently parse a doc.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,11,"author Jonathan Hedley, jonathan@hedley.net */"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,9,* HTML Tag capabilities.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,11,"* @author Jonathan Hedley, jonathan@hedley.net"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,13,"rivate static final Map<String, Tag> tags = new HashMap<String, Tag>();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,14,rivate static final Tag defaultAncestor;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,15,tatic {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,16,"efaultAncestor = new Tag(""BODY"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,17,"ags.put(defaultAncestor.tagName, defaultAncestor);"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,14,"private static final Map<String, Tag> tags = new HashMap<String, Tag>(); // map of known tags"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,21,rivate boolean knownTag = false; // if pre-defined or auto-created
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,23,rivate boolean formatAsBlock = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,18,private boolean formatAsBlock = true; // should be formatted as a block
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,26,"rivate boolean optionalClosing = false; // If tag is open, and another seen, close previous tag"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,30,rivate List<Tag> ancestors; // elements must be a descendant of one of these ancestors
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,31,rivate List<Tag> excludes = Collections.emptyList(); // cannot contain these tags
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,32,rivate List<Tag> ignoreEndTags = Collections.emptyList(); // ignore these end tags
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,33,"rivate boolean directDescendant; // if true, must directly descend from one of the ancestors"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,34,"rivate boolean limitChildren; // if true, only contain children that've registered parents"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,30,* Get this tag's name.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,32,* @return the tag's name
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,45,"et a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,46,p>
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,47,"re-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals()."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,48,"param tagName Name of tag, e.g. ""p"". Case insensitive."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,49,"return The tag, either defined or new generic."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,39,"* Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,40,* <p/>
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,41,"* Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals()."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,43,"* @param tagName Name of tag, e.g. ""p"". Case insensitive."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,44,"* @return The tag, either defined or new generic."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,61,ag.setAncestor(defaultAncestor.tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,62,ag.setExcludes();
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,71,"est if this tag, the prospective parent, can accept the proposed child."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,72,param child potential child tag.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,73,return true if this can contain child.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,75,oolean canContain(Tag child) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,76,alidate.notNull(child);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,78,f (child.isBlock && !this.canContainBlock)
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,79,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,81,f (!child.isBlock && !this.canContainInline) // not block == inline
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,82,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,84,f (this.optionalClosing && this.equals(child))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,85,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,87,f (this.empty || this.isData())
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,88,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,90,/ don't allow children to contain their parent (directly)
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,91,f (this.requiresSpecificParent() && this.getImplicitParent().equals(child))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,92,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,94,/ confirm limited children
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,95,f (limitChildren) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,96,or (Tag childParent : child.ancestors) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,97,f (childParent.equals(this))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,98,eturn true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,100,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,103,/ exclude children
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,104,f (!excludes.isEmpty()) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,105,or (Tag excluded: excludes) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,106,f (child.equals(excluded))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,107,eturn false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,111,eturn true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,115,ets if this is a block tag.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,116,return if block tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,64,* Gets if this is a block tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,66,* @return if block tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,131,ets if this tag can contain block tags.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,132,return if tag can contain block tags
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,82,* Gets if this tag can contain block tags.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,84,* @return if tag can contain block tags
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,139,ets if this tag is an inline tag.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,140,return if this tag is an inline tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,91,* Gets if this tag is an inline tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,93,* @return if this tag is an inline tag.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,147,ets if this tag is a data only tag.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,148,return if this tag is a data only tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,100,* Gets if this tag is a data only tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,102,* @return if this tag is a data only tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,155,et if this is an empty tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,156,return if this is an emtpy tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,109,* Get if this is an empty tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,111,* @return if this is an emtpy tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,175,eturn knownTag;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,132,return tags.containsKey(tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,179,et if this tag should preserve whitespace within child text nodes.
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,180,return if preserve whitepace
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,136,* Check if this tagname is a known tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,138,* @param tagName name of tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,139,* @return if known HTML tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,182,ublic boolean preserveWhitespace() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,183,eturn preserveWhitespace;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,186,ag getImplicitParent() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,187,eturn (!ancestors.isEmpty()) ? ancestors.get(0) : null;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,190,oolean requiresSpecificParent() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,191,eturn directDescendant;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,141,public static boolean isKnownTag(String tagName) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,142,return tags.containsKey(tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,194,oolean isValidParent(Tag child) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,195,eturn isValidAncestor(child);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,198,oolean isValidAncestor(Tag child) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,199,f (child.ancestors.isEmpty())
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,200,eturn true; // HTML tag
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,202,or (int i = 0; i < child.ancestors.size(); i++)
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,203,f (this.equals(child.ancestors.get(i)))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,204,eturn true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,206,eturn false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,146,* Get if this tag should preserve whitespace within child text nodes.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,148,* @return if preserve whitepace
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,150,public boolean preserveWhitespace() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,151,return preserveWhitespace;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,209,oolean isIgnorableEndTag(Tag child) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,210,or (Tag endTag : ignoreEndTags) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,211,f (child.equals(endTag))
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,212,eturn true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,214,eturn false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,154,Tag setSelfClosing() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,155,selfClosing = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,156,return this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,220,f (o == null || getClass() != o.getClass()) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,162,if (!(o instanceof Tag)) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,224,f (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,166,if (canContainBlock != tag.canContainBlock) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,167,if (canContainInline != tag.canContainInline) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,168,if (empty != tag.empty) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,169,if (formatAsBlock != tag.formatAsBlock) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,170,if (isBlock != tag.isBlock) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,171,if (preserveWhitespace != tag.preserveWhitespace) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,172,if (selfClosing != tag.selfClosing) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,173,if (!tagName.equals(tag.tagName)) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,231,nt result = tagName != null ? tagName.hashCode() : 0;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,180,int result = tagName.hashCode();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,182,result = 31 * result + (formatAsBlock ? 1 : 0);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,235,esult = 31 * result + (optionalClosing ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,186,result = 31 * result + (selfClosing ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,187,result = 31 * result + (preserveWhitespace ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,196,// prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html and other sources
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,197,private static final String[] blockTags = {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,198,"""html"", ""head"", ""body"", ""frameset"", ""script"", ""noscript"", ""style"", ""meta"", ""link"", ""title"", ""frame"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,199,"""noframes"", ""section"", ""nav"", ""aside"", ""hgroup"", ""header"", ""footer"", ""p"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,200,"""ul"", ""ol"", ""pre"", ""div"", ""blockquote"", ""hr"", ""address"", ""figure"", ""figcaption"", ""form"", ""fieldset"", ""ins"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,201,"""del"", ""dl"", ""dt"", ""dd"", ""li"", ""table"", ""caption"", ""thead"", ""tfoot"", ""tbody"", ""colgroup"", ""col"", ""tr"", ""th"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,202,"""td"", ""video"", ""audio"", ""canvas"", ""details"", ""menu"", ""plaintext"""
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,204,private static final String[] inlineTags = {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,205,"""object"", ""base"", ""font"", ""tt"", ""i"", ""b"", ""u"", ""big"", ""small"", ""em"", ""strong"", ""dfn"", ""code"", ""samp"", ""kbd"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,206,"""var"", ""cite"", ""abbr"", ""time"", ""acronym"", ""mark"", ""ruby"", ""rt"", ""rp"", ""a"", ""img"", ""br"", ""wbr"", ""map"", ""q"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,207,"""sub"", ""sup"", ""bdo"", ""iframe"", ""embed"", ""span"", ""input"", ""select"", ""textarea"", ""label"", ""button"", ""optgroup"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,208,"""option"", ""legend"", ""datalist"", ""keygen"", ""output"", ""progress"", ""meter"", ""area"", ""param"", ""source"", ""track"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,209,"""summary"", ""command"", ""device"""
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,211,private static final String[] emptyTags = {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,212,"""meta"", ""link"", ""base"", ""frame"", ""img"", ""br"", ""wbr"", ""embed"", ""hr"", ""input"", ""keygen"", ""col"", ""command"","
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,213,"""device"""
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,215,private static final String[] formatAsInlineTags = {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,216,"""title"", ""a"", ""p"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""pre"", ""address"", ""li"", ""th"", ""td"""
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,218,"private static final String[] preserveWhitespaceTags = {""pre"", ""plaintext"", ""title""};"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,247,/ prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html#inline
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,248,"/ tags are set here in uppercase for legibility, but internally held as lowercase."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,249,/ TODO[must]: incorporate html 5 as appropriate
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,251,/ document
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,252,"reateBlock(""HTML"").setAncestor(); // specific includes not impl"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,253,"reateBlock(""HEAD"").setParent(""HTML"").setLimitChildren();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,254,"reateBlock(""BODY"").setAncestor(""HTML""); // specific includes not impl"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,255,"reateBlock(""FRAMESET"").setAncestor(""HTML"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,257,/ head
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,258,"/ all ancestors set to (head, body): so implicitly create head, but allow in body"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,259,"reateBlock(""SCRIPT"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,260,"reateBlock(""NOSCRIPT"").setAncestor(""HEAD"", ""BODY"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,261,"reateBlock(""STYLE"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,262,"reateBlock(""META"").setAncestor(""HEAD"", ""BODY"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,263,"reateBlock(""LINK"").setAncestor(""HEAD"", ""BODY"").setEmpty(); // only within head"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,264,"reateInline(""OBJECT"").setAncestor(""HEAD"", ""BODY""); // flow (block/inline) or param"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,265,"reateBlock(""TITLE"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly().setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,266,"reateInline(""BASE"").setAncestor(""HEAD"", ""BODY"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,268,"reateBlock(""FRAME"").setParent(""FRAMESET"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,269,"reateBlock(""NOFRAMES"").setParent(""FRAMESET"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,271,/ html5 sections
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,272,"reateBlock(""SECTION"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,273,"reateBlock(""NAV"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,274,"reateBlock(""ASIDE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,275,"reateBlock(""HGROUP"").setLimitChildren(); // limited to h1 - h6"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,276,"reateBlock(""HEADER"").setExcludes(""HEADER"", ""FOOTER"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,277,"reateBlock(""FOOTER"").setExcludes(""HEADER"", ""FOOTER"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,279,/ fontstyle
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,280,"reateInline(""FONT"").setOptionalClosing().setCanContainBlock().setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,281,"reateInline(""TT"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,282,"reateInline(""I"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,283,"reateInline(""B"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,284,"reateInline(""U"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,285,"reateInline(""BIG"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,286,"reateInline(""SMALL"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,288,/ phrase
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,289,"reateInline(""EM"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,290,"reateInline(""STRONG"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,291,"reateInline(""DFN"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,292,"reateInline(""CODE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,293,"reateInline(""SAMP"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,294,"reateInline(""KBD"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,295,"reateInline(""VAR"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,296,"reateInline(""CITE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,297,"reateInline(""ABBR"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,298,"reateInline(""TIME"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,299,"reateInline(""ACRONYM"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,300,"reateInline(""MARK"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,302,/ ruby
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,303,"reateInline(""RUBY"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,304,"reateInline(""RT"").setParent(""RUBY"").setExcludes(""RT"", ""RP"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,305,"reateInline(""RP"").setParent(""RUBY"").setExcludes(""RT"", ""RP"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,307,/ special
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,308,"reateInline(""A"").setOptionalClosing().setCanContainBlock().setFormatAsInline(); // cannot contain self"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,309,"reateInline(""IMG"").setEmpty().setAncestor(""BODY"", ""NOSCRIPT""); // noscript so an image can be in html->head->noscript"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,310,"reateInline(""BR"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,311,"reateInline(""WBR"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,312,"reateInline(""MAP""); // map is defined as inline, but can hold block (what?) or area. Seldom used so NBD."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,313,"reateInline(""Q"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,314,"reateInline(""SUB"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,315,"reateInline(""SUP"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,316,"reateInline(""BDO"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,317,"reateInline(""IFRAME"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,318,"reateInline(""EMBED"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,320,"/ things past this point aren't really blocks or inline. I'm using them because they can hold block or inline,"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,321,"/ but per the spec, only specific elements can hold this. if this becomes a real-world parsing problem,"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,322,"/ will need to have another non block/inline type, and explicit include & exclude rules. should be right though"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,324,/ block
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,325,"reateInline(""SPAN"").setCanContainBlock().setFormatAsInline(); // spec is phrasing only, practise is block"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,326,"reateBlock(""P"").setContainInlineOnly(); // emasculated block?"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,327,"reateBlock(""H1"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,328,"reateBlock(""H2"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,329,"reateBlock(""H3"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,330,"reateBlock(""H4"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,331,"reateBlock(""H5"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,332,"reateBlock(""H6"").setAncestor(""BODY"", ""HGROUP"").setExcludes(""HGROUP"", ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,333,"reateBlock(""UL"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,334,"reateBlock(""OL"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,335,"reateBlock(""PRE"").setContainInlineOnly().setPreserveWhitespace();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,336,"reateBlock(""DIV"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,337,"reateBlock(""BLOCKQUOTE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,338,"reateBlock(""HR"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,339,"reateBlock(""ADDRESS"").setContainInlineOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,340,"reateBlock(""FIGURE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,341,"reateBlock(""FIGCAPTION"").setAncestor(""FIGURE"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,343,/ formctrl
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,344,"reateBlock(""FORM"").setOptionalClosing(); // can't contain self"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,345,"reateInline(""INPUT"").setAncestor(""FORM"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,346,"reateInline(""SELECT"").setAncestor(""FORM""); // just contain optgroup or option"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,347,"reateInline(""TEXTAREA"").setAncestor(""FORM"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,348,"reateInline(""LABEL"").setAncestor(""FORM"").setOptionalClosing(); // not self"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,349,"reateInline(""BUTTON"").setAncestor(""FORM""); // bunch of excludes not defined"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,350,"reateInline(""OPTGROUP"").setParent(""SELECT""); //  only contain option"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,351,"reateInline(""OPTION"").setParent(""SELECT"", ""OPTGROUP"", ""DATALIST"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,352,"reateBlock(""FIELDSET"").setAncestor(""FORM"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,353,"reateInline(""LEGEND"").setAncestor(""FIELDSET"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,355,"/ html5 form ctrl, not specced to have to be in forms"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,356,"reateInline(""DATALIST"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,357,"reateInline(""KEYGEN"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,358,"reateInline(""OUTPUT"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,359,"reateInline(""PROGRESS"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,360,"reateInline(""METER"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,362,/ other
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,363,"reateInline(""AREA"").setAncestor(""MAP"").setEmpty(); // not an inline per-se"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,364,"reateInline(""PARAM"").setParent(""OBJECT"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,365,"reateBlock(""INS""); // only within body"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,366,"reateBlock(""DEL""); // only within body"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,368,"/ definition lists. per spec, dt and dd are inline and must directly descend from dl. However in practise"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,369,/ these are all used as blocks and dl need only be an ancestor
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,370,"reateBlock(""DL"").setOptionalClosing(); // can't nest"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,371,"reateBlock(""DT"").setAncestor(""DL"").setExcludes(""DL"", ""DD"").setOptionalClosing(); // only within DL."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,372,"reateBlock(""DD"").setAncestor(""DL"").setExcludes(""DL"", ""DT"").setOptionalClosing(); // only within DL."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,374,"reateBlock(""LI"").setAncestor(""UL"", ""OL"").setOptionalClosing().setFormatAsInline(); // only within OL or UL."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,221,// creates
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,222,for (String tagName : blockTags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,223,Tag tag = new Tag(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,224,register(tag);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,226,for (String tagName : inlineTags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,227,Tag tag = new Tag(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,228,tag.isBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,229,tag.canContainBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,230,tag.formatAsBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,231,register(tag);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,376,/ tables
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,377,"reateBlock(""TABLE"").setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"", ""TBODY"", ""TD"", ""TFOO"", ""TH"", ""THEAD"", ""TR""); // specific list of only includes (tr, td, thead etc) not implemented"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,378,"reateBlock(""CAPTION"").setParent(""TABLE"").setExcludes(""THEAD"", ""TFOOT"", ""TBODY"", ""COLGROUP"", ""COL"", ""TR"", ""TH"", ""TD"").setOptionalClosing().setIgnoreEnd(""BODY"", ""COL"", ""COLGROUP"", ""HTML"", ""TBODY"", ""TD"", ""TFOOT"", ""TH"", ""THEAD"", ""TR"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,379,"reateBlock(""THEAD"").setParent(""TABLE"").setLimitChildren().setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"", ""TD"", ""TH"", ""TR""); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,380,"reateBlock(""TFOOT"").setParent(""TABLE"").setLimitChildren().setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"", ""TD"", ""TH"", ""TR""); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,381,"reateBlock(""TBODY"").setParent(""TABLE"").setLimitChildren().setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"", ""TD"", ""TH"", ""TR""); // optional / implicit open too. just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,382,"reateBlock(""COLGROUP"").setParent(""TABLE"").setLimitChildren().setOptionalClosing().setIgnoreEnd(""COL""); // just COL"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,383,"reateBlock(""COL"").setParent(""COLGROUP"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,384,"reateBlock(""TR"").setParent(""TBODY"", ""THEAD"", ""TFOOT"", ""TABLE"").setLimitChildren().setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"", ""TD"", ""TH""); // just TH, TD"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,385,"reateBlock(""TH"").setParent(""TR"").setExcludes(""THEAD"", ""TFOOT"", ""TBODY"", ""COLGROUP"", ""COL"", ""TR"", ""TH"", ""TD"").setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,386,"reateBlock(""TD"").setParent(""TR"").setExcludes(""THEAD"", ""TFOOT"", ""TBODY"", ""COLGROUP"", ""COL"", ""TR"", ""TH"", ""TD"").setOptionalClosing().setIgnoreEnd(""BODY"", ""CAPTION"", ""COL"", ""COLGROUP"", ""HTML"").setFormatAsInline();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,388,/ html5 media
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,389,"reateBlock(""VIDEO"").setExcludes(""VIDEO"", ""AUDIO"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,390,"reateBlock(""AUDIO"").setExcludes(""VIDEO"", ""AUDIO"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,391,"reateInline(""SOURCE"").setParent(""VIDEO"", ""AUDIO"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,392,"reateInline(""TRACK"").setParent(""VIDEO"", ""AUDIO"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,393,"reateBlock(""CANVAS"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,395,/ html5 interactive
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,396,"reateBlock(""DETAILS"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,397,"reateInline(""SUMMARY"").setParent(""DETAILS"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,398,"reateInline(""COMMAND"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,399,"reateBlock(""MENU"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,400,"reateInline(""DEVICE"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,234,// mods:
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,235,for (String tagName : emptyTags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,236,Tag tag = tags.get(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,237,Validate.notNull(tag);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,238,tag.canContainBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,239,tag.canContainInline = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,240,tag.empty = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,403,rivate static Tag createBlock(String tagName) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,404,eturn register(new Tag(tagName));
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,243,for (String tagName : formatAsInlineTags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,244,Tag tag = tags.get(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,245,Validate.notNull(tag);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,246,tag.formatAsBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,407,rivate static Tag createInline(String tagName) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,408,ag inline = new Tag(tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,409,nline.isBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,410,nline.canContainBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,411,nline.formatAsBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,412,eturn register(inline);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,249,for (String tagName : preserveWhitespaceTags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,250,Tag tag = tags.get(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,251,Validate.notNull(tag);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,252,tag.preserveWhitespace = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,416,ag.setAncestor(defaultAncestor.tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,417,ag.setKnownTag();
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,424,rivate Tag setCanContainBlock() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,425,anContainBlock = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,426,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,429,rivate Tag setContainInlineOnly() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,430,anContainBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,431,anContainInline = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,432,ormatAsBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,433,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,436,rivate Tag setFormatAsInline() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,437,ormatAsBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,438,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,441,rivate Tag setContainDataOnly() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,442,anContainBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,443,anContainInline = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,444,reserveWhitespace = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,445,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,448,rivate Tag setEmpty() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,449,anContainBlock = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,450,anContainInline = false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,451,mpty = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,452,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,455,rivate Tag setOptionalClosing() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,456,ptionalClosing = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,457,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,460,rivate Tag setPreserveWhitespace() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,461,reserveWhitespace = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,462,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,465,rivate Tag setAncestor(String... tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,466,f (tagNames == null || tagNames.length == 0) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,467,ncestors = Collections.emptyList();
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,468, else {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,469,ncestors = new ArrayList<Tag>(tagNames.length);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,470,or (String name : tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,471,ncestors.add(Tag.valueOf(name));
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,474,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,477,rivate Tag setExcludes(String... tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,478,f (tagNames == null || tagNames.length == 0) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,479,xcludes = Collections.emptyList();
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,480, else {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,481,xcludes = new ArrayList<Tag>(tagNames.length);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,482,or (String name : tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,483,xcludes.add(Tag.valueOf(name));
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,486,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,489,rivate Tag setIgnoreEnd(String... tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,490,f (tagNames == null || tagNames.length == 0) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,491,gnoreEndTags = Collections.emptyList();
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,492, else {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,493,gnoreEndTags = new ArrayList<Tag>(tagNames.length);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,494,or (String name : tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,495,gnoreEndTags.add(Tag.valueOf(name));
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,498,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,501,rivate Tag setParent(String... tagNames) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,502,irectDescendant = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,503,etAncestor(tagNames);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,504,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,507,rivate Tag setLimitChildren() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,508,imitChildren = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,509,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,512,ag setSelfClosing() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,513,elfClosing = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,514,eturn this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,517,rivate Tag setKnownTag() {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,518,nownTag = true;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,519,eturn this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,3,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,4,import org.jsoup.nodes.Attribute;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,5,import org.jsoup.nodes.Attributes;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,8,* Parse tokens for the Tokeniser.
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,10,abstract class Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,11,TokenType type;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,13,private Token() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,16,static class Doctype extends Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,17,final StringBuilder name = new StringBuilder();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,18,final StringBuilder publicIdentifier = new StringBuilder();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,19,final StringBuilder systemIdentifier = new StringBuilder();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,20,boolean forceQuirks = false;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,22,Doctype() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,23,type = TokenType.Doctype;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,26,String getName() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,27,return name.toString();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,30,String getPublicIdentifier() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,31,return publicIdentifier.toString();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,34,public String getSystemIdentifier() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,35,return systemIdentifier.toString();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,38,public boolean isForceQuirks() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,39,return forceQuirks;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,43,static abstract class Tag extends Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,44,protected String tagName;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,45,private String pendingAttributeName;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,46,private String pendingAttributeValue;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,48,boolean selfClosing = false;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,49,Attributes attributes = new Attributes(); // todo: allow nodes to not have attributes
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,51,void newAttribute() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,52,if (pendingAttributeName != null) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,53,if (pendingAttributeValue == null)
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,54,"pendingAttributeValue = """";"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,55,"Attribute attribute = new Attribute(pendingAttributeName, pendingAttributeValue);"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,56,attributes.put(attribute);
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,58,pendingAttributeName = null;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,59,pendingAttributeValue = null;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,62,void finaliseTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,63,// finalises for emit
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,64,if (pendingAttributeName != null) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,65,"// todo: check if attribute name exists; if so, drop and error"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,66,newAttribute();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,70,String name() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,71,Validate.isFalse(tagName.isEmpty());
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,72,return tagName;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,75,Tag name(String name) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,76,tagName = name;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,77,return this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,80,boolean isSelfClosing() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,81,return selfClosing;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,84,"@SuppressWarnings({""TypeMayBeWeakened""})"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,85,Attributes getAttributes() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,86,return attributes;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,89,// these appenders are rarely hit in not null state-- caused by null chars.
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,90,void appendTagName(String append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,91,tagName = tagName == null ? append : tagName.concat(append);
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,94,void appendTagName(char append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,95,appendTagName(String.valueOf(append));
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,98,void appendAttributeName(String append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,99,pendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,102,void appendAttributeName(char append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,103,appendAttributeName(String.valueOf(append));
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,106,void appendAttributeValue(String append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,107,pendingAttributeValue = pendingAttributeValue == null ? append : pendingAttributeValue.concat(append);
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,110,void appendAttributeValue(char append) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,111,appendAttributeValue(String.valueOf(append));
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,115,static class StartTag extends Tag {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,116,StartTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,117,super();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,118,type = TokenType.StartTag;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,121,StartTag(String name) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,122,this();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,123,this.tagName = name;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,126,"StartTag(String name, Attributes attributes) {"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,127,this();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,128,this.tagName = name;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,129,this.attributes = attributes;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,132,@Override
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,133,public String toString() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,134,"return ""<"" + name() + "" "" + attributes.toString() + "">"";"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,138,static class EndTag extends Tag{
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,139,EndTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,140,super();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,141,type = TokenType.EndTag;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,144,EndTag(String name) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,145,this();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,146,this.tagName = name;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,149,@Override
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,150,public String toString() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,151,"return ""</"" + name() + "" "" + attributes.toString() + "">"";"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,155,static class Comment extends Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,156,final StringBuilder data = new StringBuilder();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,158,Comment() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,159,type = TokenType.Comment;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,162,String getData() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,163,return data.toString();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,166,@Override
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,167,public String toString() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,168,"return ""<!--"" + getData() + ""-->"";"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,172,static class Character extends Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,173,private final String data;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,175,Character(String data) {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,176,type = TokenType.Character;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,177,this.data = data;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,180,String getData() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,181,return data;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,184,@Override
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,185,public String toString() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,186,return getData();
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,190,static class EOF extends Token {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,191,EOF() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,192,type = Token.TokenType.EOF;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,196,boolean isDoctype() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,197,return type == TokenType.Doctype;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,200,Doctype asDoctype() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,201,return (Doctype) this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,204,boolean isStartTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,205,return type == TokenType.StartTag;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,208,StartTag asStartTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,209,return (StartTag) this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,212,boolean isEndTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,213,return type == TokenType.EndTag;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,216,EndTag asEndTag() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,217,return (EndTag) this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,220,boolean isComment() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,221,return type == TokenType.Comment;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,224,Comment asComment() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,225,return (Comment) this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,228,boolean isCharacter() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,229,return type == TokenType.Character;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,232,Character asCharacter() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,233,return (Character) this;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,236,boolean isEOF() {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,237,return type == TokenType.EOF;
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,240,enum TokenType {
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,241,"Doctype,"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,242,"StartTag,"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,243,"EndTag,"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,244,"Comment,"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,245,"Character,"
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,246,EOF
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,3,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,4,import org.jsoup.nodes.Entities;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,6,import java.util.ArrayList;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,7,import java.util.List;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,10,* Readers the input stream into tokens.
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,12,class Tokeniser {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,13,static final char replacementChar = '\uFFFD'; // replaces null character
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,15,private CharacterReader reader; // html input
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,16,private boolean trackErrors = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,17,private List<ParseError> errors = new ArrayList<ParseError>(); // errors found while tokenising
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,19,private TokeniserState state = TokeniserState.Data; // current tokenisation state
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,20,private Token emitPending; // the token we are about to emit on next read
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,21,private boolean isEmitPending = false;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,22,private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,23,StringBuilder dataBuffer; // buffers data looking for </script>
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,25,Token.Tag tagPending; // tag we are building up
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,26,Token.Doctype doctypePending; // doctype building up
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,27,Token.Comment commentPending; // comment building up
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,28,"private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,29,private boolean selfClosingFlagAcknowledged = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,31,Tokeniser(CharacterReader reader) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,32,this.reader = reader;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,35,Token read() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,36,if (!selfClosingFlagAcknowledged) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,37,"error(""Self closing flag not acknowledged"");"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,38,selfClosingFlagAcknowledged = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,41,while (!isEmitPending)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,42,"state.read(this, reader);"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,44,"// if emit is pending, a non-character token was found: return any chars in buffer, and leave token for next read:"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,45,if (charBuffer.length() > 0) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,46,String str = charBuffer.toString();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,47,"charBuffer.delete(0, charBuffer.length());"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,48,return new Token.Character(str);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,49,} else {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,50,isEmitPending = false;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,51,return emitPending;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,55,void emit(Token token) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,56,"Validate.isFalse(isEmitPending, ""There is an unread token pending!"");"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,58,emitPending = token;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,59,isEmitPending = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,61,if (token.type == Token.TokenType.StartTag) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,62,Token.StartTag startTag = (Token.StartTag) token;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,63,lastStartTag = startTag;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,64,if (startTag.selfClosing)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,65,selfClosingFlagAcknowledged = false;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,66,} else if (token.type == Token.TokenType.EndTag) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,67,Token.EndTag endTag = (Token.EndTag) token;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,68,if (endTag.attributes.size() > 0)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,69,"error(""Attributes incorrectly present on end tag"");"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,73,void emit(String str) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,74,"// buffer strings up until last string token found, to emit only one token for a run of character refs etc."
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,75,// does not set isEmitPending; read checks that
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,76,charBuffer.append(str);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,79,void emit(char c) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,80,charBuffer.append(c);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,83,TokeniserState getState() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,84,return state;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,87,void transition(TokeniserState state) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,88,this.state = state;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,91,void advanceTransition(TokeniserState state) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,92,reader.advance();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,93,this.state = state;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,96,void acknowledgeSelfClosingFlag() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,97,selfClosingFlagAcknowledged = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,100,"Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) {"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,101,if (reader.isEmpty())
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,102,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,103,if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,104,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,105,"if (reader.matchesAny('\t', '\n', '\f', '<', '&'))"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,106,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,108,reader.mark();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,109,"if (reader.matchConsume(""#"")) { // numbered"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,110,"boolean isHexMode = reader.matchConsumeIgnoreCase(""X"");"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,111,String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,112,if (numRef.length() == 0) { // didn't match anything
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,113,characterReferenceError();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,114,reader.rewindToMark();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,115,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,117,"if (!reader.matchConsume("";""))"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,118,characterReferenceError(); // missing semi
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,119,int charval = -1;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,120,try {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,121,int base = isHexMode ? 16 : 10;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,122,"charval = Integer.valueOf(numRef, base);"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,123,} catch (NumberFormatException e) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,124,} // skip
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,125,if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,126,characterReferenceError();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,127,return replacementChar;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,128,} else {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,129,// todo: implement number replacement table
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,130,// todo: check for extra illegal unicode points as parse errors
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,131,return (char) charval;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,133,} else { // named
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,134,"// get as many letters as possible, and look for matching entities. unconsume backwards till a match is found"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,135,String nameRef = reader.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,136,boolean looksLegit = reader.matches(';');
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,137,boolean found = false;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,138,while (nameRef.length() > 0 && !found) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,139,if (Entities.isNamedEntity(nameRef))
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,140,found = true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,141,else {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,142,"nameRef = nameRef.substring(0, nameRef.length()-1);"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,143,reader.unconsume();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,146,if (!found) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,147,if (looksLegit) // named with semicolon
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,148,characterReferenceError();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,149,reader.rewindToMark();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,150,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,152,if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matches('='))) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,153,// don't want that to match
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,154,reader.rewindToMark();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,155,return null;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,157,"if (!reader.matchConsume("";""))"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,158,characterReferenceError(); // missing semi
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,159,return Entities.getCharacterByName(nameRef);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,163,Token.Tag createTagPending(boolean start) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,164,tagPending = start ? new Token.StartTag() : new Token.EndTag();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,165,return tagPending;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,168,void emitTagPending() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,169,tagPending.finaliseTag();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,170,emit(tagPending);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,173,void createCommentPending() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,174,commentPending = new Token.Comment();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,177,void emitCommentPending() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,178,emit(commentPending);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,181,void createDoctypePending() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,182,doctypePending = new Token.Doctype();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,185,void emitDoctypePending() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,186,emit(doctypePending);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,189,void createTempBuffer() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,190,dataBuffer = new StringBuilder();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,193,boolean isAppropriateEndTagToken() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,194,return tagPending.tagName.equals(lastStartTag.tagName);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,197,boolean isTrackErrors() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,198,return trackErrors;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,201,void setTrackErrors(boolean trackErrors) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,202,this.trackErrors = trackErrors;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,205,void error(TokeniserState state) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,206,if (trackErrors)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,207,"errors.add(new ParseError(""Unexpected character in input"", reader.current(), state, reader.pos()));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,210,void eofError(TokeniserState state) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,211,if (trackErrors)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,212,"errors.add(new ParseError(""Unexpectedly reached end of file (EOF)"", state, reader.pos()));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,215,private void characterReferenceError() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,216,if (trackErrors)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,217,"errors.add(new ParseError(""Invalid character reference"", reader.pos()));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,220,private void error(String errorMsg) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,221,if (trackErrors)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,222,"errors.add(new ParseError(errorMsg, reader.pos()));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,225,boolean currentNodeInHtmlNS() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,226,// todo: implememnt namespaces correctly
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,227,return true;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,228,// Element currentNode = currentNode();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,229,"// return currentNode != null && currentNode.namespace().equals(""HTML"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,4,* States and transition activations for the Tokeniser.
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,6,enum TokeniserState {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,7,Data {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,8,"// in data state, gather characters until a character reference or tag is found"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,9,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,10,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,11,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,12,t.advanceTransition(CharacterReferenceInData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,13,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,14,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,15,t.advanceTransition(TagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,16,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,17,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,18,t.error(this); // NOT replacement character (oddly?)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,19,t.emit(r.consume());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,20,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,21,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,22,t.emit(new Token.EOF());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,23,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,24,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,25,"String data = r.consumeToAny('&', '<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,26,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,27,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,31,CharacterReferenceInData {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,32,// from & in data
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,33,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,34,"Character c = t.consumeCharacterReference(null, false);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,35,if (c == null)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,36,t.emit('&');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,37,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,38,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,39,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,42,Rcdata {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,43,"/// handles data in title, textarea etc"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,44,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,45,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,46,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,47,t.advanceTransition(CharacterReferenceInRcdata);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,48,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,49,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,50,t.advanceTransition(RcdataLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,51,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,52,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,53,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,54,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,55,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,56,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,57,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,58,t.emit(new Token.EOF());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,59,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,60,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,61,"String data = r.consumeToAny('&', '<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,62,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,63,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,67,CharacterReferenceInRcdata {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,68,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,69,"Character c = t.consumeCharacterReference(null, false);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,70,if (c == null)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,71,t.emit('&');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,72,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,73,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,74,t.transition(Rcdata);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,77,Rawtext {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,78,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,79,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,80,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,81,t.advanceTransition(RawtextLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,82,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,83,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,84,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,85,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,86,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,87,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,88,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,89,t.emit(new Token.EOF());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,90,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,91,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,92,"String data = r.consumeToAny('<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,93,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,94,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,98,ScriptData {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,99,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,100,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,101,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,102,t.advanceTransition(ScriptDataLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,103,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,104,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,105,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,106,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,107,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,108,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,109,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,110,t.emit(new Token.EOF());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,111,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,112,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,113,"String data = r.consumeToAny('<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,114,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,115,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,119,PLAINTEXT {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,120,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,121,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,122,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,123,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,124,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,125,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,126,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,127,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,128,t.emit(new Token.EOF());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,129,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,130,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,131,String data = r.consumeTo(nullChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,132,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,133,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,137,TagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,138,// from < in data
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,139,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,140,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,141,case '!':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,142,t.advanceTransition(MarkupDeclarationOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,143,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,144,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,145,t.advanceTransition(EndTagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,146,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,147,case '?':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,148,t.advanceTransition(BogusComment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,149,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,150,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,151,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,152,t.createTagPending(true);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,153,t.transition(TagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,154,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,155,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,156,t.emit('<'); // char that got us here
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,157,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,159,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,163,EndTagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,164,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,165,if (r.isEmpty()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,166,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,167,"t.emit(""</"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,168,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,169,} else if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,170,t.createTagPending(false);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,171,t.transition(TagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,172,} else if (r.matches('>')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,173,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,174,t.advanceTransition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,175,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,176,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,177,t.advanceTransition(BogusComment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,181,TagName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,182,"// from < or </ in data, will have start or end tag pending"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,183,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,184,"// previous TagOpen state did NOT consume, will have a letter char in current"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,185,"String tagName = r.consumeToAny('\t', '\n', '\f', ' ', '/', '>', nullChar).toLowerCase();"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,186,t.tagPending.appendTagName(tagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,188,switch (r.consume()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,189,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,190,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,191,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,192,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,193,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,194,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,195,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,196,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,197,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,198,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,199,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,200,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,201,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,202,case nullChar: // replacement
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,203,t.tagPending.appendTagName(replacementStr);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,204,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,205,case eof: // should emit pending tag?
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,206,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,207,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,208,"// no default, as covered with above consumeToAny"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,212,RcdataLessthanSign {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,213,// from < in rcdata
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,214,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,215,if (r.matches('/')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,216,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,217,t.advanceTransition(RCDATAEndTagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,218,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,219,"t.emit(""<"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,220,t.transition(Rcdata);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,224,RCDATAEndTagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,225,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,226,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,227,t.createTagPending(false);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,228,t.tagPending.appendTagName(Character.toLowerCase(r.current()));
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,229,t.dataBuffer.append(Character.toLowerCase(r.current()));
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,230,t.advanceTransition(RCDATAEndTagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,231,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,232,"t.emit(""</"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,233,t.transition(Rcdata);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,237,RCDATAEndTagName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,238,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,239,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,240,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,241,t.tagPending.appendTagName(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,242,t.dataBuffer.append(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,243,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,246,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,247,boolean handled = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,248,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,249,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,250,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,251,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,252,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,253,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,254,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,255,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,256,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,257,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,258,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,259,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,260,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,261,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,262,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,263,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,264,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,265,if (t.isAppropriateEndTagToken()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,266,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,267,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,269,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,270,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,271,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,273,if (!handled) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,274,"t.emit(""</"" + t.dataBuffer.toString());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,275,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,276,t.transition(Rcdata);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,280,RawtextLessthanSign {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,281,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,282,if (r.matches('/')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,283,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,284,t.advanceTransition(RawtextEndTagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,285,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,286,t.emit('<');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,287,t.transition(Rawtext);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,291,RawtextEndTagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,292,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,293,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,294,t.createTagPending(false);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,295,t.transition(RawtextEndTagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,296,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,297,"t.emit(""</"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,298,t.transition(Rawtext);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,302,RawtextEndTagName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,303,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,304,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,305,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,306,t.tagPending.appendTagName(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,307,t.dataBuffer.append(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,308,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,311,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,312,boolean handled = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,313,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,314,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,315,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,316,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,317,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,318,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,319,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,320,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,321,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,322,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,323,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,324,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,325,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,326,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,327,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,328,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,329,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,330,if (t.isAppropriateEndTagToken()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,331,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,332,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,334,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,335,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,336,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,338,if (!handled) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,339,"t.emit(""</"" + t.dataBuffer.toString());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,340,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,341,t.transition(Rawtext);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,345,ScriptDataLessthanSign {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,346,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,347,switch (r.consume()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,348,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,349,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,350,t.transition(ScriptDataEndTagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,351,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,352,case '!':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,353,"t.emit(""<!"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,354,t.transition(ScriptDataEscapeStart);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,355,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,356,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,357,"t.emit(""<"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,358,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,359,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,363,ScriptDataEndTagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,364,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,365,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,366,t.createTagPending(false);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,367,t.transition(ScriptDataEndTagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,368,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,369,"t.emit(""</"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,370,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,375,ScriptDataEndTagName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,376,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,377,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,378,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,379,t.tagPending.appendTagName(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,380,t.dataBuffer.append(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,381,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,384,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,385,boolean handled = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,386,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,387,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,388,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,389,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,390,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,391,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,392,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,393,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,394,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,395,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,396,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,397,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,398,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,399,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,400,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,401,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,402,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,403,if (t.isAppropriateEndTagToken()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,404,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,405,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,407,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,408,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,409,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,411,if (!handled) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,412,"t.emit(""</"" + t.dataBuffer.toString());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,413,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,414,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,418,ScriptDataEscapeStart {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,419,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,420,if (r.matches('-')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,421,t.emit('-');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,422,t.advanceTransition(ScriptDataEscapeStartDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,423,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,424,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,428,ScriptDataEscapeStartDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,429,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,430,if (r.matches('-')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,431,t.emit('-');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,432,t.advanceTransition(ScriptDataEscapedDashDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,433,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,434,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,438,ScriptDataEscaped {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,439,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,440,if (r.isEmpty()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,441,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,442,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,443,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,446,switch (r.current()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,447,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,448,t.emit('-');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,449,t.advanceTransition(ScriptDataEscapedDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,450,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,451,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,452,t.advanceTransition(ScriptDataEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,453,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,454,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,455,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,456,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,457,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,458,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,459,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,460,"String data = r.consumeToAny('-', '<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,461,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,465,ScriptDataEscapedDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,466,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,467,if (r.isEmpty()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,468,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,469,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,470,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,473,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,474,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,475,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,476,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,477,t.transition(ScriptDataEscapedDashDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,478,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,479,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,480,t.transition(ScriptDataEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,481,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,482,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,483,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,484,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,485,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,486,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,487,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,488,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,489,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,493,ScriptDataEscapedDashDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,494,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,495,if (r.isEmpty()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,496,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,497,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,498,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,501,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,502,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,503,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,504,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,505,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,506,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,507,t.transition(ScriptDataEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,508,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,509,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,510,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,511,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,512,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,513,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,514,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,515,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,516,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,517,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,518,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,519,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,520,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,524,ScriptDataEscapedLessthanSign {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,525,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,526,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,527,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,528,t.dataBuffer.append(Character.toLowerCase(r.current()));
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,529,"t.emit(""<"" + r.current());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,530,t.advanceTransition(ScriptDataDoubleEscapeStart);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,531,} else if (r.matches('/')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,532,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,533,t.advanceTransition(ScriptDataEscapedEndTagOpen);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,534,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,535,t.emit('<');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,536,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,540,ScriptDataEscapedEndTagOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,541,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,542,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,543,t.createTagPending(false);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,544,t.tagPending.appendTagName(Character.toLowerCase(r.current()));
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,545,t.dataBuffer.append(r.current());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,546,t.advanceTransition(ScriptDataEscapedEndTagName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,547,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,548,"t.emit(""</"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,549,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,553,ScriptDataEscapedEndTagName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,554,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,555,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,556,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,557,t.tagPending.appendTagName(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,558,t.dataBuffer.append(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,559,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,560,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,563,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,564,boolean handled = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,565,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,566,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,567,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,568,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,569,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,570,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,571,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,572,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,573,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,574,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,575,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,576,if (t.isAppropriateEndTagToken())
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,577,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,578,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,579,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,580,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,581,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,582,if (t.isAppropriateEndTagToken()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,583,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,584,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,586,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,587,handled = false;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,588,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,590,if (!handled) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,591,"t.emit(""</"" + t.dataBuffer.toString());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,592,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,593,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,597,ScriptDataDoubleEscapeStart {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,598,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,599,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,600,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,601,t.dataBuffer.append(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,602,t.emit(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,603,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,606,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,607,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,608,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,609,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,610,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,611,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,612,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,613,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,614,"if (t.dataBuffer.toString().equals(""script""))"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,615,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,616,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,617,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,618,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,619,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,620,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,621,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,622,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,626,ScriptDataDoubleEscaped {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,627,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,628,char c = r.current();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,629,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,630,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,631,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,632,t.advanceTransition(ScriptDataDoubleEscapedDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,633,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,634,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,635,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,636,t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,637,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,638,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,639,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,640,r.advance();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,641,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,642,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,643,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,644,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,645,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,646,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,647,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,648,"String data = r.consumeToAny('-', '<', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,649,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,653,ScriptDataDoubleEscapedDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,654,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,655,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,656,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,657,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,658,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,659,t.transition(ScriptDataDoubleEscapedDashDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,660,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,661,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,662,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,663,t.transition(ScriptDataDoubleEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,664,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,665,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,666,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,667,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,668,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,669,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,670,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,671,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,672,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,673,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,674,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,675,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,676,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,680,ScriptDataDoubleEscapedDashDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,681,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,682,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,683,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,684,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,685,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,686,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,687,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,688,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,689,t.transition(ScriptDataDoubleEscapedLessthanSign);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,690,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,691,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,692,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,693,t.transition(ScriptData);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,694,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,695,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,696,t.emit(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,697,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,698,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,699,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,700,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,701,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,702,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,703,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,704,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,705,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,709,ScriptDataDoubleEscapedLessthanSign {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,710,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,711,if (r.matches('/')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,712,t.emit('/');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,713,t.createTempBuffer();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,714,t.advanceTransition(ScriptDataDoubleEscapeEnd);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,715,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,716,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,720,ScriptDataDoubleEscapeEnd {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,721,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,722,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,723,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,724,t.dataBuffer.append(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,725,t.emit(name);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,726,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,729,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,730,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,731,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,732,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,733,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,734,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,735,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,736,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,737,"if (t.dataBuffer.toString().equals(""script""))"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,738,t.transition(ScriptDataEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,739,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,740,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,741,t.emit(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,742,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,743,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,744,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,745,t.transition(ScriptDataDoubleEscaped);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,749,BeforeAttributeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,750,// from tagname <xxx
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,751,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,752,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,753,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,754,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,755,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,756,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,757,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,758,break; // ignore whitespace
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,759,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,760,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,761,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,762,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,763,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,764,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,765,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,766,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,767,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,768,t.tagPending.newAttribute();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,769,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,770,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,771,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,772,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,773,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,774,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,775,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,776,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,777,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,778,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,779,case '=':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,780,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,781,t.tagPending.newAttribute();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,782,t.tagPending.appendAttributeName(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,783,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,784,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,785,"default: // A-Z, anything else"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,786,t.tagPending.newAttribute();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,787,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,788,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,792,AttributeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,793,// from before attribute name
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,794,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,795,"String name = r.consumeToAny('\t', '\n', '\f', ' ', '/', '=', '>', nullChar, '""', '\'', '<');"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,796,t.tagPending.appendAttributeName(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,798,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,799,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,800,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,801,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,802,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,803,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,804,t.transition(AfterAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,805,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,806,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,807,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,808,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,809,case '=':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,810,t.transition(BeforeAttributeValue);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,811,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,812,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,813,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,814,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,815,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,816,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,817,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,818,t.tagPending.appendAttributeName(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,819,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,820,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,821,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,822,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,823,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,824,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,825,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,826,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,827,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,828,t.tagPending.appendAttributeName(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,829,"// no default, as covered in consumeToAny"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,833,AfterAttributeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,834,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,835,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,836,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,837,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,838,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,839,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,840,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,841,// ignore
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,842,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,843,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,844,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,845,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,846,case '=':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,847,t.transition(BeforeAttributeValue);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,848,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,849,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,850,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,851,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,852,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,853,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,854,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,855,t.tagPending.appendAttributeName(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,856,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,857,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,858,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,859,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,860,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,861,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,862,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,863,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,864,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,865,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,866,t.tagPending.newAttribute();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,867,t.tagPending.appendAttributeName(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,868,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,869,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,870,"default: // A-Z, anything else"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,871,t.tagPending.newAttribute();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,872,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,873,t.transition(AttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,877,BeforeAttributeValue {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,878,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,879,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,880,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,881,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,882,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,883,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,884,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,885,// ignore
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,886,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,887,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,888,t.transition(AttributeValue_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,889,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,890,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,891,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,892,t.transition(AttributeValue_unquoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,893,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,894,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,895,t.transition(AttributeValue_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,896,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,897,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,898,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,899,t.tagPending.appendAttributeValue(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,900,t.transition(AttributeValue_unquoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,901,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,902,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,903,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,904,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,905,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,906,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,907,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,908,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,909,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,910,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,911,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,912,case '=':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,913,case '`':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,914,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,915,t.tagPending.appendAttributeValue(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,916,t.transition(AttributeValue_unquoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,917,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,918,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,919,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,920,t.transition(AttributeValue_unquoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,924,AttributeValue_doubleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,925,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,926,"String value = r.consumeToAny('""', '&', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,927,if (value.length() > 0)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,928,t.tagPending.appendAttributeValue(value);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,930,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,931,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,932,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,933,t.transition(AfterAttributeValue_quoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,934,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,935,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,936,"Character ref = t.consumeCharacterReference('""', true);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,937,if (ref != null)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,938,t.tagPending.appendAttributeValue(ref);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,939,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,940,t.tagPending.appendAttributeValue('&');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,941,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,942,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,943,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,944,t.tagPending.appendAttributeValue(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,945,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,946,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,947,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,948,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,949,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,950,"// no default, handled in consume to any above"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,954,AttributeValue_singleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,955,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,956,"String value = r.consumeToAny('\'', '&', nullChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,957,if (value.length() > 0)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,958,t.tagPending.appendAttributeValue(value);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,960,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,961,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,962,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,963,t.transition(AfterAttributeValue_quoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,964,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,965,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,966,"Character ref = t.consumeCharacterReference('\'', true);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,967,if (ref != null)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,968,t.tagPending.appendAttributeValue(ref);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,969,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,970,t.tagPending.appendAttributeValue('&');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,971,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,972,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,973,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,974,t.tagPending.appendAttributeValue(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,975,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,976,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,977,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,978,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,979,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,980,"// no default, handled in consume to any above"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,984,AttributeValue_unquoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,985,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,986,"String value = r.consumeToAny('\t', '\n', '\f', ' ', '&', '>', nullChar, '""', '\'', '<', '=', '`');"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,987,if (value.length() > 0)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,988,t.tagPending.appendAttributeValue(value);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,990,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,991,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,992,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,993,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,994,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,995,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,996,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,997,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,998,case '&':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,999,"Character ref = t.consumeCharacterReference('>', true);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1000,if (ref != null)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1001,t.tagPending.appendAttributeValue(ref);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1002,else
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1003,t.tagPending.appendAttributeValue('&');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1004,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1005,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1006,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1007,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1008,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1009,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1010,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1011,t.tagPending.appendAttributeValue(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1012,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1013,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1014,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1015,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1016,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1017,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1018,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1019,case '<':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1020,case '=':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1021,case '`':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1022,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1023,t.tagPending.appendAttributeValue(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1024,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1025,"// no default, handled in consume to any above"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1030,// CharacterReferenceInAttributeValue state handled inline
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1031,AfterAttributeValue_quoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1032,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1033,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1034,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1035,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1036,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1037,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1038,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1039,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1040,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1041,case '/':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1042,t.transition(SelfClosingStartTag);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1043,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1044,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1045,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1046,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1047,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1048,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1049,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1050,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1051,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1052,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1053,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1054,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1055,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1060,SelfClosingStartTag {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1061,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1062,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1063,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1064,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1065,t.tagPending.selfClosing = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1066,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1067,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1068,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1069,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1070,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1071,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1072,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1073,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1074,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1075,t.transition(BeforeAttributeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1079,BogusComment {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1080,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1081,// todo: handle bogus comment starting from eof. when does that trigger?
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1082,// rewind to capture character that lead us here
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1083,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1084,Token.Comment comment = new Token.Comment();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1085,comment.data.append(r.consumeTo('>'));
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1086,// todo: replace nullChar with replaceChar
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1087,t.emit(comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1088,t.advanceTransition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1091,MarkupDeclarationOpen {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1092,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1093,"if (r.matchConsume(""--"")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1094,t.createCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1095,t.transition(CommentStart);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1096,"} else if (r.matchConsumeIgnoreCase(""DOCTYPE"")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1097,t.transition(Doctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1098,"} else if (r.matchConsume(""[CDATA["")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1099,"// todo: should actually check current namepspace, and only non-html allows cdata. until namespace"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1100,"// is implemented properly, keep handling as cdata"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1101,"//} else if (!t.currentNodeInHtmlNS() && r.matchConsume(""[CDATA["")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1102,t.transition(CdataSection);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1103,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1104,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1105,t.advanceTransition(BogusComment); // advance so this character gets in bogus comment data's rewind
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1109,CommentStart {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1110,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1111,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1112,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1113,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1114,t.transition(CommentStartDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1115,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1116,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1117,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1118,t.commentPending.data.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1119,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1120,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1121,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1122,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1123,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1124,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1125,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1126,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1127,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1128,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1129,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1130,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1131,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1132,t.commentPending.data.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1133,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1137,CommentStartDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1138,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1139,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1140,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1141,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1142,t.transition(CommentStartDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1143,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1144,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1145,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1146,t.commentPending.data.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1147,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1148,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1149,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1150,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1151,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1152,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1153,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1154,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1155,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1156,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1157,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1158,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1159,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1160,t.commentPending.data.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1161,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1165,Comment {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1166,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1167,char c = r.current();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1168,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1169,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1170,t.advanceTransition(CommentEndDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1171,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1172,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1173,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1174,t.commentPending.data.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1175,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1176,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1177,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1178,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1179,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1180,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1181,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1182,"t.commentPending.data.append(r.consumeToAny('-', nullChar));"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1186,CommentEndDash {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1187,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1188,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1189,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1190,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1191,t.transition(CommentEnd);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1192,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1193,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1194,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1195,t.commentPending.data.append('-').append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1196,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1197,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1198,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1199,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1200,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1201,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1202,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1203,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1204,t.commentPending.data.append('-').append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1205,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1209,CommentEnd {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1210,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1211,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1212,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1213,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1214,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1215,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1216,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1217,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1218,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1219,"t.commentPending.data.append(""--"").append(replacementChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1220,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1221,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1222,case '!':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1223,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1224,t.transition(CommentEndBang);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1225,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1226,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1227,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1228,t.commentPending.data.append('-');
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1229,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1230,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1231,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1232,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1233,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1234,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1235,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1236,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1237,"t.commentPending.data.append(""--"").append(c);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1238,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1242,CommentEndBang {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1243,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1244,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1245,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1246,case '-':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1247,"t.commentPending.data.append(""--!"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1248,t.transition(CommentEndDash);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1249,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1250,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1251,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1252,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1253,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1254,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1255,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1256,"t.commentPending.data.append(""--!"").append(replacementChar);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1257,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1258,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1259,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1260,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1261,t.emitCommentPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1262,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1263,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1264,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1265,"t.commentPending.data.append(""--!"").append(c);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1266,t.transition(Comment);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1270,Doctype {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1271,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1272,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1273,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1274,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1275,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1276,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1277,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1278,t.transition(BeforeDoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1279,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1280,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1281,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1282,t.createDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1283,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1284,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1285,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1286,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1287,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1288,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1289,t.transition(BeforeDoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1293,BeforeDoctypeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1294,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1295,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1296,t.createDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1297,t.transition(DoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1298,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1300,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1301,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1302,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1303,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1304,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1305,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1306,break; // ignore whitespace
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1307,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1308,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1309,t.doctypePending.name.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1310,t.transition(DoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1311,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1312,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1313,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1314,t.createDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1315,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1316,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1317,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1318,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1319,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1320,t.createDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1321,t.doctypePending.name.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1322,t.transition(DoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1326,DoctypeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1327,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1328,if (r.matchesLetter()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1329,String name = r.consumeLetterSequence();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1330,t.doctypePending.name.append(name.toLowerCase());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1331,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1333,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1334,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1335,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1336,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1337,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1338,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1339,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1340,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1341,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1342,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1343,t.transition(AfterDoctypeName);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1344,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1345,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1346,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1347,t.doctypePending.name.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1348,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1349,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1350,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1351,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1352,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1353,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1354,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1355,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1356,t.doctypePending.name.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1360,AfterDoctypeName {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1361,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1362,if (r.isEmpty()) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1363,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1364,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1365,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1366,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1367,return;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1369,if (r.matches('>')) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1370,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1371,t.advanceTransition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1372,"} else if (r.matchConsumeIgnoreCase(""PUBLIC"")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1373,t.transition(AfterDoctypePublicKeyword);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1374,"} else if (r.matchConsumeIgnoreCase(""SYSTEM"")) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1375,t.transition(AfterDoctypeSystemKeyword);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1376,} else {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1377,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1378,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1379,t.advanceTransition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1384,AfterDoctypePublicKeyword {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1385,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1386,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1387,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1388,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1389,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1390,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1391,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1392,t.transition(BeforeDoctypePublicIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1393,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1394,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1395,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1396,// set public id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1397,t.transition(DoctypePublicIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1398,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1399,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1400,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1401,// set public id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1402,t.transition(DoctypePublicIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1403,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1404,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1405,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1406,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1407,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1408,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1409,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1410,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1411,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1412,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1413,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1414,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1415,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1416,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1417,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1418,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1419,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1423,BeforeDoctypePublicIdentifier {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1424,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1425,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1426,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1427,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1428,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1429,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1430,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1431,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1432,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1433,// set public id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1434,t.transition(DoctypePublicIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1435,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1436,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1437,// set public id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1438,t.transition(DoctypePublicIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1439,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1440,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1441,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1442,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1443,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1444,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1445,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1446,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1447,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1448,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1449,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1450,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1451,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1452,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1453,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1454,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1455,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1459,DoctypePublicIdentifier_doubleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1460,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1461,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1462,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1463,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1464,t.transition(AfterDoctypePublicIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1465,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1466,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1467,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1468,t.doctypePending.publicIdentifier.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1469,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1470,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1471,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1472,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1473,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1474,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1475,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1476,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1477,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1478,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1479,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1480,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1481,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1482,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1483,t.doctypePending.publicIdentifier.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1487,DoctypePublicIdentifier_singleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1488,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1489,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1490,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1491,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1492,t.transition(AfterDoctypePublicIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1493,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1494,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1495,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1496,t.doctypePending.publicIdentifier.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1497,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1498,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1499,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1500,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1501,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1502,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1503,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1504,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1505,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1506,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1507,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1508,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1509,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1510,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1511,t.doctypePending.publicIdentifier.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1515,AfterDoctypePublicIdentifier {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1516,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1517,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1518,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1519,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1520,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1521,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1522,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1523,t.transition(BetweenDoctypePublicAndSystemIdentifiers);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1524,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1525,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1526,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1527,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1528,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1529,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1530,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1531,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1532,t.transition(DoctypeSystemIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1533,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1534,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1535,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1536,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1537,t.transition(DoctypeSystemIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1538,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1539,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1540,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1541,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1542,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1543,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1544,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1545,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1546,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1547,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1548,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1552,BetweenDoctypePublicAndSystemIdentifiers {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1553,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1554,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1555,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1556,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1557,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1558,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1559,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1560,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1561,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1562,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1563,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1564,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1565,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1566,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1567,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1568,t.transition(DoctypeSystemIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1569,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1570,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1571,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1572,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1573,t.transition(DoctypeSystemIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1574,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1575,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1576,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1577,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1578,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1579,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1580,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1581,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1582,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1583,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1584,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1588,AfterDoctypeSystemKeyword {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1589,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1590,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1591,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1592,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1593,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1594,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1595,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1596,t.transition(BeforeDoctypeSystemIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1597,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1598,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1599,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1600,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1601,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1602,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1603,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1604,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1605,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1606,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1607,t.transition(DoctypeSystemIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1608,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1609,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1610,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1611,// system id empty
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1612,t.transition(DoctypeSystemIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1613,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1614,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1615,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1616,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1617,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1618,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1619,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1620,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1621,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1622,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1623,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1627,BeforeDoctypeSystemIdentifier {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1628,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1629,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1630,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1631,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1632,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1633,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1634,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1635,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1636,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1637,// set system id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1638,t.transition(DoctypeSystemIdentifier_doubleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1639,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1640,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1641,// set public id to empty string
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1642,t.transition(DoctypeSystemIdentifier_singleQuoted);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1643,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1644,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1645,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1646,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1647,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1648,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1649,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1650,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1651,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1652,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1653,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1654,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1655,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1656,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1657,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1658,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1659,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1663,DoctypeSystemIdentifier_doubleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1664,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1665,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1666,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1667,"case '""':"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1668,t.transition(AfterDoctypeSystemIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1669,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1670,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1671,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1672,t.doctypePending.systemIdentifier.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1673,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1674,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1675,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1676,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1677,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1678,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1679,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1680,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1681,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1682,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1683,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1684,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1685,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1686,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1687,t.doctypePending.systemIdentifier.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1691,DoctypeSystemIdentifier_singleQuoted {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1692,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1693,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1694,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1695,case '\'':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1696,t.transition(AfterDoctypeSystemIdentifier);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1697,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1698,case nullChar:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1699,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1700,t.doctypePending.systemIdentifier.append(replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1701,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1702,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1703,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1704,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1705,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1706,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1707,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1708,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1709,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1710,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1711,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1712,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1713,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1714,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1715,t.doctypePending.systemIdentifier.append(c);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1719,AfterDoctypeSystemIdentifier {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1720,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1721,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1722,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1723,case '\t':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1724,case '\n':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1725,case '\f':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1726,case ' ':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1727,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1728,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1729,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1730,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1731,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1732,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1733,t.eofError(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1734,t.doctypePending.forceQuirks = true;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1735,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1736,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1737,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1738,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1739,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1740,t.transition(BogusDoctype);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1741,// NOT force quirks
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1745,BogusDoctype {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1746,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1747,char c = r.consume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1748,switch (c) {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1749,case '>':
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1750,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1751,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1752,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1753,case eof:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1754,t.emitDoctypePending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1755,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1756,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1757,default:
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1758,// ignore char
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1759,break;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1763,CdataSection {
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1764,"void read(Tokeniser t, CharacterReader r) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1765,"String data = r.consumeTo(""]]>"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1766,t.emit(data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1767,"r.matchConsume(""]]>"");"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1768,t.transition(Data);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1773,"abstract void read(Tokeniser t, CharacterReader r);"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1775,private static final char nullChar = '\u0000';
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1776,private static final char replacementChar = Tokeniser.replacementChar;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1777,private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1778,private static final char eof = CharacterReader.EOF;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,3,import org.jsoup.helper.StringUtil;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,4,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,5,import org.jsoup.nodes.*;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,7,import java.util.ArrayList;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,8,import java.util.Iterator;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,9,import java.util.LinkedList;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,10,import java.util.List;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,13,* HTML Tree Builder; creates a DOM from Tokens.
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,15,class TreeBuilder {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,16,CharacterReader reader;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,17,Tokeniser tokeniser;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,19,private TreeBuilderState state; // the current state
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,20,private TreeBuilderState originalState; // original / marked state
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,21,private Document doc; // current doc we are building into
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,22,private LinkedList<Element> stack; // the stack of open elements
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,24,"private String baseUri; // current base uri, for creating new elements"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,25,private Token currentToken; // currentToken is used only for error tracking.
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,26,private Element headElement; // the current head element
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,27,private Element formElement; // the current form element
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,28,private Element contextElement; // fragment parse context -- could be null even if fragment parsing
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,29,private LinkedList<Element> formattingElements = new LinkedList<Element>(); // active (open) formatting elements
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,30,private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>(); // chars in table to be shifted out
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,32,private boolean framesetOk = true; // if ok to go into frameset
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,33,private boolean fosterInserts = false; // if next inserts should be fostered
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,34,private boolean fragmentParsing = false; // if parsing a fragment of html
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,36,private boolean trackErrors = false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,37,private List<ParseError> errors = new ArrayList<ParseError>();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,39,TreeBuilder() {}
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,41,"private void initialiseParse(String input, String baseUri) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,42,doc = new Document(baseUri);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,43,reader = new CharacterReader(input);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,44,tokeniser = new Tokeniser(reader);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,45,stack = new LinkedList<Element>();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,46,this.baseUri = baseUri;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,49,"Document parse(String input, String baseUri) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,50,state = TreeBuilderState.Initial;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,51,"initialiseParse(input, baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,52,runParser();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,53,return doc;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,56,"List<Node> parseFragment(String inputFragment, Element context, String baseUri) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,57,// context may be null
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,58,"initialiseParse(inputFragment, baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,59,contextElement = context;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,60,fragmentParsing = true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,61,Element root = null;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,63,if (context != null) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,64,if (context.ownerDocument() != null) // quirks setup:
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,65,doc.quirksMode(context.ownerDocument().quirksMode());
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,67,// initialise the tokeniser state:
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,68,String contextTag = context.tagName();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,69,"if (StringUtil.in(contextTag, ""title"", ""textarea""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,70,tokeniser.transition(TokeniserState.Rcdata);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,71,"else if (StringUtil.in(contextTag, ""iframe"", ""noembed"", ""noframes"", ""style"", ""xmp""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,72,tokeniser.transition(TokeniserState.Rawtext);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,73,"else if (contextTag.equals(""script""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,74,tokeniser.transition(TokeniserState.ScriptData);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,75,"else if (contextTag.equals((""noscript"")))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,76,"tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,77,"else if (contextTag.equals(""plaintext""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,78,tokeniser.transition(TokeniserState.Data);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,79,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,80,tokeniser.transition(TokeniserState.Data); // default
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,82,"root = new Element(Tag.valueOf(""html""), baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,83,doc.appendChild(root);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,84,stack.push(root);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,85,resetInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,86,// todo: setup form element to nearest form on context (up ancestor chain)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,89,runParser();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,90,if (context != null)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,91,return root.childNodes();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,92,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,93,return doc.childNodes();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,96,private void runParser() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,97,while (true) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,98,// todo: handle foreign content checks
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,100,Token token = tokeniser.read();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,101,process(token);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,103,if (token.type == Token.TokenType.EOF)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,104,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,108,boolean process(Token token) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,109,currentToken = token;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,110,"return this.state.process(token, this);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,113,"boolean process(Token token, TreeBuilderState state) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,114,currentToken = token;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,115,"return state.process(token, this);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,118,void transition(TreeBuilderState state) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,119,this.state = state;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,122,TreeBuilderState state() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,123,return state;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,126,void markInsertionMode() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,127,originalState = state;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,130,TreeBuilderState originalState() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,131,return originalState;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,134,void framesetOk(boolean framesetOk) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,135,this.framesetOk = framesetOk;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,138,boolean framesetOk() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,139,return framesetOk;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,142,Element currentElement() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,143,return stack.getLast();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,146,Document getDocument() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,147,return doc;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,150,String getBaseUri() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,151,return baseUri;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,154,void setBaseUri(Element base) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,155,"String href = base.absUrl(""href"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,156,if (href.length() != 0) { // ignore <base target> etc
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,157,baseUri = href;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,158,doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,162,boolean isFragmentParsing() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,163,return fragmentParsing;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,166,void error(TreeBuilderState state) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,167,if (trackErrors)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,168,"errors.add(new ParseError(""Unexpected token"", state, currentToken, reader.pos()));"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,171,Element insert(Token.StartTag startTag) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,172,// handle empty unknown tags
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,173,"// when the spec expects an empty tag, will directly hit insertEmpty, so won't generate fake end tag."
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,174,if (startTag.isSelfClosing() && !Tag.isKnownTag(startTag.name())) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,175,Element el =  insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,176,process(new Token.EndTag(el.tagName())); // ensure we get out of whatever state we are in
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,177,return el;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,180,"Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,181,insert(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,182,return el;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,185,Element insert(String startTagName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,186,"Element el = new Element(Tag.valueOf(startTagName), baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,187,insert(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,188,return el;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,191,void insert(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,192,insertNode(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,193,stack.add(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,196,Element insertEmpty(Token.StartTag startTag) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,197,Tag tag = Tag.valueOf(startTag.name());
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,198,"Element el = new Element(tag, baseUri, startTag.attributes);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,199,insertNode(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,200,if (startTag.isSelfClosing()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,201,tokeniser.acknowledgeSelfClosingFlag();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,202,"if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,203,tag.setSelfClosing();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,205,return el;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,208,void insert(Token.Comment commentToken) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,209,"Comment comment = new Comment(commentToken.getData(), baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,210,insertNode(comment);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,213,void insert(Token.Character characterToken) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,214,Node node;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,215,"// characters in script and style go in as datanodes, not text nodes"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,216,"if (StringUtil.in(currentElement().tagName(), ""script"", ""style""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,217,"node = new DataNode(characterToken.getData(), baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,218,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,219,"node = new TextNode(characterToken.getData(), baseUri);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,220,"currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack."
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,223,private void insertNode(Node node) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,224,"// if the stack hasn't been set up yet, elements (doctype, comments) go into the doc"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,225,if (stack.size() == 0)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,226,doc.appendChild(node);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,227,else if (isFosterInserts())
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,228,insertInFosterParent(node);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,229,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,230,currentElement().appendChild(node);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,233,Element pop() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,234,"// todo - dev, remove validation check"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,235,"if (stack.peekLast().nodeName().equals(""td"") && !state.name().equals(""InCell""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,236,"Validate.isFalse(true, ""pop td not in cell"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,237,"if (stack.peekLast().nodeName().equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,238,"Validate.isFalse(true, ""popping html!"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,239,return stack.pollLast();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,242,void push(Element element) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,243,stack.add(element);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,246,LinkedList<Element> getStack() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,247,return stack;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,250,boolean onStack(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,251,"return isElementInQueue(stack, el);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,254,"private boolean isElementInQueue(LinkedList<Element> queue, Element element) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,255,Iterator<Element> it = queue.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,256,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,257,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,258,if (next == element) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,259,return true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,262,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,265,Element getFromStack(String elName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,266,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,267,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,268,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,269,if (next.nodeName().equals(elName)) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,270,return next;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,273,return null;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,276,boolean removeFromStack(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,277,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,278,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,279,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,280,if (next == el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,281,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,282,return true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,285,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,288,void popStackToClose(String elName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,289,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,290,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,291,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,292,if (next.nodeName().equals(elName)) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,293,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,294,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,295,} else {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,296,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,301,void popStackToClose(String... elNames) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,302,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,303,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,304,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,305,"if (StringUtil.in(next.nodeName(), elNames)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,306,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,307,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,308,} else {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,309,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,314,void popStackToBefore(String elName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,315,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,316,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,317,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,318,if (next.nodeName().equals(elName)) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,319,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,320,} else {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,321,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,326,void clearStackToTableContext() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,327,"clearStackToContext(""table"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,330,void clearStackToTableBodyContext() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,331,"clearStackToContext(""tbody"", ""tfoot"", ""thead"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,334,void clearStackToTableRowContext() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,335,"clearStackToContext(""tr"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,338,private void clearStackToContext(String... nodeNames) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,339,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,340,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,341,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,342,"if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,343,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,344,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,345,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,349,Element aboveOnStack(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,350,assert onStack(el);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,351,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,352,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,353,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,354,if (next == el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,355,return it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,358,return null;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,361,"void insertOnStackAfter(Element after, Element in) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,362,int i = stack.lastIndexOf(after);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,363,Validate.isTrue(i != -1);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,364,"stack.add(i+1, in);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,367,"void replaceOnStack(Element out, Element in) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,368,"replaceInQueue(stack, out, in);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,371,"private void replaceInQueue(LinkedList<Element> queue, Element out, Element in) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,372,int i = queue.lastIndexOf(out);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,373,Validate.isTrue(i != -1);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,374,queue.remove(i);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,375,"queue.add(i, in);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,378,void resetInsertionMode() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,379,boolean last = false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,380,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,381,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,382,Element node = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,383,if (!it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,384,last = true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,385,node = contextElement;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,387,String name = node.nodeName();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,388,"if (""select"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,389,transition(TreeBuilderState.InSelect);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,390,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,391,"} else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,392,transition(TreeBuilderState.InCell);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,393,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,394,"} else if (""tr"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,395,transition(TreeBuilderState.InRow);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,396,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,397,"} else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,398,transition(TreeBuilderState.InTableBody);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,399,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,400,"} else if (""caption"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,401,transition(TreeBuilderState.InCaption);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,402,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,403,"} else if (""colgroup"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,404,transition(TreeBuilderState.InColumnGroup);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,405,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,406,"} else if (""table"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,407,transition(TreeBuilderState.InTable);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,408,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,409,"} else if (""head"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,410,transition(TreeBuilderState.InBody);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,411,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,412,"} else if (""body"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,413,transition(TreeBuilderState.InBody);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,414,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,415,"} else if (""frameset"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,416,transition(TreeBuilderState.InFrameset);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,417,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,418,"} else if (""html"".equals(name)) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,419,transition(TreeBuilderState.BeforeHead);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,420,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,421,} else if (last) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,422,transition(TreeBuilderState.InBody);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,423,break; // frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,428,// todo: tidy up in specific scope methods
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,429,"private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,430,"return inSpecificScope(new String[]{targetName}, baseTypes, extraTypes);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,433,"private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,434,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,435,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,436,Element el = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,437,String elName = el.nodeName();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,438,"if (StringUtil.in(elName, targetNames))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,439,return true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,440,"if (StringUtil.in(elName, baseTypes))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,441,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,442,"if (extraTypes != null && StringUtil.in(elName, extraTypes))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,443,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,445,"Validate.fail(""Should not be reachable"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,446,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,449,boolean inScope(String[] targetNames) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,450,"return inSpecificScope(targetNames, new String[]{""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object""}, null);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,453,boolean inScope(String targetName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,454,"return inScope(targetName, null);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,457,"boolean inScope(String targetName, String[] extras) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,458,"return inSpecificScope(targetName, new String[]{""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object""}, extras);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,459,"// todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,460,"// todo: in svg namespace: forignOjbect, desc, title"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,463,boolean inListItemScope(String targetName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,464,"return inScope(targetName, new String[]{""ol"", ""ul""});"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,467,boolean inButtonScope(String targetName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,468,"return inScope(targetName, new String[]{""button""});"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,471,boolean inTableScope(String targetName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,472,"return inSpecificScope(targetName, new String[]{""html"", ""table""}, null);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,475,boolean inSelectScope(String targetName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,476,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,477,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,478,Element el = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,479,String elName = el.nodeName();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,480,if (elName.equals(targetName))
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,481,return true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,482,"if (!StringUtil.in(elName, ""optgroup"", ""option"")) // all elements except"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,483,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,485,"Validate.fail(""Should not be reachable"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,486,return false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,489,void setHeadElement(Element headElement) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,490,this.headElement = headElement;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,493,Element getHeadElement() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,494,return headElement;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,497,boolean isFosterInserts() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,498,return fosterInserts;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,501,void setFosterInserts(boolean fosterInserts) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,502,this.fosterInserts = fosterInserts;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,505,Element getFormElement() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,506,return formElement;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,509,void setFormElement(Element formElement) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,510,this.formElement = formElement;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,513,void newPendingTableCharacters() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,514,pendingTableCharacters = new ArrayList<Token.Character>();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,517,List<Token.Character> getPendingTableCharacters() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,518,return pendingTableCharacters;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,521,void setPendingTableCharacters(List<Token.Character> pendingTableCharacters) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,522,this.pendingTableCharacters = pendingTableCharacters;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,526,11.2.5.2 Closing elements that have implied end tags<p/>
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,527,"When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,528,"dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,529,the UA must pop the current node off the stack of open elements.
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,531,@param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,532,"process, then the UA must perform the above steps as if that element was not in the above list."
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,534,void generateImpliedEndTags(String excludeTag) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,535,while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,536,"StringUtil.in(currentElement().nodeName(), ""dd"", ""dt"", ""li"", ""option"", ""optgroup"", ""p"", ""rp"", ""rt""))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,537,pop();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,540,void generateImpliedEndTags() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,541,generateImpliedEndTags(null);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,544,boolean isSpecial(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,545,"// todo: mathml's mi, mo, mn"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,546,"// todo: svg's foreigObject, desc, title"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,547,String name = el.nodeName();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,548,"return StringUtil.in(name, ""address"", ""applet"", ""area"", ""article"", ""aside"", ""base"", ""basefont"", ""bgsound"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,549,"""blockquote"", ""body"", ""br"", ""button"", ""caption"", ""center"", ""col"", ""colgroup"", ""command"", ""dd"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,550,"""details"", ""dir"", ""div"", ""dl"", ""dt"", ""embed"", ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""form"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,551,"""frame"", ""frameset"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""head"", ""header"", ""hgroup"", ""hr"", ""html"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,552,"""iframe"", ""img"", ""input"", ""isindex"", ""li"", ""link"", ""listing"", ""marquee"", ""menu"", ""meta"", ""nav"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,553,"""noembed"", ""noframes"", ""noscript"", ""object"", ""ol"", ""p"", ""param"", ""plaintext"", ""pre"", ""script"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,554,"""section"", ""select"", ""style"", ""summary"", ""table"", ""tbody"", ""td"", ""textarea"", ""tfoot"", ""th"", ""thead"","
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,555,"""title"", ""tr"", ""ul"", ""wbr"", ""xmp"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,558,// active formatting elements
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,559,void pushActiveFormattingElements(Element in) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,560,int numSeen = 0;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,561,Iterator<Element> iter = formattingElements.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,562,while (iter.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,563,Element el =  iter.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,564,if (el == null) // marker
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,565,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,567,"if (isSameFormattingElement(in, el))"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,568,numSeen++;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,570,if (numSeen == 3) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,571,iter.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,572,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,575,formattingElements.add(in);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,578,"private boolean isSameFormattingElement(Element a, Element b) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,579,"// same if: same namespace, tag, and attributes. Element.equals only checks tag, might in future check children"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,580,return a.nodeName().equals(b.nodeName()) &&
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,581,// a.namespace().equals(b.namespace()) &&
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,582,a.attributes().equals(b.attributes());
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,583,// todo: namespaces
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,586,void reconstructFormattingElements() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,587,int size = formattingElements.size();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,588,if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,589,return;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,591,Element entry = formattingElements.getLast();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,592,int pos = size - 1;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,593,boolean skip = false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,594,while (true) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,595,"if (pos == 0) { // step 4. if none before, skip to 8"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,596,skip = true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,597,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,599,entry = formattingElements.get(--pos); // step 5. one earlier than entry
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,600,if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,601,"break; // jump to 8, else continue back to 4"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,603,while(true) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,604,if (!skip) // step 7: on later than entry
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,605,entry = formattingElements.get(++pos);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,607,"// 8. create new element from element, 9 insert into current node, onto stack"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,608,skip = false; // can only skip increment from 4.
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,609,Element newEl = insert(entry.nodeName()); // todo: avoid fostering here?
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,610,// newEl.namespace(entry.namespace()); // todo: namespaces
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,611,newEl.attributes().addAll(entry.attributes());
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,613,// 10. replace entry with new entry
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,614,"formattingElements.add(pos, newEl);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,615,formattingElements.remove(pos + 1);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,617,// 11
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,618,"if (pos == size-1) // if not last entry in list, jump to 7"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,619,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,623,void clearFormattingElementsToLastMarker() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,624,while (!formattingElements.isEmpty()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,625,Element el = formattingElements.peekLast();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,626,formattingElements.removeLast();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,627,if (el == null)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,628,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,632,void removeFromActiveFormattingElements(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,633,Iterator<Element> it = formattingElements.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,634,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,635,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,636,if (next == el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,637,it.remove();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,638,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,643,boolean isInActiveFormattingElements(Element el) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,644,"return isElementInQueue(formattingElements, el);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,647,Element getActiveFormattingElement(String nodeName) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,648,Iterator<Element> it = formattingElements.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,649,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,650,Element next = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,651,if (next == null) // scope marker
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,652,break;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,653,else if (next.nodeName().equals(nodeName))
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,654,return next;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,656,return null;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,659,"void replaceActiveFormattingElement(Element out, Element in) {"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,660,"replaceInQueue(formattingElements, out, in);"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,663,void insertMarkerToFormattingElements() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,664,formattingElements.add(null);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,667,void insertInFosterParent(Node in) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,668,Element fosterParent = null;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,669,"Element lastTable = getFromStack(""table"");"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,670,boolean isLastTableParent = false;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,671,if (lastTable != null) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,672,if (lastTable.parent() != null) {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,673,fosterParent = lastTable.parent();
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,674,isLastTableParent = true;
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,675,} else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,676,fosterParent = aboveOnStack(lastTable);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,677,} else { // no table == frag
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,678,fosterParent = stack.get(0);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,681,if (isLastTableParent)
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,682,lastTable.before(in);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,683,else
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,684,fosterParent.appendChild(in);
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,687,@Override
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,688,public String toString() {
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,689,"return ""TreeBuilder{"" +"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,690,"""currentToken="" + currentToken +"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,691,""", state="" + state +"
True,src/main/java/org/jsoup/parser/TreeBuilder.java,src/main/java/org/jsoup/parser/TreeBuilder.java,692,""", currentElement="" + currentElement() +"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,3,import org.jsoup.helper.StringUtil;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,4,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,5,import org.jsoup.nodes.*;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,7,import java.util.Arrays;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,8,import java.util.Iterator;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,9,import java.util.LinkedList;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,13,public enum TreeBuilderState {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,14,Initial {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,15,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,16,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,17,return true; // ignore whitespace
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,18,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,19,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,20,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,21,// todo: parse error check on expected doctypes
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,22,// todo: quirk state check on doctype ids
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,23,Token.Doctype d = t.asDoctype();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,24,"DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,25,tb.getDocument().appendChild(doctype);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,26,if (d.isForceQuirks())
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,27,tb.getDocument().quirksMode(Document.QuirksMode.quirks);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,28,tb.transition(BeforeHtml);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,29,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,30,// todo: check not iframe srcdoc
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,31,tb.transition(BeforeHtml);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,32,return tb.process(t); // re-process token
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,34,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,37,BeforeHtml {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,38,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,39,if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,40,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,41,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,42,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,43,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,44,} else if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,45,return true; // ignore whitespace
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,46,"} else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,47,tb.insert(t.asStartTag());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,48,tb.transition(BeforeHead);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,49,"} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,50,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,51,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,52,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,53,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,54,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,55,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,57,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,60,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,61,"tb.insert(""html"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,62,tb.transition(BeforeHead);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,63,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,66,BeforeHead {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,67,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,68,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,69,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,70,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,71,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,72,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,73,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,74,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,75,"} else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,76,"return InBody.process(t, tb); // does not transition"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,77,"} else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,78,Element head = tb.insert(t.asStartTag());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,79,tb.setHeadElement(head);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,80,tb.transition(InHead);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,81,"} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,82,"tb.process(new Token.StartTag(""head""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,83,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,84,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,85,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,86,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,87,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,88,"tb.process(new Token.StartTag(""head""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,89,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,91,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,94,InHead {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,95,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,96,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,97,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,98,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,100,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,101,case Comment:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,102,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,103,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,104,case Doctype:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,105,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,106,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,107,case StartTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,108,Token.StartTag start = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,109,String name = start.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,110,"if (name.equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,111,"return InBody.process(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,112,"} else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""command"", ""link"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,113,Element el = tb.insertEmpty(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,114,// jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,115,"if (name.equals(""base"") && el.hasAttr(""href""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,116,tb.setBaseUri(el);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,117,"} else if (name.equals(""meta"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,118,Element meta = tb.insertEmpty(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,119,// todo: charset switches
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,120,"} else if (name.equals(""title"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,121,"handleRcData(start, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,122,"} else if (StringUtil.in(name, ""noframes"", ""style"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,123,"handleRawtext(start, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,124,"} else if (name.equals(""noscript"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,125,"// else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,126,tb.insert(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,127,tb.transition(InHeadNoscript);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,128,"} else if (name.equals(""script"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,129,// skips some script rules as won't execute them
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,130,tb.insert(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,131,tb.tokeniser.transition(TokeniserState.ScriptData);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,132,tb.markInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,133,tb.transition(Text);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,134,"} else if (name.equals(""head"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,135,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,136,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,137,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,138,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,140,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,141,case EndTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,142,Token.EndTag end = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,143,name = end.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,144,"if (name.equals(""head"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,145,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,146,tb.transition(AfterHead);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,147,"} else if (StringUtil.in(name, ""body"", ""html"", ""br"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,148,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,149,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,150,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,151,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,153,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,154,default:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,155,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,157,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,160,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,161,"tb.process(new Token.EndTag(""head""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,162,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,165,InHeadNoscript {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,166,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,167,if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,168,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,169,"} else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,170,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,171,"} else if (t.isEndTag() && t.asEndTag().name().equals(""noscript"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,172,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,173,tb.transition(InHead);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,174,"} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,175,"""basefont"", ""bgsound"", ""link"", ""meta"", ""noframes"", ""style""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,176,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,177,"} else if (t.isEndTag() && t.asEndTag().name().equals(""br"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,178,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,179,"} else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), ""head"", ""noscript"")) || t.isEndTag()) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,180,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,181,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,182,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,183,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,185,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,188,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,189,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,190,"tb.process(new Token.EndTag(""noscript""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,191,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,194,AfterHead {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,195,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,196,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,197,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,198,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,199,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,200,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,201,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,202,} else if (t.isStartTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,203,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,204,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,205,"if (name.equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,206,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,207,"} else if (name.equals(""body"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,208,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,209,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,210,tb.transition(InBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,211,"} else if (name.equals(""frameset"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,212,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,213,tb.transition(InFrameset);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,214,"} else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""link"", ""meta"", ""noframes"", ""script"", ""style"", ""title"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,215,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,216,Element head = tb.getHeadElement();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,217,tb.push(head);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,218,"tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,219,tb.removeFromStack(head);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,220,"} else if (name.equals(""head"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,221,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,222,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,223,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,224,"anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,226,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,227,"if (StringUtil.in(t.asEndTag().name(), ""body"", ""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,228,"anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,229,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,230,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,231,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,233,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,234,"anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,236,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,239,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,240,"tb.process(new Token.StartTag(""body""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,241,tb.framesetOk(true);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,242,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,245,InBody {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,246,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,247,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,248,case Character: {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,249,Token.Character c = t.asCharacter();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,250,if (c.getData().equals(nullString)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,251,// todo confirm that check
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,252,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,253,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,254,} else if (isWhitespace(c)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,255,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,256,tb.insert(c);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,257,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,258,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,259,tb.insert(c);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,260,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,262,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,264,case Comment: {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,265,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,266,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,268,case Doctype: {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,269,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,270,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,272,case StartTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,273,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,274,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,275,"if (name.equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,276,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,277,// merge attributes onto real html
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,278,Element html = tb.getStack().getFirst();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,279,for (Attribute attribute : startTag.getAttributes()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,280,if (!html.hasAttr(attribute.getKey()))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,281,html.attributes().put(attribute);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,283,"} else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""command"", ""link"", ""meta"", ""noframes"", ""style"", ""title"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,284,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,285,"} else if (name.equals(""body"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,286,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,287,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,288,"if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(""body""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,289,// only in fragment case
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,290,return false; // ignore
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,291,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,292,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,293,Element body = stack.get(1);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,294,for (Attribute attribute : startTag.getAttributes()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,295,if (!body.hasAttr(attribute.getKey()))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,296,body.attributes().put(attribute);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,299,"} else if (name.equals(""frameset"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,300,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,301,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,302,"if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(""body""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,303,// only in fragment case
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,304,return false; // ignore
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,305,} else if (!tb.framesetOk()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,306,return false; // ignore frameset
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,307,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,308,Element second = stack.get(1);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,309,if (second.parent() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,310,second.remove();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,311,// pop up to html element
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,312,while (stack.size() > 1)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,313,stack.removeLast();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,314,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,315,tb.transition(InFrameset);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,317,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,318,"""address"", ""article"", ""aside"", ""blockquote"", ""center"", ""details"", ""dir"", ""div"", ""dl"","
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,319,"""fieldset"", ""figcaption"", ""figure"", ""footer"", ""header"", ""hgroup"", ""menu"", ""nav"", ""ol"","
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,320,"""p"", ""section"", ""summary"", ""ul"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,321,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,322,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,324,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,325,"} else if (StringUtil.in(name, ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,326,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,327,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,329,"if (StringUtil.in(tb.currentElement().nodeName(), ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,330,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,331,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,333,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,334,"} else if (StringUtil.in(name, ""pre"", ""listing"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,335,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,336,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,338,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,339,// todo: ignore LF if next token
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,340,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,341,"} else if (name.equals(""form"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,342,if (tb.getFormElement() != null) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,343,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,344,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,346,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,347,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,349,Element form = tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,350,tb.setFormElement(form);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,351,"} else if (name.equals(""li"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,352,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,353,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,354,for (int i = stack.size() - 1; i > 0; i--) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,355,Element el = stack.get(i);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,356,"if (el.nodeName().equals(""li"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,357,"tb.process(new Token.EndTag(""li""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,358,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,360,"if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), ""address"", ""div"", ""p""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,361,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,363,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,364,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,366,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,367,"} else if (StringUtil.in(name, ""dd"", ""dt"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,368,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,369,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,370,for (int i = stack.size() - 1; i > 0; i--) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,371,Element el = stack.get(i);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,372,"if (StringUtil.in(el.nodeName(), ""dd"", ""dt"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,373,tb.process(new Token.EndTag(el.nodeName()));
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,374,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,376,"if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), ""address"", ""div"", ""p""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,377,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,379,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,380,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,382,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,383,"} else if (name.equals(""plaintext"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,384,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,385,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,387,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,388,"tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,389,"} else if (name.equals(""button"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,390,"if (tb.inButtonScope(""button"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,391,// close and reprocess
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,392,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,393,"tb.process(new Token.EndTag(""button""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,394,tb.process(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,395,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,396,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,397,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,398,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,400,"} else if (name.equals(""a"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,401,"if (tb.getActiveFormattingElement(""a"") != null) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,402,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,403,"tb.process(new Token.EndTag(""a""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,405,// still on stack?
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,406,"Element remainingA = tb.getFromStack(""a"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,407,if (remainingA != null) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,408,tb.removeFromActiveFormattingElements(remainingA);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,409,tb.removeFromStack(remainingA);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,412,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,413,Element a = tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,414,tb.pushActiveFormattingElements(a);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,415,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,416,"""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""s"", ""small"", ""strike"", ""strong"", ""tt"", ""u"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,417,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,418,Element el = tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,419,tb.pushActiveFormattingElements(el);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,420,"} else if (name.equals(""nobr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,421,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,422,"if (tb.inScope(""nobr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,423,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,424,"tb.process(new Token.EndTag(""nobr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,425,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,427,Element el = tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,428,tb.pushActiveFormattingElements(el);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,429,"} else if (StringUtil.in(name, ""applet"", ""marquee"", ""object"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,430,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,431,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,432,tb.insertMarkerToFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,433,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,434,"} else if (name.equals(""table"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,435,"if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,436,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,438,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,439,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,440,tb.transition(InTable);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,441,"} else if (StringUtil.in(name, ""area"", ""br"", ""embed"", ""img"", ""keygen"", ""wbr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,442,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,443,tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,444,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,445,"} else if (name.equals(""input"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,446,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,447,Element el = tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,448,"if (!el.attr(""type"").equalsIgnoreCase(""hidden""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,449,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,450,"} else if (StringUtil.in(name, ""param"", ""source"", ""track"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,451,tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,452,"} else if (name.equals(""hr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,453,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,454,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,456,tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,457,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,458,"} else if (name.equals(""image"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,459,// we're not supposed to ask.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,460,"startTag.name(""img"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,461,return tb.process(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,462,"} else if (name.equals(""isindex"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,463,// how much do we care about the early 90s?
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,464,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,465,if (tb.getFormElement() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,466,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,468,tb.tokeniser.acknowledgeSelfClosingFlag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,469,"tb.process(new Token.StartTag(""form""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,470,"if (startTag.attributes.hasKey(""action"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,471,Element form = tb.getFormElement();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,472,"form.attr(""action"", startTag.attributes.get(""action""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,474,"tb.process(new Token.StartTag(""hr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,475,"tb.process(new Token.StartTag(""label""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,476,// hope you like english.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,477,"String prompt = startTag.attributes.hasKey(""prompt"") ?"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,478,"startTag.attributes.get(""prompt"") :"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,479,"""This is a searchable index. Enter search keywords: "";"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,481,tb.process(new Token.Character(prompt));
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,483,// input
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,484,Attributes inputAttribs = new Attributes();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,485,for (Attribute attr : startTag.attributes) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,486,"if (!StringUtil.in(attr.getKey(), ""name"", ""action"", ""prompt""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,487,inputAttribs.put(attr);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,489,"inputAttribs.put(""name"", ""isindex"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,490,"tb.process(new Token.StartTag(""input"", inputAttribs));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,491,"tb.process(new Token.EndTag(""label""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,492,"tb.process(new Token.StartTag(""hr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,493,"tb.process(new Token.EndTag(""form""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,494,"} else if (name.equals(""textarea"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,495,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,496,"// todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,497,tb.tokeniser.transition(TokeniserState.Rcdata);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,498,tb.markInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,499,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,500,tb.transition(Text);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,501,"} else if (name.equals(""xmp"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,502,"if (tb.inButtonScope(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,503,"tb.process(new Token.EndTag(""p""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,505,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,506,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,507,"handleRawtext(startTag, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,508,"} else if (name.equals(""iframe"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,509,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,510,"handleRawtext(startTag, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,511,"} else if (name.equals(""noembed"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,512,// also handle noscript if script enabled
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,513,"handleRawtext(startTag, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,514,"} else if (name.equals(""select"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,515,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,516,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,517,tb.framesetOk(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,519,TreeBuilderState state = tb.state();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,520,if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,521,tb.transition(InSelectInTable);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,522,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,523,tb.transition(InSelect);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,524,"} else if (StringUtil.in(""optgroup"", ""option"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,525,"if (tb.currentElement().nodeName().equals(""option""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,526,"tb.process(new Token.EndTag(""option""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,527,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,528,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,529,"} else if (StringUtil.in(""rp"", ""rt"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,530,"if (tb.inScope(""ruby"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,531,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,532,"if (!tb.currentElement().nodeName().equals(""ruby"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,533,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,534,"tb.popStackToBefore(""ruby""); // i.e. close up to but not include name"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,536,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,538,"} else if (name.equals(""math"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,539,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,540,"// todo: handle A start tag whose tag name is ""math"" (i.e. foreign, mathml)"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,541,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,542,tb.tokeniser.acknowledgeSelfClosingFlag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,543,"} else if (name.equals(""svg"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,544,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,545,"// todo: handle A start tag whose tag name is ""svg"" (xlink, svg)"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,546,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,547,tb.tokeniser.acknowledgeSelfClosingFlag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,548,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,549,"""caption"", ""col"", ""colgroup"", ""frame"", ""head"", ""tbody"", ""td"", ""tfoot"", ""th"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,550,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,551,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,552,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,553,tb.reconstructFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,554,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,556,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,558,case EndTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,559,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,560,name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,561,"if (name.equals(""body"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,562,"if (!tb.inScope(""body"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,563,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,564,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,565,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,566,"// todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,567,tb.transition(AfterBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,569,"} else if (name.equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,570,"boolean notIgnored = tb.process(new Token.EndTag(""body""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,571,if (notIgnored)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,572,return tb.process(endTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,573,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,574,"""address"", ""article"", ""aside"", ""blockquote"", ""button"", ""center"", ""details"", ""dir"", ""div"","
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,575,"""dl"", ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""header"", ""hgroup"", ""listing"", ""menu"","
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,576,"""nav"", ""ol"", ""pre"", ""section"", ""summary"", ""ul"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,577,// todo: refactor these lookups
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,578,if (!tb.inScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,579,// nothing to close
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,580,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,581,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,582,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,583,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,584,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,585,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,586,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,588,"} else if (name.equals(""form"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,589,Element currentForm = tb.getFormElement();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,590,tb.setFormElement(null);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,591,if (currentForm == null || !tb.inScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,592,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,593,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,594,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,595,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,596,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,597,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,598,// remove currentForm from stack. will shift anything under up.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,599,tb.removeFromStack(currentForm);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,601,"} else if (name.equals(""p"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,602,if (!tb.inButtonScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,603,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,604,"tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,605,return tb.process(endTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,606,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,607,tb.generateImpliedEndTags(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,608,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,609,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,610,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,612,"} else if (name.equals(""li"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,613,if (!tb.inListItemScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,614,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,615,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,616,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,617,tb.generateImpliedEndTags(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,618,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,619,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,620,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,622,"} else if (StringUtil.in(name, ""dd"", ""dt"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,623,if (!tb.inScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,624,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,625,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,626,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,627,tb.generateImpliedEndTags(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,628,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,629,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,630,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,632,"} else if (StringUtil.in(name, ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,633,"if (!tb.inScope(new String[]{""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6""})) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,634,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,635,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,636,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,637,tb.generateImpliedEndTags(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,638,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,639,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,640,"tb.popStackToClose(""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,642,"} else if (name.equals(""sarcasm"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,643,// *sigh*
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,644,"return anyOtherEndTag(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,645,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,646,"""a"", ""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""nobr"", ""s"", ""small"", ""strike"", ""strong"", ""tt"", ""u"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,647,// Adoption Agency Algorithm.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,648,OUTER:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,649,for (int i = 0; i < 8; i++) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,650,Element formatEl = tb.getActiveFormattingElement(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,651,if (formatEl == null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,652,"return anyOtherEndTag(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,653,else if (!tb.onStack(formatEl)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,654,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,655,tb.removeFromActiveFormattingElements(formatEl);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,656,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,657,} else if (!tb.inScope(formatEl.nodeName())) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,658,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,659,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,660,} else if (tb.currentElement() != formatEl)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,661,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,663,Element furthestBlock = null;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,664,Element commonAncestor = null;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,665,boolean seenFormattingElement = false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,666,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,667,for (int si = 0; si < stack.size(); si++) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,668,Element el = stack.get(si);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,669,if (el == formatEl) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,670,commonAncestor = stack.get(si - 1);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,671,seenFormattingElement = true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,672,} else if (seenFormattingElement && tb.isSpecial(el)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,673,furthestBlock = el;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,674,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,677,if (furthestBlock == null) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,678,tb.popStackToClose(formatEl.nodeName());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,679,tb.removeFromActiveFormattingElements(formatEl);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,680,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,683,// todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,684,// does that mean: int pos of format el in list?
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,685,Element node = furthestBlock;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,686,Element lastNode = furthestBlock;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,687,INNER:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,688,for (int j = 0; j < 3; j++) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,689,if (tb.onStack(node))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,690,node = tb.aboveOnStack(node);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,691,if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,692,tb.removeFromStack(node);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,693,continue INNER;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,694,} else if (node == formatEl)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,695,break INNER;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,697,"Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,698,"tb.replaceActiveFormattingElement(node, replacement);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,699,"tb.replaceOnStack(node, replacement);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,700,node = replacement;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,702,if (lastNode == furthestBlock) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,703,// todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,704,"// not getting how this bookmark both straddles the element above, but is inbetween here..."
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,706,if (lastNode.parent() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,707,lastNode.remove();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,708,node.appendChild(lastNode);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,710,lastNode = node;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,713,"if (StringUtil.in(commonAncestor.nodeName(), ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,714,if (lastNode.parent() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,715,lastNode.remove();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,716,tb.insertInFosterParent(lastNode);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,717,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,718,if (lastNode.parent() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,719,lastNode.remove();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,720,commonAncestor.appendChild(lastNode);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,723,"Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,724,Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,725,for (Node childNode : childNodes) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,726,adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,728,furthestBlock.appendChild(adopter);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,729,tb.removeFromActiveFormattingElements(formatEl);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,730,// todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,731,tb.removeFromStack(formatEl);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,732,"tb.insertOnStackAfter(furthestBlock, adopter);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,734,"} else if (StringUtil.in(name, ""applet"", ""marquee"", ""object"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,735,"if (!tb.inScope(""name"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,736,if (!tb.inScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,737,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,738,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,740,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,741,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,742,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,743,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,744,tb.clearFormattingElementsToLastMarker();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,746,"} else if (name.equals(""br"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,747,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,748,"tb.process(new Token.StartTag(""br""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,749,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,750,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,751,"return anyOtherEndTag(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,754,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,755,case EOF:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,756,"// todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,757,// stop parsing
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,758,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,760,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,763,"boolean anyOtherEndTag(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,764,String name = t.asEndTag().name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,765,LinkedList<Element> stack = tb.getStack();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,766,Iterator<Element> it = stack.descendingIterator();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,767,while (it.hasNext()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,768,Element node = it.next();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,769,if (node.nodeName().equals(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,770,tb.generateImpliedEndTags(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,771,if (!name.equals(tb.currentElement().nodeName()))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,772,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,773,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,774,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,775,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,776,if (tb.isSpecial(node)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,777,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,778,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,782,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,785,Text {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,786,"// in script, style etc. normally treated as data tags"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,787,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,788,if (t.isCharacter()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,789,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,790,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,791,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,792,// if current node is script: already started
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,793,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,794,tb.transition(tb.originalState());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,795,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,796,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,797,"// if: An end tag whose tag name is ""script"" -- scripting nesting level, if evaluating scripts"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,798,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,799,tb.transition(tb.originalState());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,801,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,804,InTable {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,805,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,806,if (t.isCharacter()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,807,tb.newPendingTableCharacters();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,808,tb.markInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,809,tb.transition(InTableText);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,810,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,811,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,812,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,813,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,814,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,815,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,816,} else if (t.isStartTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,817,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,818,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,819,"if (name.equals(""caption"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,820,tb.clearStackToTableContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,821,tb.insertMarkerToFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,822,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,823,tb.transition(InCaption);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,824,"} else if (name.equals(""colgroup"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,825,tb.clearStackToTableContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,826,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,827,tb.transition(InColumnGroup);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,828,"} else if (name.equals(""col"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,829,"tb.process(new Token.StartTag(""colgroup""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,830,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,831,"} else if (StringUtil.in(name, ""tbody"", ""tfoot"", ""thead"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,832,tb.clearStackToTableContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,833,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,834,tb.transition(InTableBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,835,"} else if (StringUtil.in(name, ""td"", ""th"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,836,"tb.process(new Token.StartTag(""tbody""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,837,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,838,"} else if (name.equals(""table"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,839,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,840,"boolean processed = tb.process(new Token.EndTag(""table""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,841,if (processed) // only ignored if in fragment
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,842,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,843,"} else if (StringUtil.in(name, ""style"", ""script"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,844,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,845,"} else if (name.equals(""input"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,846,"if (!startTag.attributes.get(""type"").equalsIgnoreCase(""hidden"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,847,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,848,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,849,tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,851,"} else if (name.equals(""form"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,852,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,853,if (tb.getFormElement() != null)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,854,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,855,else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,856,Element form = tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,857,tb.setFormElement(form);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,859,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,860,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,862,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,863,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,864,String name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,866,"if (name.equals(""table"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,867,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,868,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,869,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,870,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,871,"tb.popStackToClose(""table"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,873,tb.resetInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,874,"} else if (StringUtil.in(name,"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,875,"""body"", ""caption"", ""col"", ""colgroup"", ""html"", ""tbody"", ""td"", ""tfoot"", ""th"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,876,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,877,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,878,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,879,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,881,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,882,"if (tb.currentElement().nodeName().equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,883,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,884,return true; // stops parsing
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,886,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,889,"boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,890,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,891,boolean processed = true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,892,"if (StringUtil.in(tb.currentElement().nodeName(), ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,893,tb.setFosterInserts(true);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,894,"processed = tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,895,tb.setFosterInserts(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,896,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,897,"processed = tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,899,return processed;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,902,InTableText {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,903,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,904,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,905,case Character:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,906,Token.Character c = t.asCharacter();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,907,if (c.getData().equals(nullString)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,908,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,909,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,910,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,911,tb.getPendingTableCharacters().add(c);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,913,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,914,default:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,915,if (tb.getPendingTableCharacters().size() > 0) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,916,for (Token.Character character : tb.getPendingTableCharacters()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,917,if (!isWhitespace(character)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,918,// InTable anything else section:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,919,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,920,"if (StringUtil.in(tb.currentElement().nodeName(), ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,921,tb.setFosterInserts(true);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,922,"tb.process(character, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,923,tb.setFosterInserts(false);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,924,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,925,"tb.process(character, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,927,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,928,tb.insert(character);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,930,tb.newPendingTableCharacters();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,932,tb.transition(tb.originalState());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,933,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,935,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,938,InCaption {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,939,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,940,"if (t.isEndTag() && t.asEndTag().name().equals(""caption"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,941,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,942,String name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,943,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,944,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,945,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,946,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,947,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,948,"if (!tb.currentElement().nodeName().equals(""caption""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,949,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,950,"tb.popStackToClose(""caption"");"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,951,tb.clearFormattingElementsToLastMarker();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,952,tb.transition(InTable);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,954,} else if ((
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,955,"t.isStartTag() && StringUtil.in(t.asStartTag().name(),"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,956,"""caption"", ""col"", ""colgroup"", ""tbody"", ""td"", ""tfoot"", ""th"", ""thead"", ""tr"") ||"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,957,"t.isEndTag() && t.asEndTag().name().equals(""table""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,959,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,960,"boolean processed = tb.process(new Token.EndTag(""caption""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,961,if (processed)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,962,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,963,"} else if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,964,"""body"", ""col"", ""colgroup"", ""html"", ""tbody"", ""td"", ""tfoot"", ""th"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,965,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,966,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,967,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,968,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,970,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,973,InColumnGroup {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,974,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,975,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,976,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,977,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,979,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,980,case Comment:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,981,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,982,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,983,case Doctype:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,984,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,985,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,986,case StartTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,987,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,988,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,989,"if (name.equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,990,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,991,"else if (name.equals(""col""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,992,tb.insertEmpty(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,993,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,994,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,995,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,996,case EndTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,997,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,998,name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,999,"if (name.equals(""colgroup"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1000,"if (tb.currentElement().nodeName().equals(""html"")) { // frag case"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1001,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1002,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1003,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1004,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1005,tb.transition(InTable);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1007,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1008,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1009,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1010,case EOF:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1011,"if (tb.currentElement().nodeName().equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1012,return true; // stop parsing; frag case
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1013,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1014,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1015,default:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1016,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1018,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1021,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1022,"boolean processed = tb.process(new Token.EndTag(""colgroup""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1023,if (processed) // only ignored in frag case
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1024,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1025,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1028,InTableBody {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1029,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1030,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1031,case StartTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1032,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1033,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1034,"if (name.equals(""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1035,tb.clearStackToTableBodyContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1036,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1037,tb.transition(InRow);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1038,"} else if (StringUtil.in(name, ""th"", ""td"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1039,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1040,"tb.process(new Token.StartTag(""tr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1041,return tb.process(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1042,"} else if (StringUtil.in(name, ""caption"", ""col"", ""colgroup"", ""tbody"", ""tfoot"", ""thead"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1043,"return exitTableBody(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1044,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1045,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1046,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1047,case EndTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1048,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1049,name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1050,"if (StringUtil.in(name, ""tbody"", ""tfoot"", ""thead"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1051,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1052,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1053,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1054,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1055,tb.clearStackToTableBodyContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1056,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1057,tb.transition(InTable);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1059,"} else if (name.equals(""table"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1060,"return exitTableBody(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1061,"} else if (StringUtil.in(name, ""body"", ""caption"", ""col"", ""colgroup"", ""html"", ""td"", ""th"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1062,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1063,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1064,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1065,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1066,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1067,default:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1068,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1070,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1073,"private boolean exitTableBody(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1074,"if (!(tb.inTableScope(""tbody"") || tb.inTableScope(""thead"") || tb.inScope(""tfoot""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1075,// frag case
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1076,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1077,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1079,tb.clearStackToTableBodyContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1080,"tb.process(new Token.EndTag(tb.currentElement().nodeName())); // tbody, tfoot, thead"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1081,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1084,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1085,"return tb.process(t, InTable);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1088,InRow {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1089,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1090,if (t.isStartTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1091,Token.StartTag startTag = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1092,String name = startTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1094,"if (StringUtil.in(name, ""th"", ""td"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1095,tb.clearStackToTableRowContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1096,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1097,tb.transition(InCell);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1098,tb.insertMarkerToFormattingElements();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1099,"} else if (StringUtil.in(name, ""caption"", ""col"", ""colgroup"", ""tbody"", ""tfoot"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1100,"return handleMissingTr(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1101,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1102,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1104,} else if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1105,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1106,String name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1108,"if (name.equals(""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1109,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1110,tb.error(this); // frag
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1111,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1113,tb.clearStackToTableRowContext();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1114,tb.pop(); // tr
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1115,tb.transition(InTableBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1116,"} else if (name.equals(""table"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1117,"return handleMissingTr(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1118,"} else if (StringUtil.in(name, ""tbody"", ""tfoot"", ""thead"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1119,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1120,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1121,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1123,"tb.process(new Token.EndTag(""tr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1124,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1125,"} else if (StringUtil.in(name, ""body"", ""caption"", ""col"", ""colgroup"", ""html"", ""td"", ""th"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1126,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1127,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1128,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1129,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1131,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1132,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1134,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1137,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1138,"return tb.process(t, InTable);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1141,"private boolean handleMissingTr(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1142,"boolean processed = tb.process(new Token.EndTag(""tr""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1143,if (processed)
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1144,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1145,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1146,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1149,InCell {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1150,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1151,if (t.isEndTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1152,Token.EndTag endTag = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1153,String name = endTag.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1155,"if (StringUtil.in(name, ""td"", ""th"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1156,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1157,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1158,tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1159,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1161,tb.generateImpliedEndTags();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1162,if (!tb.currentElement().nodeName().equals(name))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1163,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1164,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1165,tb.clearFormattingElementsToLastMarker();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1166,tb.transition(InRow);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1167,"} else if (StringUtil.in(name, ""body"", ""caption"", ""col"", ""colgroup"", ""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1168,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1169,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1170,"} else if (StringUtil.in(name, ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1171,if (!tb.inTableScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1172,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1173,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1175,closeCell(tb);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1176,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1177,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1178,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1180,} else if (t.isStartTag() &&
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1181,"StringUtil.in(t.asStartTag().name(),"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1182,"""caption"", ""col"", ""colgroup"", ""tbody"", ""td"", ""tfoot"", ""th"", ""thead"", ""tr"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1183,"if (!(tb.inTableScope(""td"") || tb.inTableScope(""th""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1184,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1185,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1187,closeCell(tb);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1188,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1189,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1190,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1192,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1195,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1196,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1199,private void closeCell(TreeBuilder tb) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1200,"if (tb.inTableScope(""td""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1201,"tb.process(new Token.EndTag(""td""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1202,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1203,"tb.process(new Token.EndTag(""th"")); // only here if th or td in scope"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1206,InSelect {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1207,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1208,switch (t.type) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1209,case Character:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1210,Token.Character c = t.asCharacter();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1211,if (c.getData().equals(nullString)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1212,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1213,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1214,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1215,tb.insert(c);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1217,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1218,case Comment:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1219,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1220,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1221,case Doctype:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1222,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1223,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1224,case StartTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1225,Token.StartTag start = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1226,String name = start.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1227,"if (name.equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1228,"return tb.process(start, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1229,"else if (name.equals(""option"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1230,"tb.process(new Token.EndTag(""option""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1231,tb.insert(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1232,"} else if (name.equals(""optgroup"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1233,"if (tb.currentElement().nodeName().equals(""option""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1234,"tb.process(new Token.EndTag(""option""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1235,"else if (tb.currentElement().nodeName().equals(""optgroup""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1236,"tb.process(new Token.EndTag(""optgroup""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1237,tb.insert(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1238,"} else if (name.equals(""select"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1239,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1240,"return tb.process(new Token.EndTag(""select""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1241,"} else if (StringUtil.in(name, ""input"", ""keygen"", ""textarea"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1242,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1243,"if (!tb.inSelectScope(""select""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1244,return false; // frag
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1245,"tb.process(new Token.EndTag(""select""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1246,return tb.process(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1247,"} else if (name.equals(""script"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1248,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1249,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1250,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1252,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1253,case EndTag:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1254,Token.EndTag end = t.asEndTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1255,name = end.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1256,"if (name.equals(""optgroup"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1257,"if (tb.currentElement().nodeName().equals(""option"") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(""optgroup""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1258,"tb.process(new Token.EndTag(""option""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1259,"if (tb.currentElement().nodeName().equals(""optgroup""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1260,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1261,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1262,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1263,"} else if (name.equals(""option"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1264,"if (tb.currentElement().nodeName().equals(""option""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1265,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1266,else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1267,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1268,"} else if (name.equals(""select"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1269,if (!tb.inSelectScope(name)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1270,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1271,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1272,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1273,tb.popStackToClose(name);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1274,tb.resetInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1276,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1277,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1278,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1279,case EOF:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1280,"if (!tb.currentElement().nodeName().equals(""html""))"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1281,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1282,break;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1283,default:
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1284,"return anythingElse(t, tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1286,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1289,"private boolean anythingElse(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1290,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1291,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1294,InSelectInTable {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1295,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1296,"if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), ""caption"", ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"", ""td"", ""th"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1297,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1298,"tb.process(new Token.EndTag(""select""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1299,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1300,"} else if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), ""caption"", ""table"", ""tbody"", ""tfoot"", ""thead"", ""tr"", ""td"", ""th"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1301,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1302,if (tb.inTableScope(t.asEndTag().name())) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1303,"tb.process(new Token.EndTag(""select""));"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1304,return (tb.process(t));
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1305,} else
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1306,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1307,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1308,"return tb.process(t, InSelect);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1312,AfterBody {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1313,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1314,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1315,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1316,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1317,tb.insert(t.asComment()); // into html node
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1318,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1319,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1320,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1321,"} else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1322,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1323,"} else if (t.isEndTag() && t.asEndTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1324,if (tb.isFragmentParsing()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1325,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1326,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1327,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1328,tb.transition(AfterAfterBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1330,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1331,// chillax! we're done
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1332,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1333,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1334,tb.transition(InBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1335,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1337,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1340,InFrameset {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1341,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1342,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1343,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1344,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1345,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1346,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1347,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1348,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1349,} else if (t.isStartTag()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1350,Token.StartTag start = t.asStartTag();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1351,String name = start.name();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1352,"if (name.equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1353,"return tb.process(start, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1354,"} else if (name.equals(""frameset"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1355,tb.insert(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1356,"} else if (name.equals(""frame"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1357,tb.insertEmpty(start);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1358,"} else if (name.equals(""noframes"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1359,"return tb.process(start, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1360,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1361,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1362,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1364,"} else if (t.isEndTag() && t.asEndTag().name().equals(""frameset"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1365,"if (tb.currentElement().nodeName().equals(""html"")) { // frag"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1366,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1367,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1368,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1369,tb.pop();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1370,"if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(""frameset"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1371,tb.transition(AfterFrameset);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1374,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1375,"if (!tb.currentElement().nodeName().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1376,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1377,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1379,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1380,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1381,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1383,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1386,AfterFrameset {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1387,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1388,if (isWhitespace(t)) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1389,tb.insert(t.asCharacter());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1390,} else if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1391,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1392,} else if (t.isDoctype()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1393,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1394,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1395,"} else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1396,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1397,"} else if (t.isEndTag() && t.asEndTag().name().equals(""html"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1398,tb.transition(AfterAfterFrameset);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1399,"} else if (t.isStartTag() && t.asStartTag().name().equals(""noframes"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1400,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1401,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1402,"// cool your heels, we're complete"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1403,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1404,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1405,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1407,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1410,AfterAfterBody {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1411,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1412,if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1413,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1414,"} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(""html""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1415,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1416,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1417,// nice work chuck
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1418,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1419,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1420,tb.transition(InBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1421,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1423,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1426,AfterAfterFrameset {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1427,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1428,if (t.isComment()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1429,tb.insert(t.asComment());
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1430,"} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(""html""))) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1431,"return tb.process(t, InBody);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1432,} else if (t.isEOF()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1433,// nice work chuck
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1434,"} else if (t.isStartTag() && t.asStartTag().name().equals(""nofrmes"")) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1435,"return tb.process(t, InHead);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1436,} else {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1437,tb.error(this);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1438,tb.transition(InBody);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1439,return tb.process(t);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1441,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1444,ForeignContent {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1445,"boolean process(Token t, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1446,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1447,// todo: implement. Also; how do we get here?
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1451,private static String nullString = String.valueOf(0x0000);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1453,"abstract boolean process(Token t, TreeBuilder tb);"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1455,private static boolean isWhitespace(Token t) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1456,if (t.isCharacter()) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1457,String data = t.asCharacter().getData();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1458,"// todo: this checks more than spec - ""\t"", ""\n"", ""\f"", ""\r"", "" """
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1459,for (int i = 0; i < data.length(); i++) {
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1460,char c = data.charAt(i);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1461,if (!Character.isWhitespace(c))
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1462,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1464,return true;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1466,return false;
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1469,"private static void handleRcData(Token.StartTag startTag, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1470,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1471,tb.tokeniser.transition(TokeniserState.Rcdata);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1472,tb.markInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1473,tb.transition(Text);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1476,"private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb) {"
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1477,tb.insert(startTag);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1478,tb.tokeniser.transition(TokeniserState.Rawtext);
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1479,tb.markInsertionMode();
True,src/main/java/org/jsoup/parser/TreeBuilderState.java,src/main/java/org/jsoup/parser/TreeBuilderState.java,1480,tb.transition(Text);
False,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,58,"ocument doc = Jsoup.parse(""<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body></html>"");"
False,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,59,"ssertEquals(""<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>"", TextUtil.stripNewlines(doc.html()));"
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,58,"Document doc = Jsoup.parse(""<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>"");"
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,59,"assertEquals(""<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p><p>four</p></body></html>"", TextUtil.stripNewlines(doc.html()));"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,279,"lement table = doc.select(""table"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,279,"Element table = doc.select(""tbody"").first();"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,282,"ssertEquals(""<table><tr><td>1</td></tr><tr><td>2</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,282,"assertEquals(""<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,287,"lement table = doc.select(""table"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,287,"Element table = doc.select(""tbody"").first();"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,290,"ssertEquals(""<table><tr><td>2</td></tr><tr><td>1</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,290,"assertEquals(""<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,88,@Test public void before() {
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,89,"Document doc = Jsoup.parse(""<p>One <b>two</b> three</p>"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,90,"Element newNode = new Element(Tag.valueOf(""em""), """");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,91,"newNode.appendText(""four"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,93,"doc.select(""b"").first().before(newNode);"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,94,"assertEquals(""<p>One <em>four</em><b>two</b> three</p>"", doc.body().html());"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,96,"doc.select(""b"").first().before(""<i>five</i>"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,97,"assertEquals(""<p>One <em>four</em><i>five</i><b>two</b> three</p>"", doc.body().html());"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,100,@Test public void after() {
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,101,"Document doc = Jsoup.parse(""<p>One <b>two</b> three</p>"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,102,"Element newNode = new Element(Tag.valueOf(""em""), """");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,103,"newNode.appendText(""four"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,105,"doc.select(""b"").first().after(newNode);"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,106,"assertEquals(""<p>One <b>two</b><em>four</em> three</p>"", doc.body().html());"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,108,"doc.select(""b"").first().after(""<i>five</i>"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,109,"assertEquals(""<p>One <b>two</b><i>five</i><em>four</em> three</p>"", doc.body().html());"
False,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,40,Test public void emptyOnNoKey() {
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,40,@Test public void canStartWithEq() {
False,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,44,"ssertEquals(0, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,44,"assertEquals(1, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,45,"assertTrue(attr.hasKey(""=empty""));"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,46,"assertEquals("""", attr.get(""=empty""));"
False,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,50,"ssertEquals(""?foo=bar&mid&lt=true"", els.first().attr(""href""));"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,52,"assertEquals(""?foo=bar∣&lt=true"", els.first().attr(""href"")); // &mid gets to ∣ because not tailed by =; lt is so not unescaped"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,14,mport static org.junit.Assert.*;
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,14,import static org.junit.Assert.assertEquals;
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,15,import static org.junit.Assert.assertTrue;
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,44,"tring html = ""<p =a>One<a =a"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,45,"String html = ""<p =a>One<a <p>Something</p>Else"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,46,// this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,46,"ssertEquals(""<p>One<a></a></p>"", doc.body().html());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,48,"oc = Jsoup.parse(""<p ....."");"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,49,"ssertEquals(""<p></p>"", doc.body().html());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,51,"oc = Jsoup.parse(""<p .....<p!!"");"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,52,"ssertEquals(""<p></p>\n<p></p>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,48,"assertEquals(""<p =a=\""\"">One<a <p=\""\"">Something</a></p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,49,"""<a <p=\""\"">Else</a>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,51,"doc = Jsoup.parse(""<p .....>"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,52,"assertEquals(""<p .....=\""\""></p>"", doc.body().html());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,78,Test public void parsesUnterminatedTag() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,78,@Test public void dropsUnterminatedTag() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,79,"// jsoup used to parse this to <p>, but whatwg, webkit will drop."
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,81,"ssertEquals(1, doc.getElementsByTag(""p"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,82,"assertEquals(0, doc.getElementsByTag(""p"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,83,"assertEquals("""", doc.text());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,85,"lement d = doc.getElementById(""1"");"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,86,"ssertEquals(1, d.children().size());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,87,"lement p = doc.getElementById(""2"");"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,88,ssertNotNull(p);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,87,"assertEquals("""", doc.text());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,91,Test public void parsesUnterminatedAttribute() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,90,@Test public void dropsUnterminatedAttribute() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,91,"// jsoup used to parse this to <p id=""foo"">, but whatwg, webkit will drop."
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,94,"lement p = doc.getElementById(""foo"");"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,95,ssertNotNull(p);
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,96,"ssertEquals(""p"", p.tagName());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,94,"assertEquals("""", doc.text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,104,// bit weird this -- browsers and spec get stuck in select until there's a </select>
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,110,"ssertEquals(""Two"", options.last().text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,109,"assertEquals(""TwoThree"", options.last().text());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,141,"ssertEquals (""foo bar baz"", doc.text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,140,"assertEquals(""foo bar baz"", doc.text());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,179,Test public void createsImplicitLists() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,178,@Test public void doesNotCreateImplicitLists() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,179,"// old jsoup used to wrap this in <ul>, but that's not to spec"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,182,"lements ol = doc.select(""ul""); // should have created a default ul."
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,183,"ssertEquals(1, ol.size());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,184,"ssertEquals(2, ol.get(0).children().size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,182,"Elements ol = doc.select(""ul""); // should NOT have created a default ul."
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,183,"assertEquals(0, ol.size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,184,"Elements lis = doc.select(""li"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,185,"assertEquals(2, lis.size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,186,"assertEquals(""body"", lis.first().parent().tagName());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,197,Test public void createsImplicitTable() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,199,@Test public void discardsNakedTds() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,200,// jsoup used to make this into an implicit table; but browsers make it into a text run
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,200,"ssertEquals(""<table><tbody><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,203,"assertEquals(""Hello<p>There</p><p>now</p>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,204,Test public void handlesNestedImplicitTable() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,207,@Test public void handlesNestedImplicitTable() {
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,206,"ssertEquals(""<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,209,"assertEquals(""<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,222,"ssertEquals(""<table><caption>A caption</caption><tr><td>One</td><td>Two</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,225,"assertEquals(""<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,227,"ssertEquals(""<table> <tr><td>One </td><td><table><tr><td>Two</td></tr></table> <table><tr><td>Three</td></tr></table></td></tr></table>"","
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,228,extUtil.stripNewlines(doc.body().html()));
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,230,"assertEquals(""<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>"","
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,231,TextUtil.stripNewlines(doc.body().html()));
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,233,"ssertEquals(""<table><tr><td>One</td><td><table><tr><td>Two</td></tr></table></td><td>Three</td></tr></table>"","
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,234,extUtil.stripNewlines(doc.body().html()));
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,236,"assertEquals(""<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>"","
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,237,TextUtil.stripNewlines(doc.body().html()));
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,241,// todo -- don't handle base tags like this -- spec and browsers don't (any more -- v. old ones do).
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,242,"// instead, just maintain one baseUri in the doc"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,255,"tring h = ""<div id=1><![CData[<html>\n<foo><&amp;]]></div>""; // ""cdata"" insensitive. the &amp; in there should remain literal"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,260,"// todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,261,"String h = ""<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>""; // the &amp; in there should remain literal"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,292,@Test public void parsesBodyFragment() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,293,"String h = ""<!-- comment --><p><a href='foo'>One</a></p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,294,"Document doc = Jsoup.parseBodyFragment(h, ""http://example.com"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,295,"assertEquals(""<body><!-- comment --><p><a href=\""foo\"">One</a></p></body>"", TextUtil.stripNewlines(doc.body().outerHtml()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,296,"assertEquals(""http://example.com/foo"", doc.select(""a"").first().absUrl(""href""));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,287,"tring h = ""<foo:bar id=1/><abc:def id=2>Foo<p>Hello</abc:def><foo:bar>There</foo:bar>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,300,"// note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode."
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,301,"String h = ""<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>"";"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,292,Test public void handlesEmptyBlocks() {
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,293,"tring h = ""<div id=1/><div id=2><img /></div> <hr /> hr text"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,306,@Test public void handlesKnownEmptyBlocks() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,307,"// if known tag, must be defined as self closing to allow as self closing. unkown tags can be self closing."
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,308,"String h = ""<div id='1' /><div id=2><img /><img></div> <hr /> hr text <hr> hr text two"";"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,296,ssertTrue(div1.children().isEmpty());
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,311,assertTrue(!div1.children().isEmpty()); // <div /> is treated as <div>...
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,313,"assertTrue(doc.select(""hr"").last().children().isEmpty());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,314,"assertTrue(doc.select(""img"").first().children().isEmpty());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,315,"assertTrue(doc.select(""img"").last().children().isEmpty());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,318,@Test public void handlesSolidusAtAttributeEnd() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,319,"// this test makes sure [<a href=/>link</a>] is parsed as [<a href=""/"">link</a>], not [<a href="""" /><a>link</a>]"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,320,"String h = ""<a href=/>link</a>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,321,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,322,"assertEquals(""<a href=\""/\"">link</a>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,333,"// jsoup used to create a <dl>, but that's not to spec"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,310,"ssertEquals(4, doc.body().getElementsByTag(""dl"").first().children().size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,336,"assertEquals(0, doc.select(""dl"").size()); // no auto dl"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,337,"assertEquals(4, doc.select(""dt, dd"").size());"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,328,"ssertEquals(""<html><head><script></script><noscript></noscript></head><frameset><frame src=\""foo\"" /><frame src=\""foo\"" /></frameset><body></body></html>"","
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,355,"assertEquals(""<html><head><script></script><noscript></noscript></head><frameset><frame src=\""foo\"" /><frame src=\""foo\"" /></frameset></html>"","
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,357,// no body auto vivification
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,352,"ssertEquals(""<!doctype html><html><head><link /></head><body>One Two Four Three Five Six Seven </body></html>"","
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,353,extUtil.stripNewlines(doc.html())); // is spaced OK if not newline & space stripped
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,380,"assertEquals(""<!DOCTYPE html><html><head></head><body>OneTwoThree<link />FourFive Six Seven </body></html>"","
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,381,TextUtil.stripNewlines(doc.html()));
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,358,"ssertEquals(""<html><head></head><body></body></html>"",TextUtil.stripNewlines(doc.html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,386,"assertEquals(""<html><head></head><body></body></html>"", TextUtil.stripNewlines(doc.html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,403,"// jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,376,"ssertEquals(""<h1>Hello </h1><h2>There </h2><hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1></hgroup><p>stuff</p>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,405,"assertEquals(""<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,397,Test public void testAllowsImageInNoScriptInHead() {
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,398,/ some sites use this pattern as an analytics mechanism
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,426,@Test public void testNoImagesInNoScriptInHead() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,427,"// jsoup used to allow, but against spec if parsing with noscript"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,400,"ssertEquals(""<html><head><noscript><img src=\""foo\"" /></noscript></head><body><p>Hello</p></body></html>"", TextUtil.stripNewlines(doc.html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,429,"assertEquals(""<html><head><noscript></noscript></head><body><img src=\""foo\"" /><p>Hello</p></body></html>"", TextUtil.stripNewlines(doc.html()));"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,409,Test public void testFontFlowContents() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,438,@Test public void testFontFlowContents() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,444,@Test public void handlesMisnestedTagsBI() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,445,// whatwg: <b><i></b></i>
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,446,"String h = ""<p>1<b>2<i>3</b>4</i>5</p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,447,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,448,"assertEquals(""<p>1<b>2<i>3</i></b><i>4</i>5</p>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,449,"// adoption agency on </b>, reconstruction of formatters on 4."
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,452,@Test public void handlesMisnestedTagsBP() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,453,//  whatwg: <b><p></b></p>
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,454,"String h = ""<b>1<p>2</b>3</p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,455,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,456,"assertEquals(""<b>1</b>\n<p><b>2</b>3</p>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,459,@Test public void handlesUnexpectedMarkupInTables() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,460,"// whatwg - tests markers in active formatting (if they didn't work, would get in in table)"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,461,// also tests foster parenting
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,462,"String h = ""<table><b><tr><td>aaa</td></tr>bbb</table>ccc"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,463,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,464,"assertEquals(""<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,467,@Test public void handlesUnclosedFormattingElements() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,468,"// whatwg: formatting elements get collected and applied, but excess elements are thrown away"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,469,"String h = ""<!DOCTYPE html>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,470,"""<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,471,"""<p>X\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,472,"""<p><b><b class=x><b>X\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,473,"""<p></b></b></b></b></b></b>X"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,474,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,475,doc.outputSettings().indentAmount(0);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,476,"String want = ""<!DOCTYPE html>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,477,"""<html>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,478,"""<head></head>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,479,"""<body>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,480,"""<p><b class=\""x\""><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b>X </b></b></b></b></b></b></p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,481,"""<p><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b>X </b></b></b></b></b></p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,482,"""<p><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b><b><b class=\""x\""><b>X </b></b></b></b></b></b></b></b></p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,483,"""<p>X</p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,484,"""</body>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,485,"""</html>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,486,"assertEquals(want, doc.html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,489,@Test public void reconstructFormattingElements() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,490,// tests attributes and multi b
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,491,"String h = ""<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,492,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,493,"assertEquals(""<p><b class=\""one\"">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\""one\""><i><b>Hello</b></i></b></p>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,496,@Test public void reconstructFormattingElementsInTable() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,497,"// tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,498,// and the <i> inside the table and does not leak out.
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,499,"String h = ""<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,500,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,501,"String want = ""<p><b>One</b></p>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,502,"""<b> \n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,503,""" <table>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,504,"""  <tbody>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,505,"""   <tr>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,506,"""    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,507,"""   </tr>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,508,"""  </tbody>\n"" +"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,509,""" </table> <p>Five</p></b>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,510,"assertEquals(want, doc.body().html());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,513,@Test public void commentBeforeHtml() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,514,"String h = ""<!-- comment --><!-- comment 2 --><p>One</p>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,515,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,516,"assertEquals(""<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>"", TextUtil.stripNewlines(doc.html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,519,@Test public void emptyTdTag() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,520,"String h = ""<table><tr><td>One</td><td id='2' /></tr></table>"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,521,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,522,"assertEquals(""<td>One</td>\n<td id=\""2\""></td>"", doc.select(""tr"").first().html());"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,32,"ag p = Tag.valueOf(""p"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,34,ssertTrue(div.canContain(div));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,35,ssertTrue(div.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,33,assertTrue(div.isBlock());
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,34,assertTrue(div.formatAsBlock());
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,39,"ag div = Tag.valueOf(""div"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,41,"ag img = Tag.valueOf(""img"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,42,"ag span = Tag.valueOf(""span"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,44,ssertTrue(p.canContain(img));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,45,ssertTrue(p.canContain(span));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,46,ssertFalse(p.canContain(div));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,47,ssertFalse(p.canContain(p));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,50,Test public void spanSemantics() {
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,51,"ag span = Tag.valueOf(""span"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,52,"ag p = Tag.valueOf(""p"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,53,"ag div = Tag.valueOf(""div"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,55,ssertTrue(span.canContain(span));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,56,ssertTrue(span.canContain(p));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,57,ssertTrue(span.canContain(div));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,40,assertTrue(p.isBlock());
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,41,assertFalse(p.formatAsBlock());
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,62,"ag p = Tag.valueOf(""p"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,64,ssertFalse(img.canContain(img));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,65,ssertFalse(img.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,46,assertTrue(img.isInline());
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,47,assertTrue(img.isSelfClosing());
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,48,assertFalse(img.isBlock());
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,71,"ag div = Tag.valueOf(""div"");"
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,74,ssertTrue(foo.canContain(foo));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,75,ssertTrue(foo.canContain(div));
False,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,76,ssertTrue(div.canContain(foo));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,56,assertTrue(foo.isInline());
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,57,assertTrue(foo.formatAsBlock());
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,29,"tring h = ""<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,29,"String h = ""<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";"
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,43,"tring h = ""<h1>Head</h1><td>One<td>Two</td>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,43,"String h = ""<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>"";"
False,src/test/java/org/jsoup/select/ElementsTest.java,src/test/java/org/jsoup/select/ElementsTest.java,107,"lements els = doc.select(""form > *"");"
True,src/test/java/org/jsoup/select/ElementsTest.java,src/test/java/org/jsoup/select/ElementsTest.java,107,"Elements els = doc.select(""input, textarea"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,192,"* Pulls a balanced string off the queue. E.g. if queue is ""(one (two) three) four"", (,) will return ""one (two) three"","
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,193,"* and leave "" four"" on the queue"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,194,* @param open opener
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,195,* @param close closer
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,196,* @return data matched from the queue
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,198,"public String chompBalanced(Character open, Character close) {"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,199,StringBuilder accum = new StringBuilder();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,200,int depth = 0;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,201,int i = 0;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,202,do {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,203,if (queue.isEmpty()) break;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,204,Character c = consume();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,205,if (c.equals(open))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,206,depth++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,207,else if (c.equals(close))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,208,depth--;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,210,if (depth > 0 && i > 0)
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,211,accum.append(c); // dont include the outer match pair in the return
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,212,i++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,213,} while (depth > 0);
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,214,return accum.toString();
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,162," else if (tq.matchChomp("":has("")) {"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,162,"} else if (tq.matches("":has("")) {"
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,167,"hrow new SelectorParseException(""Could not parse query "" + query);"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,167,"throw new SelectorParseException(""Could not parse query '%s': unexpected token at '%s'"", query, tq.remainder());"
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,227,"hrow new SelectorParseException(""Could not parse attribute query "" + query);"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,227,"throw new SelectorParseException(""Could not parse attribute query '%s': unexpected token at '%s'"", query, tq.remainder());"
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,256,"tring subQuery = tq.chompTo("")"");"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,256,"tq.consume("":has"");"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,257,"String subQuery = tq.chompBalanced('(',')');"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,264,"// todo: allow escaped ) in there. probably do a balanced match, for convenience of caller"
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,362,ublic SelectorParseException(String s) {
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,363,uper(s);
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,364,"public SelectorParseException(String msg, Object... params) {"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,365,"super(String.format(msg, params));"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,1,package org.jsoup.parser;
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,3,import org.junit.Test;
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,4,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,7,* Token queue tests.
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,9,public class TokenQueueTest {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,10,@Test public void chompBalanced() {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,11,"TokenQueue tq = new TokenQueue("":contains(one (two) three) four"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,12,"String pre = tq.consumeTo(""("");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,13,"String guts = tq.chompBalanced('(', ')');"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,14,String remainder = tq.remainder();
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,16,"assertEquals("":contains"", pre);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,17,"assertEquals(""one (two) three"", guts);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,18,"assertEquals("" four"", remainder);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,21,@Test public void chompBalancedMatchesAsMuchAsPossible() {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,22,"TokenQueue tq = new TokenQueue(""unbalanced(something(or another"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,23,"tq.consumeTo(""("");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,24,"String match = tq.chompBalanced('(', ')');"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,25,"assertEquals(""something(or another"", match);"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,374,@Test public void testNestedHas() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,375,"Document doc = Jsoup.parse(""<div><p><span>One</span></p></div> <div><p>Two</p></div>"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,376,"Elements divs = doc.select(""div:has(p:has(span))"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,377,"assertEquals(1, divs.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,378,"assertEquals(""One"", divs.first().text());"

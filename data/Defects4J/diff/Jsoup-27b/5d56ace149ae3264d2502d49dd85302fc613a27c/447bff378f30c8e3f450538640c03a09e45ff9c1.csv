is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,27,Evaluator rightMostEvaluator() {
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,28,return evaluators.size() > 0 ? evaluators.get(evaluators.size() - 1) : null;
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,31,void replaceRightMostEvaluator(Evaluator replacement) {
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,32,"evaluators.set(evaluators.size() - 1, replacement);"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,76,valuator e;
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,78,f (evals.size() == 1)
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,79, = evals.get(0);
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,80,lse
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,81, = new CombiningEvaluator.And(evals);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,77,Evaluator rootEval; // the new topmost evaluator
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,78,"Evaluator currentEval; // the evaluator the new eval will be combined to. could be root, or rightmost or."
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,79,Evaluator newEval = parse(subQuery); // the evaluator to add into target evaluator
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,80,boolean replaceRightMost = false;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,82,if (evals.size() == 1) {
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,83,rootEval = currentEval = evals.get(0);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,84,"// make sure OR (,) has precedence:"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,85,"if (rootEval instanceof CombiningEvaluator.Or && combinator != ',') {"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,86,currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,87,replaceRightMost = true;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,90,else {
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,91,rootEval = currentEval = new CombiningEvaluator.And(evals);
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,83,valuator f = parse(subQuery);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,95,// for most combinators: change the current eval into an AND of the current eval and the new eval
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,86,"vals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,97,"currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,88,"vals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,99,"currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,90,"vals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,101,"currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,92,"vals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,93,"lse if (combinator == ',') { // group or"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,103,"currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,104,"else if (combinator == ',') { // group or."
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,95,f (e instanceof CombiningEvaluator.Or) {
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,96,r = (CombiningEvaluator.Or) e;
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,97,r.add(f);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,106,if (currentEval instanceof CombiningEvaluator.Or) {
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,107,or = (CombiningEvaluator.Or) currentEval;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,108,or.add(newEval);
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,100,r.add(e);
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,101,r.add(f);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,111,or.add(currentEval);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,112,or.add(newEval);
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,103,vals.add(or);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,114,currentEval = or;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,119,if (replaceRightMost)
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,120,((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,121,else rootEval = currentEval;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,122,evals.add(rootEval);
True,src/main/java/org/jsoup/select/StructuralEvaluator.java,src/main/java/org/jsoup/select/StructuralEvaluator.java,85,public String toString() {
True,src/main/java/org/jsoup/select/StructuralEvaluator.java,src/main/java/org/jsoup/select/StructuralEvaluator.java,86,"return String.format("":ImmediateParent%s"", evaluator);"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,1,package org.jsoup.select;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,3,import org.junit.Test;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,4,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,7,* Tests for the Selector Query Parser.
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,9,* @author Jonathan Hedley
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,11,public class QueryParserTest {
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,12,@Test public void testOrGetsCorrectPrecedence() {
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,13,"// tests that a selector ""a b, c d, e f"" evals to (a AND b) OR (c AND d) OR (e AND f)"""
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,14,"// top level or, three child ands"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,15,"Evaluator eval = QueryParser.parse(""a b, c d, e f"");"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,16,assertTrue(eval instanceof CombiningEvaluator.Or);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,17,CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,18,"assertEquals(3, or.evaluators.size());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,19,for (Evaluator innerEval: or.evaluators) {
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,20,assertTrue(innerEval instanceof CombiningEvaluator.And);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,21,CombiningEvaluator.And and = (CombiningEvaluator.And) innerEval;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,22,"assertEquals(2, and.evaluators.size());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,23,assertTrue(and.evaluators.get(0) instanceof Evaluator.Tag);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,24,assertTrue(and.evaluators.get(1) instanceof StructuralEvaluator.Parent);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,28,@Test public void testParsesMultiCorrectly() {
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,29,"Evaluator eval = QueryParser.parse("".foo > ol, ol > li + li"");"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,30,assertTrue(eval instanceof CombiningEvaluator.Or);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,31,CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,32,"assertEquals(2, or.evaluators.size());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,34,CombiningEvaluator.And andLeft = (CombiningEvaluator.And) or.evaluators.get(0);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,35,CombiningEvaluator.And andRight = (CombiningEvaluator.And) or.evaluators.get(1);
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,37,"assertEquals(""ol :ImmediateParent.foo"", andLeft.toString());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,38,"assertEquals(2, andLeft.evaluators.size());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,39,"assertEquals(""li :prevli :ImmediateParentol"", andRight.toString());"
True,src/test/java/org/jsoup/select/QueryParserTest.java,src/test/java/org/jsoup/select/QueryParserTest.java,40,"assertEquals(2, andLeft.evaluators.size());"
False,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,329,"ssertEquals(2, els.size());"
False,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,330,"ssertEquals(""li"", els.get(0).tagName());"
False,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,331,"ssertEquals(""Three"", els.get(1).text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,329,"assertEquals(3, els.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,330,"assertEquals(""ol"", els.get(0).tagName());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,331,"assertEquals(""Two"", els.get(1).text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,332,"assertEquals(""Three"", els.get(2).text());"

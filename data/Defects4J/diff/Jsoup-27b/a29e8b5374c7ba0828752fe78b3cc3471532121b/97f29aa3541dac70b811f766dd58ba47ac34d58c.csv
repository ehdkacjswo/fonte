is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,1,package org.jsoup.nodes;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,3,import org.apache.commons.lang.Validate;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,6,A single key + value attribute.
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,8,"@author Jonathan Hedley, jonathan@hedley.net */"
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,9,public class Attribute {
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,10,private String key;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,11,private String value;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,13,"public Attribute(String key, String value) {"
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,14,Validate.notEmpty(key);
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,15,Validate.notNull(value);
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,16,this.key = key;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,17,this.value = value;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,20,public String getKey() {
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,21,return key;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,24,public void setKey(String key) {
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,25,Validate.notEmpty(key);
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,26,this.key = key;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,29,public String getValue() {
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,30,return value;
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,33,public void setValue(String value) {
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,34,Validate.notNull(value);
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,35,this.value = value;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,3,import org.apache.commons.lang.Validate;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,5,import java.util.LinkedHashMap;
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,12,"private LinkedHashMap<String, String> attributes = new LinkedHashMap<String, String>(); // linked hash map to preserve insertion order."
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,14,public String get(String key) {
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,15,Validate.notEmpty(key);
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,16,return attributes.get(key.toLowerCase());
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,19,"public void put(String key, String value) {"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,20,Validate.notEmpty(key);
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,21,Validate.notNull(value);
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,22,"attributes.put(key.toLowerCase(), value);"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,25,public void put(Attribute attribute) {
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,26,Validate.notNull(attribute);
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,27,"put(attribute.getKey(), attribute.getValue());"
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,30,public void remove(String key) {
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,31,Validate.notEmpty(key);
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,32,attributes.remove(key.toLowerCase());
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,35,public int size() {
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,36,return attributes.size();
True,src/main/java/org/jsoup/nodes/Attributes.java,src/main/java/org/jsoup/nodes/Attributes.java,39,"// todo: toString, list (as List<Attribute>)"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,3,import org.jsoup.nodes.Attribute;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,6,import java.util.LinkedList;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,7,import java.util.Queue;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,8,import java.util.regex.Pattern;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,15,private static final char SQ = '\'';
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,16,"private static final char DQ = '""';"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,17,private static final char EQ = '=';
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,18,"private static final Pattern keyOk = Pattern.compile(""[^\\s'\""=]"");"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,19,"private static final Pattern space = Pattern.compile(""[\\s]"");"
False,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,12,eturn null;
False,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,13,/ TODO: implement
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,22,Attributes attributes = new Attributes();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,23,if (attributeString == null || attributeString.trim().isEmpty())
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,24,return attributes;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,26,char[] charArray = attributeString.trim().toCharArray();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,27,Queue<Character> chars = new LinkedList<Character>();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,28,for (char c : charArray) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,29,chars.add(c);
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,32,while (chars.size() > 0) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,33,Attribute attribute = nextAttribute(chars);
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,34,if (attribute != null)
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,35,attributes.put(attribute);
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,37,return attributes;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,40,private Attribute nextAttribute(Queue<Character> chars) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,41,StringBuilder key = new StringBuilder();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,42,StringBuilder value = new StringBuilder();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,43,boolean seenEquals = false;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,44,Character quoteChar = null;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,46,"// From: foo=""bar"" foo = 'bar ""qux"" zap' foo = bar foo foo foo=""data = something"""
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,47,"// To: <foo=bar>, <foo=bar ""qux"" zap>, <foo=bar>, <foo=>, <foo=>, <foo=data = something>"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,48,while (chars.size() > 0) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,49,Character c = chars.remove();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,50,String s = c.toString();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,52,// this is a bit gnarly. ideas on rewrite with expect + consume. Doesn't seem like a regular expression though.
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,54,if (!seenEquals && keyOk.matcher(s).matches()) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,55,// accum the key
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,56,key.append(s);
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,57,} else if (!seenEquals && key.length() > 0 && space.matcher(s).matches()) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,58,"// if we have a key, then a run of space, then a key-like char: that's a new key and we need to break before"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,59,Character nextC = chars.peek();
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,60,if (nextC != null && keyOk.matcher(nextC.toString()).matches())
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,61,break;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,62,} else if (!seenEquals && c == EQ) { //
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,63,seenEquals = true;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,64,} else if (seenEquals) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,65,// working on the value
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,66,if (quoteChar == null && (c == SQ || c == DQ)) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,67,// match until closing quote
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,68,quoteChar = c;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,69,} else if (c == quoteChar) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,70,// closing quote
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,71,break;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,72,} else if (quoteChar == null && value.length() > 0 && space.matcher(s).matches()) {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,73,// we have found a space in a naked value (foo=bar): end of the line
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,74,break;
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,75,} else {
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,76,// accum the value
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,77,value.append(s);
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,82,// TODO[must] de-entify / unescape attribute values (and keys too I guess)
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,84,// return an attribute if we have a key (val can be empty)
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,85,if (key.length() > 0)
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,86,"return new Attribute(key.toString().trim(), value.toString().trim());"
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,87,else
True,src/main/java/org/jsoup/parser/AttributeParser.java,src/main/java/org/jsoup/parser/AttributeParser.java,88,return null;
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,1,package org.jsoup.parser;
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,3,import org.jsoup.nodes.Attributes;
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,4,import org.junit.Test;
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,6,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,9,Test suite for attribute parser.
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,11,"@author Jonathan Hedley, jonathan@hedley.net */"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,12,public class AttributeParserTest {
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,14,@Test public void parsesRoughAttributeString() {
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,15,"String a = ""id=\""123\"" class=\""baz = 'bar'\"" style = 'border: 2px'qux zim foo = 12 mux.=18 "";"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,16,"// should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,18,AttributeParser ap = new AttributeParser();
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,19,Attributes attr = ap.parse(a);
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,20,"assertEquals(7, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,21,"assertEquals(""123"", attr.get(""id""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,22,"assertEquals(""baz = 'bar'"", attr.get(""class""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,23,"assertEquals(""border: 2px"", attr.get(""style""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,24,"assertEquals("""", attr.get(""qux""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,25,"assertEquals("""", attr.get(""zim""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,26,"assertEquals(""12"", attr.get(""foo""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,27,"assertEquals(""18"", attr.get(""mux.""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,30,@Test public void parsesEmptyString() {
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,31,AttributeParser ap = new AttributeParser();
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,32,"Attributes attr = ap.parse("""");"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,33,"assertEquals(0, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,36,@Test public void emptyOnNoKey() {
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,37,AttributeParser ap = new AttributeParser();
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,38,"Attributes attr = ap.parse(""=empty"");"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,39,"assertEquals(0, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,42,@Test public void parserIsReusable() {
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,43,AttributeParser ap = new AttributeParser();
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,44,"Attributes attr = ap.parse(""id=bar"");"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,45,"assertEquals(1, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,46,"assertEquals(""bar"", attr.get(""id""));"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,48,"attr = ap.parse(""id=qux"");"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,49,"assertEquals(1, attr.size());"
True,src/test/java/org/jsoup/parser/AttributeParserTest.java,src/test/java/org/jsoup/parser/AttributeParserTest.java,50,"assertEquals(""qux"", attr.get(""id""));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,15,private static final Character ESC = '\\'; // escape char for chomp balanced.
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,193," and leave "" four"" on the queue"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,194,"* and leave "" four"" on the queue. Unbalanced openers and closers can be escaped (with \). Those escapes will be left"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,195,"* in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,196,* contains text strings; use unescape for that.
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,201,nt i = 0;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,204,Character last = null;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,205,f (c.equals(open))
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,206,epth++;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,207,lse if (c.equals(close))
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,208,epth--;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,209,if (last == null || !last.equals(ESC)) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,210,if (c.equals(open))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,211,depth++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,212,else if (c.equals(close))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,213,depth--;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,210,f (depth > 0 && i > 0)
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,211,ccum.append(c); // dont include the outer match pair in the return
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,212,++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,216,if (depth > 0 && last != null)
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,217,accum.append(c); // don't include the outer match pair in the return
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,218,last = c;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,224,* Unescaped a \ escaped string.
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,225,* @param in backslash escaped string
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,226,* @return unescaped string
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,228,public static String unescape(String in) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,229,StringBuilder out = new StringBuilder();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,230,Character last = null;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,231,for (Character c : in.toCharArray()) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,232,if (c.equals(ESC)) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,233,if (last != null && last.equals(ESC))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,234,out.append(c);
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,236,else
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,237,out.append(c);
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,238,last = c;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,240,return out.toString();
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,164," else if (tq.matchChomp("":contains("")) {"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,164,"} else if (tq.matches("":contains("")) {"
False,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,266,"tring searchText = tq.chompTo("")"");"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,266,"tq.consume("":contains"");"
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,267,"String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,21,@Test public void chompEscapedBalanced() {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,22,"TokenQueue tq = new TokenQueue("":contains(one (two) \\( \\) \\) three) four"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,23,"String pre = tq.consumeTo(""("");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,24,"String guts = tq.chompBalanced('(', ')');"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,25,String remainder = tq.remainder();
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,27,"assertEquals("":contains"", pre);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,28,"assertEquals(""one (two) \\( \\) \\) three"", guts);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,29,"assertEquals(""one (two) ( ) ) three"", TokenQueue.unescape(guts));"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,30,"assertEquals("" four"", remainder);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,40,@Test public void unescape() {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,41,"assertEquals(""one ( ) \\"", TokenQueue.unescape(""one \\( \\) \\\\""));"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,397,@Test public void testPsuedoContainsWithParentheses() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,398,"Document doc = Jsoup.parse(""<div><p id=1>This (is good)</p><p id=2>This is bad)</p>"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,400,"Elements ps1 = doc.select(""p:contains(this (is good))"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,401,"assertEquals(1, ps1.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,402,"assertEquals(""1"", ps1.first().id());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,404,"Elements ps2 = doc.select(""p:contains(this is bad\\))"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,405,"assertEquals(1, ps2.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,406,"assertEquals(""2"", ps2.first().id());"

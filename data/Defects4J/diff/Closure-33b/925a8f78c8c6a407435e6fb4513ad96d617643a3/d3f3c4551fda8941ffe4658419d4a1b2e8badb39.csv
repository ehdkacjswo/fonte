is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,366,oolean isDelete = parent.getType() == Token.DELPROP;
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,366,boolean isDelete = parent.isDelProp();
False,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,21,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,52,f (n.getType() == Token.DEBUGGER) {
True,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,src/com/google/javascript/jscomp/CheckDebuggerStatement.java,51,if (n.isDebugger()) {
False,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,72, else if (n.getType() == Token.REGEXP) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,72,} else if (n.isRegExp()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,24,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,238,f (typeArray.getType() == Token.ARRAYLIT) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,237,if (typeArray.isArrayLit()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,862,n.getType() == Token.IN))){
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,862,(n.isIn()))){
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,413, else if (n.getType() == Token.ARRAYLIT ||
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,414,.isObjectLit()) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,413,} else if (n.isArrayLit() || n.isObjectLit()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,457,reconditions.checkState(parent.getType() == Token.INSTANCEOF);
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,457,Preconditions.checkState(parent.isInstanceOf());
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,802,arent.getType() == Token.WHILE ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,803,arent.getType() == Token.WITH ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,802,parent.isWhile() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,803,parent.isWith() ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,849,f (parent.getType() == Token.INSTANCEOF &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,849,if (parent.isInstanceOf() &&
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,102,eturn n.isObjectLit() || n.getType() == Token.ARRAYLIT;
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,102,return n.isObjectLit() || n.isArrayLit();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,289,reconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,289,Preconditions.checkArgument(originalTypeofNode.isTypeOf());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,438,reconditions.checkArgument(n.getType() == Token.INSTANCEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,438,Preconditions.checkArgument(n.isInstanceOf());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1358,f (left.getType() == Token.ARRAYLIT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1358,if (left.isArrayLit()) {
False,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,74,reconditions.checkArgument(typeofNode.getType() == Token.TYPEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,74,Preconditions.checkArgument(typeofNode.isTypeOf());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,756,reconditions.checkArgument(n.getType() == Token.WHILE);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,756,Preconditions.checkArgument(n.isWhile());
False,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,21,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,31,f (subtree.getType() == Token.REGEXP) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,30,if (subtree.isRegExp()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,174,f (maybeIf != null && maybeIf.getType() == Token.IF) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,174,if (maybeIf != null && maybeIf.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,176,f (maybeBreak != null && maybeBreak.getType() == Token.BREAK
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,176,if (maybeBreak != null && maybeBreak.isBreak()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,193,f (forCondition.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,193,if (forCondition.isEmpty()) {
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,542,| isIncDec(op) || op.getType() == Token.DELPROP);
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,542,|| isIncDec(op) || op.isDelProp());
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,146,f (left.getType() == Token.TYPEOF && right.isString()) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,146,if (left.isTypeOf() && right.isString()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,149, else if (right.getType() == Token.TYPEOF &&
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,149,} else if (right.isTypeOf() &&
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,103, else if (n.getType() == Token.DELPROP) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,103,} else if (n.isDelProp()) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,32,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1265," else if (NodeUtil.isObjectLitKey(n, parent) &&"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1266,.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1264,"} else if (NodeUtil.isObjectLitKey(n, parent) && n.isString()) {"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,607,f (n.getType() == Token.NE) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,607,if (n.isNE()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,711,f (n.getType() == Token.ASSIGN_ADD) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,711,if (n.isAssignAdd()) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2229,public boolean isAssignAdd() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2230,return this.getType() == Token.ASSIGN_ADD;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2261,public boolean isDebugger() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2262,return this.getType() == Token.DEBUGGER;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2273,public boolean isDelProp() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2274,return this.getType() == Token.DELPROP;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2321,public boolean isIn() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2322,return this.getType() == Token.IN;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2329,public boolean isInstanceOf() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2330,return this.getType() == Token.INSTANCEOF;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2345,public boolean isNE() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2346,return this.getType() == Token.NE;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2417,public boolean isTypeOf() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2418,return this.getType() == Token.TYPEOF;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2429,public boolean isWhile() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2430,return this.getType() == Token.WHILE;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2433,public boolean isWith() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2434,return this.getType() == Token.WITH;

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,505,| !((ObjectType) type).hasName()
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,505,|| !((ObjectType) type).hasReferenceName()
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,50,ase Token.WHILE:
True,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,53,case Token.WHILE:
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,55,hild = n.getFirstChild().getNext().getNext();
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,56,f (child.getNext() != null) {
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,57,/ This is a for (A; B; C) loop rather than a for (A in B) loop.
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,58,hild = child.getNext();
True,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,55,child = NodeUtil.getLoopCodeBlock(n);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,329,f (parent.getType() == Token.FOR && parent.getChildCount() == 3) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,329,if (NodeUtil.isForIn(parent)) {
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,91,options.inlineLocalVariables = true;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,223,/** Inlines variables */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,224,public boolean inlineLocalVariables;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,579,inlineLocalFunctions = false;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,584,inlineLocalVariables = false;
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,717,f (parent.getChildCount() == 4) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,718,eturn parent.getFirstChild().getNext().getNext();
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,719, else {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,717,if (NodeUtil.isForIn(parent)) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,719,} else {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,720,return parent.getFirstChild().getNext().getNext();
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,776,f (n.getChildCount() == 4) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,777,eturn computeFallThrough(n.getFirstChild());
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,776,if (NodeUtil.isForIn(n)) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,777,return n;
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,779,eturn n;
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,779,return computeFallThrough(n.getFirstChild());
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,181,f (parent.getChildCount() == 4) {
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,182,eturn NodeUtil.getConditionExpression(parent) != n;
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,181,if (NodeUtil.isForIn(parent)) {
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,182,return n == parent.getLastChild();
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,184,eturn n == parent.getLastChild();
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,184,return NodeUtil.getConditionExpression(parent) != n;
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,114,f (n.getChildCount() == 4) {
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,114,if (!NodeUtil.isForIn(n)) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,351,f (options.inlineVariables && !beforeSmartNameRemoval) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,351,if ((options.inlineVariables || options.inlineLocalVariables)
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,352,&& !beforeSmartNameRemoval) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,963,"eturn new InlineVariables(compiler, false, true);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,964,InlineVariables.Mode mode;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,965,if (options.inlineVariables) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,966,mode = InlineVariables.Mode.ALL;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,967,} else if (options.inlineLocalVariables) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,968,mode = InlineVariables.Mode.LOCALS_ONLY;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,969,} else {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,970,"throw new IllegalStateException(""No variable inlining option set."");"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,973,"return new InlineVariables(compiler, mode, true);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,973,"eturn new InlineVariables(compiler, true, true);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,983,return new InlineVariables(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,984,"compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1080,"ompiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1091,"compiler,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1083,"ptions.inlineLocalFunctions,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1094,"options.inlineLocalFunctions,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1106,boolean preserveAnonymousFunctionNames =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1107,options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1096,"ompiler, options.removeUnusedVarsInGlobalScope);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1109,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1110,"options.removeUnusedVarsInGlobalScope,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1111,preserveAnonymousFunctionNames);
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,80,& nextSibling.getChildCount() == 4
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,80,&& !NodeUtil.isForIn(nextSibling)
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,673,| (type instanceof ObjectType && !((ObjectType) type).hasName())
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,673,|| (type instanceof ObjectType &&
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,674,!((ObjectType) type).hasReferenceName())
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,58,/ Only inline things explicitly marked as constant.
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,59,rivate final boolean onlyConstants;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,58,enum Mode {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,59,// Only inline things explicitly marked as constant.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,60,"CONSTANTS_ONLY,"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,61,// Locals only
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,62,"LOCALS_ONLY,"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,63,ALL
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,66,private final Mode mode;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,66,"nlineVariables(AbstractCompiler compiler, boolean onlyConstants,"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,73,InlineVariables(
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,74,"AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,75,"Mode mode,"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,69,his.onlyConstants = onlyConstants;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,78,this.mode = mode;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,76,"ompiler, new InliningBehavior(),"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,77,nlyConstants ?
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,78,dentifyConstants :
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,79,redicates.<Var>alwaysTrue());
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,85,"compiler, new InliningBehavior(), getFilterForMode());"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,89,private Predicate<Var> getFilterForMode() {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,90,switch (mode) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,91,case ALL:
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,92,return Predicates.<Var>alwaysTrue();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,93,case LOCALS_ONLY:
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,94,return new IdentifyLocals();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,95,case CONSTANTS_ONLY:
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,96,return new IdentifyConstants();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,97,default:
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,98,throw new IllegalStateException();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,118,* Filters non-global variables.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,120,private class IdentifyLocals implements Predicate<Var> {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,121,@Override
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,122,public boolean apply(Var var) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,123,return var.scope.isLocal();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,141,f (!onlyConstants) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,170,if (mode != Mode.CONSTANTS_ONLY) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,186, else if (onlyConstants) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,215,} else if (mode == Mode.CONSTANTS_ONLY) {
False,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,196,f (n.getChildCount() == 4) {
True,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,196,if (!NodeUtil.isForIn(n)) {
False,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,172,f (n.getChildCount() == 4) {
True,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,172,if (!NodeUtil.isForIn(n)) {
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,235,f (n.getChildCount() == 4) {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,235,if (!NodeUtil.isForIn(n)) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,684,f (n.getChildCount() == 4) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,684,if (!NodeUtil.isForIn(n)) {
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,413,lassName = classType.getName();
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,413,className = classType.getReferenceName();
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,491,"uperClass.getName() + "".prototype."" + prop, false));"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,491,"superClass.getReferenceName() + "".prototype."" + prop, false));"
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,508,"lassType.getName() + "".prototype."" + prop, false));"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,508,"classType.getReferenceName() + "".prototype."" + prop, false));"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,585,eturn false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,585,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,869,* @return Whether the node represents a FOR-IN loop.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,871,static boolean isForIn(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,872,return n.getType() == Token.FOR
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,873,&& n.getChildCount() == 3;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1064,reconditions.checkState(parent.getType() == Token.FOR
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1065,& parent.getChildCount() == 4);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,325,f (c.getChildCount() == 4
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,325,if (!NodeUtil.isForIn(c)
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,452,rivate static boolean isForIn(Node n) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,453,eturn n.getType() == Token.FOR && n.getChildCount() == 3;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,461,eturn isForIn(parent) && parent.getFirstChild() == n;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,457,return NodeUtil.isForIn(parent) && parent.getFirstChild() == n;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,59,private boolean preserveAnonymousFunctionNames;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,65,emoveUnusedVars(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,66,"his(compiler, true);"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,69,"emoveUnusedVars(AbstractCompiler compiler, boolean removeGlobals) {"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,67,RemoveUnusedVars(
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,68,"AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,69,"boolean removeGlobals,"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,70,boolean preserveAnonymousFunctionNames) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,73,this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,251,if (!preserveAnonymousFunctionNames) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,252,"toRemove.getFirstChild().setString("""");"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,253,compiler_.reportCodeChange();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,787,eturn namedType.getName();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,787,return namedType.getReferenceName();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,152,f (source.getType() == Token.FOR &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,153,ource.getChildCount() == 3) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,152,if (NodeUtil.isForIn(source)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,820,"egistry, jArgumentFnType.getName(),"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,819,"registry, jArgumentFnType.getReferenceName(),"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,198,"eclareNativeType(scope, t.getInstanceType().getName(), t);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,199,"eclareNativeType(scope, t.getPrototype().getName(), t.getPrototype());"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,198,"declareNativeType(scope, t.getInstanceType().getReferenceName(), t);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,199,declareNativeType(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,200,"scope, t.getPrototype().getReferenceName(), t.getPrototype());"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,812,"elegateBaseObject.getName(), null, null,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,813,"delegateBaseObject.getReferenceName(), null, null,"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,64,static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,65,"DiagnosticType.warning(""AMBIGUIOUS_FUNCTION_DECL"","
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,66,"""Conditional named functions have inconsistent behavior. Instead of"" +"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,67,""" 'function f(){}' use 'var f = function(){}'."");"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,if (NodeUtil.isFunctionDeclaration(parent)) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,118,// Warn about having conditional named function declarations as IE and
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,119,// FireFox handle them differently.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,120,if (!isHoistedFunction(parent)) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,"t.report(n, AMBIGUOUS_FUNCTION_DECL);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,226,* @return Whether the name function will be hoisted in its scope.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,228,boolean isHoistedFunction(Node fn) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,229,Preconditions.checkArgument(NodeUtil.isFunctionDeclaration(fn));
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,230,return fn.getParent().getType() == Token.SCRIPT
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,231,|| fn.getParent().getParent().getType() == Token.FUNCTION;
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,124,eturn hasName();
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,124,return hasReferenceName();
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,133,eturn getName().equals(((ObjectType) that).getName());
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,133,return getReferenceName().equals(((ObjectType) that).getReferenceName());
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,144,f (hasName()) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,145,eturn getName().hashCode();
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,144,if (hasReferenceName()) {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,145,return getReferenceName().hashCode();
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,153,"eturn getName() + "".<"" + primitiveType + "">"";"
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,153,"return getReferenceName() + "".<"" + primitiveType + "">"";"
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,157,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,157,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,162,ublic boolean hasName() {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,162,public boolean hasReferenceName() {
False,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,124,eturn getName();
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,124,return getReferenceName();
False,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,64,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,64,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,68,"eturn ownerFunction.getName() + "".prototype"";"
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,68,"return ownerFunction.getReferenceName() + "".prototype"";"
False,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,73,ublic boolean hasName() {
False,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,74,eturn ownerFunction != null && ownerFunction.hasName();
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,73,public boolean hasReferenceName() {
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,74,return ownerFunction != null && ownerFunction.hasReferenceName();
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,615,eturn this.getName().equals(that.getName());
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,615,return this.getReferenceName().equals(that.getReferenceName());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,628,eturn isInterface() ? getName().hashCode() : call.hashCode();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,628,return isInterface() ? getReferenceName().hashCode() : call.hashCode();
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,70,ublic String getName() {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,71,eturn getConstructor().getName();
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,70,public String getReferenceName() {
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,71,return getConstructor().getReferenceName();
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,75,ublic boolean hasName() {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,76,eturn getConstructor().hasName();
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,75,public boolean hasReferenceName() {
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,76,return getConstructor().hasReferenceName();
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,101,eturn constructor.getName();
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,101,return constructor.getReferenceName();
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,106,"eturn getConstructor().isNative() && ""Object"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,106,"return getConstructor().isNative() && ""Object"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,116,"eturn getConstructor().isNative() && ""Array"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,116,"return getConstructor().isNative() && ""Array"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,121,"eturn getConstructor().isNative() && ""String"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,121,"return getConstructor().isNative() && ""String"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,126,"eturn getConstructor().isNative() && ""Boolean"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,126,"return getConstructor().isNative() && ""Boolean"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,131,"eturn getConstructor().isNative() && ""Number"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,131,"return getConstructor().isNative() && ""Number"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,136,"eturn getConstructor().isNative() && ""Date"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,136,"return getConstructor().isNative() && ""Date"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,141,"eturn getConstructor().isNative() && ""RegExp"".equals(getName());"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,141,"return getConstructor().isNative() && ""RegExp"".equals(getReferenceName());"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,146,eturn hasName();
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,146,return hasReferenceName();
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,175,eturn getName().equals(((ObjectType) that).getName());
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,175,return getReferenceName().equals(((ObjectType) that).getReferenceName());
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,186,f (hasName()) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,187,eturn getName().hashCode();
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,186,if (hasReferenceName()) {
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,187,return getReferenceName().hashCode();
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,615,"nterfaceToImplementors.put(interfaceInstance.getName(), type);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,615,"interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,626,eturn interfaceToImplementors.get(interfaceInstance.getName());
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,626,return interfaceToImplementors.get(interfaceInstance.getReferenceName());
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1012,"xistingFunctionType.getName(),"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1012,"existingFunctionType.getReferenceName(),"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,135,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,135,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,145,ublic boolean hasName() {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,145,public boolean hasReferenceName() {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,175,eference.equals(objType.getName());
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,175,reference.equals(objType.getReferenceName());
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,264,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,264,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,160, Gets this object's name.
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,160,* Gets the reference name for this object. This includes named types
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,161,"* like constructors, prototypes, and enums. It notably does not include"
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,162,* literal types like strings and booleans and structural types.
False,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,164,ublic abstract String getName();
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,166,public abstract String getReferenceName();
False,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,170,ublic boolean hasName() {
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,172,public boolean hasReferenceName() {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,321,eturn getName();
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,321,return getReferenceName();
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,346,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,346,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,355,ublic boolean hasName() {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,355,public boolean hasReferenceName() {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,65,ublic String getName() {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,66,eturn referencedType.getName();
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,65,public String getReferenceName() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,66,return referencedType.getReferenceName();
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,70,ublic boolean hasName() {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,71,eturn referencedType.hasName();
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,70,public boolean hasReferenceName() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,71,return referencedType.hasReferenceName();
False,src/com/google/javascript/rhino/jstype/TemplateType.java,src/com/google/javascript/rhino/jstype/TemplateType.java,60,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/TemplateType.java,src/com/google/javascript/rhino/jstype/TemplateType.java,60,public String getReferenceName() {
False,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,129,eturn getName();
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,129,return getReferenceName();
False,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,169,ublic String getName() {
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,169,public String getReferenceName() {
False,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,34,"eturn new InlineVariables(compiler, true, inlineAllStrings);"
True,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,34,return new InlineVariables(
True,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,test/com/google/javascript/jscomp/InlineVariablesConstantsTest.java,35,"compiler, InlineVariables.Mode.CONSTANTS_ONLY, inlineAllStrings);"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,29,private boolean inlineLocalsOnly = false;
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,36,"eturn new InlineVariables(compiler, false, inlineAllStrings);"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,37,return new InlineVariables(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,38,"compiler,"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,39,(inlineLocalsOnly)
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,40,? InlineVariables.Mode.LOCALS_ONLY
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,41,": InlineVariables.Mode.ALL,"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,42,inlineAllStrings);
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,48,inlineLocalsOnly = false;
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,760,public void testLocalsOnly1() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,761,inlineLocalsOnly = true;
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,762,test(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,763,"""var x=1; x; function f() {var x = 1; x;}"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,764,"""var x=1; x; function f() {1;}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,767,public void testLocalsOnly2() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,768,inlineLocalsOnly = true;
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,769,test(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,770,"""/** @const */\n"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,771,"""var X=1; X;\n"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,772,"""function f() {\n"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,773,"""  /** @const */\n"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,774,"""  var X = 1; X;\n"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,776,"""var X$$constant=1; X$$constant; function f() {1;}"");"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,23,private boolean preserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,32,preserveAnonymousFunctionNames = false;
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,35,"eturn new RemoveUnusedVars(compiler, removeGlobal);"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,37,return new RemoveUnusedVars(
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,38,"compiler, removeGlobal, preserveAnonymousFunctionNames);"
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,143,/ don't remove function objects
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,144,"est(""foo(function bar() { })"","
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,145,"foo(function bar(){})"");"
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,201,ublic void testFunctionWithName() {
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,200,public void testFunctionWithName1() {
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,201,"test(""var x=function f(){};x()"","
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,202,"""var x=function(){};x()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,204,preserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,208,public void testFunctionWithName2() {
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,209,"test(""foo(function bar(){})"","
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,210,"""foo(function(){})"");"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,212,preserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,213,"testSame(""foo(function bar(){})"");"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,134,public void testAmbiguousFunctionDeclarations() {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,135,"testSame(""if (1) { function f(){}; }"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,136,"testSame(""{ function f(){}; }"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,137,"testSame(""a:function f(){};"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,139,"testSame(""function f(){}"");"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,140,"testSame(""(function(){ function f(){} })"");"

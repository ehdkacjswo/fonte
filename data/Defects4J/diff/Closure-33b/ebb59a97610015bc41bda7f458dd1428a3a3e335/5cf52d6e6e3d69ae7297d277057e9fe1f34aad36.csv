is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,95,f (NodeUtil.isFunctionAnonymous(n)) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,95,if (NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,169, an interface method instead of an anonymous function in order to avoid
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,169,* an interface method instead of an function expression in order to avoid
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,212,* @param delegateProxyMap Map from delegate proxy prototype to delegate base
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,213,*     constructor.
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,214,"ap<ObjectType, ObjectType> delegateProxyMap);"
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,217,"Map<ObjectType, FunctionType> delegateProxyMap);"
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,24," Collapses anonymous function declarations into named function declarations,"
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,24,"* Collapses anonymous function expressions into named function declarations,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,158,"ap<ObjectType, ObjectType> delegateProxyMap) {"
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,158,"Map<ObjectType, FunctionType> delegateProxyMap) {"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,47,f (!NodeUtil.isAnonymousFunction(parent)) {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,47,if (!NodeUtil.isFunctionExpression(parent)) {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,50,eturn new AnonymousFunctionDefinition(parent);
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,50,return new FunctionExpressionDefinition(parent);
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,204,tatic final class AnonymousFunctionDefinition extends FunctionDefinition {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,205,nonymousFunctionDefinition(Node node) {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,204,static final class FunctionExpressionDefinition extends FunctionDefinition {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,205,FunctionExpressionDefinition(Node node) {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,208,odeUtil.isAnonymousFunction(node));
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,208,NodeUtil.isFunctionExpression(node));
False,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,65,nonymousFunctionNamer namer = new AnonymousFunctionNamer(functionMap);
True,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,65,FunctionExpressionNamer namer = new FunctionExpressionNamer(functionMap);
False,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,148,rivate static class AnonymousFunctionNamer
True,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,148,private static class FunctionExpressionNamer
False,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,155,"nonymousFunctionNamer(Map<Node, FunctionRecord> functionMap) {"
True,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,155,"FunctionExpressionNamer(Map<Node, FunctionRecord> functionMap) {"
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,246,f (!NodeUtil.isAnonymousFunction(node)) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,246,if (!NodeUtil.isFunctionExpression(node)) {
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,317,f (!NodeUtil.isAnonymousFunction(node)) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,317,if (!NodeUtil.isFunctionExpression(node)) {
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,377,f (!NodeUtil.isAnonymousFunction(node)) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,377,if (!NodeUtil.isFunctionExpression(node)) {
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,431,f (!NodeUtil.isAnonymousFunction(node)) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,431,if (!NodeUtil.isFunctionExpression(node)) {
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,493,f (!NodeUtil.isAnonymousFunction(node)) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,493,if (!NodeUtil.isFunctionExpression(node)) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,281,odeUtil.isFunctionAnonymous(parent)) return;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,281,NodeUtil.isFunctionExpression(parent)) return;
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,56," slot of Foo.prototype, and on the anonymous function type created by"
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,56,"* slot of Foo.prototype, and on the function expression type created by"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,72,rivate final boolean inlineAnonymousFunctionExpressions;
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,72,private final boolean inlineFunctionExpressions;
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,80,"oolean inlineAnonymousFunctionExpressions,"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,80,"boolean inlineFunctionExpressions,"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,89,his.inlineAnonymousFunctionExpressions =
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,90,nlineAnonymousFunctionExpressions;
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,89,this.inlineFunctionExpressions =
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,90,inlineFunctionExpressions;
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,155,eturn inlineLocalFunctions || inlineAnonymousFunctionExpressions
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,155,return inlineLocalFunctions || inlineFunctionExpressions
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,165,f (inlineAnonymousFunctionExpressions) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,166,"indAnonymousFunctionExpressions(t, n);"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,165,if (inlineFunctionExpressions) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,166,"findFunctionExpressions(t, n);"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,178,/ Anonymous functions in the form of:
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,178,// Functions expressions in the form of:
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,198,f (!NodeUtil.isFunctionAnonymous(n)) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,198,if (!NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,207, Find anonymous functions that are called directly in the form of
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,207,* Find function expressions that are called directly in the form of
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,212,"ublic void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,212,"public void findFunctionExpressions(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,214,/ Anonymous functions in the form of:
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,214,// Functions expressions in the form of:
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,229,"unction fn = new AnonymousFunction(fnNode, callsSeen++);"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,229,"Function fn = new FunctionExpression(fnNode, callsSeen++);"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,896,** Interface for dealing with named and anonymous functions equally */
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,897,* Interface for dealing with function declarations and function
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,898,* expressions equally
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,950,** AnonymousFunction implementation of the Function interface */
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,951,rivate static class AnonymousFunction implements Function {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,953,/** FunctionExpression implementation of the Function interface */
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,954,private static class FunctionExpression implements Function {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,955,"ublic AnonymousFunction(Node fn, int index) {"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,958,"public FunctionExpression(Node fn, int index) {"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,331,// Check for function declarations before the value is moved in the AST.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,332,boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,338,emoveDeclaration(declaration);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,341,// Function declarations have already been removed.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,342,if (!isFunctionDeclaration) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,343,removeDeclaration(declaration);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,344,} else {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,345,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,432,/ (e.g. in an anonymous function used to hide
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,440,// (e.g. in an function expression used to hide
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,542,/ Anonymous functions and other mutable objects can move within
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,550,// Function expressions and other mutable objects can move within
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,587, @return true if the reference is a normal VAR declaration (only normal
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,588, VARs can be inlined).
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,595,* @return true if the reference is a normal VAR or FUNCTION declaration.
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,591,eturn declaration.getParent().getType() == Token.VAR
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,592,& declaration.getGrandparent().getType() != Token.FOR;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,598,return (declaration.getParent().getType() == Token.VAR
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,599,&& declaration.getGrandparent().getType() != Token.FOR)
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,600,|| NodeUtil.isFunctionDeclaration(declaration.getParent());
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,596, @return Whether
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,604,* @return Whether there is a initial value.
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,602,/ The reference is a normal VAR declaration with
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,603,eturn initialization.getNameNode().getFirstChild() != null;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,610,// The reference is a FUNCTION declaration or normal VAR declaration
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,611,// with a value.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,612,return NodeUtil.isFunctionDeclaration(initialization.getParent())
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,613,|| initialization.getNameNode().getFirstChild() != null;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,867,/ mean that the expression is a child of an anonymous
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,868,"/ function or assignment with a complex lhs.  In those cases,"
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,867,// mean that the expression is a child of an function expression
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,868,"// or assignment with a complex lhs.  In those cases,"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1391," If enclosing function is anonymous, determine scope based on its"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1392, parent if the parent node is a variable declaration or
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1391,"* If enclosing function is a function expression, determine scope based on"
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1392,* its parent if the parent node is a variable declaration or
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1406,/ anonymous function.  try to get a name from the parent var
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1406,// Function expression.  try to get a name from the parent var
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,609, Find the first containing function that's not an anonymous
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,609,* Find the first containing function that's not an function expression
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,489,oolean anonymous = parent != null && NodeUtil.isFunctionAnonymous(n);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,489,boolean isFunctionExpression = (parent != null)
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,490,&& NodeUtil.isFunctionExpression(n);
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,491,f (!anonymous) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,492,/ Named functions are parent of the containing scope.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,492,if (!isFunctionExpression) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,493,// Functions declarations are in the scope containing the declaration.
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,499,f (anonymous) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,500,/ Anonymous function names are parent of the contained scope.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,500,if (isFunctionExpression) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,501,// Function expression names are only accessible within the function
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,502,// scope.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,147," In two last cases with named anonymous functions, the second name is"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,147,"* In two last cases with named function expressions, the second name is"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,407,"/ Anonymous functions don't have side-effects, but named ones"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,408,"/ change the namespace. Therefore, we check if the function has"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,409,"/ a name. Either way, we don't need to check the children, since"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,410,/ they aren't executed at declaration time.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,412,eturn !isFunctionAnonymous(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,407,"// Function expressions don't have side-effects, but function"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,408,"// declarations change the namespace. Either way, we don't need to"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,409,"// check the children, since they aren't executed at declaration time."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,410,return !isFunctionExpression(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,627,"/ Anonymous functions definitions are not changed by side-effects,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,628,/ and named functions are not part of expressions.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,629,reconditions.checkState(isAnonymousFunction(n));
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,625,"// Function expression are not changed by side-effects,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,626,// and function declarations are not part of expressions.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,627,Preconditions.checkState(isFunctionExpression(n));
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1052,"/ or not if it is not part of the AST.  A FUNCTION node, for instance,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1053,/ is either part of an expression (as a anonymous function) or as
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1054,/ a statement.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1050,// or not if it is not part of the AST.  A FUNCTION node can be
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1051,// either part of an expression or a statement.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1073,       function parameter (not a label or a empty anonymous function name).
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1070,*       function parameter (not a label or a empty function expression name).
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1194, is not anonymous; see {@link #isFunctionAnonymous}).
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1191,* is not part of a expression; see {@link #isFunctionExpression}).
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1197,eturn n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1194,return n.getType() == Token.FUNCTION && isStatement(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1213, Is this node an anonymous function? An anonymous function is one that has
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1214, either no name or a name that is not added to the current scope (see
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1215, {@link #isFunctionAnonymous}).
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1217,tatic boolean isAnonymousFunction(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1218,eturn n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1222, Is a FUNCTION node an anonymous function? An anonymous function is one that
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1223, has either no name or a name that is not added to the current scope.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1209,* Is a FUNCTION node an function expression? An function expression is one
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1210,* that has either no name or a name that is not added to the current scope.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1225, <p>Some examples of anonymous functions:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1212,* <p>Some examples of function expressions:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1227, function () {}
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1214,* (function () {})
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1234, <p>Some examples of functions that are <em>not</em> anonymous:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1221,* <p>Some examples of functions that are <em>not</em> expressions:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1241, @param n A FUNCTION node
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1242, @return Whether n is an anonymous function
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1228,* @param n A node
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1229,* @return Whether n is an function used within an expression.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1244,tatic boolean isFunctionAnonymous(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1245,eturn !isStatement(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1231,static boolean isFunctionExpression(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1232,return n.getType() == Token.FUNCTION && !isStatement(n);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,299,f (!NodeUtil.isFunctionAnonymous(n)
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,299,if (!NodeUtil.isFunctionExpression(n)
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,210,NodeUtil.isFunctionAnonymous(n)) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,210,!NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,456, @return For an assignment or variable declaration return the assigned
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,457," value, otherwise null."
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,456,"* @return For an assignment, variable declaration, or function declaration"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,457,"* return the assigned value, otherwise null."
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,460,eturn NodeUtil.getAssignedValue(getNameNode());
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,460,return (parent.getType() == Token.FUNCTION)
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,461,? parent : NodeUtil.getAssignedValue(getNameNode());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,57,rivate boolean preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,57,private boolean preserveFunctionExpressionNames;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,73,oolean preserveAnonymousFunctionNames) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,73,boolean preserveFunctionExpressionNames) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,76,his.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,76,this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,124,"/ If it's an exported function, or an anonymous function, assume"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,124,"// If it's an exported function, or an function expression, assume"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,126,f (NodeUtil.isFunctionAnonymous(n) ||
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,126,if (NodeUtil.isFunctionExpression(n) ||
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,248, else if (toRemove.getType() == Token.FUNCTION &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,249,odeUtil.isFunctionAnonymous(toRemove)) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,250,f (!preserveAnonymousFunctionNames) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,248,} else if (NodeUtil.isFunctionExpression(toRemove)) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,249,if (!preserveFunctionExpressionNames) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,103," Whether anonymous function names should be preserved. Typically, for"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,103,"* Whether function expression names should be preserved. Typically, for"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,107,rivate boolean preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,107,private boolean preserveFunctionExpressionNames;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,121,"oolean preserveAnonymousFunctionNames,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,121,"boolean preserveFunctionExpressionNames,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,129,his.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,129,this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,193,/ Are we renaming anonymous function names?
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,194,f (preserveAnonymousFunctionNames
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,193,// Are we renaming function expression names?
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,194,if (preserveFunctionExpressionNames
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,196,& NodeUtil.isAnonymousFunction(var.getParentNode())) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,196,&& NodeUtil.isFunctionExpression(var.getParentNode())) {
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,170,f (name.length() > 0) {
True,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,170,if (!name.isEmpty()) {
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,95,f (!fnName.isEmpty() && NodeUtil.isFunctionAnonymous(n)) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,95,if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,135,f (NodeUtil.isFunctionAnonymous(n)) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,135,if (NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,867,"/ If it's an anonymous function, update the type of this"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,867,"// If it's an function expression, update the type of this"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,107,"rivate Map<ObjectType, ObjectType> delegateProxyMap = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,107,"private Map<ObjectType, FunctionType> delegateProxyMap = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,895,bjectType delegatorObject = ObjectType.cast(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,896,ypeRegistry.getType(delegateRelationship.delegator));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,897,bjectType delegateBaseObject = ObjectType.cast(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,898,ypeRegistry.getType(delegateRelationship.delegateBase));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,899,bjectType delegateSuperObject = ObjectType.cast(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,900,ypeRegistry.getType(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,901,odingConvention.getDelegateSuperclassName()));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,902,f (delegatorObject != null &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,903,elegateBaseObject != null &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,904,elegateSuperObject != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,905,unctionType delegatorCtor = delegatorObject.getConstructor();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,906,unctionType delegateBaseCtor =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,907,elegateBaseObject.getConstructor();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,908,unctionType delegateSuperCtor =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,909,elegateSuperObject.getConstructor();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,911,f (delegatorCtor != null && delegateBaseCtor != null &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,912,elegateSuperCtor != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,913,unctionParamBuilder functionParamBuilder =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,914,ew FunctionParamBuilder(typeRegistry);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,915,unctionParamBuilder.addRequiredParams(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,916,ypeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,917,unctionType findDelegate = typeRegistry.createFunctionType(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,918,ypeRegistry.createDefaultObjectUnion(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,919,"elegateBaseObject),"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,920,unctionParamBuilder.build());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,922,unctionType delegateProxy =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,923,ypeRegistry.createConstructorType(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,924,"elegateBaseObject.getReferenceName(), null, null,"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,925,ull);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,926,elegateProxy.setPrototypeBasedOn(delegateBaseCtor);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,928,odingConvention.applyDelegateRelationship(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,929,"elegateSuperObject, delegateBaseObject, delegatorObject,"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,930,"elegateProxy, findDelegate);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,931,elegateProxyMap.put(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,932,"elegateProxy.getPrototype(),"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,933,elegateBaseCtor.getPrototype());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,895,applyDelegateRelationship(delegateRelationship);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,966,private void applyDelegateRelationship(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,967,DelegateRelationship delegateRelationship) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,968,ObjectType delegatorObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,969,typeRegistry.getType(delegateRelationship.delegator));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,970,ObjectType delegateBaseObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,971,typeRegistry.getType(delegateRelationship.delegateBase));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,972,ObjectType delegateSuperObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,973,typeRegistry.getType(codingConvention.getDelegateSuperclassName()));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,974,if (delegatorObject != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,975,delegateBaseObject != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,976,delegateSuperObject != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,977,FunctionType delegatorCtor = delegatorObject.getConstructor();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,978,FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,979,FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,981,if (delegatorCtor != null && delegateBaseCtor != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,982,delegateSuperCtor != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,983,FunctionParamBuilder functionParamBuilder =
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,984,new FunctionParamBuilder(typeRegistry);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,985,functionParamBuilder.addRequiredParams(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,986,typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,987,FunctionType findDelegate = typeRegistry.createFunctionType(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,988,"typeRegistry.createDefaultObjectUnion(delegateBaseObject),"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,989,functionParamBuilder.build());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,991,// The suffix is necessary for the proxy to be distinguished from
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,992,// the base.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,993,FunctionType delegateProxy = typeRegistry.createConstructorType(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,994,"delegateBaseObject.getReferenceName() + ""(Proxy)"","
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,995,"null, null, null);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,996,delegateProxy.setPrototypeBasedOn(delegateBaseObject);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,998,codingConvention.applyDelegateRelationship(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,999,"delegateSuperObject, delegateBaseObject, delegatorObject,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1000,"delegateProxy, findDelegate);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1001,"delegateProxyMap.put(delegateProxy.getPrototype(), delegateBaseCtor);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,102,f (!NodeUtil.isAnonymousFunction(parent)) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,102,if (!NodeUtil.isFunctionExpression(parent)) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,112,f (NodeUtil.isAnonymousFunction(parent)) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,112,if (NodeUtil.isFunctionExpression(parent)) {
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,187,/ Anonymous functions.
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,187,// Anonymous function expressions.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,198,/ Named functions
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,198,// Name functions expression.
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,201,// Function declaration.
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,218,"est(""function Foo() {};"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,218,"test(""function Foo() {}"" +"
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,221,"function a() {};"" +"
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,222,"throw new a().a;"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,221,"""throw (new function() {}).a;"");"
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,229,"est(""function Foo() {};"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,228,"test(""function Foo() {}"" +"
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,232,"function $Foo$$() {};"" +"
False,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,233,"throw new $Foo$$().$x$;"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,231,"""throw (new function Foo() {}).$x$;"");"
False,test/com/google/javascript/jscomp/DefinitionsRemoverTest.java,test/com/google/javascript/jscomp/DefinitionsRemoverTest.java,60,ublic void testRemoveAnonymousFunctionName() {
True,test/com/google/javascript/jscomp/DefinitionsRemoverTest.java,test/com/google/javascript/jscomp/DefinitionsRemoverTest.java,60,public void testRemoveFunctionExpressionName() {
False,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,137,/ Verify calls to anonymous function are movable.
False,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,138,elperCanExposeAnonymousFunctionExpression(
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,137,// Verify calls to function expressions are movable.
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,138,helperCanExposeFunctionExpression(
False,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,406,rivate void helperCanExposeAnonymousFunctionExpression(
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,406,private void helperCanExposeFunctionExpression(
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,28,inal boolean allowAnonymousFunctionExpressionInlining = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,28,final boolean allowFunctionExpressionInlining = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,52,"llowAnonymousFunctionExpressionInlining,"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,52,"allowFunctionExpressionInlining,"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1336,ublic void testDecomposeAnonymousInCall() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1336,public void testDecomposeFunctionExpressionInCall() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1383,ublic void testAnonymousFunctionInlining1() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1383,public void testFunctionExpressionInlining1() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1388,ublic void testAnonymousFunctionInlining2() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1388,public void testFunctionExpressionInlining2() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1393,ublic void testAnonymousFunctionInlining3() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1393,public void testFunctionExpressionInlining3() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1398,ublic void testAnonymousFunctionInlining4() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1398,public void testFunctionExpressionInlining4() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1403,ublic void testAnonymousFunctionCallInlining1() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1403,public void testFunctionExpressionCallInlining1() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1408,ublic void testAnonymousFunctionCallInlining2() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1408,public void testFunctionExpressionCallInlining2() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1413,ublic void testAnonymousFunctionCallInlining3() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1413,public void testFunctionExpressionCallInlining3() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1418,ublic void testAnonymousFunctionCallInlining4() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1418,public void testFunctionExpressionCallInlining4() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1423,ublic void testAnonymousFunctionCallInlining5() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1423,public void testFunctionExpressionCallInlining5() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1428,ublic void testAnonymousFunctionCallInlining6() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1428,public void testFunctionExpressionCallInlining6() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1433,ublic void testAnonymousFunctionCallInlining7() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1433,public void testFunctionExpressionCallInlining7() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1438,ublic void testAnonymousFunctionCallInlining8() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1438,public void testFunctionExpressionCallInlining8() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1443,ublic void testAnonymousFunctionCallInlining9() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1443,public void testFunctionExpressionCallInlining9() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1449,ublic void testAnonymousFunctionCallInlining10() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1449,public void testFunctionExpressionCallInlining10() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1455,ublic void testAnonymousFunctionCallInlining11() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1455,public void testFunctionExpressionCallInlining11() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1460,ublic void testAnonymousFunctionCallInlining12() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1460,public void testFunctionExpressionCallInlining12() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1465,ublic void testAnonymousFunctionOmega() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1465,public void testFunctionExpressionOmega() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1532,ublic void testAnonymousFunctionYCombinator() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1532,public void testFunctionExpressionYCombinator() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,284,test(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,285,"new String[] { ""var x = a;"", """","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,286,"""function cow() { a++; }; cow(); var z = x;""},"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,287,"new String[] { ""var x = a;"", """","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,288,""";(function cow(){ a++; })(); var z = x;""});"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,286,"function cow() { a++; }; cow(); var z = x;""});"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,291,"""cow(); var z = x; function cow() { a++; };""});"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,540,public void testRecursiveFunction2() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,541,"testSame(""function y() { return y(); }"");"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,720,ublic void testInlineFunctionAlias1() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,729,public void testInlineFunctionAlias1a() {
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,722,"function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,731,"""function f(x) {}"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,735,"""var y = function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,736,"""g();"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,737,"""y();y();"""
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,741,public void testInlineFunctionAlias1b() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,742,test(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,744,"""f;var y = f;"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,746,"""y();y();"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,747,"""function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,748,"""f;g();"" +"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,732,ublic void testInlineFunctionAlias2() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,753,public void testInlineFunctionAlias2a() {
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,734,"function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,755,"""function f(x) {}"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,759,"""var y; y = function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,760,"""g();"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,761,"""y();y();"""
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,765,public void testInlineFunctionAlias2b() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,766,test(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,767,"""function f(x) {};"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,768,"""f; var y; y = f;"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,769,"""g();"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,770,"""y();y();"","
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,739,"f;"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,772,"""f; f;"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,873,public void testInlineNamedFunction() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,874,"test(""function f() {} f();"", ""(function f(){})()"");"
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,140,/ Verify anonymous functions are renamed.
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,140,// Verify functions expressions are renamed.
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,239,/ Verify anonymous functions are renamed.
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,239,// Verify function expressions are renamed.
False,test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java,test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java,40,ublic void testAnonymousFunctions() {
True,test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java,test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java,40,public void testFunctionsExpression() {
False,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,54,ublic void testAnonymousFunction() {
True,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,54,public void testFunctionExpression() {
False,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,59,ublic void testAnonymousFunction2() {
True,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,59,public void testFunctionExpression2() {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,350,ublic void testIsFunctionAnonymous() {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,350,public void testIsFunctionExpression() {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,396,"ssertEquals(expected, NodeUtil.isFunctionAnonymous(funcNode));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,396,"assertEquals(expected, NodeUtil.isFunctionExpression(funcNode));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,542,ublic void testIsAnonymousFunction1() {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,542,public void testIsFunctionExpression1() {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,550,ssertTrue(NodeUtil.isAnonymousFunction(functionNode));
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,550,assertTrue(NodeUtil.isFunctionExpression(functionNode));
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,553,ublic void testIsAnonymousFunction2() {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,553,public void testIsFunctionExpression2() {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,559,ssertFalse(NodeUtil.isAnonymousFunction(functionNode));
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,559,assertFalse(NodeUtil.isFunctionExpression(functionNode));
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,215,/ Verify anonymous functions are renamed.
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,215,// Verify function expressions are renamed.
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,23,rivate boolean preserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,23,private boolean preserveFunctionExpressionNames = false;
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,32,reserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,32,preserveFunctionExpressionNames = false;
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,38,"ompiler, removeGlobal, preserveAnonymousFunctionNames);"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,38,"compiler, removeGlobal, preserveFunctionExpressionNames);"
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,74,/ Test with anonymous functions in another function call
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,74,// Test with function expressions in another function call
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,204,reserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,204,preserveFunctionExpressionNames = true;
False,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,212,reserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,212,preserveFunctionExpressionNames = true;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,37,rivate boolean preserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,37,private boolean preserveFunctionExpressionNames = false;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,56,"ocalRenamingOnly, preserveAnonymousFunctionNames,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,56,"localRenamingOnly, preserveFunctionExpressionNames,"
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,74,reserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,74,preserveFunctionExpressionNames = false;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,132,reserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,132,preserveFunctionExpressionNames = true;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1237,/ named anonymous functions create a binding in their body only
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1237,// named function expressions create a binding in their body only
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4217,/ verifying the type assigned to anonymous functions assigned variables
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4217,// verifying the type assigned to function expressions assigned variables

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,32,lass CheckProvides implements CompilerPass {
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,32,class CheckProvides implements HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,49,hotSwapScript(root);
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,52,@Override
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,53,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,50,ew CheckProvidesCallback(codingConvention);
False,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,51,"ew NodeTraversal(compiler, callback).traverse(root);"
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,55,new CheckProvidesCallback(codingConvention);
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,56,"new NodeTraversal(compiler, callback).traverse(scriptRoot);"
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,38,lass CheckRequiresForConstructors implements CompilerPass {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,38,class CheckRequiresForConstructors implements HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,65,@Override
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,66,public void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,67,Callback callback = new CheckRequiresForConstructorsCallback();
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,68,"new NodeTraversal(compiler, callback).traverseWithScope(scriptRoot,"
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,69,SyntacticScopeCreator.generateUntypedTopScope(compiler));
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,748,rivate final PassFactory checkRequires =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,749,"ew PassFactory(""checkRequires"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,748,private final HotSwapPassFactory checkRequires =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,749,"new HotSwapPassFactory(""checkRequires"", true) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,751,rotected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,751,protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,757,rivate final PassFactory checkProvides =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,758,"ew PassFactory(""checkProvides"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,757,private final HotSwapPassFactory checkProvides =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,758,"new HotSwapPassFactory(""checkProvides"", true) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,760,rotected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,760,protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,330, @param An EXPR_RESULT node.
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,330,* @param n EXPR_RESULT node.
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,237," @param declaredType The variable's type, according to JSDoc"
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,254,* Generates an untyped global scope from the root of AST of compiler (which
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,255,* includes externs).
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,257,* @param compiler The compiler for which the scope is generated.
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,258,* @return The new untyped global scope generated as a result of this call.
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,260,static Scope generateUntypedTopScope(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,261,"return new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(),"
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,262,null);
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,/ TODO(bashir) Currently VarCheck is the only pass that its hotSwapScript
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,/ needs a global scope and cannot use global typed scope. If other passes
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,124,/ in future need a similar top scope we have to refactor the next scope
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,125,/ generation and generate such global scope only once.
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,126,cope scope = new SyntacticScopeCreator(compiler).createScope(
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,127,"ompiler.getRoot(), null);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,128,".traverseWithScope(scriptRoot, scope);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,"t.traverseWithScope(scriptRoot,"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,SyntacticScopeCreator.generateUntypedTopScope(compiler));

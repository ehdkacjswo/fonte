is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,226,ptions.manageClosureDependencies = config.manageClosureDependencies;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,226,options.setManageClosureDependencies(config.manageClosureDependencies);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1194,f (options.manageClosureDependencies) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1194,if (options.dependencyOptions.needsManagement()) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1208,manageDependencies(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1209,"ptions.manageClosureDependenciesEntryPoints, inputs);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1208,".manageDependencies(options.dependencyOptions, inputs);"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,20,mport com.google.common.collect.ImmutableList;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,115,oolean manageClosureDependencies = false;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,116,ist<String> manageClosureDependenciesEntryPoints = ImmutableList.of();
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,114,DependencyOptions dependencyOptions = new DependencyOptions();
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1239,* Sets dependency options. See the DependencyOptions class for more info.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1240,* This supercedes manageClosureDependencies.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1242,public void setDependencyOptions(DependencyOptions options) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1243,this.dependencyOptions = options;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1245,anageClosureDependencies = newVal;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1251,dependencyOptions.setDependencySorting(newVal);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1252,dependencyOptions.setDependencyPruning(newVal);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1253,dependencyOptions.setMoocherDropping(false);
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1259,anageClosureDependencies = true;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1260,anageClosureDependenciesEntryPoints = entryPoints;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1267,setManageClosureDependencies(true);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1268,dependencyOptions.setEntryPoints(entryPoints);
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,19,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,21,import java.io.Serializable;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,22,import java.util.Collection;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,23,import java.util.Set;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,26,* Options for how to manage dependencies between input files.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,28,* Dependency information is usually pulled out from the JS code by
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,29,* looking for primitive dependency functions (like Closure Library's
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,30,* goog.provide/goog.require). Analysis of this dependency information is
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,31,"* controlled by {@code CodingConvention}, which lets you define those"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,32,* dependency primitives.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,34,* This options class determines how we use that dependency information
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,35,* to change how code is built.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,37,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,39,public class DependencyOptions implements Serializable {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,40,private static final long serialVersionUID = 1L;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,42,private boolean sortDependencies = false;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,43,private boolean pruneDependencies = false;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,44,private boolean dropMoochers = false;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,45,private final Set<String> entryPoints = Sets.newHashSet();
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,48,* Enables or disables dependency sorting mode.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,50,"* If true, we will sort the input files based on dependency information"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,51,"* in them. Otherwise, we will use the order of files specified"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,52,* on the command-line.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,54,public void setDependencySorting(boolean enabled) {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,55,this.sortDependencies = enabled;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,59,* Enables or disables dependency pruning mode.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,61,"* In dependency pruning mode, we will look for all files that provide a"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,62,* symbol. Unless that file is a transitive dependency of a file that
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,63,"* we're using, we will remove it from the compilation job."
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,65,* This does not affect how we handle files that do not provide symbols.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,66,* See setMoocherDropping for information on how these are handled.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,68,public void setDependencyPruning(boolean enabled) {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,69,this.pruneDependencies = enabled;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,73,* Enables or disables moocher dropping mode.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,75,* A 'moocher' is a file that does not provide any symbols (though they
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,76,* may require symbols). This is usually because they don't want to
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,77,"* tie themselves to a particular dependency system (e.g., Closure's"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,78,"* goog.provide, CommonJS modules). So they rely on other people to"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,79,* manage dependencies on them.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,81,"* If true, we drop these files when we prune dependencies."
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,82,"* If false, we always keep these files an anything they depend on."
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,83,* The default is false.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,85,"* Notice that this option only makes sense if dependency pruning is on,"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,86,* and a set of entry points is specified.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,88,public void setMoocherDropping(boolean enabled) {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,89,this.dropMoochers = enabled;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,93,* Adds a collection of symbols to always keep.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,95,"* In dependency pruning mode, we will automatically keep all the"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,96,* transitive dependencies of these symbols.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,98,* The syntactic form of a symbol depends on the type of dependency
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,99,"* primitives we're using. For example, goog.provide('foo.bar')"
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,100,* provides the symbol 'foo.bar'.
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,102,public void setEntryPoints(Collection<String> symbols) {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,103,entryPoints.clear();
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,104,entryPoints.addAll(symbols);
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,107,/** Returns whether re-ordering of files is needed. */
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,108,boolean needsManagement() {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,109,return sortDependencies || pruneDependencies;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,112,boolean shouldSortDependencies() {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,113,return sortDependencies;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,116,boolean shouldPruneDependencies() {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,117,return pruneDependencies;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,120,boolean shouldDropMoochers() {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,121,return pruneDependencies && dropMoochers;
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,124,Collection<String> getEntryPoints() {
True,src/com/google/javascript/jscomp/DependencyOptions.java,src/com/google/javascript/jscomp/DependencyOptions.java,125,return entryPoints;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,20,import com.google.common.collect.ImmutableList;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,277, Sort the sources of modules in dependency-order.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,278,"* Applies a DependencyOptions in ""dependency sorting"" and ""dependency pruning"""
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,279,* mode to the given list of inputs. Returns a new list with the files sorted
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,280,* and removed. This module graph will be updated to reflect the new list.
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,279," If a source file provides a symbol that is not required, then that"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,280, file will be removed from the compilation. If a source file provides
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,281," a symbol that is not required until a later module, then that"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,282, file will be moved to the later module.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,282,"* If you need more fine-grained dependency management, you should create your"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,283,* own DependencyOptions and call
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,284,"* {@code manageDependencies(DependencyOptions, List<CompilerInput>)}."
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,288, @return The sorted list of sources.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,294,* @see DependencyOptions for more info on how this works.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,300,DependencyOptions depOptions = new DependencyOptions();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,301,depOptions.setDependencySorting(true);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,302,depOptions.setDependencyPruning(true);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,303,depOptions.setEntryPoints(entryPoints);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,304,"return manageDependencies(depOptions, inputs);"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,308,"* Apply the dependency options to the list of sources, returning a new"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,309,* source list re-ordering and dropping files as necessary.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,310,* This module graph will be updated to reflect the new list.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,312,* @param inputs The original list of sources. Used to ensure that the sort
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,313,*     is stable.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,314,* @throws CircularDependencyException if there is a circular dependency
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,315,*     between the provides and requires.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,316,* @throws MissingProvideException if an entry point was not provided
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,317,*     by any of the inputs.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,318,* @see DependencyOptions for more info on how this works.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,320,public List<CompilerInput> manageDependencies(
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,321,"DependencyOptions depOptions,"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,322,List<CompilerInput> inputs)
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,323,"throws CircularDependencyException, MissingProvideException {"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,301,ets.newLinkedHashSet(sorter.getInputsWithoutProvides());
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,302,or (String entryPoint : entryPoints) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,328,Sets.newLinkedHashSet(
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,329,depOptions.shouldDropMoochers() ?
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,330,ImmutableList.<CompilerInput>of() :
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,331,sorter.getInputsWithoutProvides());
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,332,for (String entryPoint : depOptions.getEntryPoints()) {
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,307,ist<CompilerInput> absoluteOrder = sorter.getSortedDependenciesOf(inputs);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,337,List<CompilerInput> absoluteOrder =
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,338,"sorter.getDependenciesOf(inputs, depOptions.shouldSortDependencies());"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,328,orter.getSortedDependenciesOf(
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,329,ntryPointInputsPerModule.get(module));
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,359,sorter.getDependenciesOf(
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,360,"entryPointInputsPerModule.get(module),"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,361,depOptions.shouldSortDependencies());
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,191,"return getDependenciesOf(roots, true);"
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,195,* Gets all the dependencies of the given roots. The inputs must be returned
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,196,"* in a stable order. In other words, if A comes before B, and A does not"
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,197,"* transitively depend on B, then A must also come before B in the returned"
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,198,* list.
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,200,"* @param sorted If true, get them in topologically sorted order. If false,"
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,201,*     get them in the original order they were passed to the compiler.
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,203,"public List<INPUT> getDependenciesOf(List<INPUT> roots, boolean sorted) {"
False,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,207,or (INPUT current : sortedList) {
True,src/com/google/javascript/jscomp/deps/SortedDependencies.java,src/com/google/javascript/jscomp/deps/SortedDependencies.java,220,for (INPUT current : (sorted ? sortedList : inputs)) {
False,test/com/google/javascript/jscomp/CompilerTest.java,test/com/google/javascript/jscomp/CompilerTest.java,78,ptions.manageClosureDependencies = true;
True,test/com/google/javascript/jscomp/CompilerTest.java,test/com/google/javascript/jscomp/CompilerTest.java,78,options.setManageClosureDependencies(true);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,179,public void testManageDependencies3() throws Exception {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,180,List<CompilerInput> inputs = setUpManageDependenciesTest();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,181,DependencyOptions depOptions = new DependencyOptions();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,182,depOptions.setDependencySorting(true);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,183,depOptions.setDependencyPruning(true);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,184,depOptions.setMoocherDropping(true);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,185,"depOptions.setEntryPoints(ImmutableList.<String>of(""c2""));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,186,List<CompilerInput> results = graph.manageDependencies(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,187,"depOptions, inputs);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,189,"// Everything gets pushed up into module c, because that's"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,190,// the only one that has entry points.
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,191,assertInputs(A);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,192,assertInputs(B);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,193,"assertInputs(C, ""a1"", ""c1"", ""c2"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,194,assertInputs(E);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,196,assertEquals(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,197,"Lists.newArrayList(""a1"", ""c1"", ""c2""),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,198,sourceNames(results));

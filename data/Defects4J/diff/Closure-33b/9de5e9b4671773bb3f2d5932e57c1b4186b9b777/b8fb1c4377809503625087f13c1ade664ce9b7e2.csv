is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,246,* @return The error level the given error object will be reported at.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,248,abstract CheckLevel getErrorLevel(JSError error);
False,src/com/google/javascript/jscomp/AbstractMessageFormatter.java,src/com/google/javascript/jscomp/AbstractMessageFormatter.java,85,eturn color.getControlCharacter() +
True,src/com/google/javascript/jscomp/AbstractMessageFormatter.java,src/com/google/javascript/jscomp/AbstractMessageFormatter.java,85,return color.getControlCharacter() +
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,34," Given a node to optimize and a traversal, optimize the node. Subclasses"
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,34,"* Given a node to optimize and a traversal, optimize the node. Subclasses"
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,37, @param subtree The subtree that will be optimized.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,37,* @param subtree The subtree that will be optimized.
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,45, Helper method for reporting an error to the compiler when applying a
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,45,* Helper method for reporting an error to the compiler when applying a
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,57, Helper method for telling the compiler that something has changed.
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,58, Subclasses must call these if they have changed the AST.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,57,* Helper method for telling the compiler that something has changed.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,58,* Subclasses must call these if they have changed the AST.
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,79,  and has the Denormalize pass not yet been run?)
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,79,*  and has the Denormalize pass not yet been run?)
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,89, Informs the optimization that a traversal will begin.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,89,* Informs the optimization that a traversal will begin.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,716,/ labeled FUNCTION or DO isn't generated when extraneous BLOCKs
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,717,/ are skipped.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,718,"f (getNonEmptyChildCount(n, 2) == 1) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,716,// labeled FUNCTION or DO isn't generated when extraneous BLOCKs
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,717,// are skipped.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,718,"if (getNonEmptyChildCount(n, 2) == 1) {"
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,340, that the node must not be null or undefined.
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,340,* that the node must not be null or undefined.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1577,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1578,public CheckLevel getErrorLevel(JSError error) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1579,Preconditions.checkNotNull(options);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1580,WarningsGuard guards = options.getWarningsGuard();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1581,if (guards == null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1582,return error.level;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1583,} else {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1584,return guards.level(error);
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,182,eturn n == parent.getLastChild();
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,182,return n == parent.getLastChild();
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,95,public static DiagnosticGroup EXTERNS_VALIDATION =
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,96,"DiagnosticGroups.registerGroup(""externsValidation"","
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,97,"new DiagnosticGroup(VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,98,VarCheck.UNDEFINED_EXTERN_VAR_ERROR));
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,89,"ppendExtern(getExportedPath(), getFunctionValue(value));"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,89,"appendExtern(getExportedPath(), getFunctionValue(value));"
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,111,or (int i = 0; i < pathPrefixes.size(); ++i) {
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,111,for (int i = 0; i < pathPrefixes.size(); ++i) {
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,120,| (alreadyExportedPaths.contains(pathPrefix)
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,120,|| (alreadyExportedPaths.contains(pathPrefix)
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,132, we know that if we export a.b = function() {} and later
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,132,* we know that if we export a.b = function() {} and later
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,144,"ppendPathDefinition(pathPrefix, initializer);"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,144,"appendPathDefinition(pathPrefix, initializer);"
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,202,"ode externFunction = NodeUtil.newFunctionNode("""", externParameters,"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,202,"Node externFunction = NodeUtil.newFunctionNode("""", externParameters,"
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,205,heckForFunctionsWithUnknownTypes(exportedFunction);
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,205,checkForFunctionsWithUnknownTypes(exportedFunction);
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,234,f (!functionType.isConstructor() &&
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,234,if (!functionType.isConstructor() &&
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,242, nodes do not have JSTypes(). So we walk both lists of parameter nodes
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,242,* nodes do not have JSTypes(). So we walk both lists of parameter nodes
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,266,"arameter, CheckLevel.WARNING,"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,266,"parameter, CheckLevel.WARNING,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,25, into web content that is safe to inline directly into a page.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,25,* into web content that is safe to inline directly into a page.
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,63,"ode tmp = Node.newString(Token.NAME,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,63,"Node tmp = Node.newString(Token.NAME,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,71,/ for (var key in x) { body; }
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,71,// for (var key in x) { body; }
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,86,"oken.ASSIGN,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,87,"ey.getFirstChild().cloneNode(),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,86,"Token.ASSIGN,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,87,"key.getFirstChild().cloneNode(),"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,91,/ for (key in x) { body; }
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,91,// for (key in x) { body; }
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,104,"oken.ASSIGN,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,105,"ey,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,104,"Token.ASSIGN,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,105,"key,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,112,"oken.BLOCK,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,112,"Token.BLOCK,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,114,"oken.IF,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,114,"Token.IF,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,116,"oken.NOT,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,116,"Token.NOT,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,118,"oken.CALL,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,118,"Token.CALL,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,120,"oken.GETPROP,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,121,"mp.cloneTree(),"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,122,"ode.newString(""match"")),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,120,"Token.GETPROP,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,121,"tmp.cloneTree(),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,122,"Node.newString(""match"")),"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,124,"oken.REGEXP,"
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,125,"ode.newString(""___$"")))),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,124,"Token.REGEXP,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,125,"Node.newString(""___$"")))),"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,304,"lock,"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,305,"ew NodeUtil.MatchDeclaration(),"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,304,"block,"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,305,"new NodeUtil.MatchDeclaration(),"
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,61,/ assume regenerating everything else is a smart idea also.
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,61,// assume regenerating everything else is a smart idea also.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,67,"or (DiGraphNode<Name, Reference> node :"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,67,"for (DiGraphNode<Name, Reference> node :"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,71,"ist<DiGraphEdge<Name, Reference>> edges = node.getInEdges();"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,71,"List<DiGraphEdge<Name, Reference>> edges = node.getInEdges();"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,80, @param name The name of the function to optimize.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,80,* @param name The name of the function to optimize.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,108, Eliminate parameters if they are always constant.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,108,* Eliminate parameters if they are always constant.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,116, foo(3);
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,118, @param name The name of the function to optimize.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,116,* foo(3);
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,118,* @param name The name of the function to optimize.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,135,/ Use the first call to construct a list of parameters of the
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,135,// Use the first call to construct a list of parameters of the
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,184,"rivate void optimizeFunctionDefinition(List<Parameter> parameters,"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,184,"private void optimizeFunctionDefinition(List<Parameter> parameters,"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,190,"ddVariableToFunction(function, paramName,"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,190,"addVariableToFunction(function, paramName,"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,207," @return true, if it's safe to optimize this function."
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,207,"* @return true, if it's safe to optimize this function."
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,211,/ We need to make sure we're dealing with a call to the function we're
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,211,// We need to make sure we're dealing with a call to the function we're
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,213,/ is a nested call and it's a call to another function.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,213,// is a nested call and it's a call to another function.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,220, in the same way.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,220,* in the same way.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,229, Node equality as intended by the this pass.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,229,* Node equality as intended by the this pass.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,232, @return true if both node are considered equal for the purposes of this
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,233," class, false otherwise."
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,232,* @return true if both node are considered equal for the purposes of this
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,233,"* class, false otherwise."
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,241, Simple container class that keeps tracks of a parameter and whether it
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,241,* Simple container class that keeps tracks of a parameter and whether it
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,267, Adds a variable to the top of a function block.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,267,* Adds a variable to the top of a function block.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,269, @param varName The name of the variable.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,270, @param value The initial value of the variable.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,269,* @param varName The name of the variable.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,270,* @param value The initial value of the variable.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,273,"reconditions.checkArgument(NodeUtil.isFunction(function),"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,273,"Preconditions.checkArgument(NodeUtil.isFunction(function),"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,277,"reconditions.checkArgument(block.getType() == Token.BLOCK,"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,277,"Preconditions.checkArgument(block.getType() == Token.BLOCK,"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,280,"ode newVar = NodeUtil.newVarNode(varName.getQualifiedName(),"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,280,"Node newVar = NodeUtil.newVarNode(varName.getQualifiedName(),"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,314," Given the first argument of a function or call, this removes the nth"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,315, argument of the function or call.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,316, @param firstArg The first arg of the call or function.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,314,"* Given the first argument of a function or call, this removes the nth"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,315,* argument of the function or call.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,316,* @param firstArg The first arg of the call or function.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,322,hile (argIndex != 0 && formalArgPtr != null) {
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,322,while (argIndex != 0 && formalArgPtr != null) {
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,330, Eliminates the parameter from a function definition.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,330,* Eliminates the parameter from a function definition.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,333, @return The Node of the argument removed.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,333,* @return The Node of the argument removed.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,336,"reconditions.checkArgument(NodeUtil.isFunction(function),"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,336,"Preconditions.checkArgument(NodeUtil.isFunction(function),"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,349, Eliminates the parameter from a function call.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,349,* Eliminates the parameter from a function call.
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,352, @return The Node of the argument removed.
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,352,* @return The Node of the argument removed.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,114,"eturn tryFoldAndOr(subtree, left, right);"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,114,"return tryFoldAndOr(subtree, left, right);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,182,ase Token.NAME:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,182,case Token.NAME:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,232,nt result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,232,int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,294, Try to fold {@code left instanceof right} into {@code true}
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,294,* Try to fold {@code left instanceof right} into {@code true}
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1079,"ode.newString("""").copyInformationFrom(right),"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1079,"Node.newString("""").copyInformationFrom(right),"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,35,/ using the control flow graph (like CheckUnreachableCode).
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,35,// using the control flow graph (like CheckUnreachableCode).
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,40,ode optimizeSubtree(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,40,Node optimizeSubtree(Node subtree) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,45,eturn tryFoldBlock(subtree);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,45,return tryFoldBlock(subtree);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,48,eturn tryFoldHookIf(subtree);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,48,return tryFoldHookIf(subtree);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,103,/ TODO(dcc): Make sure this is also applied in the global scope
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,104,/ (i.e. with Token.SCRIPT) parents
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,103,// TODO(dcc): Make sure this is also applied in the global scope
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,104,// (i.e. with Token.SCRIPT) parents
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,291,reconditions.checkArgument(n.getType() == Token.FOR);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,291,Preconditions.checkArgument(n.getType() == Token.FOR);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,360,f (NodeUtil.getBooleanValue(forCondition) == TernaryValue.TRUE) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,360,if (NodeUtil.getBooleanValue(forCondition) == TernaryValue.TRUE) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,363,eportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,363,reportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,29, A peephole optimization that minimizes code by simplifying conditional
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,29,* A peephole optimization that minimizes code by simplifying conditional
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,36,ublic class PeepholeSubstituteAlternateSyntax
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,36,public class PeepholeSubstituteAlternateSyntax
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,63,eturn tryReduceReturn(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,63,return tryReduceReturn(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,70,eturn tryMinimizeIf(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,70,return tryMinimizeIf(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,536,inal int precedence) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,536,final int precedence) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,552,redicate<Node> isPropertyAssignmentInExpressionPredicate =
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,552,Predicate<Node> isPropertyAssignmentInExpressionPredicate =
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,556,eturn (input.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,556,return (input.getType() == Token.GETPROP &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,760, actually reserves memory for an empty array which contains number elements.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,760,* actually reserves memory for an empty array which contains number elements.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,791,rivate Node tryFoldRegularExpressionConstructor(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,791,private Node tryFoldRegularExpressionConstructor(Node n) {
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,218,ew DefinitionsRemover.FunctionExpressionDefinition(name));
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,218,new DefinitionsRemover.FunctionExpressionDefinition(name));
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,225,AR_ARGUMENTS_SHADOWED_ERROR));
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,225,VAR_ARGUMENTS_SHADOWED_ERROR));
False,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,956,/ Minimum is 3 to preserve an indent even when max is small.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,956,// Minimum is 3 to preserve an indent even when max is small.
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,44,f (parent != null
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,44,if (parent != null
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,160, @param parameterNode The parameter node.
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,160,* @param parameterNode The parameter node.
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,170, else {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,170,} else {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,56,iagnosticType.error(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,56,DiagnosticType.warning(
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,61,iagnosticType.error(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,61,DiagnosticType.disabled(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,77,// Whether extern checks emit error.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,78,private boolean strictExternCheck;
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,86,this.strictExternCheck = compiler.getErrorLevel(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,87,"JSError.make("""", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,f (!t.getInput().isExtern()) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,127,if (!strictExternCheck || !t.getInput().isExtern()) {
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,60,"rivate String outputEncoding = ""UTF-8"";"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,60,"private String outputEncoding = ""UTF-8"";"
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,140, Set input file encoding
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,140,* Set input file encoding
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,147, Set output file encoding
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,147,* Set output file encoding
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,40, Adds the given element to a new set if it is not already in a set.
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,42, @throws UnsupportedOperationException if the add operation is not
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,43,     supported by this union-find.
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,40,* Adds the given element to a new set if it is not already in a set.
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,42,* @throws UnsupportedOperationException if the add operation is not
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,43,*     supported by this union-find.
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,52, @throws UnsupportedOperationException if the add operation is not
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,53,     supported by this union-find.
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,52,* @throws UnsupportedOperationException if the add operation is not
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,53,*     supported by this union-find.
False,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,64, @throws IllegalArgumentException if any argument is not an element of this
True,src/com/google/javascript/jscomp/graph/UnionFind.java,src/com/google/javascript/jscomp/graph/UnionFind.java,64,* @throws IllegalArgumentException if any argument is not an element of this
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1182,eturn nodes;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1182,return nodes;
False,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,436,"ase VOID:            return ""VOID"";"
True,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,436,"case VOID:            return ""VOID"";"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,44,"function foo() { foo() }"");"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,44,"""function foo() { foo() }"");"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,51,"function foo(x) { foo(1) }"");"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,51,"""function foo(x) { foo(1) }"");"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,57,"function(x) { foo(1) }"");"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,57,"""function(x) { foo(1) }"");"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,63,"function() { print('hi') }"");"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,63,"""function() { print('hi') }"");"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,67,"plitFunctions(""var foo = function(x) { foo(1) }; foo();"" +"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,67,"splitFunctions(""var foo = function(x) { foo(1) }; foo();"" +"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,75,"function(x,y) { bar(1,2) }"");"
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,75,"""function(x,y) { bar(1,2) }"");"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,99,stParallelizer parallelizer =
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,99,AstParallelizer parallelizer =
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,127,stParallelizer parallelizer =
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,127,AstParallelizer parallelizer =
False,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,110,"ublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,110,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
False,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,233,ublic void exitScope(NodeTraversal t) {
True,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,233,public void exitScope(NodeTraversal t) {
False,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,237,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,test/com/google/javascript/jscomp/CombinedCompilerPassTest.java,237,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,839,if (warning != null) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,840,"String warnings = """";"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,841,for (JSError actualError : compiler.getWarnings()) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,842,"warnings += actualError.description + ""\n"";"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,844,"assertEquals(""There should be one warning. "" + warnings,"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,845,"1, compiler.getWarningCount());"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,846,"assertEquals(warnings, warning, compiler.getWarnings()[0].getType());"
False,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,47,"ew PeepholeOptimizationsPass(compiler, new"
True,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,47,"new PeepholeOptimizationsPass(compiler, new"
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,657,"ist<DiGraphEdge<Instruction, Branch>> outEdges ="
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,657,"List<DiGraphEdge<Instruction, Branch>> outEdges ="
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,191," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,191,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,200," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,200,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,214," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,214,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,226," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,226,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,233," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,233,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,249," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,249,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,260," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,260,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,267," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,267,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,275," * @return {number}\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,276," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,275,""" * @return {number}\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,276,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,284," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,284,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,292,ublic void testExportDontEmitPrototypePathPrefix() {
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,292,public void testExportDontEmitPrototypePathPrefix() {
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,321, type information for the exported functions and the client uses them
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,321,* type information for the exported functions and the client uses them
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,324,ublic void testUseExportsAsExterns() {
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,325,tring librarySource =
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,324,public void testUseExportsAsExterns() {
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,325,String librarySource =
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,329," */\n"" +"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,329,""" */\n"" +"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,334,tring clientSource =
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,334,String clientSource =
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,341,esult libraryCompileResult = compileAndExportExterns(librarySource);
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,341,Result libraryCompileResult = compileAndExportExterns(librarySource);
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,348,"esult clientCompileResult = compileAndExportExterns(clientSource,"
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,348,"Result clientCompileResult = compileAndExportExterns(clientSource,"
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,356,tring librarySource =
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,356,String librarySource =
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,362,esult libraryCompileResult = compileAndExportExterns(librarySource);
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,362,Result libraryCompileResult = compileAndExportExterns(librarySource);
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,369,tring librarySource =
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,369,String librarySource =
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,377,esult libraryCompileResult = compileAndExportExterns(librarySource);
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,377,Result libraryCompileResult = compileAndExportExterns(librarySource);
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,391,tring librarySource =
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,391,String librarySource =
False,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,401,esult libraryCompileResult = compileAndExportExterns(librarySource);
True,test/com/google/javascript/jscomp/ExternExportsPassTest.java,test/com/google/javascript/jscomp/ExternExportsPassTest.java,401,Result libraryCompileResult = compileAndExportExterns(librarySource);
False,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,131,"ssertSame(def, defUse.getDef(""param1"", use));"
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,131,"assertSame(def, defUse.getDef(""param1"", use));"
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,85,bstractPeepholeOptimization note1Applied =
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,85,AbstractPeepholeOptimization note1Applied =
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,97,bstractPeepholeOptimization note2Applied =
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,97,AbstractPeepholeOptimization note2Applied =
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,131,rivate static class RemoveNodesNamedXUnderVarOptimization
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,131,private static class RemoveNodesNamedXUnderVarOptimization
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,158,rivate static class RemoveNodesNamedXOptimization
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,158,private static class RemoveNodesNamedXOptimization
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,177,rivate static class RemoveParentVarsForNodesNamedX
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,177,private static class RemoveParentVarsForNodesNamedX
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,213,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,213,currentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,222,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,222,currentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,231,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,231,currentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,31,private CheckLevel externValidationpErrorLevel;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,41,externValidationpErrorLevel = CheckLevel.ERROR;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,50,"options.setWarningLevel(DiagnosticGroups.EXTERNS_VALIDATION,"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,51,externValidationpErrorLevel);
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,117,externValidationpErrorLevel = CheckLevel.ERROR;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,123,externValidationpErrorLevel = CheckLevel.ERROR;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,128,public void testPropReferenceInExterns3() {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,129,externValidationpErrorLevel = CheckLevel.WARNING;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,130,"test(""asdf.foo;"", """", """","
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,131,"VarCheck.UNDEFINED_VAR_ERROR, VarCheck.UNDEFINED_EXTERN_VAR_ERROR);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,133,externValidationpErrorLevel = CheckLevel.OFF;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,134,"test(""asdf.foo;"", """", """","
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,135,"VarCheck.UNDEFINED_VAR_ERROR, null);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,330,"new VarCheck(compiler, sanityCheck)).process(externs, root);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,347,"(new VarCheck(compiler, sanityCheck))"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,348,".process(externs, root);"
False,test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java,test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java,101,"ssertContentsAnyOrder(classes,"
True,test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java,test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java,101,"assertContentsAnyOrder(classes,"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,288,case GetterProp:
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,289,"transformGetterProp(element, parent);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,290,break;
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,291,case SetterProp:
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,292,"transformSetterProp(element, parent);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,293,break;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,719,"ransformElement(element.getChild(0), parent);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,725,"transformElement(element.getChild(0), node);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,729,* GetterProp is a object literal entry for a getter.
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,730,"* For example, {get x() {return 1}}"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,732,"private void transformGetterProp(JsonML element, Node parent)"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,733,throws JsonMLException {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,734,"transformProp(Token.GET, element, parent);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,738,* GetterProp is a object literal entry for a getter.
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,739,"* For example, {set x() {return 1}}"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,741,"private void transformSetterProp(JsonML element, Node parent)"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,742,throws JsonMLException {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,743,"transformProp(Token.SET, element, parent);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,746,"private void transformProp(int tokenType, JsonML element, Node parent)"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,747,throws JsonMLException {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,748,"Object name = getObjectAttribute(element, TagAttr.NAME);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,750,Node node = null;
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,751,if (name instanceof Number) {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,752,// TODO(johnlenz): convert the number to a quoted string.
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,753,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,754,"""Not yet supported."");"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,755,} else if (name instanceof String) {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,756,"node = Node.newString(tokenType, (String) name);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,757,} else {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,758,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,759,"""The name of the property has invalid type."");"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,762,setPosition(node);
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,763,parent.addChildToBack(node);
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,765,"transformElement(element.getChild(0), node);"
False,src/com/google/javascript/jscomp/jsonml/TagType.java,src/com/google/javascript/jscomp/jsonml/TagType.java,75,"etterProp,         // not supported by Closure Compiler"
False,src/com/google/javascript/jscomp/jsonml/TagType.java,src/com/google/javascript/jscomp/jsonml/TagType.java,76,"etterProp,         // not supported by Closure Compiler"
True,src/com/google/javascript/jscomp/jsonml/TagType.java,src/com/google/javascript/jscomp/jsonml/TagType.java,75,"GetterProp,"
True,src/com/google/javascript/jscomp/jsonml/TagType.java,src/com/google/javascript/jscomp/jsonml/TagType.java,76,"SetterProp,"
False,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,102,alidateDataProp(element);
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,102,validateProp(element);
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,103,break;
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,104,case GetterProp:
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,105,validateProp(element);
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,106,break;
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,107,case SetterProp:
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,108,validateProp(element);
False,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,231,rivate void validateDataProp(JsonML element) {
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,237,private void validateProp(JsonML element) {
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,328,TagType[] expected =
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,329,"{TagType.DataProp, TagType.GetterProp, TagType.SetterProp};"
False,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,323,"alidateChildType(element, TagType.DataProp, i);"
True,src/com/google/javascript/jscomp/jsonml/Validator.java,src/com/google/javascript/jscomp/jsonml/Validator.java,331,"validateChildType(element, expected, i);"
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,640,terator<Node> it = node.children().iterator();
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,641,hile (it.hasNext()) {
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,642,sonML item = new JsonML(TagType.DataProp);
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,643,ode child = it.next();
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,644,bject name = null;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,645,witch (child.getType()) {
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,640,for (Node key : node.children()) {
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,641,Node value = key.getFirstChild();
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,642,JsonML item;
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,643,Object name;
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,644,switch (key.getType()) {
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,647,ame = child.getString();
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,646,item = new JsonML(TagType.DataProp);
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,647,name = key.getString();
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,650,ame = child.getDouble();
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,650,item = new JsonML(TagType.DataProp);
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,651,name = key.getDouble();
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,652,break;
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,653,case Token.GET:
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,654,item = new JsonML(TagType.GetterProp);
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,655,name = key.getString();
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,656,break;
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,657,case Token.SET:
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,658,item = new JsonML(TagType.SetterProp);
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,659,name = key.getString();
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,656,"rocessNode(it.next(), item);"
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,665,"processNode(value, item);"
False,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,52,hrow new Exception(errorMsg);
True,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,52,"assertEquals(errorMsg, expected, msg);"
True,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,568,TagType[] tags =
True,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,569,"{TagType.DataProp, TagType.GetterProp, TagType.SetterProp };"
False,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,573,"agType.ObjectExpr, TagType.DataProp, TagType.IdExpr, 1);"
True,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java,575,"TagType.ObjectExpr, tags, TagType.IdExpr, 1);"

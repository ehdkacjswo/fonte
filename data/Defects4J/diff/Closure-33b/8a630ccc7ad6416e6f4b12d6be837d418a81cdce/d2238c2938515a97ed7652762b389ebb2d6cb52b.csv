is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,39,ublic abstract class AbstractCompiler implements SourceExcerptProvider {
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,39,public abstract class AbstractCompiler
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,40,"implements SourceExcerptProvider, CodeChangeHandler {"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,108,@Override
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,29,bstract class AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,29,abstract class AbstractPeepholeOptimization implements CodeChangeHandler {
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,60,rotected void reportCodeChange() {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,60,@Override
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,61,public void reportCodeChange() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,24,import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,30,import com.google.javascript.rhino.IR;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,38,mport java.util.Stack;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,41,import javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,59,rivate final boolean canModifyExterns;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,62,private final boolean doNotPinExternsPropertiesOnPrototypes;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,63,private final boolean trackThisPropertiesDefinitions;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,65,private final boolean anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,101,/ gloval variable that it's assigned to.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,106,// global variable that it's assigned to.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,109,// A list of extern property names that have not been added to the
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,110,// symbolGraph.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,111,private final Set<String> deferredExternPropNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,109," @param canModifyExterns If true, then we can move prototype"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,110,     properties that are declared in the externs file.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,111," @param anchorUnusedVars If true, then we must mark all vars as referenced,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,118,"* @param doNotPinExternsPropertiesOnPrototypes If true, do not consider"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,119,*     externs property definitions when looking for uses of properties
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,120,*     defined on prototypes.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,121,"* @param anchorUnusedVars If true, mark all vars as referenced,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,123,"* @param trackThisPropertiesDefinitions If true, add assignments to"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,124,"*     properties defined on ""this"" as definitions in the symbolGraph."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,125,"* @param pinPropertiesDefinedOnObjectLiterals If true, mark all properties"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,126,*     on object literals (that are not otherwise prototype
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,127,*     property definitions) as referenced.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,115,"SModuleGraph moduleGraph, boolean canModifyExterns,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,116,oolean anchorUnusedVars) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,130,"JSModuleGraph moduleGraph,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,131,"boolean doNotPinExternsPropertiesOnPrototypes,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,132,"boolean anchorUnusedVars,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,133,"boolean trackThisPropertiesDefinitions,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,134,boolean pinPropertiesDefinedOnObjectLiterals) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,119,his.canModifyExterns = canModifyExterns;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,137,this.doNotPinExternsPropertiesOnPrototypes =
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,138,doNotPinExternsPropertiesOnPrototypes;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,139,this.trackThisPropertiesDefinitions = trackThisPropertiesDefinitions;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,141,this.anchorObjectLiteralProperties = pinPropertiesDefinedOnObjectLiterals;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,147,f (!canModifyExterns) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,148,"odeTraversal.traverse(compiler, externRoot,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,149,ew ProcessExternProperties());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,168,"NodeTraversal.traverse(compiler, externRoot,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,169,new ProcessExternProperties());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,199,rivate Stack<NameContext> symbolStack = new Stack<NameContext>();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,218,private ArrayDeque<NameContext> symbolStack = new ArrayDeque<NameContext>();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,219,"// When a side-effect is encountered, any dependent value references must"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,220,// be associated with the current scope.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,221,private ArrayDeque<NameContext> scopeStack = new ArrayDeque<NameContext>();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,226,NameContext nameContext;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,205,tring propName = getPrototypePropertyNameFromRValue(n);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,206,f (propName != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,207,ymbolStack.push(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,208,ew NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,209,"etNameInfoForName(propName, PROPERTY),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,210,.getScope()));
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,211," else if (isGlobalFunctionDeclaration(t, n)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,228,"if (isGlobalFunctionDeclaration(t, n)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,216,ymbolStack.push(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,217,"ew NameContext(getNameInfoForName(name, VAR), t.getScope()));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,233,nameContext =
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,234,new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,235,"symbolStack.peek(),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,236,"getNameInfoForName(name, VAR), t.getScope(),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,237,/* chained */ false);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,219,/ NOTE(nicksantos): We use the same anonymous node for all
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,220,/ functions that do not have reasonable names. I can't remember
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,221,/ at the moment why we do this. I think it's because anonymous
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,222,/ nodes can never have in-edges. They're just there as a placeholder
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,223,"/ for scope information, and do not matter in the edge propagation."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,224,"ymbolStack.push(new NameContext(anonymousNode, t.getScope()));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,239,// We use the same anonymous node for all function expressions.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,240,"// They're just there as a placeholder for scope information, and"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,241,// do not matter in the edge propagation.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,nameContext = new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,"symbolStack.peek(), anonymousNode, t.getScope(),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,244,/* chained */ true);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,228,"ymbolStack.push(new NameContext(globalNode, t.getScope()));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,248,nameContext = new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,249,"null, globalNode, t.getScope(), /* chained */ false);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,252,symbolStack.push(nameContext);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,253,scopeStack.push(nameContext);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,259,scopeStack.pop();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,239,/ Process prototype assignments to non-functions.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,240,"tring propName = processNonFunctionPrototypeAssign(n, parent);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,241,f (propName != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,ymbolStack.push(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,ew NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,244,"etNameInfoForName(propName, PROPERTY), null));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,264,"NameContext context = maybeGetContextForNode(n, true);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,265,if (context != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,266,symbolStack.push(context);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,271,private NameContext maybeGetContextForNode(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,272,"Node n, boolean checkSideEffects) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,273,NameContext context = null;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,274,// NameInfo dependencies contained in untracked side-effect nodes are
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,275,// assigned to the current scope NameContext. At the point in the
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,276,// traversal that we detect the side-effect
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,277,// conditional NameInfo dependences have already been assigned.  For
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,278,"// example:  ""x ? f() : g()"".  The covering HOOK node does not have"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,279,"// side effects, neither does the condition ""x"".  Assuming that ""f()"""
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,280,"// and ""g()"" have side-effects, the HOOK can not be removed, so ""x"" must"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,281,// be rescued.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,283,if (n.isHook() || n.isOr() || n.isAnd()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,284,"if (checkSideEffects && NodeUtil.mayHaveSideEffects(n, compiler)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,285,// Any property (or global name) references are add as a dependency
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,286,// on the current scope.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,287,context = scopeStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,288,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,289,// There aren't any side-effects so continue with the current context.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,290,context = symbolStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,292,"} else if (NodeUtil.nodeTypeMayHaveSideEffects(n, compiler)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,293,// Assignments and other contexts
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,294,String propName = null;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,295,if (isUnpinnedPropertyUseParent(n)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,296,propName = getPrototypePropertyName(n.getFirstChild());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,298,"context = getContextForPropName(propName,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,299,NodeUtil.isExpressionResultUsed(n));
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,300,"} else if (NodeUtil.isObjectLitKey(n, n.getParent())) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,301,// Handle object literal definitions potential property assignment
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,302,String propName = getPrototypePropertyName(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,303,"context = getContextForPropName(propName, false);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,305,return context;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,308,private boolean isContextIntroducingNode(Node n) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,309,"return maybeGetContextForNode(n, false) != null;"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,312,private NameContext getContextForPropName(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,"String propName, boolean resultUsed) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314,NameContext context;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,315,if (propName != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,316,context = new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,317,"symbolStack.peek(),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,318,"getNameInfoForName(propName, PROPERTY), null,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,319,resultUsed);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,320,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,"// side-effects should be associated with the enclosing scope,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,322,// regardless of any enclosing prop assignment
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,323,context = scopeStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,325,return context;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,251,f (n.isGetProp()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,252,tring propName = n.getFirstChild().getNext().getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,330,switch (n.getType()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,331,case Token.GETPROP:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,332,// Check for interesting property definitions and references
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,333,"visitGetProp(t, n);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,334,break;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,335,case Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,336,// Check for interesting property definitions
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,337,"visitObjectLit(t, n);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,338,break;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,339,case Token.NAME:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,340,// Check for interesting variable definitions and references
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,341,"visitName(t, n);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,342,break;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,343,case Token.CALL:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,344,// Check for special case uses of properties
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,345,"visitCall(t, n);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,346,break;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,254,f (n.isQualifiedName()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,255,"f (propName.equals(""prototype"")) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,256,"f (processPrototypeRef(t, n)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,257,eturn;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,259, else if (compiler.getCodingConvention().isExported(propName)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,260,"ddGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,349,if (isContextIntroducingNode(n)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,350,symbolStack.pop();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,354,"private void visitGetProp(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,355,if (n.getFirstChild().isThis()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,356,"if (processThisRef(t, n.getFirstChild())) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,357,return;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,361,String propName = n.getFirstChild().getNext().getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,362,boolean isPinningUse = isPinningPropertyUse(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,364,if (n.isQualifiedName()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,365,"if (propName.equals(""prototype"")) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,366,"if (processPrototypeRef(t, n)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,262, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,263,/ Do not mark prototype prop assigns as a 'use' in the global scope.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,264,f (n.getParent().isAssign() && n.getNext() != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,265,tring rValueName = getPrototypePropertyNameFromRValue(n);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,266,f (rValueName != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,267,eturn;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,369,} else if (compiler.getCodingConvention().isExported(propName)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,370,"addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,371,return;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,372,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,373,// Do not mark prototype prop assigns as a 'use' in the global
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,374,// scope.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,375,if (!isPinningUse) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,376,String lValueName = getPrototypePropertyName(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,377,if (lValueName != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,378,return;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,384,if (isPinningUse) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,274, else if (n.isObjectLit()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,389,"private void visitObjectLit(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,390,if (anchorObjectLiteralProperties) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,284,"/ var x = {a: 1, b: 2}"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,285,/ should count as a use of property a and b.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,286,or (Node propNameNode = n.getFirstChild(); propNameNode != null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,287,ropNameNode = propNameNode.getNext()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,288,"/ May be STRING, GET, or SET, but NUMBER isn't interesting."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,289,f (!propNameNode.isQuotedString()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,290,"ddSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,293, else if (n.isName()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,294,tring name = n.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,296,ar var = t.getScope().getVar(name);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,297,f (var != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,298,/ Only process global functions.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,299,f (var.isGlobal()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,300,f (var.getInitialValue() != null &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,301,ar.getInitialValue().isFunction()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,302,f (t.inGlobalScope()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,303,"f (!processGlobalFunctionDeclaration(t, n, var)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,304,"ddGlobalUseOfSymbol(name, t.getModule(), VAR);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,306, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,307,"ddSymbolUse(name, t.getModule(), VAR);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,400,"pinObjectLiteralProperties(n, t.getModule());"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,311,"/ If it is not a global, it might be accessing a local of the outer"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,312,/ scope. If that's the case the functions between the variable's
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,/ declaring scope and the variable reference scope cannot be moved.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314, else if (var.getScope() != t.getScope()){
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,315,or (int i = symbolStack.size() - 1; i >= 0; i--) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,316,ameContext context = symbolStack.get(i);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,317,f (context.scope == var.getScope()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,318,reak;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,404,"private void visitName(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,405,String name = n.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,407,Var var = t.getScope().getVar(name);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,408,if (var != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,409,// Only process global functions.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,410,if (var.isGlobal()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,411,if (var.getInitialValue() != null &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,412,var.getInitialValue().isFunction()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,413,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,414,"if (!processGlobalFunctionDeclaration(t, n, var)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,415,"addGlobalUseOfSymbol(name, t.getModule(), VAR);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,ontext.name.readClosureVariables = true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,417,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,418,"addSymbolUse(name, t.getModule(), VAR);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,422,"// If it is not a global, it might be accessing a local of the outer"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,423,// scope. If that's the case the functions between the variable's
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,424,// declaring scope and the variable reference scope cannot be moved.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,425,} else if (var.getScope() != t.getScope()){
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,426,handleScopeReference(var.getScope());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,327,/ Process prototype assignments to non-functions.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,328,"f (processNonFunctionPrototypeAssign(n, parent) != null) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,329,ymbolStack.pop();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,431,"private void visitCall(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,432,"// Look for properties referenced through ""JSCompiler_propertyRename""."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,433,Node target = n.getFirstChild();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,434,if (n.hasMoreThanOneChild()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,435,&& target.isName()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,436,&& target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,437,Node propNode = target.getNext();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,438,if (propNode.isString()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,439,String propName = propNode.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,440,"addSymbolUse(propName, t.getModule(), PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,442,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,443,"// ... and for calls to ""goog.reflect.object"" and the ilk."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,444,ObjectLiteralCast cast = compiler.getCodingConvention()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,445,".getObjectLiteralCast(t, n);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,446,if (cast != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,447,"pinObjectLiteralProperties(cast.objectNode, t.getModule());"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,333,"rivate void addSymbolUse(String name, JSModule module, SymbolType type) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,334,"ameInfo info = getNameInfoForName(name, type);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,335,ameInfo def = null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,336,/ Skip all anonymous nodes. We care only about symbols with names.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,337,or (int i = symbolStack.size() - 1; i >= 0; i--) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,338,ef = symbolStack.get(i).name;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,339,f (def != anonymousNode) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,453,* Handle a reference to a scope from an inner scope.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,454,* @param scope The referenced scope
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,456,private void handleScopeReference(Scope scope) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,457,NameContext context = symbolStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,458,while (context != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,459,context.name.readClosureVariables = true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,460,if (context.parent != null && context.parent.scope == scope) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,463,context = context.parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,343,f (!def.equals(info)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,344,"ymbolGraph.connect(def, module, info);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,466,while (context != null && context.resultUsed) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,context.name.readClosureVariables = true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,468,// Stop when we would cross into another scope.  Function declarations
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,469,// don't chain so there is no need to explicitly check for them here.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,470,if (context.parent == null || context.parent.name == anonymousNode) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,471,break;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,context = context.parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,349," If this is a non-function prototype assign, return the prop name."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,350," Otherwise, return null."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,478,* Mark properties in the literal as referenced in the provided module.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,479,* @param n The object literal
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,480,* @param module The module
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,352,"rivate String processNonFunctionPrototypeAssign(Node n, Node parent) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,353,"f (isAssignRValue(n, parent) && !n.isFunction()) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,354,eturn getPrototypePropertyNameFromRValue(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,482,"private void pinObjectLiteralProperties(Node n, JSModule module) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,483,Preconditions.checkArgument(n.isObjectLit());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,485,"// var x = {a: 1, b: 2}"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,486,// should count as a use of property a and b.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,487,for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,488,"// May be STRING, GET, or SET, but NUMBER isn't interesting."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,489,if (!key.isQuotedString()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,490,"addSymbolUse(key.getString(), module, PROPERTY);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,356,eturn null;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,496,* @return Whether the property is used in a way that prevents its removal.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,498,private boolean isPinningPropertyUse(Node n) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,499,"// Rather than looking for cases that are uses, we assume all references"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,500,// are pinning uses unless they are:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,501,//  - a simple assignment (x.a = 1)
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,502,"//  - a compound assignment or increment (x++, x += 1) whose result is"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,503,//    otherwise unused
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,505,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,506,if (n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,507,if (parent.isAssign()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,508,// A simple assignment doesn't pin the property.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,509,return false;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,510,} else if (NodeUtil.isAssignmentOp(parent)
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,511,|| parent.isInc() || parent.isDec()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,512,"// In general, compound assignments are both reads and writes, but"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,513,// if the property is never otherwise read we can consider it simply
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,514,// a write.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,515,// However if the assign expression is used as part of a larger
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,516,"// expression, we much consider it a read. For example:"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,517,//    x = (y.a += 1);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,518,return NodeUtil.isExpressionResultUsed(parent);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,521,return true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,525,* @return Whether any children are unpinned property uses.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,527,private boolean isUnpinnedPropertyUseParent(Node n) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,528,if (n.hasChildren()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,529,// Only the first child can be an unpinned use.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,530,return !isPinningPropertyUse(n.getFirstChild());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,532,return false;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,535,"private void addSymbolUse(String name, JSModule module, SymbolType type) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,536,"NameInfo info = getNameInfoForName(name, type);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,537,NameContext context = symbolStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,539,"context.connect(symbolGraph, module, info);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,555,"// Looking for: ""function f() {}"" or ""var f = function()"""
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,377, Returns true if this is the r-value of an assignment.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,379,"rivate boolean isAssignRValue(Node n, Node parent) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,380,eturn parent != null && parent.isAssign() && parent.getFirstChild() != n;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,390,rivate String getPrototypePropertyNameFromRValue(Node rValue) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,391,ode lValue = NodeUtil.getBestLValue(rValue);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,392,f (lValue == null ||
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,Value.getParent() == null ||
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,Value.getParent().getParent() == null ||
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,395,"(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,396,odeUtil.isExprAssign(lValue.getParent().getParent()))) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,397,eturn null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,400,tring lValueName =
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,401,odeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,567,private String getPrototypePropertyName(Node lValue) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,568,String lValueName = NodeUtil.getBestLValueName(lValue);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,411,"f (!firstPart.endsWith("".prototype"")) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,579,"if (!firstPart.endsWith("".prototype"")"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,580,"&& !(trackThisPropertiesDefinitions && firstPart.equals(""this""))) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,461,ode dest = n.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,462,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,463,ode grandParent = parent.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,465,f (dest.isString() &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,466,odeUtil.isExprAssign(grandParent) &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,"odeUtil.isVarOrSimpleAssignLhs(n, parent)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,468,tring name = dest.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,469,roperty prop = new AssignmentProperty(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,470,"randParent,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,471,"aybeGetVar(t, root),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,472,.getModule());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,"etNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,474,eturn true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,476,reak;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,630,// NOTE: for properties defined on the prototype we don't ever
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,631,// need to check the deferred definitions.  They have either been
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,632,// added during the pass over the externs or we are ignoring them
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,633,// because canModifyExternsPrototypes is set.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,634,"return processGetProp(t, n, root,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,635,/* checkDeferredExterns */ false);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,499,"rivate Var maybeGetVar(NodeTraversal t, Node maybeName) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,500,eturn maybeName.isName()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,659,"* Processes a ""this"" reference, which may be a"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,660,* GETPROP (in the case of this.bar).
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,661,* under an assignment (in the case of Foo.prototype = ...).
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,662,* @return True if a declaration was added.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,664,"private boolean processThisRef(NodeTraversal t, Node ref) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,665,if (trackThisPropertiesDefinitions) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,666,Node n = ref.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,667,// this.getBar = function() { ... }
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,668,if (n.isGetProp()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,669,"// NOTE: for properties defined on this, we don't ever"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,670,// need to check the deferred definitions.  They have either been
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,671,// added during the pass over the externs or we are ignoring them
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,672,// because canModifyExternsPrototypes is set.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,673,"return processGetProp(t, n, null,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,674,/* checkDeferredExterns */ true);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,677,return false;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,681,"* Given a GETPROP, determine if the reference is property write operation."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,682,* @return true if a GETPROP use is a candidate for removal.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,684,"private boolean processGetProp(NodeTraversal t, Node n, Node rootName,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,685,boolean checkDeferredExterns) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,686,Node dest = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,687,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,688,Preconditions.checkState(dest.isString());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,689,if (!isPinningPropertyUse(n)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,690,String name = dest.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,691,if (!checkDeferredExterns || !deferredExternPropNames.contains(name)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,692,Property prop = new AssignmentProperty(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,693,"parent,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,694,"maybeGetVar(t, rootName),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,695,t.getModule());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,696,"getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,698,return true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,700,return false;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,703,"private Var maybeGetVar(NodeTraversal t, @Nullable Node maybeName) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,704,return (maybeName != null && maybeName.isName())
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,514,"ymbolGraph.connect(externNode, firstModule,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,515,"etNameInfoForName(n.getLastChild().getString(), PROPERTY));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,718,if (doNotPinExternsPropertiesOnPrototypes) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,719,deferredExternPropNames.add(n.getLastChild().getString());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,720,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,721,connectExternProp(n.getLastChild().getString());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,727,private void connectExternProp(String propName) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,728,"symbolGraph.connect(externNode, firstModule,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,729,"getNameInfoForName(propName, PROPERTY));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,548,oid remove();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,760,void remove(CodeChangeHandler reporter);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,569,lass GlobalFunction implements Symbol {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,781,static class GlobalFunction implements Symbol {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,590,ublic void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,802,public void remove(CodeChangeHandler reporter) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,637,rivate final Node exprNode;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,849,private final Node assignNode;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,645,his.exprNode = node;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,857,this.assignNode = node;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,656,ublic void remove() {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,657,"odeUtil.removeChild(exprNode.getParent(), exprNode);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,868,public void remove(CodeChangeHandler reporter) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,869,// TODO(johnlenz): use trySimplifyUnusedResult
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,870,if (NodeUtil.isAssignmentOp(assignNode)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,871,Node value = getAssignNode().getLastChild();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,872,Node exprParent = assignNode.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,873,if (exprParent.isExprResult()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,874,&& !NodeUtil.mayHaveSideEffects(value)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,875,"NodeUtil.removeChild(exprParent.getParent(), exprParent);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,876,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,877,if (!NodeUtil.isExpressionResultUsed(assignNode)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,878,"Node result = NodeUtil.trySimplifyUnusedResult(value, reporter);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,879,if (result == null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,880,"// FOR init or increment expressions, the first op of COMMA, etc"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,881,"// must have a node to be valid, so simple use a literal ""0"" if"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,882,// nothing remains after simplification.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,883,value = IR.number(0);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,884,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,885,value = result.detachFromParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,887,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,888,value.detachFromParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,890,"exprParent.replaceChild(getAssignNode(), value);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,892,} else if (assignNode.isInc() || assignNode.isDec()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,893,"assignNode.getParent().replaceChild(assignNode, IR.number(0));"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,894,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,895,"throw new IllegalStateException(""unexpected: ""+ assignNode);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,671,eturn exprNode.getFirstChild();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,910,return assignNode;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,710,ublic void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,949,public void remove(CodeChangeHandler reporter) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,975,final NameContext parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,741,"ameContext(NameInfo name, Scope scope) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,981,// Whether any dependencies should also be added to the parent context.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,982,// This is the case with assignment expressions such as:
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,983,//   a = b = foo;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,984,// or
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,985,//   a = function() {}
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,986,final boolean resultUsed;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,988,NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,989,"NameContext parent, NameInfo name, Scope scope, boolean resultUsed) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,990,this.parent = parent;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,993,this.resultUsed = resultUsed;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,996,void connect(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,997,"LinkedDirectedGraph<NameInfo, JSModule> symbolGraph,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,998,"JSModule module, NameInfo info) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,999,NameInfo def = this.name;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1000,// don't add self connections
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1001,if (def != anonymousNode && !info.equals(def)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1002,"symbolGraph.connect(this.name, module, info);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1004,if (this.resultUsed) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1005,"this.parent.connect(symbolGraph, module, info);"
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,29,oid reportChange();
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,29,void reportCodeChange();
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,39,ublic void reportChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,39,public void reportCodeChange() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,57,ublic void reportChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,57,public void reportCodeChange() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1857,andler.reportChange();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1857,handler.reportCodeChange();
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,76,"anModifyExterns, false);"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,76,"canModifyExterns, false, false, true);"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,138,// getRootVar will be null if the definition is an expression like
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,139,"// ""this"" of ""foo()""."
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,548,options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,549,ptions.propertyRenaming !=
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,550,ropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,548,!usingHeuristicRenaming()) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,673,private boolean usingHeuristicRenaming() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,674,return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,675,options.propertyRenaming == PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,732,asses.add(removeUnusedClassProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1626,// TODO(johnlenz): make the object literal anchoring an compiler option.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1626,options.removeUnusedVars);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1631, Remove prototype properties that do not appear to be used.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1633,inal PassFactory removeUnusedClassProperties =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1634,"ew PassFactory(""removeUnusedClassProperties"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1635,Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1636,rotected CompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1637,eturn new RemoveUnusedClassProperties(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1629,"!options.removeUnusedVars,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1630,"!usingHeuristicRenaming(), // can remove ""this"" properties"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1631,true); // anchor object lit prop
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2185,eturn options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2186,ptions.propertyRenaming ==
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2187,ropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2179,return usingHeuristicRenaming();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3135,* General cascading unused operation node removal.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3136,* @param n The root of the expression to simplify.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3137,"* @return The replacement node, or null if the node was is not useful."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3139,"static Node trySimplifyUnusedResult(Node n, CodeChangeHandler reporter) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3140,"return trySimplifyUnusedResult(n, reporter, true);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3144,* General cascading unused operation node removal.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3145,* @param n The root of the expression to simplify.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3146,"* @param removeUnused If true, the node is removed from the AST if"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3147,"*     it is not useful, otherwise it replaced with an EMPTY node."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3148,"* @return The replacement node, or null if the node was is not useful."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3150,static Node trySimplifyUnusedResult(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3151,"Node n, CodeChangeHandler reporter, boolean removeUnused) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3152,Node result = n;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3154,// Simplify the results of conditional expressions
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3155,switch (n.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3156,case Token.HOOK:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3157,"Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3158,"Node falseNode = trySimplifyUnusedResult(n.getLastChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3159,"// If one or more of the conditional children were removed,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3160,// transform the HOOK to an equivalent operation:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3161,//    x() ? foo() : 1 --> x() && foo()
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3162,//    x() ? 1 : foo() --> x() || foo()
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3163,//    x() ? 1 : 1 --> x()
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3164,//    x ? 1 : 1 --> null
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3165,if (trueNode == null && falseNode != null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3166,n.setType(Token.OR);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3167,Preconditions.checkState(n.getChildCount() == 2);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3168,} else if (trueNode != null && falseNode == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3169,n.setType(Token.AND);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3170,Preconditions.checkState(n.getChildCount() == 2);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3171,} else if (trueNode == null && falseNode == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3172,"result = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3173,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3174,// The structure didn't change.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3175,result = n;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3177,break;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3178,case Token.AND:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3179,case Token.OR:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3180,// Try to remove the second operand from a AND or OR operations:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3181,//    x() || f --> x()
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3182,//    x() && f --> x()
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3183,Node conditionalResultNode = trySimplifyUnusedResult(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3184,"n.getLastChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3185,if (conditionalResultNode == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3186,Preconditions.checkState(n.hasOneChild());
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3187,"// The conditionally executed code was removed, so"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3188,// replace the AND/OR with its LHS or remove it if it isn't useful.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3189,"result = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3191,break;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3192,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3193,"// A function expression isn't useful if it isn't used, remove it and"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3194,// don't bother to look at its children.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3195,result = null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3196,break;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3197,case Token.COMMA:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3198,// We rewrite other operations as COMMA expressions (which will later
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3199,"// get split into individual EXPR_RESULT statement, if possible), so"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3200,// we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3201,// nodes.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3202,"Node left = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3203,"Node right = trySimplifyUnusedResult(n.getLastChild(), reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3204,if (left == null && right == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3205,result = null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3206,} else if (left == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3207,result = right;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3208,} else if (right == null){
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3209,result = left;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3210,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3211,// The structure didn't change.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3212,result = n;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3214,break;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3215,default:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3216,if (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3217,// This is the meat of this function. The node itself doesn't generate
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3218,// any side-effects but preserve any side-effects in the children.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3219,Node resultList = null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3220,"for (Node next, c = n.getFirstChild(); c != null; c = next) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3221,next = c.getNext();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3222,"c = trySimplifyUnusedResult(c, reporter);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3223,if (c != null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3224,c.detachFromParent();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3225,if (resultList == null)  {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3226,// The first side-effect can be used stand-alone.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3227,resultList = c;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3228,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3229,"// Leave the side-effects in-place, simplifying it to a COMMA"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3230,// expression.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3231,"resultList = IR.comma(resultList, c).srcref(c);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3235,result = resultList;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3239,"// Fix up the AST, replace or remove the an unused node (if requested)."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3240,if (n != result) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3241,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3242,if (result == null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3243,if (removeUnused) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3244,parent.removeChild(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3245,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3246,result = IR.empty().srcref(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3247,"parent.replaceChild(n, result);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3249,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3250,// A new COMMA expression may not have an existing parent.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3251,if (result.getParent() != null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3252,result.detachFromParent();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3254,"n.getParent().replaceChild(n, result);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3256,reporter.reportCodeChange();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3259,return result;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,138,ode result = trySimplifyUnusedResult(subtree.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,138,Node result = NodeUtil.trySimplifyUnusedResult(
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,139,"subtree.getFirstChild(), this);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,155, General cascading unused operation node removal.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,156, @param n The root of the expression to simplify.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,157," @return The replacement node, or null if the node was is not useful."
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,159,rivate Node trySimplifyUnusedResult(Node n) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,160,"eturn trySimplifyUnusedResult(n, true);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,164, General cascading unused operation node removal.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,165, @param n The root of the expression to simplify.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,166," @param removeUnused If true, the node is removed from the AST if"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,167,"     it is not useful, otherwise it replaced with an EMPTY node."
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,168," @return The replacement node, or null if the node was is not useful."
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,170,"rivate Node trySimplifyUnusedResult(Node n, boolean removeUnused) {"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,171,ode result = n;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,173,/ Simplify the results of conditional expressions
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,174,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,175,ase Token.HOOK:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,176,ode trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,177,ode falseNode = trySimplifyUnusedResult(n.getLastChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,178,"/ If one or more of the conditional children were removed,"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,179,/ transform the HOOK to an equivalent operation:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,180,/    x() ? foo() : 1 --> x() && foo()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,181,/    x() ? 1 : foo() --> x() || foo()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,182,/    x() ? 1 : 1 --> x()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,183,/    x ? 1 : 1 --> null
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,184,f (trueNode == null && falseNode != null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,185,.setType(Token.OR);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,186,reconditions.checkState(n.getChildCount() == 2);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,187, else if (trueNode != null && falseNode == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,188,.setType(Token.AND);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,189,reconditions.checkState(n.getChildCount() == 2);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,190, else if (trueNode == null && falseNode == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,191,esult = trySimplifyUnusedResult(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,192, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,193,/ The structure didn't change.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,194,esult = n;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,196,reak;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,197,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,198,ase Token.OR:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,199,/ Try to remove the second operand from a AND or OR operations:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,200,/    x() || f --> x()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,201,/    x() && f --> x()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,202,ode conditionalResultNode = trySimplifyUnusedResult(
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,203,.getLastChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,204,f (conditionalResultNode == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,205,reconditions.checkState(n.hasOneChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,206,"/ The conditionally executed code was removed, so"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,207,/ replace the AND/OR with its LHS or remove it if it isn't useful.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,208,esult = trySimplifyUnusedResult(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,210,reak;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,211,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,212,"/ A function expression isn't useful if it isn't used, remove it and"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,213,/ don't bother to look at its children.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,214,esult = null;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,215,reak;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,216,ase Token.COMMA:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,217,/ We rewrite other operations as COMMA expressions (which will later
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,218,"/ get split into individual EXPR_RESULT statement, if possible), so"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,219,/ we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,220,/ nodes.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,221,ode left = trySimplifyUnusedResult(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,222,ode right = trySimplifyUnusedResult(n.getLastChild());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,223,f (left == null && right == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,224,esult = null;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,225, else if (left == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,226,esult = right;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,227, else if (right == null){
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,228,esult = left;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,229, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,230,/ The structure didn't change.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,231,esult = n;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,233,reak;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,234,efault:
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,235,f (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,236,/ This is the meat of this function. The node itself doesn't generate
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,237,/ any side-effects but preserve any side-effects in the children.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,238,ode resultList = null;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,239,"or (Node next, c = n.getFirstChild(); c != null; c = next) {"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,240,ext = c.getNext();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,241, = trySimplifyUnusedResult(c);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,242,f (c != null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,243,.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,244,f (resultList == null)  {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,245,/ The first side-effect can be used stand-alone.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,246,esultList = c;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,247, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,248,"/ Leave the side-effects in-place, simplifying it to a COMMA"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,249,/ expression.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,250,"esultList = IR.comma(resultList, c).srcref(c);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,254,esult = resultList;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,258,"/ Fix up the AST, replace or remove the an unused node (if requested)."
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,259,f (n != result) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,260,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,261,f (result == null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,262,f (removeUnused) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,263,arent.removeChild(n);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,264, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,265,esult = IR.empty().srcref(n);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,266,"arent.replaceChild(n, result);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,268, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,269,/ A new COMMA expression may not have an existing parent.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,270,f (result.getParent() != null) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,271,esult.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,273,".getParent().replaceChild(n, result);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,275,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,278,eturn result;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,445,eft = trySimplifyUnusedResult(left);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,320,"left = NodeUtil.trySimplifyUnusedResult(left, this);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,779,"nit = trySimplifyUnusedResult(init, false);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,654,"init = NodeUtil.trySimplifyUnusedResult(init, this, false);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,783,"ncrement = trySimplifyUnusedResult(increment, false);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,658,increment = NodeUtil.trySimplifyUnusedResult(
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,659,"increment, this, false);"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,2, Copyright 2011 The Closure Compiler Authors.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,17,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,19,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,20,mport com.google.common.collect.Lists;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,21,mport com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,22,mport com.google.javascript.rhino.IR;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,23,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,24,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,26,mport java.util.List;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,27,mport java.util.Set;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,30," Look for internal properties set using ""this"" but never read.  Explicitly"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,31, ignored is the possibility that these properties
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,32," may be indirectly referenced using ""for-in"" or ""Object.keys"".  This is the"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,33, same assumption used with RemoveUnusedPrototypeProperties but is by slightly
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,34, wider in scope.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,36, @author johnlenz@google.com (John Lenz)
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,38,lass RemoveUnusedClassProperties
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,39,"mplements CompilerPass, NodeTraversal.Callback {"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,40,inal AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,41,rivate boolean inExterns;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,42,rivate Set<String> used = Sets.newHashSet();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,43,rivate List<Node> candidates = Lists.newArrayList();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,45,emoveUnusedClassProperties(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,46,his.compiler = compiler;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,49,Override
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,50,"ublic void process(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,51,"odeTraversal.traverseRoots(compiler, this, externs, root);"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,52,emoveUnused();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,55,rivate void removeUnused() {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,56,or (Node n : candidates) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,57,reconditions.checkState(n.isGetProp());
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,58,f (!used.contains(n.getLastChild().getString())) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,59,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,60,f (NodeUtil.isAssignmentOp(parent)) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,61,ode assign = parent;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,62,reconditions.checkState(assign != null
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,63,& NodeUtil.isAssignmentOp(assign)
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,64,& assign.getFirstChild() == n);
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,65,/ 'this.x = y' to 'y'
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,66,"ssign.getParent().replaceChild(assign,"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,67,ssign.getLastChild().detachFromParent());
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,68, else if (parent.isInc() || parent.isDec()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,69,"arent.getParent().replaceChild(parent, IR.number(0));"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,70, else {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,71,"hrow new IllegalStateException(""unexpected: ""+ parent);"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,73,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,78,Override
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,79,"ublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,80,f (n.isScript()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,81,his.inExterns = n.getStaticSourceFile().isExtern();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,83,eturn true;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,86,Override
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,87,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,88,witch (n.getType()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,89,ase Token.GETPROP:
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,90,f (inExterns || isPinningPropertyUse(n)) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,91,sed.add(n.getLastChild().getString());
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,92, else {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,93,/ This is a definition of a property but it is only removable
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,94,"/ if it is defined on ""this""."
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,95,f (n.getFirstChild().isThis()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,96,andidates.add(n);
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,99,reak;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,101,ase Token.CALL:
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,102,"/ Look for properties referenced through ""JSCompiler_propertyRename""."
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,103,ode target = n.getFirstChild();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,104,f (n.hasMoreThanOneChild()
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,105,& target.isName()
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,106,& target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,107,ode propName = target.getNext();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,108,f (propName.isString()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,109,sed.add(propName.getString());
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,112,reak;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,117, @return Whether the property is used in a way that prevents its removal.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,119,rivate boolean isPinningPropertyUse(Node n) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,120,"/ Rather than looking for cases that are uses, we assume all references are"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,121,/ pinning uses unless they are:
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,122,/  - a simple assignment (x.a = 1)
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,123,"/  - a compound assignment or increment (x++, x += 1) whose result is"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,124,/    otherwise unused
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,126,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,127,f (n == parent.getFirstChild()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,128,f (parent.isAssign()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,129,/ A simple assignment doesn't pin the property.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,130,eturn false;
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,131, else if (NodeUtil.isAssignmentOp(parent)
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,132,| parent.isInc() || parent.isDec()) {
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,133,"/ In general, compound assignments are both reads and writes, but"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,134,/ if the property is never otherwise read we can consider it simply
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,135,/ a write.
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,136,/ However if the assign expression is used as part of a larger
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,137,"/ expression, we much consider it a read. For example:"
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,138,/    x = (y.a += 1);
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,139,eturn NodeUtil.isExpressionResultUsed(parent);
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,142,eturn true;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,41,rivate final boolean canModifyExterns;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,41,private final boolean canModifyExternsProtypeProps;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,44,private final boolean canModifyThisProperties;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,45,private final boolean anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,49," @param canModifyExterns If true, then we can remove prototype"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,51,"* @param canModifyExternsProtypeProps If true, then we can remove prototype"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,56,* @param canModifyThisProperties
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,57,* @param anchorObjectLiteralProperties
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,56,"oolean canModifyExterns,"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,57,oolean anchorUnusedVars) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,60,"boolean canModifyExternsProtypeProps,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,61,"boolean anchorUnusedVars, boolean canModifyThisProperties,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,62,boolean anchorObjectLiteralProperties) {
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,59,his.canModifyExterns = canModifyExterns;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,64,this.canModifyExternsProtypeProps = canModifyExternsProtypeProps;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,66,this.canModifyThisProperties = canModifyThisProperties;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,67,this.anchorObjectLiteralProperties = anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,72,"ull /* no module graph */, canModifyExterns, anchorUnusedVars);"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,79,"null /* no module graph */, canModifyExternsProtypeProps,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,80,"anchorUnusedVars, canModifyThisProperties,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,81,anchorObjectLiteralProperties);
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,102,eclaration.remove();
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,111,declaration.remove(compiler);
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,415,ublic void testInnerFunctionClosureVariableReads() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,415,public void testInnerFunctionClosureVariableReads1() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,433,// An anonymous inner function reading a closure variable is fine.
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,434,public void testInnerFunctionClosureVariableReads2() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,435,testSame(createModuleChain(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,436,"""function foo() {var x = 1;"" +"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,437,"""  return function(){x}};"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,438,// Module 2
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,439,"""var y = foo(); y.baz();""));"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,571,public void testThisPropAssign1() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,572,testSame(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,573,createModuleChain(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,574,"""this.foo = function() {}"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,575,"""this.foo();""));"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,578,public void testThisPropAssign2() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,579,testSame(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,580,createModuleChain(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,581,"""function f() { this.foo = function() {} }"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,582,"""x.foo();""));"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,585,public void testThisPropAssign3() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,586,testSame(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,587,createModuleChain(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,588,"""function f() { this.foo = function() {} }"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,589,"""f();x.foo();""));"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,592,public void testMovePrototypeMethodWithThisPropSet1() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,593,test(createModuleChain(
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,594,"""function Foo() {}"" +"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,595,"""Foo.prototype.method = function() { this.x = 1 };"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,596,// Module 2
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,597,"""(new Foo).method()""),"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,598,new String[] {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,599,STUB_DECLARATIONS +
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,600,"""function Foo() {}"" +"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,601,"""Foo.prototype.method = JSCompiler_stubMethod(0);"","
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,602,// Module 2
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,603,"""Foo.prototype.method = JSCompiler_unstubMethod(0, function() {"" +"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,604,"""this.x = 1 });"" +"
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,605,"""(new Foo).method()"""
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,2, Copyright 2011 The Closure Compiler Authors.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,5, you may not use this file except in compliance with the License.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,6, You may obtain a copy of the License at
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,13, See the License for the specific language governing permissions and
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,14, limitations under the License.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,17,ackage com.google.javascript.jscomp;
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,20, @author johnlenz@google.com (John Lenz)
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,22,ublic class RemoveUnusedClassPropertiesTest extends CompilerTestCase {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,24,rivate static final String EXTERNS =
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,25,"var window;\n"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,26,"function alert(a) {}\n"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,27,"var EXT = {};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,28,"EXT.ext;"";"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,30,ublic RemoveUnusedClassPropertiesTest() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,31,uper(EXTERNS);
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,34,Override
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,35,rotected CompilerPass getProcessor(Compiler compiler) {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,36,eturn new RemoveUnusedClassProperties(compiler);
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,39,ublic void testSimple1() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,40,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,41,"est(""this.a = 2"", ""2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,42,"est(""x = (this.a = 2)"", ""x = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,43,"estSame(""this.a = 2; x = this.a;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,46,ublic void testSimple2() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,47,"/ A property defined on ""this"" can be removed, even when defined"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,48,/ as part of an expression
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,49,"est(""this.a = 2, f()"", ""2, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,50,"est(""x = (this.a = 2, f())"", ""x = (2, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,51,"est(""x = (f(), this.a = 2)"", ""x = (f(), 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,54,ublic void testSimple3() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,55,"/ A property defined on an object other than ""this"" can not be removed."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,56,"estSame(""y.a = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,57,/ but doesn't prevent the removal of the definition on 'this'.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,58,"est(""y.a = 2; this.a = 2"", ""y.a = 2; 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,59,"/ Some use of the property ""a"" prevents the removal."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,60,"estSame(""y.a = 2; this.a = 1; alert(x.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,63,ublic void testObjLit() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,64,"/ A property defined on an object other than ""this"" can not be removed."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,65,"estSame(""({a:2})"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,66,/ but doesn't prevent the removal of the definition on 'this'.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,67,"est(""({a:0}); this.a = 1;"", ""({a:0});1"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,68,"/ Some use of the property ""a"" prevents the removal."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,69,"estSame(""x = ({a:0}); this.a = 1; alert(x.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,72,ublic void testExtern() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,73,/ A property defined in the externs is can not be removed.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,74,"estSame(""this.ext = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,77,ublic void testExport() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,78,/ An exported property can not be removed.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,79,"estSame(""this.ext = 2; window['export'] = this.ext;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,80,"estSame(""function f() { this.ext = 2; } window['export'] = this.ext;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,84,ublic void testAssignOp1() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,85,/ Properties defined using a compound assignment can be removed if the
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,86,/ result of the assignment expression is not immediately used.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,87,"est(""this.x += 2"", ""2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,88,"estSame(""x = (this.x += 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,89,"estSame(""this.x += 2; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,90,"/ But, of course, a later use prevents its removal."
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,91,"estSame(""this.x += 2; x.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,94,ublic void testAssignOp2() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,95,/ Properties defined using a compound assignment can be removed if the
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,96,/ result of the assignment expression is not immediately used.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,97,"est(""this.a += 2, f()"", ""2, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,98,"est(""x = (this.a += 2, f())"", ""x = (2, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,99,"estSame(""x = (f(), this.a += 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,102,ublic void testInc1() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,103,/ Increments and Decrements are handled similiarly to compound assignments
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,104,/ but need a placeholder value when replaced.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,105,"est(""this.x++"", ""0"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,106,"estSame(""x = (this.x++)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,107,"estSame(""this.x++; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,109,"est(""--this.x"", ""0"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,110,"estSame(""x = (--this.x)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,111,"estSame(""--this.x; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,114,ublic void testInc2() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,115,/ Increments and Decrements are handled similiarly to compound assignments
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,116,/ but need a placeholder value when replaced.
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,117,"est(""this.a++, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,118,"est(""x = (this.a++, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,119,"estSame(""x = (f(), this.a++)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,121,"est(""--this.a, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,122,"est(""x = (--this.a, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,123,"estSame(""x = (f(), --this.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,126,ublic void testJSCompiler_renameProperty() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,127,/ JSCompiler_renameProperty introduces a use of the property
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,128,"estSame(""this.a = 2; x[JSCompiler_renameProperty('a')]"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,129,"estSame(""this.a = 2; JSCompiler_renameProperty('a')"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,132,ublic void testForIn() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,133,/ This is the basic assumption that this pass makes:
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,134,/ it can remove properties even when the object is used in a FOR-IN loop
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,135,"est(""this.y = 1;for (var a in x) { alert(x[a]) }"","
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,136,"1;for (var a in x) { alert(x[a]) }"");"
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,139,ublic void testObjectKeys() {
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,140,/ This is the basic assumption that this pass makes:
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,141,/ it can remove properties even when the object are referenced
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,142,"est(""this.y = 1;alert(Object.keys(this))"","
False,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,143,"1;alert(Object.keys(this))"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,26,"IFoo.prototype.bar; var mExtern; mExtern.bExtern; mExtern['cExtern'];"";"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,26,"""IFoo.prototype.bar; var mExtern; mExtern.bExtern; mExtern['cExtern'];"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,27,"""var window;\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,28,"""function alert(a) {}\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,29,"""var EXT = {};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,30,"""EXT.ext;"";"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,34,private boolean canRemoveThisProps = true;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,35,private boolean anchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,38,"anRemoveExterns, anchorUnusedVars);"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,44,"canRemoveExterns, anchorUnusedVars,"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,45,"canRemoveThisProps, anchorObjectLitProps);"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,48,@Override
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,49,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,50,return 3;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,57,canRemoveThisProps = true;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,58,anchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,154,"e.prototype[\""alias1\""]=e.prototype.method1=function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,155,"e.prototype[\""alias2\""]=e.prototype.method2=function(){};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,168,"""e.prototype[\""alias1\""] = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,169,"""e.prototype[\""alias2\""] = function(){};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,189,"estSame(""function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,190,"e.prototype['alias1'] = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,203,"test(""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,204,"""e.prototype['alias1'] = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,205,"""function(){this.method2()};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,206,"""e.prototype.method2 = function(){};"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,207,"""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,208,"""e.prototype['alias1'] = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,209,"""function(){this.method2()};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,210,"""e.prototype.method2 = function(){};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,213,public void testAliasing8a() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,214,// An exported alias must preserved any referenced values in the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,215,// referenced function.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,216,"test(""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,217,"""e.prototype.alias1 = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,218,"""function(){this.method2()};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,219,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,220,"""x.alias1()"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,221,"""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,222,"""e.prototype.alias1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,223,"""function(){this.method2()};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,224,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,225,"""x.alias1()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,228,public void testAliasing8b() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,229,// An exported alias must preserved any referenced values in the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,230,// referenced function.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,231,"test(  ""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,232,"""e.prototype.alias1 = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,233,"""function(){this.method2()};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,234,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,235,"""x.method1()"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,236,"""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,237,"""e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,192,"e.prototype.method2 = function(){};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,239,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,240,"""x.method1()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,243,public void testAliasing9a() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,244,// An exported alias must preserved any referenced values in the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,245,// referenced function.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,246,"test(""function e(){}; function init() {"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,247,"""e.prototype['alias1'] = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,248,"""function(){this.method2()}; "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,249,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,251,"""init();"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,252,"""function e(){}; function init() {"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,253,"""e.prototype['alias1'] = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,254,"""function(){this.method2()}; "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,255,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,257,"""init();"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,260,public void testAliasing9b() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,261,// An exported alias must preserved any referenced values in the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,262,// referenced function.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,263,"test(  ""function e(){}; function init() {"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,264,"""e.prototype.alias1 = e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,265,"""function(){this.method2()}; "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,266,"""e.prototype.method2 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,268,"""init();"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,269,""";function init() {"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,271,"""init();"""
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,200,"var x = e.prototype.method1 = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,280,"""var x = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,418,this.anchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,338,"estSame(declaration + ""var x = {}; x.baz = 5;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,421,"test(declaration + ""var x = {}; x.baz = 5;"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,422,"""var x = {}; x.baz = 5;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,423,"test(declaration + ""var x = {baz: 5};"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,424,"""var x = {baz: 5};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,425,"test(declaration + ""var x = {'baz': 5};"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,426,"""var x = {'baz': 5};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,428,this.anchorObjectLitProps = true;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,430,"test(declaration, """");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,431,// TODO(johnlenz): is it necessary to support this case?
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,432,"// testSame(declaration + ""var x = {}; x.baz = 5;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,487,ublic void testHook1() throws Exception {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,582,public void testHook1a() throws Exception {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,589,"""Math.random()"");  // preserve side-effect"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,592,public void testHook1b() throws Exception {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,593,test(
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,594,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,595,"""Foo.prototype.method1 = externalVar ?"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,596,"""   function() { this.method2(); } : function() { this.method3(); };"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,597,"""Foo.prototype.method2 = function() {};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,598,"""Foo.prototype.method3 = function() {};"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,612,public void testSimpleExtern1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,613,"// A property defined in the externs but defined on ""this"" can not"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,614,// be safely removed.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,615,"testSame(""this.ext = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,618,public void testSimpleExtern2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,619,this.canRemoveExterns = true;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,620,"// A property defined in the externs but defined on ""this"" can not"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,621,// be safely removed.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,622,"testSame(""this.ext = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,625,public void testSimple1a() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,626,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,627,"test(""this.a = 2"", """");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,630,public void testSimple1b() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,631,this.canRemoveThisProps = false;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,633,"// A property defined on ""this"" cannot be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,634,"testSame(""this.a = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,637,public void testSimple2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,638,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,639,"test(""this.a = function() {}"", """");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,642,public void testSimple3() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,643,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,644,"test(""this.a = f()"", ""f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,647,public void testSimple4() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,648,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,649,"test(""var x = (this.a = 2)"", ""var x = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,652,public void testSimple5() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,653,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,654,"test(""var x;x = (this.a = 2)"", ""var x;x = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,657,public void testSimple6() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,658,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,659,"testSame(""this.a = 2; x = this.a;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,662,public void testSimple7() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,663,"// A property defined on ""this"" can be removed, even when defined"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,664,// as part of an expression
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,665,"test(""this.a = 2, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,666,"test(""x = (this.a = 2, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,667,"test(""x = (f(), this.a = 2)"", ""x = (f(), 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,670,public void testSimple8() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,671,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,672,"testSame(""y.a = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,675,public void testSimple9() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,676,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,677,"test(""y.a = 2; this.a = 2"", ""y.a = 2;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,680,public void testSimple10() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,681,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,682,"testSame(""y.a = 2; this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,685,public void testObjLit() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,686,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,687,"testSame(""({a:2})"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,688,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,689,"test(""({a:0}); this.a = 1;"", ""({a:0});"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,690,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,691,"testSame(""x = ({a:0}); this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,694,public void testExtern() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,695,// A property defined in the externs is can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,696,"testSame(""this.ext = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,699,public void testExport() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,700,// An exported property can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,701,"testSame(""this.ext = 2; window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,702,testSame(
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,703,"""function f() { this.ext = 2; } f(); window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,707,public void testAssignOp1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,708,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,709,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,710,"test(""this.x += 2"", """");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,711,"testSame(""x = (this.x += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,712,"testSame(""this.x += 2; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,713,"// But, of course, a later use prevents its removal."
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,714,"testSame(""this.x += 2; x.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,717,public void testAssignOp2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,718,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,719,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,720,"test(""this.a += 2, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,721,"test(""x = (this.a += 2, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,722,"testSame(""x = (f(), this.a += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,725,public void testInc1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,726,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,727,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,728,"test(""this.x++"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,729,"testSame(""x = (this.x++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,730,"testSame(""this.x++; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,732,"test(""--this.x"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,733,"testSame(""x = (--this.x)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,734,"testSame(""--this.x; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,737,public void testInc2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,738,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,739,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,740,"test(""this.a++, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,741,"test(""x = (this.a++, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,742,"testSame(""x = (f(), this.a++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,744,"test(""--this.a, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,745,"test(""x = (--this.a, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,746,"testSame(""x = (f(), --this.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,749,public void testJSCompiler_renameProperty1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,750,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,751,"testSame(""this.a = 2; x[JSCompiler_renameProperty('a')]"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,752,"testSame(""this.a = 2; JSCompiler_renameProperty('a')"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,755,public void testJSCompiler_renameProperty2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,756,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,757,"testSame(""x.prototype.a = 2; x[JSCompiler_renameProperty('a')]"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,758,"testSame(""x.prototype.a = 2; JSCompiler_renameProperty('a')"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,761,public void testGoogReflectObject1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,762,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,763,"testSame(""this.a = 2; f(goog.reflect.object(foo, {a:1}));"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,764,"testSame(""this.a = 2; goog.reflect.object(foo, {a:1});"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,767,public void testGoogReflectObject2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,768,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,769,"testSame(""x.prototype.a = 2; f(goog.reflect.object(foo, {a:1}));"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,770,"testSame(""x.prototype.a = 2; goog.reflect.object(foo, {a:1});"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,773,public void testForIn() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,774,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,775,// it can remove properties even when the object is used in a FOR-IN loop
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,776,"test(""this.y = 1;for (var a in x) { alert(x[a]) }"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,777,"""for (var a in x) { alert(x[a]) }"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,780,public void testObjectKeys() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,781,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,782,// it can remove properties even when the object are referenced
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,783,"test(""this.y = 1;alert(Object.keys(this))"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,784,"""alert(Object.keys(this))"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,787,public void testConditionalSideEffect1() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,788,"test(""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,789,"""this.b = ((this.a) ? f() : g())"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,790,"""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,791,"""this.a ? f() : g()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,794,public void testConditionalSideEffect2() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,795,"test(""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,796,"""this.b = ((this.a) ? f() : 1)"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,797,"""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,798,"""this.a && f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,801,public void testConditionalSideEffect3() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,802,"test(""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,803,"""this.b = (this.a) || f()"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,804,"""this.a = 1;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,805,"""this.a || f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,808,public void testConditionalSideEffect4() {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,809,"test(""this.a = 0;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,810,"""this.b = (this.a) && f()"","
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,811,"""this.a = 0;"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,812,"""this.a && f()"");"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,50,"eturn new RemoveUnusedPrototypeProperties(compiler, false, false);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,50,return new RemoveUnusedPrototypeProperties(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,51,"compiler, false, false, true, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,18,package org.apache.commons.codec;
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,21,* Character encoding names required of every implementation of the Java platform.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,23,* From the Java documentation <a
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,24,"* href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character encoding names"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,25,* </a>:
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,26,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,27,* <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,28,* release documentation for your implementation to see if any other encodings are supported. Consult the release
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,29,* documentation for your implementation to see if any other encodings are supported. </cite>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,30,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,32,* <ul>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,33,* <li><code>US-ASCII</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,34,"* Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,35,* <li><code>ISO-8859-1</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,36,"* ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,37,* <li><code>UTF-8</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,38,* Eight-bit Unicode Transformation Format.</li>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,39,* <li><code>UTF-16BE</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,40,"* Sixteen-bit Unicode Transformation Format, big-endian byte order.</li>"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,41,* <li><code>UTF-16LE</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,42,"* Sixteen-bit Unicode Transformation Format, little-endian byte order.</li>"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,43,* <li><code>UTF-16</code><br/>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,44,"* Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,45,"* accepted on input, big-endian used on output.)</li>"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,46,* </ul>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,48,"* This perhaps would best belong in the [lang] project. Even if a similar interface is defined in [lang], it is not"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,49,* forseen that [codec] would be made to depend on [lang].
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,51,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character encoding"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,52,*      names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,53,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,54,* @since 1.4
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,55,* @version $Id$
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,57,public class RequiredCharsetNames {
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,59,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,60,"* ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1."
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,61,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,62,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,63,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,64,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,66,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,67,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,69,"public static final String ISO_8859_1 = ""ISO-8859-1"";"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,72,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,73,"* Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set."
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,74,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,75,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,76,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,77,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,79,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,80,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,82,"public static final String US_ASCII = ""US-ASCII"";"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,85,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,86,"* Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,87,"* (either order accepted on input, big-endian used on output)"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,88,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,89,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,90,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,91,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,93,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,94,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,96,"public static final String UTF_16 = ""UTF-16"";"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,99,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,100,"* Sixteen-bit Unicode Transformation Format, big-endian byte order."
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,101,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,102,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,103,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,104,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,106,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,107,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,109,"public static final String UTF_16BE = ""UTF-16BE"";"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,112,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,113,"* Sixteen-bit Unicode Transformation Format, little-endian byte order."
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,114,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,115,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,116,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,117,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,119,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,120,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,122,"public static final String UTF_16LE = ""UTF-16LE"";"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,125,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,126,* Eight-bit Unicode Transformation Format.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,127,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,128,* <p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,129,* Every implementation of the Java platform is required to support this character encoding.
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,130,* </p>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,132,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,133,*      encoding names </a>
True,src/java/org/apache/commons/codec/RequiredCharsetNames.java,src/java/org/apache/commons/codec/RequiredCharsetNames.java,135,"public static final String UTF_8 = ""UTF-8"";"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,20,mport java.io.UnsupportedEncodingException;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,331,tring sep;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,332,ry {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,333,"ep = new String(lineSeparator, ""UTF-8"");"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,334, catch (UnsupportedEncodingException uee) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,335,ep = new String(lineSeparator);
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,330,String sep = StringBytesUtils.newStringUtf8(lineSeparator);
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,741,"hrow new IllegalArgumentException(""Input array too big, output array would be bigger than Integer.MAX_VALUE="""
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,742, Integer.MAX_VALUE);
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,735,"throw new IllegalArgumentException(""Input array too big, output array would be bigger than Integer.MAX_VALUE="" +"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,736,Integer.MAX_VALUE);
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,18,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,20,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,22,import org.apache.commons.codec.RequiredCharsetNames;
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,25,* Converts String to bytes using the encodings required by the Java specification.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,27,* @see RequiredCharsetNames
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,28,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,29,* @version $Id: $
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,31,public class StringBytesUtils {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,34,"* Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,35,* byte array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,37,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,38,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,39,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,40,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,41,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,42,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,43,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,44,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,46,public static byte[] getBytesIso8859_1(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,47,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,51,"* Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,52,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,54,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,55,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,56,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,57,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,58,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,59,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,60,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,61,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,63,public static byte[] getBytesUsAscii(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,64,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,68,"* Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,69,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,71,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,72,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,73,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,74,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,75,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,76,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,77,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,78,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,80,public static byte[] getBytesUtf16(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,81,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,85,"* Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,86,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,88,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,89,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,90,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,91,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,92,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,93,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,94,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,95,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,97,public static byte[] getBytesUtf16Be(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,98,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,102,"* Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,103,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,105,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,106,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,107,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,108,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,109,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,110,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,111,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,112,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,114,public static byte[] getBytesUtf16Le(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,115,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,119,"* Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,120,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,122,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,123,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,124,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,125,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,126,"*             Thrown when the charset is missing, which should be never according the the Java specification."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,127,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,128,*      encoding names </a>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,129,"* @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,131,public static byte[] getBytesUtf8(String string) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,132,"return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_8);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,136,"* Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,137,* array.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,138,* <p>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,139,"* This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,140,* should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,141,* </p>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,143,* @param string
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,144,*            the String to encode
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,145,* @param charsetName
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,146,*            The name of a required {@link java.nio.charset.Charset}
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,147,* @return encoded bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,148,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,149,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,150,*             required charset name.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,151,* @see RequiredCharsetNames
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,152,* @see String#getBytes(String)
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,154,"public static byte[] getSupportedBytes(String string, String charsetName) {"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,155,try {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,156,return string.getBytes(charsetName);
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,157,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,158,"throw StringBytesUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,162,"private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,163,"return new IllegalStateException(charsetName + "": "" + e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,167,* Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,168,* <p>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,169,"* This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,170,* should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,171,* </p>
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,173,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,174,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,175,* @param charsetName
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,176,*            The name of a required {@link java.nio.charset.Charset}
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,177,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,178,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,179,*             required charset name.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,180,* @see RequiredCharsetNames
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,181,"* @see String#String(byte[], String)"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,183,"public static String newString(byte[] bytes, String charsetName) {"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,184,try {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,185,"return new String(bytes, charsetName);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,186,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,187,"throw StringBytesUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,192,* Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,194,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,195,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,196,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,197,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,198,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,200,public static String newStringIso8859_1(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,201,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,205,* Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,207,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,208,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,209,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,210,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,211,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,213,public static String newStringUsAscii(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,214,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,218,* Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,220,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,221,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,222,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,223,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,224,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,226,public static String newStringUtf16(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,227,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,231,* Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,233,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,234,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,235,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,236,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,237,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,239,public static String newStringUtf16Be(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,240,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,244,* Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,246,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,247,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,248,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,249,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,250,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,252,public static String newStringUtf16Le(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,253,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,257,* Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,259,* @param bytes
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,260,*            The bytes to be decoded into characters
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,261,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,262,"*             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,263,*             charset is required.
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,265,public static String newStringUtf8(byte[] bytes) {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,266,"return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_8);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,269,private StringBytesUtils() {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,270,"// noop, cannot instantiate."
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,24,import org.apache.commons.codec.RequiredCharsetNames;
False,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,57,his(CharacterEncodingNames.UTF8);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,58,this(RequiredCharsetNames.UTF_8);
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,15, limitations under the License.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,18,ackage org.apache.commons.codec.net;
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,21, Character encoding names required of every implementation of the Java platform.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,23, According to the Java documentation <a
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,24," href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character encoding names"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,25, </a>:
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,26, <p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,27, <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,28, release documentation for your implementation to see if any other encodings are supported. </cite>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,29, </p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,31, This interface is private to the package since it perhaps would best belong in the [lang] project with other required
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,32," encoding names. As is, this interface only defines the names used in this package. Even if a similar interface is"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,33," defined in [lang], it is not forseen that [codec] would be made to depend on [lang]."
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,35," @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character encoding"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,36,          names </a>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,37, @author Apache Software Foundation
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,38, @since 1.4
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,39, @version $Id$
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,41,lass CharacterEncodingNames {
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,43, <p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,44," Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set."
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,45, </p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,46, <p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,47, Every implementation of the Java platform is required to support this character encoding.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,48, </p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,50," @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,51,          encoding names </a>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,53,"tatic final String US_ASCII = ""US-ASCII"";"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,56, <p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,57, Eight-bit Unicode Transformation Format.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,58, </p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,59, <p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,60, Every implementation of the Java platform is required to support this character encoding.
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,61, </p>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,63," @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,64,          encoding names </a>
False,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,src/java/org/apache/commons/codec/net/CharacterEncodingNames.java,66,"tatic final String UTF8 = ""UTF-8"";"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,25,import org.apache.commons.codec.RequiredCharsetNames;
False,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,112,his(CharacterEncodingNames.UTF8);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,113,this(RequiredCharsetNames.UTF_8);
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,28,import org.apache.commons.codec.RequiredCharsetNames;
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,31,import org.apache.commons.codec.binary.StringBytesUtils;
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,94,his(CharacterEncodingNames.UTF8);
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,96,this(RequiredCharsetNames.UTF_8);
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,281,"eturn new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);"
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,283,"return new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);"
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,386,"eturn new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);"
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,388,return StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,24,import org.apache.commons.codec.binary.StringBytesUtils;
False,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,79,"uffer.append(new String(rawdata, CharacterEncodingNames.US_ASCII));"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,80,buffer.append(StringBytesUtils.newStringUsAscii(rawdata));
False,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,128,"yte[] data = text.substring(from, to).getBytes(CharacterEncodingNames.US_ASCII);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,129,"byte[] data = StringBytesUtils.getBytesUsAscii(text.substring(from, to));"
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,28,import org.apache.commons.codec.RequiredCharsetNames;
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,31,import org.apache.commons.codec.binary.StringBytesUtils;
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,95,his(CharacterEncodingNames.UTF8);
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,97,this(RequiredCharsetNames.UTF_8);
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,216, Encodes a string into its URL safe form using the specified
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,217, string charset. Unsafe characters are escaped.
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,219, @param pString string to convert to a URL safe form
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,220, @param charset the charset for pString
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,217,* Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,219,* @param pString
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,220,*            string to convert to a URL safe form
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,221,* @param charset
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,222,*            the charset for pString
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,222, @throws UnsupportedEncodingException Thrown if charset is not
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,223,                                      supported
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,224,* @throws UnsupportedEncodingException
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,225,*             Thrown if charset is not supported
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,225,"ublic String encode(String pString, String charset)"
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,226,hrows UnsupportedEncodingException
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,227,"public String encode(String pString, String charset) throws UnsupportedEncodingException {"
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,231,"eturn new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);"
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,231,return StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,269,"ublic String decode(String pString, String charset)"
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,270,"hrows DecoderException, UnsupportedEncodingException"
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,268,"public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {"
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,275,"eturn new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);"
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,272,"return new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,2,* Copyright (C) 1993-2003 SEAGULL
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,4,* RequiredCharsetNamesTest.java
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,5,"* Created on Jul 20, 2009, 6:08:58 PM"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,9,package org.apache.commons.codec;
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,11,import junit.framework.Assert;
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,12,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,15,* Sanity checks.
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,17,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,18,* @version $Id: $
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,20,public class RequiredCharsetNamesTest extends TestCase {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,22,public void testIso8859_1() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,23,"Assert.assertEquals(""ISO-8859-1"", RequiredCharsetNames.ISO_8859_1);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,26,public void testUsAscii() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,27,"Assert.assertEquals(""US-ASCII"", RequiredCharsetNames.US_ASCII);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,30,public void testUtf16() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,31,"Assert.assertEquals(""UTF-16"", RequiredCharsetNames.UTF_16);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,34,public void testUtf16Be() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,35,"Assert.assertEquals(""UTF-16BE"", RequiredCharsetNames.UTF_16BE);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,38,public void testUtf16Le() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,39,"Assert.assertEquals(""UTF-16LE"", RequiredCharsetNames.UTF_16LE);"
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,42,public void testUtf8() {
True,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java,43,"Assert.assertEquals(""UTF-8"", RequiredCharsetNames.UTF_8);"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,39,"rivate static final String UTF_8_NAME = ""UTF-8"";"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,72,"yte[] encoded = ""SGVsbG8gV29ybGQ=\r\n"".getBytes(UTF_8_NAME);"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,73,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,70,"byte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,71,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,77,"ncoded = ""AA==\r\n"".getBytes(UTF_8_NAME);"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,75,"encoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,82,ncoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,80,encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,88,ncoded = singleLine.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,86,encoded = StringBytesUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,109,"yte[] encoded = ""SGVsbG8gV29ybGQ=\r\n"".getBytes(UTF_8_NAME);"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,110,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,107,"byte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,108,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,114,"ncoded = ""AA==\r\n"".getBytes(UTF_8_NAME);"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,112,"encoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,119,ncoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,117,encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,125,ncoded = singleLine.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,123,encoded = StringBytesUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,255,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,253,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,268,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,266,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,284,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,282,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,301,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,299,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,39,"rivate static final String UTF_8_NAME = ""UTF-8"";"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,72,"yte[] encoded = ""SGVsbG8gV29ybGQ=\r\n"".getBytes(UTF_8_NAME);"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,73,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,70,"byte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,71,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,77,"ncoded = ""AA==\r\n"".getBytes(UTF_8_NAME);"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,75,"encoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,82,ncoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,80,encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,88,ncoded = singleLine.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,86,encoded = StringBytesUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,109,"yte[] encoded = ""SGVsbG8gV29ybGQ=\r\n"".getBytes(UTF_8_NAME);"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,110,yte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,107,"byte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,108,byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,114,"ncoded = ""AA==\r\n"".getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,112,"encoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,119,ncoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,117,encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,125,ncoded = singleLine.getBytes(UTF_8_NAME);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,123,encoded = StringBytesUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,237,"ssertTrue(""Streaming byte-by-byte flush() base64 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,235,"assertTrue(""Streaming byte-by-byte flush() base64 decode"", Arrays.equals(output, decoded));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,42, @param name Name of the test case
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,41,* @param name
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,42,*            Name of the test case
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,50,  Test the Base64 implementation
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,49,* Test the Base64 implementation
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,96,or(int i=0;i<12;i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,95,for (int i = 0; i < 12; i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,99,yte[] enc =  Base64.encodeBase64(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,100,"ssertTrue(""\"""" + (new String(enc)) + ""\"" is Base64 data."",Base64.isArrayByteBase64(enc) );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,98,byte[] enc = Base64.encodeBase64(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,99,"assertTrue(""\"""" + (new String(enc)) + ""\"" is Base64 data."", Base64.isArrayByteBase64(enc));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,102,"ssertTrue(toString(data) + "" equals "" + toString(data2), Arrays.equals(data,data2));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,101,"assertTrue(toString(data) + "" equals "" + toString(data2), Arrays.equals(data, data2));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,108,or(int i=1;i<5;i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,109,yte[] data = new byte[this.getRandom().nextInt(10000)+1];
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,107,for (int i = 1; i < 5; i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,108,byte[] data = new byte[this.getRandom().nextInt(10000) + 1];
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,111,yte[] enc =  Base64.encodeBase64(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,110,byte[] enc = Base64.encodeBase64(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,114,"ssertTrue(Arrays.equals(data,data2));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,113,"assertTrue(Arrays.equals(data, data2));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,122,"ssertTrue(Arrays.equals(new byte[] {13, 10}, Base64.CHUNK_SEPARATOR));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,121,"assertTrue(Arrays.equals(new byte[]{13, 10}, Base64.CHUNK_SEPARATOR));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,133,"ssertEquals(""AA=="",new String(Base64.encodeBase64(new byte[] { (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,134,"ssertEquals(""AQ=="",new String(Base64.encodeBase64(new byte[] { (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,135,"ssertEquals(""Ag=="",new String(Base64.encodeBase64(new byte[] { (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,136,"ssertEquals(""Aw=="",new String(Base64.encodeBase64(new byte[] { (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,137,"ssertEquals(""BA=="",new String(Base64.encodeBase64(new byte[] { (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,138,"ssertEquals(""BQ=="",new String(Base64.encodeBase64(new byte[] { (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,139,"ssertEquals(""Bg=="",new String(Base64.encodeBase64(new byte[] { (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,140,"ssertEquals(""Bw=="",new String(Base64.encodeBase64(new byte[] { (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,141,"ssertEquals(""CA=="",new String(Base64.encodeBase64(new byte[] { (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,142,"ssertEquals(""CQ=="",new String(Base64.encodeBase64(new byte[] { (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,143,"ssertEquals(""Cg=="",new String(Base64.encodeBase64(new byte[] { (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,144,"ssertEquals(""Cw=="",new String(Base64.encodeBase64(new byte[] { (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,145,"ssertEquals(""DA=="",new String(Base64.encodeBase64(new byte[] { (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,146,"ssertEquals(""DQ=="",new String(Base64.encodeBase64(new byte[] { (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,147,"ssertEquals(""Dg=="",new String(Base64.encodeBase64(new byte[] { (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,148,"ssertEquals(""Dw=="",new String(Base64.encodeBase64(new byte[] { (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,149,"ssertEquals(""EA=="",new String(Base64.encodeBase64(new byte[] { (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,150,"ssertEquals(""EQ=="",new String(Base64.encodeBase64(new byte[] { (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,151,"ssertEquals(""Eg=="",new String(Base64.encodeBase64(new byte[] { (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,152,"ssertEquals(""Ew=="",new String(Base64.encodeBase64(new byte[] { (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,153,"ssertEquals(""FA=="",new String(Base64.encodeBase64(new byte[] { (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,154,"ssertEquals(""FQ=="",new String(Base64.encodeBase64(new byte[] { (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,155,"ssertEquals(""Fg=="",new String(Base64.encodeBase64(new byte[] { (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,156,"ssertEquals(""Fw=="",new String(Base64.encodeBase64(new byte[] { (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,157,"ssertEquals(""GA=="",new String(Base64.encodeBase64(new byte[] { (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,158,"ssertEquals(""GQ=="",new String(Base64.encodeBase64(new byte[] { (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,159,"ssertEquals(""Gg=="",new String(Base64.encodeBase64(new byte[] { (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,160,"ssertEquals(""Gw=="",new String(Base64.encodeBase64(new byte[] { (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,161,"ssertEquals(""HA=="",new String(Base64.encodeBase64(new byte[] { (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,162,"ssertEquals(""HQ=="",new String(Base64.encodeBase64(new byte[] { (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,163,"ssertEquals(""Hg=="",new String(Base64.encodeBase64(new byte[] { (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,164,"ssertEquals(""Hw=="",new String(Base64.encodeBase64(new byte[] { (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,165,"ssertEquals(""IA=="",new String(Base64.encodeBase64(new byte[] { (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,166,"ssertEquals(""IQ=="",new String(Base64.encodeBase64(new byte[] { (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,167,"ssertEquals(""Ig=="",new String(Base64.encodeBase64(new byte[] { (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,168,"ssertEquals(""Iw=="",new String(Base64.encodeBase64(new byte[] { (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,169,"ssertEquals(""JA=="",new String(Base64.encodeBase64(new byte[] { (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,170,"ssertEquals(""JQ=="",new String(Base64.encodeBase64(new byte[] { (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,171,"ssertEquals(""Jg=="",new String(Base64.encodeBase64(new byte[] { (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,172,"ssertEquals(""Jw=="",new String(Base64.encodeBase64(new byte[] { (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,173,"ssertEquals(""KA=="",new String(Base64.encodeBase64(new byte[] { (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,174,"ssertEquals(""KQ=="",new String(Base64.encodeBase64(new byte[] { (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,175,"ssertEquals(""Kg=="",new String(Base64.encodeBase64(new byte[] { (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,176,"ssertEquals(""Kw=="",new String(Base64.encodeBase64(new byte[] { (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,177,"ssertEquals(""LA=="",new String(Base64.encodeBase64(new byte[] { (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,178,"ssertEquals(""LQ=="",new String(Base64.encodeBase64(new byte[] { (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,179,"ssertEquals(""Lg=="",new String(Base64.encodeBase64(new byte[] { (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,180,"ssertEquals(""Lw=="",new String(Base64.encodeBase64(new byte[] { (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,181,"ssertEquals(""MA=="",new String(Base64.encodeBase64(new byte[] { (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,182,"ssertEquals(""MQ=="",new String(Base64.encodeBase64(new byte[] { (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,183,"ssertEquals(""Mg=="",new String(Base64.encodeBase64(new byte[] { (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,184,"ssertEquals(""Mw=="",new String(Base64.encodeBase64(new byte[] { (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,185,"ssertEquals(""NA=="",new String(Base64.encodeBase64(new byte[] { (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,186,"ssertEquals(""NQ=="",new String(Base64.encodeBase64(new byte[] { (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,187,"ssertEquals(""Ng=="",new String(Base64.encodeBase64(new byte[] { (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,188,"ssertEquals(""Nw=="",new String(Base64.encodeBase64(new byte[] { (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,189,"ssertEquals(""OA=="",new String(Base64.encodeBase64(new byte[] { (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,190,"ssertEquals(""OQ=="",new String(Base64.encodeBase64(new byte[] { (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,191,"ssertEquals(""Og=="",new String(Base64.encodeBase64(new byte[] { (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,192,"ssertEquals(""Ow=="",new String(Base64.encodeBase64(new byte[] { (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,193,"ssertEquals(""PA=="",new String(Base64.encodeBase64(new byte[] { (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,194,"ssertEquals(""PQ=="",new String(Base64.encodeBase64(new byte[] { (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,195,"ssertEquals(""Pg=="",new String(Base64.encodeBase64(new byte[] { (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,196,"ssertEquals(""Pw=="",new String(Base64.encodeBase64(new byte[] { (byte)63 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,197,"ssertEquals(""QA=="",new String(Base64.encodeBase64(new byte[] { (byte)64 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,198,"ssertEquals(""QQ=="",new String(Base64.encodeBase64(new byte[] { (byte)65 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,199,"ssertEquals(""Qg=="",new String(Base64.encodeBase64(new byte[] { (byte)66 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,200,"ssertEquals(""Qw=="",new String(Base64.encodeBase64(new byte[] { (byte)67 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,201,"ssertEquals(""RA=="",new String(Base64.encodeBase64(new byte[] { (byte)68 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,202,"ssertEquals(""RQ=="",new String(Base64.encodeBase64(new byte[] { (byte)69 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,203,"ssertEquals(""Rg=="",new String(Base64.encodeBase64(new byte[] { (byte)70 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,204,"ssertEquals(""Rw=="",new String(Base64.encodeBase64(new byte[] { (byte)71 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,205,"ssertEquals(""SA=="",new String(Base64.encodeBase64(new byte[] { (byte)72 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,206,"ssertEquals(""SQ=="",new String(Base64.encodeBase64(new byte[] { (byte)73 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,207,"ssertEquals(""Sg=="",new String(Base64.encodeBase64(new byte[] { (byte)74 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,208,"ssertEquals(""Sw=="",new String(Base64.encodeBase64(new byte[] { (byte)75 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,209,"ssertEquals(""TA=="",new String(Base64.encodeBase64(new byte[] { (byte)76 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,210,"ssertEquals(""TQ=="",new String(Base64.encodeBase64(new byte[] { (byte)77 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,211,"ssertEquals(""Tg=="",new String(Base64.encodeBase64(new byte[] { (byte)78 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,212,"ssertEquals(""Tw=="",new String(Base64.encodeBase64(new byte[] { (byte)79 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,213,"ssertEquals(""UA=="",new String(Base64.encodeBase64(new byte[] { (byte)80 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,214,"ssertEquals(""UQ=="",new String(Base64.encodeBase64(new byte[] { (byte)81 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,215,"ssertEquals(""Ug=="",new String(Base64.encodeBase64(new byte[] { (byte)82 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,216,"ssertEquals(""Uw=="",new String(Base64.encodeBase64(new byte[] { (byte)83 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,217,"ssertEquals(""VA=="",new String(Base64.encodeBase64(new byte[] { (byte)84 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,218,"ssertEquals(""VQ=="",new String(Base64.encodeBase64(new byte[] { (byte)85 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,219,"ssertEquals(""Vg=="",new String(Base64.encodeBase64(new byte[] { (byte)86 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,"ssertEquals(""Vw=="",new String(Base64.encodeBase64(new byte[] { (byte)87 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,221,"ssertEquals(""WA=="",new String(Base64.encodeBase64(new byte[] { (byte)88 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,222,"ssertEquals(""WQ=="",new String(Base64.encodeBase64(new byte[] { (byte)89 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,223,"ssertEquals(""Wg=="",new String(Base64.encodeBase64(new byte[] { (byte)90 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,224,"ssertEquals(""Ww=="",new String(Base64.encodeBase64(new byte[] { (byte)91 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,225,"ssertEquals(""XA=="",new String(Base64.encodeBase64(new byte[] { (byte)92 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,"ssertEquals(""XQ=="",new String(Base64.encodeBase64(new byte[] { (byte)93 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,"ssertEquals(""Xg=="",new String(Base64.encodeBase64(new byte[] { (byte)94 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,228,"ssertEquals(""Xw=="",new String(Base64.encodeBase64(new byte[] { (byte)95 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,229,"ssertEquals(""YA=="",new String(Base64.encodeBase64(new byte[] { (byte)96 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,230,"ssertEquals(""YQ=="",new String(Base64.encodeBase64(new byte[] { (byte)97 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,"ssertEquals(""Yg=="",new String(Base64.encodeBase64(new byte[] { (byte)98 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"ssertEquals(""Yw=="",new String(Base64.encodeBase64(new byte[] { (byte)99 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"ssertEquals(""ZA=="",new String(Base64.encodeBase64(new byte[] { (byte)100 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"ssertEquals(""ZQ=="",new String(Base64.encodeBase64(new byte[] { (byte)101 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"ssertEquals(""Zg=="",new String(Base64.encodeBase64(new byte[] { (byte)102 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"ssertEquals(""Zw=="",new String(Base64.encodeBase64(new byte[] { (byte)103 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"ssertEquals(""aA=="",new String(Base64.encodeBase64(new byte[] { (byte)104 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,or (int i = -128; i<=127; i++){
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,yte test[]= {(byte)i};
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,240,"ssertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,132,"assertEquals(""AA=="", new String(Base64.encodeBase64(new byte[]{(byte) 0})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,133,"assertEquals(""AQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 1})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,134,"assertEquals(""Ag=="", new String(Base64.encodeBase64(new byte[]{(byte) 2})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,135,"assertEquals(""Aw=="", new String(Base64.encodeBase64(new byte[]{(byte) 3})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,136,"assertEquals(""BA=="", new String(Base64.encodeBase64(new byte[]{(byte) 4})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,137,"assertEquals(""BQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 5})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,138,"assertEquals(""Bg=="", new String(Base64.encodeBase64(new byte[]{(byte) 6})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,139,"assertEquals(""Bw=="", new String(Base64.encodeBase64(new byte[]{(byte) 7})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,140,"assertEquals(""CA=="", new String(Base64.encodeBase64(new byte[]{(byte) 8})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,141,"assertEquals(""CQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 9})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,142,"assertEquals(""Cg=="", new String(Base64.encodeBase64(new byte[]{(byte) 10})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,143,"assertEquals(""Cw=="", new String(Base64.encodeBase64(new byte[]{(byte) 11})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,144,"assertEquals(""DA=="", new String(Base64.encodeBase64(new byte[]{(byte) 12})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,145,"assertEquals(""DQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 13})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,146,"assertEquals(""Dg=="", new String(Base64.encodeBase64(new byte[]{(byte) 14})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,147,"assertEquals(""Dw=="", new String(Base64.encodeBase64(new byte[]{(byte) 15})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,148,"assertEquals(""EA=="", new String(Base64.encodeBase64(new byte[]{(byte) 16})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,149,"assertEquals(""EQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 17})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,150,"assertEquals(""Eg=="", new String(Base64.encodeBase64(new byte[]{(byte) 18})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,151,"assertEquals(""Ew=="", new String(Base64.encodeBase64(new byte[]{(byte) 19})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,152,"assertEquals(""FA=="", new String(Base64.encodeBase64(new byte[]{(byte) 20})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,153,"assertEquals(""FQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 21})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,154,"assertEquals(""Fg=="", new String(Base64.encodeBase64(new byte[]{(byte) 22})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,155,"assertEquals(""Fw=="", new String(Base64.encodeBase64(new byte[]{(byte) 23})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,156,"assertEquals(""GA=="", new String(Base64.encodeBase64(new byte[]{(byte) 24})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,157,"assertEquals(""GQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 25})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,158,"assertEquals(""Gg=="", new String(Base64.encodeBase64(new byte[]{(byte) 26})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,159,"assertEquals(""Gw=="", new String(Base64.encodeBase64(new byte[]{(byte) 27})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,160,"assertEquals(""HA=="", new String(Base64.encodeBase64(new byte[]{(byte) 28})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,161,"assertEquals(""HQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 29})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,162,"assertEquals(""Hg=="", new String(Base64.encodeBase64(new byte[]{(byte) 30})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,163,"assertEquals(""Hw=="", new String(Base64.encodeBase64(new byte[]{(byte) 31})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,164,"assertEquals(""IA=="", new String(Base64.encodeBase64(new byte[]{(byte) 32})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,165,"assertEquals(""IQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 33})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,166,"assertEquals(""Ig=="", new String(Base64.encodeBase64(new byte[]{(byte) 34})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,167,"assertEquals(""Iw=="", new String(Base64.encodeBase64(new byte[]{(byte) 35})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,168,"assertEquals(""JA=="", new String(Base64.encodeBase64(new byte[]{(byte) 36})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,169,"assertEquals(""JQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 37})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,170,"assertEquals(""Jg=="", new String(Base64.encodeBase64(new byte[]{(byte) 38})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,171,"assertEquals(""Jw=="", new String(Base64.encodeBase64(new byte[]{(byte) 39})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,172,"assertEquals(""KA=="", new String(Base64.encodeBase64(new byte[]{(byte) 40})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,173,"assertEquals(""KQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 41})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,174,"assertEquals(""Kg=="", new String(Base64.encodeBase64(new byte[]{(byte) 42})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,175,"assertEquals(""Kw=="", new String(Base64.encodeBase64(new byte[]{(byte) 43})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,176,"assertEquals(""LA=="", new String(Base64.encodeBase64(new byte[]{(byte) 44})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,177,"assertEquals(""LQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 45})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,178,"assertEquals(""Lg=="", new String(Base64.encodeBase64(new byte[]{(byte) 46})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,179,"assertEquals(""Lw=="", new String(Base64.encodeBase64(new byte[]{(byte) 47})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,180,"assertEquals(""MA=="", new String(Base64.encodeBase64(new byte[]{(byte) 48})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,181,"assertEquals(""MQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 49})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,182,"assertEquals(""Mg=="", new String(Base64.encodeBase64(new byte[]{(byte) 50})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,183,"assertEquals(""Mw=="", new String(Base64.encodeBase64(new byte[]{(byte) 51})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,184,"assertEquals(""NA=="", new String(Base64.encodeBase64(new byte[]{(byte) 52})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,185,"assertEquals(""NQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 53})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,186,"assertEquals(""Ng=="", new String(Base64.encodeBase64(new byte[]{(byte) 54})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,187,"assertEquals(""Nw=="", new String(Base64.encodeBase64(new byte[]{(byte) 55})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,188,"assertEquals(""OA=="", new String(Base64.encodeBase64(new byte[]{(byte) 56})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,189,"assertEquals(""OQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 57})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,190,"assertEquals(""Og=="", new String(Base64.encodeBase64(new byte[]{(byte) 58})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,191,"assertEquals(""Ow=="", new String(Base64.encodeBase64(new byte[]{(byte) 59})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,192,"assertEquals(""PA=="", new String(Base64.encodeBase64(new byte[]{(byte) 60})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,193,"assertEquals(""PQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 61})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,194,"assertEquals(""Pg=="", new String(Base64.encodeBase64(new byte[]{(byte) 62})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,195,"assertEquals(""Pw=="", new String(Base64.encodeBase64(new byte[]{(byte) 63})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,196,"assertEquals(""QA=="", new String(Base64.encodeBase64(new byte[]{(byte) 64})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,197,"assertEquals(""QQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 65})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,198,"assertEquals(""Qg=="", new String(Base64.encodeBase64(new byte[]{(byte) 66})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,199,"assertEquals(""Qw=="", new String(Base64.encodeBase64(new byte[]{(byte) 67})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,200,"assertEquals(""RA=="", new String(Base64.encodeBase64(new byte[]{(byte) 68})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,201,"assertEquals(""RQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 69})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,202,"assertEquals(""Rg=="", new String(Base64.encodeBase64(new byte[]{(byte) 70})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,203,"assertEquals(""Rw=="", new String(Base64.encodeBase64(new byte[]{(byte) 71})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,204,"assertEquals(""SA=="", new String(Base64.encodeBase64(new byte[]{(byte) 72})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,205,"assertEquals(""SQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 73})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,206,"assertEquals(""Sg=="", new String(Base64.encodeBase64(new byte[]{(byte) 74})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,207,"assertEquals(""Sw=="", new String(Base64.encodeBase64(new byte[]{(byte) 75})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,208,"assertEquals(""TA=="", new String(Base64.encodeBase64(new byte[]{(byte) 76})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,209,"assertEquals(""TQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 77})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,210,"assertEquals(""Tg=="", new String(Base64.encodeBase64(new byte[]{(byte) 78})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,211,"assertEquals(""Tw=="", new String(Base64.encodeBase64(new byte[]{(byte) 79})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,212,"assertEquals(""UA=="", new String(Base64.encodeBase64(new byte[]{(byte) 80})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,213,"assertEquals(""UQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 81})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,214,"assertEquals(""Ug=="", new String(Base64.encodeBase64(new byte[]{(byte) 82})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,215,"assertEquals(""Uw=="", new String(Base64.encodeBase64(new byte[]{(byte) 83})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,216,"assertEquals(""VA=="", new String(Base64.encodeBase64(new byte[]{(byte) 84})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,217,"assertEquals(""VQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 85})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,218,"assertEquals(""Vg=="", new String(Base64.encodeBase64(new byte[]{(byte) 86})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,219,"assertEquals(""Vw=="", new String(Base64.encodeBase64(new byte[]{(byte) 87})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,"assertEquals(""WA=="", new String(Base64.encodeBase64(new byte[]{(byte) 88})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,221,"assertEquals(""WQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 89})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,222,"assertEquals(""Wg=="", new String(Base64.encodeBase64(new byte[]{(byte) 90})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,223,"assertEquals(""Ww=="", new String(Base64.encodeBase64(new byte[]{(byte) 91})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,224,"assertEquals(""XA=="", new String(Base64.encodeBase64(new byte[]{(byte) 92})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,225,"assertEquals(""XQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 93})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,"assertEquals(""Xg=="", new String(Base64.encodeBase64(new byte[]{(byte) 94})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,"assertEquals(""Xw=="", new String(Base64.encodeBase64(new byte[]{(byte) 95})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,228,"assertEquals(""YA=="", new String(Base64.encodeBase64(new byte[]{(byte) 96})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,229,"assertEquals(""YQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 97})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,230,"assertEquals(""Yg=="", new String(Base64.encodeBase64(new byte[]{(byte) 98})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,"assertEquals(""Yw=="", new String(Base64.encodeBase64(new byte[]{(byte) 99})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"assertEquals(""ZA=="", new String(Base64.encodeBase64(new byte[]{(byte) 100})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"assertEquals(""ZQ=="", new String(Base64.encodeBase64(new byte[]{(byte) 101})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"assertEquals(""Zg=="", new String(Base64.encodeBase64(new byte[]{(byte) 102})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"assertEquals(""Zw=="", new String(Base64.encodeBase64(new byte[]{(byte) 103})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"assertEquals(""aA=="", new String(Base64.encodeBase64(new byte[]{(byte) 104})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,for (int i = -128; i <= 127; i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,byte test[] = {(byte) i};
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,"assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"ssertEquals(""AA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"ssertEquals(""AQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"ssertEquals(""Ag==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"ssertEquals(""Aw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"ssertEquals(""BA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,250,"ssertEquals(""BQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,251,"ssertEquals(""Bg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,252,"ssertEquals(""Bw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,253,"ssertEquals(""CA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,254,"ssertEquals(""CQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,"ssertEquals(""Cg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"ssertEquals(""Cw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,257,"ssertEquals(""DA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,258,"ssertEquals(""DQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,259,"ssertEquals(""Dg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,260,"ssertEquals(""Dw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,261,"ssertEquals(""EA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,262,"ssertEquals(""EQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,"ssertEquals(""Eg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"ssertEquals(""Ew==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,265,"ssertEquals(""FA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,266,"ssertEquals(""FQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,267,"ssertEquals(""Fg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,268,"ssertEquals(""Fw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,269,"ssertEquals(""GA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,270,"ssertEquals(""GQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,271,"ssertEquals(""Gg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"ssertEquals(""Gw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,273,"ssertEquals(""HA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,274,"ssertEquals(""HQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,"ssertEquals(""Hg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"ssertEquals(""Hw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,277,"ssertEquals(""IA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,278,"ssertEquals(""IQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,279,"ssertEquals(""Ig==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,280,"ssertEquals(""Iw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,281,"ssertEquals(""JA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,282,"ssertEquals(""JQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,"ssertEquals(""Jg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"ssertEquals(""Jw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,285,"ssertEquals(""KA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,286,"ssertEquals(""KQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,287,"ssertEquals(""Kg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,288,"ssertEquals(""Kw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,289,"ssertEquals(""LA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,290,"ssertEquals(""LQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,291,"ssertEquals(""Lg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,292,"ssertEquals(""Lw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,293,"ssertEquals(""MA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,294,"ssertEquals(""MQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,295,"ssertEquals(""Mg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,296,"ssertEquals(""Mw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,297,"ssertEquals(""NA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,298,"ssertEquals(""NQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,299,"ssertEquals(""Ng==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,300,"ssertEquals(""Nw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,301,"ssertEquals(""OA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,302,"ssertEquals(""OQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,303,"ssertEquals(""Og==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,304,"ssertEquals(""Ow==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,305,"ssertEquals(""PA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,306,"ssertEquals(""PQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,307,"ssertEquals(""Pg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,308,"ssertEquals(""Pw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)63 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,309,"ssertEquals(""QA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)64 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,310,"ssertEquals(""QQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)65 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,311,"ssertEquals(""Qg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)66 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,312,"ssertEquals(""Qw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)67 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,313,"ssertEquals(""RA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)68 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,314,"ssertEquals(""RQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)69 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,315,"ssertEquals(""Rg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)70 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,316,"ssertEquals(""Rw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)71 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,317,"ssertEquals(""SA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)72 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,318,"ssertEquals(""SQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)73 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,319,"ssertEquals(""Sg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)74 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,320,"ssertEquals(""Sw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)75 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,321,"ssertEquals(""TA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)76 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,322,"ssertEquals(""TQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)77 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,323,"ssertEquals(""Tg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)78 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,324,"ssertEquals(""Tw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)79 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,325,"ssertEquals(""UA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)80 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,326,"ssertEquals(""UQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)81 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,327,"ssertEquals(""Ug==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)82 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,328,"ssertEquals(""Uw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)83 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,329,"ssertEquals(""VA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)84 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,330,"ssertEquals(""VQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)85 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,331,"ssertEquals(""Vg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)86 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,332,"ssertEquals(""Vw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)87 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,333,"ssertEquals(""WA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)88 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,334,"ssertEquals(""WQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)89 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,335,"ssertEquals(""Wg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)90 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,336,"ssertEquals(""Ww==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)91 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,337,"ssertEquals(""XA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)92 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,338,"ssertEquals(""XQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)93 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,339,"ssertEquals(""Xg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)94 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,340,"ssertEquals(""Xw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)95 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,341,"ssertEquals(""YA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)96 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,342,"ssertEquals(""YQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)97 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,343,"ssertEquals(""Yg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)98 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,344,"ssertEquals(""Yw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)99 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,345,"ssertEquals(""ZA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)100 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,346,"ssertEquals(""ZQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)101 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,347,"ssertEquals(""Zg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)102 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,348,"ssertEquals(""Zw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)103 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,349,"ssertEquals(""aA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)104 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,352,ublic void testPairs(){
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,353,"ssertEquals(""AAA="",new String(Base64.encodeBase64(new byte[] { 0, 0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,354,or (int i = -128; i<=127; i++){
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,355,"yte test[]= {(byte)i, (byte)i};"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,356,"ssertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,244,"assertEquals(""AA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"assertEquals(""AQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 1})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"assertEquals(""Ag==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 2})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"assertEquals(""Aw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 3})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"assertEquals(""BA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 4})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"assertEquals(""BQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 5})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,250,"assertEquals(""Bg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 6})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,251,"assertEquals(""Bw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 7})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,252,"assertEquals(""CA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 8})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,253,"assertEquals(""CQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 9})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,254,"assertEquals(""Cg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 10})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,"assertEquals(""Cw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 11})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"assertEquals(""DA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 12})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,257,"assertEquals(""DQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 13})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,258,"assertEquals(""Dg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 14})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,259,"assertEquals(""Dw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 15})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,260,"assertEquals(""EA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 16})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,261,"assertEquals(""EQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 17})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,262,"assertEquals(""Eg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 18})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,"assertEquals(""Ew==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 19})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"assertEquals(""FA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 20})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,265,"assertEquals(""FQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 21})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,266,"assertEquals(""Fg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 22})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,267,"assertEquals(""Fw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 23})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,268,"assertEquals(""GA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 24})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,269,"assertEquals(""GQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 25})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,270,"assertEquals(""Gg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 26})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,271,"assertEquals(""Gw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 27})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"assertEquals(""HA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 28})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,273,"assertEquals(""HQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 29})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,274,"assertEquals(""Hg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 30})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,"assertEquals(""Hw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 31})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"assertEquals(""IA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 32})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,277,"assertEquals(""IQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 33})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,278,"assertEquals(""Ig==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 34})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,279,"assertEquals(""Iw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 35})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,280,"assertEquals(""JA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 36})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,281,"assertEquals(""JQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 37})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,282,"assertEquals(""Jg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 38})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,"assertEquals(""Jw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 39})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"assertEquals(""KA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 40})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,285,"assertEquals(""KQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 41})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,286,"assertEquals(""Kg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 42})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,287,"assertEquals(""Kw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 43})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,288,"assertEquals(""LA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 44})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,289,"assertEquals(""LQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 45})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,290,"assertEquals(""Lg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 46})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,291,"assertEquals(""Lw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 47})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,292,"assertEquals(""MA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 48})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,293,"assertEquals(""MQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 49})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,294,"assertEquals(""Mg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 50})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,295,"assertEquals(""Mw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 51})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,296,"assertEquals(""NA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 52})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,297,"assertEquals(""NQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 53})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,298,"assertEquals(""Ng==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 54})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,299,"assertEquals(""Nw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 55})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,300,"assertEquals(""OA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 56})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,301,"assertEquals(""OQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 57})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,302,"assertEquals(""Og==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 58})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,303,"assertEquals(""Ow==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 59})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,304,"assertEquals(""PA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 60})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,305,"assertEquals(""PQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 61})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,306,"assertEquals(""Pg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 62})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,307,"assertEquals(""Pw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 63})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,308,"assertEquals(""QA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 64})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,309,"assertEquals(""QQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 65})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,310,"assertEquals(""Qg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 66})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,311,"assertEquals(""Qw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 67})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,312,"assertEquals(""RA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 68})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,313,"assertEquals(""RQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 69})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,314,"assertEquals(""Rg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 70})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,315,"assertEquals(""Rw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 71})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,316,"assertEquals(""SA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 72})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,317,"assertEquals(""SQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 73})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,318,"assertEquals(""Sg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 74})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,319,"assertEquals(""Sw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 75})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,320,"assertEquals(""TA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 76})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,321,"assertEquals(""TQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 77})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,322,"assertEquals(""Tg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 78})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,323,"assertEquals(""Tw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 79})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,324,"assertEquals(""UA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 80})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,325,"assertEquals(""UQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 81})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,326,"assertEquals(""Ug==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 82})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,327,"assertEquals(""Uw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 83})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,328,"assertEquals(""VA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 84})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,329,"assertEquals(""VQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 85})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,330,"assertEquals(""Vg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 86})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,331,"assertEquals(""Vw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 87})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,332,"assertEquals(""WA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 88})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,333,"assertEquals(""WQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 89})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,334,"assertEquals(""Wg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 90})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,335,"assertEquals(""Ww==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 91})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,336,"assertEquals(""XA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 92})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,337,"assertEquals(""XQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 93})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,338,"assertEquals(""Xg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 94})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,339,"assertEquals(""Xw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 95})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,340,"assertEquals(""YA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 96})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,341,"assertEquals(""YQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 97})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,342,"assertEquals(""Yg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 98})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,343,"assertEquals(""Yw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 99})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,344,"assertEquals(""ZA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 100})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,345,"assertEquals(""ZQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 101})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,346,"assertEquals(""Zg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 102})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,347,"assertEquals(""Zw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 103})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,348,"assertEquals(""aA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 104})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,351,public void testPairs() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,352,"assertEquals(""AAA="", new String(Base64.encodeBase64(new byte[]{0, 0})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,353,for (int i = -128; i <= 127; i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,354,"byte test[] = {(byte) i, (byte) i};"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,355,"assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,361,"ssertEquals(""AAAA"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,362,"ssertEquals(""AAAB"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,363,"ssertEquals(""AAAC"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,364,"ssertEquals(""AAAD"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,365,"ssertEquals(""AAAE"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,366,"ssertEquals(""AAAF"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,367,"ssertEquals(""AAAG"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,368,"ssertEquals(""AAAH"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,369,"ssertEquals(""AAAI"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,370,"ssertEquals(""AAAJ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,371,"ssertEquals(""AAAK"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,372,"ssertEquals(""AAAL"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,373,"ssertEquals(""AAAM"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,374,"ssertEquals(""AAAN"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,375,"ssertEquals(""AAAO"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,376,"ssertEquals(""AAAP"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,377,"ssertEquals(""AAAQ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,378,"ssertEquals(""AAAR"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,379,"ssertEquals(""AAAS"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,380,"ssertEquals(""AAAT"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,381,"ssertEquals(""AAAU"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,382,"ssertEquals(""AAAV"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,383,"ssertEquals(""AAAW"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,384,"ssertEquals(""AAAX"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,385,"ssertEquals(""AAAY"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,386,"ssertEquals(""AAAZ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,387,"ssertEquals(""AAAa"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,388,"ssertEquals(""AAAb"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,389,"ssertEquals(""AAAc"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,390,"ssertEquals(""AAAd"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,391,"ssertEquals(""AAAe"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,392,"ssertEquals(""AAAf"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,393,"ssertEquals(""AAAg"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,"ssertEquals(""AAAh"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,395,"ssertEquals(""AAAi"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,396,"ssertEquals(""AAAj"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,"ssertEquals(""AAAk"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,398,"ssertEquals(""AAAl"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"ssertEquals(""AAAm"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,"ssertEquals(""AAAn"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,401,"ssertEquals(""AAAo"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,402,"ssertEquals(""AAAp"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,403,"ssertEquals(""AAAq"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,404,"ssertEquals(""AAAr"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,"ssertEquals(""AAAs"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,406,"ssertEquals(""AAAt"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,"ssertEquals(""AAAu"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,"ssertEquals(""AAAv"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,"ssertEquals(""AAAw"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,410,"ssertEquals(""AAAx"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"ssertEquals(""AAAy"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,"ssertEquals(""AAAz"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,"ssertEquals(""AAA0"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"ssertEquals(""AAA1"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,415,"ssertEquals(""AAA2"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,416,"ssertEquals(""AAA3"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,"ssertEquals(""AAA4"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,418,"ssertEquals(""AAA5"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,419,"ssertEquals(""AAA6"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,420,"ssertEquals(""AAA7"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,421,"ssertEquals(""AAA8"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,422,"ssertEquals(""AAA9"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,423,"ssertEquals(""AAA+"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,424,"ssertEquals(""AAA/"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,360,"assertEquals(""AAAA"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 0})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,361,"assertEquals(""AAAB"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 1})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,362,"assertEquals(""AAAC"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 2})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,363,"assertEquals(""AAAD"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 3})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,364,"assertEquals(""AAAE"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 4})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,365,"assertEquals(""AAAF"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 5})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,366,"assertEquals(""AAAG"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 6})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,367,"assertEquals(""AAAH"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 7})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,368,"assertEquals(""AAAI"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 8})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,369,"assertEquals(""AAAJ"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 9})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,370,"assertEquals(""AAAK"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 10})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,371,"assertEquals(""AAAL"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 11})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,372,"assertEquals(""AAAM"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 12})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,373,"assertEquals(""AAAN"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 13})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,374,"assertEquals(""AAAO"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 14})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,375,"assertEquals(""AAAP"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 15})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,376,"assertEquals(""AAAQ"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 16})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,377,"assertEquals(""AAAR"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 17})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,378,"assertEquals(""AAAS"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 18})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,379,"assertEquals(""AAAT"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 19})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,380,"assertEquals(""AAAU"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 20})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,381,"assertEquals(""AAAV"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 21})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,382,"assertEquals(""AAAW"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 22})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,383,"assertEquals(""AAAX"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 23})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,384,"assertEquals(""AAAY"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 24})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,385,"assertEquals(""AAAZ"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 25})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,386,"assertEquals(""AAAa"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 26})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,387,"assertEquals(""AAAb"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 27})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,388,"assertEquals(""AAAc"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 28})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,389,"assertEquals(""AAAd"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 29})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,390,"assertEquals(""AAAe"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 30})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,391,"assertEquals(""AAAf"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 31})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,392,"assertEquals(""AAAg"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 32})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,393,"assertEquals(""AAAh"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 33})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,"assertEquals(""AAAi"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 34})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,395,"assertEquals(""AAAj"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 35})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,396,"assertEquals(""AAAk"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 36})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,"assertEquals(""AAAl"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 37})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,398,"assertEquals(""AAAm"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 38})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"assertEquals(""AAAn"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 39})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,"assertEquals(""AAAo"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 40})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,401,"assertEquals(""AAAp"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 41})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,402,"assertEquals(""AAAq"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 42})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,403,"assertEquals(""AAAr"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 43})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,404,"assertEquals(""AAAs"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 44})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,"assertEquals(""AAAt"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 45})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,406,"assertEquals(""AAAu"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 46})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,"assertEquals(""AAAv"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 47})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,"assertEquals(""AAAw"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 48})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,"assertEquals(""AAAx"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 49})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,410,"assertEquals(""AAAy"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 50})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"assertEquals(""AAAz"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 51})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,"assertEquals(""AAA0"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 52})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,"assertEquals(""AAA1"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 53})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"assertEquals(""AAA2"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 54})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,415,"assertEquals(""AAA3"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 55})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,416,"assertEquals(""AAA4"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 56})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,"assertEquals(""AAA5"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 57})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,418,"assertEquals(""AAA6"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 58})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,419,"assertEquals(""AAA7"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 59})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,420,"assertEquals(""AAA8"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 60})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,421,"assertEquals(""AAA9"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 61})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,422,"assertEquals(""AAA+"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 62})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,423,"assertEquals(""AAA/"", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 63})));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,428,"ssertEquals(""AAAA\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,429,"ssertEquals(""AAAB\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,430,"ssertEquals(""AAAC\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,431,"ssertEquals(""AAAD\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,432,"ssertEquals(""AAAE\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,433,"ssertEquals(""AAAF\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,434,"ssertEquals(""AAAG\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,435,"ssertEquals(""AAAH\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,436,"ssertEquals(""AAAI\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,437,"ssertEquals(""AAAJ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,438,"ssertEquals(""AAAK\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,439,"ssertEquals(""AAAL\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,440,"ssertEquals(""AAAM\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,"ssertEquals(""AAAN\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,442,"ssertEquals(""AAAO\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,443,"ssertEquals(""AAAP\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,444,"ssertEquals(""AAAQ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,445,"ssertEquals(""AAAR\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,446,"ssertEquals(""AAAS\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,447,"ssertEquals(""AAAT\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,448,"ssertEquals(""AAAU\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,449,"ssertEquals(""AAAV\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,450,"ssertEquals(""AAAW\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,451,"ssertEquals(""AAAX\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,452,"ssertEquals(""AAAY\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,453,"ssertEquals(""AAAZ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,454,"ssertEquals(""AAAa\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,455,"ssertEquals(""AAAb\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,456,"ssertEquals(""AAAc\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,457,"ssertEquals(""AAAd\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,458,"ssertEquals(""AAAe\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,459,"ssertEquals(""AAAf\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,460,"ssertEquals(""AAAg\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,461,"ssertEquals(""AAAh\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,462,"ssertEquals(""AAAi\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,463,"ssertEquals(""AAAj\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,464,"ssertEquals(""AAAk\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,465,"ssertEquals(""AAAl\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,466,"ssertEquals(""AAAm\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,467,"ssertEquals(""AAAn\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,468,"ssertEquals(""AAAo\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,469,"ssertEquals(""AAAp\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,470,"ssertEquals(""AAAq\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,471,"ssertEquals(""AAAr\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,472,"ssertEquals(""AAAs\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,473,"ssertEquals(""AAAt\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,474,"ssertEquals(""AAAu\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,475,"ssertEquals(""AAAv\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,476,"ssertEquals(""AAAw\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,477,"ssertEquals(""AAAx\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,478,"ssertEquals(""AAAy\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,479,"ssertEquals(""AAAz\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,480,"ssertEquals(""AAA0\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,481,"ssertEquals(""AAA1\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,482,"ssertEquals(""AAA2\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,483,"ssertEquals(""AAA3\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,484,"ssertEquals(""AAA4\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,485,"ssertEquals(""AAA5\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,486,"ssertEquals(""AAA6\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,487,"ssertEquals(""AAA7\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,488,"ssertEquals(""AAA8\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,489,"ssertEquals(""AAA9\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,490,"ssertEquals(""AAA+\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,491,"ssertEquals(""AAA/\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)63 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,427,"assertEquals(""AAAA\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 0})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,428,"assertEquals(""AAAB\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 1})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,429,"assertEquals(""AAAC\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 2})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,430,"assertEquals(""AAAD\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 3})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,431,"assertEquals(""AAAE\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 4})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,432,"assertEquals(""AAAF\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 5})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,433,"assertEquals(""AAAG\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 6})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,434,"assertEquals(""AAAH\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 7})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,435,"assertEquals(""AAAI\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 8})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,436,"assertEquals(""AAAJ\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 9})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,437,"assertEquals(""AAAK\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 10})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,438,"assertEquals(""AAAL\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 11})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,439,"assertEquals(""AAAM\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 12})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,440,"assertEquals(""AAAN\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 13})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,"assertEquals(""AAAO\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 14})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,442,"assertEquals(""AAAP\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 15})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,443,"assertEquals(""AAAQ\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 16})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,444,"assertEquals(""AAAR\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 17})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,445,"assertEquals(""AAAS\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 18})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,446,"assertEquals(""AAAT\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 19})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,447,"assertEquals(""AAAU\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 20})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,448,"assertEquals(""AAAV\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 21})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,449,"assertEquals(""AAAW\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 22})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,450,"assertEquals(""AAAX\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 23})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,451,"assertEquals(""AAAY\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 24})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,452,"assertEquals(""AAAZ\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 25})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,453,"assertEquals(""AAAa\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 26})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,454,"assertEquals(""AAAb\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 27})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,455,"assertEquals(""AAAc\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 28})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,456,"assertEquals(""AAAd\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 29})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,457,"assertEquals(""AAAe\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 30})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,458,"assertEquals(""AAAf\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 31})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,459,"assertEquals(""AAAg\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 32})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,460,"assertEquals(""AAAh\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 33})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,461,"assertEquals(""AAAi\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 34})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,462,"assertEquals(""AAAj\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 35})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,463,"assertEquals(""AAAk\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 36})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,464,"assertEquals(""AAAl\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 37})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,465,"assertEquals(""AAAm\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 38})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,466,"assertEquals(""AAAn\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 39})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,467,"assertEquals(""AAAo\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 40})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,468,"assertEquals(""AAAp\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 41})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,469,"assertEquals(""AAAq\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 42})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,470,"assertEquals(""AAAr\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 43})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,471,"assertEquals(""AAAs\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 44})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,472,"assertEquals(""AAAt\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 45})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,473,"assertEquals(""AAAu\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 46})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,474,"assertEquals(""AAAv\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 47})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,475,"assertEquals(""AAAw\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 48})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,476,"assertEquals(""AAAx\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 49})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,477,"assertEquals(""AAAy\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 50})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,478,"assertEquals(""AAAz\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 51})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,479,"assertEquals(""AAA0\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 52})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,480,"assertEquals(""AAA1\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 53})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,481,"assertEquals(""AAA2\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 54})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,482,"assertEquals(""AAA3\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 55})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,483,"assertEquals(""AAA4\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 56})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,484,"assertEquals(""AAA5\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 57})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,485,"assertEquals(""AAA6\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 58})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,486,"assertEquals(""AAA7\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 59})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,487,"assertEquals(""AAA8\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 60})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,488,"assertEquals(""AAA9\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 61})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,489,"assertEquals(""AAA+\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 62})));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,490,"assertEquals(""AAA/\r\n"", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 63})));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,495,"ssertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,496,"ssertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,497,"ssertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encodeBase64(""It was the best of times, it was the worst of times."".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,498,"ssertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,499,"ssertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,500,"ssertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,501,"ssertEquals(""eHl6enkh"",new String(Base64.encodeBase64(""xyzzy!"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,494,"assertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,495,".encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,496,assertEquals(
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,497,"""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,498,new String(
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,499,Base64
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,500,".encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,501,.getBytes())));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,502,"assertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,503,".encodeBase64(""It was the best of times, it was the worst of times."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,504,"assertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,505,".encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,506,"assertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,507,".encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,508,"assertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="", new String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,509,.getBytes())));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,510,"assertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,505,"ssertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,506,"ssertEquals(""It was the best of times, it was the worst of times."",new String(Base64.decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,507,"ssertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,508,"ssertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,509,"ssertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"",new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,510,"ssertEquals(""xyzzy!"",new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,514,"assertEquals(""The quick brown fox jumped over the lazy dogs."", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,515,".decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,516,"assertEquals(""It was the best of times, it was the worst of times."", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,517,".decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,518,"assertEquals(""http://jakarta.apache.org/commmons"", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,519,".decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,520,"assertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,521,".decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,522,"assertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"", new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,523,.getBytes())));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,524,"assertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,515,yte[] bArray = { '%' };
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,529,byte[] bArray = {'%'};
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,531,"assertFalse(""Invalid Base64 array was incorrectly validated as "" + ""an array of Base64 encoded data"", Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,532,.isArrayByteBase64(bArray));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,517,"ssertFalse( ""Invalid Base64 array was incorrectly validated as "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,518,"an array of Base64 encoded data"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,519,ase64.isArrayByteBase64( bArray ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,523,yte[] result = b64.decode( bArray );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,525,"ssertTrue( ""The result should be empty as the test encoded content did "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,526,"not contain any valid base 64 characters"", result.length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,528,atch( Exception e ) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,529,"ail( ""Exception was thrown when trying to decode "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,530,"invalid base64 encoded data - RFC 2045 requires that all "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,531,"non base64 character be discarded, an exception should not"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,532," have been thrown"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,536,byte[] result = b64.decode(bArray);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,538,"assertTrue(""The result should be empty as the test encoded content did "" + ""not contain any valid base 64 characters"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,539,result.length == 0);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,540,} catch (Exception e) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,541,"fail(""Exception was thrown when trying to decode """
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,542,"+ ""invalid base64 encoded data - RFC 2045 requires that all """
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,543,"+ ""non base64 character be discarded, an exception should not"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,544,"+ "" have been thrown"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,537,"ssertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,549,"assertEquals(""The quick brown fox jumped over the lazy dogs."", new String(Base64"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,550,".decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,540,ublic void testIsArrayByteBase64() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,541,ssertFalse(Base64.isArrayByteBase64(new byte[] {Byte.MIN_VALUE}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,542,ssertFalse(Base64.isArrayByteBase64(new byte[] {-125}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,543,ssertFalse(Base64.isArrayByteBase64(new byte[] {-10}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,544,ssertFalse(Base64.isArrayByteBase64(new byte[] {0}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,545,"ssertFalse(Base64.isArrayByteBase64(new byte[] {64, Byte.MAX_VALUE}));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,546,ssertFalse(Base64.isArrayByteBase64(new byte[] {Byte.MAX_VALUE}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,547,ssertTrue(Base64.isArrayByteBase64(new byte[] {'A'}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,548,"ssertFalse(Base64.isArrayByteBase64(new byte[] {'A', Byte.MIN_VALUE}));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,549,"ssertTrue(Base64.isArrayByteBase64(new byte[] {'A', 'Z', 'a'}));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,550,"ssertTrue(Base64.isArrayByteBase64(new byte[] {'/','=','+'}));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,551,ssertFalse(Base64.isArrayByteBase64(new byte[] {'$'}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,553,public void testIsArrayByteBase64() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,554,assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,555,assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,556,assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,557,assertFalse(Base64.isArrayByteBase64(new byte[]{0}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,558,"assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,559,assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,560,assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,561,"assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,562,"assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,563,"assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,564,assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,558,"64.decode( ""Yadayadayada"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,559,"ail( ""decode(Object) didn't throw an exception when passed a String object"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,560, catch( DecoderException e ) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,571,"b64.decode(""Yadayadayada"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,572,"fail(""decode(Object) didn't throw an exception when passed a String object"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,573,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,569,yte[] bArray =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,570,ase64.encodeBase64(original.getBytes() );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,582,byte[] bArray = Base64.encodeBase64(original.getBytes());
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,574,bject oDecoded = b64.decode( o );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,586,Object oDecoded = b64.decode(o);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,576,tring dest = new String( baDecoded );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,588,String dest = new String(baDecoded);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,578,"ssertTrue( ""dest string does not equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,579,est.equals( original ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,590,"assertTrue(""dest string does not equal original"", dest.equals(original));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,586,"64.encode( ""Yadayadayada"" );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,587,"ail( ""encode(Object) didn't throw an exception when passed a String object"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,588, catch( EncoderException e ) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,597,"b64.encode(""Yadayadayada"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,598,"fail(""encode(Object) didn't throw an exception when passed a String object"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,599,} catch (EncoderException e) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,599,bject oEncoded = b64.encode( origObj );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,600,yte[] bArray =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,601,ase64.decodeBase64( (byte[]) oEncoded );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,602,tring dest = new String( bArray );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,610,Object oEncoded = b64.encode(origObj);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,611,byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,612,String dest = new String(bArray);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,604,"ssertTrue( ""dest string does not equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,605,est.equals( original ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,614,"assertTrue(""dest string does not equal original"", dest.equals(original));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,612,yte[] encodedArray = Base64.encodeBase64( orig.getBytes() );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,613,tringBuffer intermediate =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,614,ew StringBuffer( new String(encodedArray) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,621,byte[] encodedArray = Base64.encodeBase64(orig.getBytes());
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,622,StringBuffer intermediate = new StringBuffer(new String(encodedArray));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,616,"ntermediate.insert( 2, ' ' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,617,"ntermediate.insert( 5, '\t' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,618,"ntermediate.insert( 10, '\r' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,619,"ntermediate.insert( 15, '\n' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,624,"intermediate.insert(2, ' ');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,625,"intermediate.insert(5, '\t');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,626,"intermediate.insert(10, '\r');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,627,"intermediate.insert(15, '\n');"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,622,yte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,630,byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,624,tring dest = new String( decodedWithWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,632,String dest = new String(decodedWithWS);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,626,"ssertTrue( ""Dest string doesn't equal the original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,627,est.equals( orig ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,634,"assertTrue(""Dest string doesn't equal the original"", dest.equals(orig));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,634,yte[] encodedArray = Base64.encodeBase64( orig.getBytes() );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,635,tringBuffer intermediate =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,636,ew StringBuffer( new String(encodedArray) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,641,byte[] encodedArray = Base64.encodeBase64(orig.getBytes());
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,642,StringBuffer intermediate = new StringBuffer(new String(encodedArray));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,638,"ntermediate.insert( 2, ' ' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,639,"ntermediate.insert( 5, '\t' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,640,"ntermediate.insert( 10, '\r' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,641,"ntermediate.insert( 15, '\n' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,644,"intermediate.insert(2, ' ');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,645,"intermediate.insert(5, '\t');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,646,"intermediate.insert(10, '\r');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,647,"intermediate.insert(15, '\n');"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,644,yte[] encodedNoWS = Base64.discardWhitespace( encodedWithWS );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,645,yte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,646,yte[] decodedNoWS = Base64.decodeBase64( encodedNoWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,650,byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,651,byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,652,byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,648,tring destFromWS = new String( decodedWithWS );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,649,tring destFromNoWS = new String( decodedNoWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,654,String destFromWS = new String(decodedWithWS);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,655,String destFromNoWS = new String(decodedNoWS);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,651,"ssertTrue( ""Dest string doesn't equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,652,estFromWS.equals( orig ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,653,"ssertTrue( ""Dest string doesn't equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,654,estFromNoWS.equals( orig ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,657,"assertTrue(""Dest string doesn't equal original"", destFromWS.equals(orig));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,658,"assertTrue(""Dest string doesn't equal original"", destFromNoWS.equals(orig));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,659,"igInteger bigInt1 = new BigInteger(""85739377120809420210425962799"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,660,"0318636601332086981"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,663,"BigInteger bigInt1 = new BigInteger(""85739377120809420210425962799"" + ""0318636601332086981"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,668,"igInteger bigInt2 = new BigInteger(""13936727572861167254666467268"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,669,"91466679477132949611"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,671,"BigInteger bigInt2 = new BigInteger(""13936727572861167254666467268"" + ""91466679477132949611"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,676,"tring encodedInt3 = ""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,677,"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,678,"igInteger bigInt3 = new BigInteger(""10806548154093873461951748545"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,679,"1196989136416448805819079363524309897749044958112417136240557"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,680,"4495062430572478766856090958495998158114332651671116876320938126"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,678,"String encodedInt3 = ""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"" + ""rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,679,"BigInteger bigInt3 = new BigInteger(""10806548154093873461951748545"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,680,"+ ""1196989136416448805819079363524309897749044958112417136240557"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,681,"+ ""4495062430572478766856090958495998158114332651671116876320938126"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,687,"tring encodedInt4 = ""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,688,"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,689,"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,690,"Q0="";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,691,"igInteger bigInt4 = new BigInteger(""80624726256040348115552042320"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,692,"6968135001872753709424419772586693950232350200555646471175944"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,693,"519297087885987040810778908507262272892702303774422853675597"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,694,"748008534040890923814202286633163248086055216976551456088015"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,695,"338880713818192088877057717530169381044092839402438015097654"" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,696,"53542091716518238707344493641683483917"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,688,"String encodedInt4 = ""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,689,"+ ""4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,690,"+ ""DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,691,"+ ""Q0="";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,692,"BigInteger bigInt4 = new BigInteger(""80624726256040348115552042320"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,693,"+ ""6968135001872753709424419772586693950232350200555646471175944"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,694,"+ ""519297087885987040810778908507262272892702303774422853675597"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,695,"+ ""748008534040890923814202286633163248086055216976551456088015"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,696,"+ ""338880713818192088877057717530169381044092839402438015097654"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,697,"+ ""53542091716518238707344493641683483917"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,706, catch(NullPointerException npe) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,707,} catch (NullPointerException npe) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,708, catch(Exception e) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,709,} catch (Exception e) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,717,ublic void testConstructors(){
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,718,public void testConstructors() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,721,"ase64 = new Base64(-1,new byte[]{});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,722,"ase64 = new Base64(64,new byte[]{});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,722,"base64 = new Base64(-1, new byte[]{});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,723,"base64 = new Base64(64, new byte[]{});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,724,"ase64 = new Base64(-1,new byte[]{'A'});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,725,"base64 = new Base64(-1, new byte[]{'A'});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,730,"ase64 = new Base64(64,new byte[]{'A'});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,731,"base64 = new Base64(64, new byte[]{'A'});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,733,/ Expected
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,734,// Expected
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,736,"ase64 = new Base64(64,new byte[]{'='});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,737,"base64 = new Base64(64, new byte[]{'='});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,741,"ase64 = new Base64(64,new byte[]{'$'}); // OK"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,742,"base64 = new Base64(64, new byte[]{'$'}); // OK"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,743,"ase64 = new Base64(64,new byte[]{'A','$'});"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,744,"base64 = new Base64(64, new byte[]{'A', '$'});"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,748,"ase64 = new Base64(64,new byte[]{' ','$','\n','\r','\t'}); // OK"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,749,"base64 = new Base64(64, new byte[]{' ', '$', '\n', '\r', '\t'}); // OK"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,752," Base64 encoding of UUID's is a common use-case, especially in URL-SAFE"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,753," mode.  This test case ends up being the ""URL-SAFE"" JUnit's."
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,755, @throws DecoderException if Hex.decode() fails - a serious problem since
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,756, Hex comes from our own commons-codec!
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,758," @throws UnsupportedEncodingException if ""UTF-8"" character set is not"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,759, available.  Unlikely.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,753,"* Base64 encoding of UUID's is a common use-case, especially in URL-SAFE mode. This test case ends up being the"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,754,"* ""URL-SAFE"" JUnit's."
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,756,* @throws DecoderException
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,757,*             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,758,* @throws UnsupportedEncodingException
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,759,"*             Thrown if ""UTF-8"" character set is not available, not possible according to Java documentation."
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,761,"ublic void testUUID() throws DecoderException, UnsupportedEncodingException {"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,761,public void testUUID() throws DecoderException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,780,"tandard[0] = ""lO2NAxnkSTOZVg+2dATTcA=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,781,"tandard[1] = ""K/fMJwH+Q5e0nr7tWsxwkA=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,782,"tandard[2] = ""ZL4VS2/6QCWNGgEojnwxyg=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,783,"tandard[3] = ""/3+PwBzbRxqMi1qTBhg/6A=="".getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,780,"standard[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,781,"standard[1] = StringBytesUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,782,"standard[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,783,"standard[3] = StringBytesUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,787,"rlSafe1[0] = ""lO2NAxnkSTOZVg-2dATTcA=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,788,"rlSafe1[1] = ""K_fMJwH-Q5e0nr7tWsxwkA=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,789,"rlSafe1[2] = ""ZL4VS2_6QCWNGgEojnwxyg=="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,790,"rlSafe1[3] = ""_3-PwBzbRxqMi1qTBhg_6A=="".getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,787,"urlSafe1[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,788,"urlSafe1[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,789,"urlSafe1[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,790,"urlSafe1[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,794,"rlSafe2[0] = ""lO2NAxnkSTOZVg-2dATTcA="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,795,"rlSafe2[1] = ""K_fMJwH-Q5e0nr7tWsxwkA="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,796,"rlSafe2[2] = ""ZL4VS2_6QCWNGgEojnwxyg="".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,797,"rlSafe2[3] = ""_3-PwBzbRxqMi1qTBhg_6A="".getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,794,"urlSafe2[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,795,"urlSafe2[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,796,"urlSafe2[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,797,"urlSafe2[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,800,/ no padding (no '=' signs).
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,801,"rlSafe3[0] = ""lO2NAxnkSTOZVg-2dATTcA"".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,802,"rlSafe3[1] = ""K_fMJwH-Q5e0nr7tWsxwkA"".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,803,"rlSafe3[2] = ""ZL4VS2_6QCWNGgEojnwxyg"".getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,804,"rlSafe3[3] = ""_3-PwBzbRxqMi1qTBhg_6A"".getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,800,// no padding (no '=' signs).
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,801,"urlSafe3[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,802,"urlSafe3[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,803,"urlSafe3[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,804,"urlSafe3[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,811,yte[] decodedUrlSafe2 =Base64.decodeBase64(urlSafe2[i]);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,812,yte[] decodedUrlSafe3 =Base64.decodeBase64(urlSafe3[i]);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,811,byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,812,byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,818,"ystem.out.println(""standard:  ["" + new String(Hex.encodeHex(decodedStandard)) + ""] From: ["" + new String(standard[i], ""UTF-8"") + ""]"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,819,"ystem.out.println(""safe1:     ["" + new String(Hex.encodeHex(decodedUrlSafe1)) + ""] From: ["" + new String(urlSafe1[i], ""UTF-8"") + ""]"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,820,"ystem.out.println(""safe2:     ["" + new String(Hex.encodeHex(decodedUrlSafe2)) + ""] From: ["" + new String(urlSafe2[i], ""UTF-8"") + ""]"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,821,"ystem.out.println(""safe3:     ["" + new String(Hex.encodeHex(decodedUrlSafe3)) + ""] From: ["" + new String(urlSafe3[i], ""UTF-8"") + ""]"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,818,"System.out.println(""standard:  ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,819,+ new String(Hex.encodeHex(decodedStandard))
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,820,"+ ""] From: ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,821,+ StringBytesUtils.newStringUtf8(standard[i])
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,823,"System.out.println(""safe1:     ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,824,+ new String(Hex.encodeHex(decodedUrlSafe1))
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,825,"+ ""] From: ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,826,+ StringBytesUtils.newStringUtf8(urlSafe1[i])
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,828,"System.out.println(""safe2:     ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,829,+ new String(Hex.encodeHex(decodedUrlSafe2))
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,830,"+ ""] From: ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,831,+ StringBytesUtils.newStringUtf8(urlSafe2[i])
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,833,"System.out.println(""safe3:     ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,834,+ new String(Hex.encodeHex(decodedUrlSafe3))
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,835,"+ ""] From: ["""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,836,+ StringBytesUtils.newStringUtf8(urlSafe3[i])
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,846,"ssertFalse(""url-safe i="" + i + "" no '+'"", Base64TestData.bytesContain(encoded, (byte) '+'));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,862,"assertFalse(""url-safe i="" + i + "" no '+'"", Base64TestData.bytesContain(encoded, (byte) '+'));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,855,ase64 base64Standard = new Base64(false);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,871,Base64 base64Standard = new Base64(false);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,862,"ssertTrue(""Base64.isArrayByteBase64(whiteSpace)=true"", Base64.isArrayByteBase64(whiteSpace));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,878,"assertTrue(""Base64.isArrayByteBase64(whiteSpace)=true"", Base64.isArrayByteBase64(whiteSpace));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,875,esult = Base64.decodeBase64(empty);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,876,"ssertEquals(""empty base64 decode"", 0, result.length);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,891,result = Base64.decodeBase64(empty);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,892,"assertEquals(""empty base64 decode"", 0, result.length);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,884,or(int i=0;i<data.length;i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,900,for (int i = 0; i < data.length; i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,886,f(i != data.length-1) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,902,if (i != data.length - 1) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,908,"yte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,924,"byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,18,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,20,import java.io.UnsupportedEncodingException;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,21,import java.util.Arrays;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,23,import junit.framework.Assert;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,27,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,28,* @version $Id: $
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,30,public class StringBytesUtilsTest extends TestCase {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,32,private static byte[] BYTES_FIXTURE;
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,34,"private static final String STRING_FIXTURE = ""ABC"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,36,try {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,37,"BYTES_FIXTURE = ""abc"".getBytes(""US-ASCII"");"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,38,} catch (UnsupportedEncodingException e) {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,39,throw new IllegalArgumentException(e.toString());
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,43,public void testGetBytesIso8859_1() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,44,"String charsetName = ""ISO-8859-1"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,45,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,46,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,47,byte[] actual = StringBytesUtils.getBytesIso8859_1(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,48,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,51,public void testGetBytesUsAscii() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,52,"String charsetName = ""US-ASCII"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,53,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,54,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,55,byte[] actual = StringBytesUtils.getBytesUsAscii(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,56,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,59,public void testGetBytesUtf16() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,60,"String charsetName = ""UTF-16"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,61,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,62,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,63,byte[] actual = StringBytesUtils.getBytesUtf16(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,64,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,67,public void testGetBytesUtf16Be() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,68,"String charsetName = ""UTF-16BE"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,69,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,70,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,71,byte[] actual = StringBytesUtils.getBytesUtf16Be(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,72,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,75,public void testGetBytesUtf16Le() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,76,"String charsetName = ""UTF-16LE"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,77,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,78,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,79,byte[] actual = StringBytesUtils.getBytesUtf16Le(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,80,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,83,public void testGetBytesUtf8() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,84,"String charsetName = ""UTF-8"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,85,testGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,86,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,87,byte[] actual = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,88,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,91,private void testGetSupportedBytes(String charsetName) throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,92,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,93,"byte[] actual = StringBytesUtils.getSupportedBytes(STRING_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,94,"Assert.assertTrue(Arrays.equals(expected, actual));"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,97,public void testGetSupportedBytesBadEnc() {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,98,try {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,99,"StringBytesUtils.getSupportedBytes(STRING_FIXTURE, ""UNKNOWN"");"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,100,"Assert.fail(""Expected "" + IllegalStateException.class.getName());"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,101,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,102,// Expected
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,106,private void testNewString(String charsetName) throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,107,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,108,"String actual = StringBytesUtils.newString(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,109,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,112,public void testNewStringBadEnc() {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,113,try {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,114,"StringBytesUtils.newString(BYTES_FIXTURE, ""UNKNOWN"");"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,115,"Assert.fail(""Expected "" + IllegalStateException.class.getName());"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,116,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,117,// Expected
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,121,public void testNewStringIso8859_1() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,122,"String charsetName = ""ISO-8859-1"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,123,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,124,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,125,String actual = StringBytesUtils.newStringIso8859_1(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,126,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,129,public void testNewStringUsAscii() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,130,"String charsetName = ""US-ASCII"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,131,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,132,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,133,String actual = StringBytesUtils.newStringUsAscii(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,134,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,137,public void testNewStringUtf16() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,138,"String charsetName = ""UTF-16"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,139,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,140,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,141,String actual = StringBytesUtils.newStringUtf16(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,142,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,145,public void testNewStringUtf16Be() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,146,"String charsetName = ""UTF-16BE"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,147,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,148,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,149,String actual = StringBytesUtils.newStringUtf16Be(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,150,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,153,public void testNewStringUtf16Le() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,154,"String charsetName = ""UTF-16LE"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,155,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,156,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,157,String actual = StringBytesUtils.newStringUtf16Le(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,158,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,161,public void testNewStringUtf8() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,162,"String charsetName = ""UTF-8"";"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,163,testNewString(charsetName);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,164,"String expected = new String(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,165,String actual = StringBytesUtils.newStringUtf8(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,166,"Assert.assertEquals(expected, actual);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,24,import org.apache.commons.codec.RequiredCharsetNames;
False,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,64,"Codec bcodec = new BCodec(""UTF-8"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,65,BCodec bcodec = new BCodec(RequiredCharsetNames.UTF_8);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,25,import org.apache.commons.codec.RequiredCharsetNames;
False,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,68,"Codec qcodec = new QCodec(""UTF-8"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,69,QCodec qcodec = new QCodec(RequiredCharsetNames.UTF_8);
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,24,import org.apache.commons.codec.RequiredCharsetNames;
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,65,"pcodec.encode(ru_msg, ""UTF-8"")"
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,66,"qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8)"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,67,"ssertEquals(""Gr=C3=BCezi_z=C3=A4m=C3=A4"", qpcodec.encode(ch_msg, ""UTF-8""));"
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,68,"assertEquals(""Gr=C3=BCezi_z=C3=A4m=C3=A4"", qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8));"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,69,"ssertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, ""UTF-8""), ""UTF-8""));"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,70,"ssertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, ""UTF-8""), ""UTF-8""));"
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,70,"assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));"
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,71,"assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));"
True,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,23,import org.apache.commons.codec.RequiredCharsetNames;
False,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,55,"ssertNull(testcodec.encodeText(null, ""UTF-8""));"
True,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,src/test/org/apache/commons/codec/net/RFC1522CodecTest.java,56,"assertNull(testcodec.encodeText(null, RequiredCharsetNames.UTF_8));"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,26,import org.apache.commons.codec.RequiredCharsetNames;
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,72,"rlCodec.encode(ru_msg, ""UTF-8"")"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,73,"urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8)"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,74,"ssertEquals(""Gr%C3%BCezi_z%C3%A4m%C3%A4"", urlCodec.encode(ch_msg, ""UTF-8""));"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,75,"assertEquals(""Gr%C3%BCezi_z%C3%A4m%C3%A4"", urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8));"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,76,"ssertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, ""UTF-8""), ""UTF-8""));"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,77,"ssertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, ""UTF-8""), ""UTF-8""));"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,77,"assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,78,"assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));"

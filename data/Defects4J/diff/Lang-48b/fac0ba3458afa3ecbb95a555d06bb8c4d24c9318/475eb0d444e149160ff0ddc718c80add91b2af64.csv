is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,1,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,3,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,4,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,6,mport org.apache.commons.lang.StringUtils;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,9, Might be replaced by VariableFormatter?
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,11, <p>Performs basic variable interpolation on a String for variables within a Map.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,12," Variables of the form, ${var}, are supported.</p>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,14, @author Ken Fitzpatrick
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,15, @author Henri Yandell
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,16, @since 2.2
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,17, @version $Id$
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,19,ublic class Interpolation {
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,21,** The marker used to start a variable. */
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,22,"rivate static final String SYMBOLIC_VALUE_MARKER_START = ""${"";"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,23,** The marker used to end a variable. */
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,24,"rivate static final String SYMBOLIC_VALUE_MARKER_END = ""}"";"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,27, <p><code>Interpolation</code> instances should NOT be constructed in
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,28, standard programming.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,30, <p>This constructor is public to permit tools that require a JavaBean
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,31, instance to operate.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,33,ublic Interpolation() {
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,34,/ no init.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,38, <p>Interpolates a String to replace variables of the form <code>${variable}</code>.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,40, <p>This method is useful for enabling simple strings to be modified based
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,41, on a map of data. A typical use case might be to add data from configuration
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,42," to an error message. This method, and this class, does not seek to replace"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,43," full interpolation mechanisms, for example Velocity.</p>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,45, <p>The expected format of <code>templateString</code> is:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,46, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,47,   The ${animal} jumped over the ${target}.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,48, </pre></code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,49, such that the key/value pairs found in <code>values</code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,50, are substituted into the string at the <code>${key-name}</code> markers.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,51," In the above example, <code>valuesMap</code> could have been populated as:"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,52, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,53,   Map valuesMap = HashMap();
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,54,"   valuesMap.put( ""animal"", ""quick brown fox"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,55,"   valuesMap.put( ""target"", ""lazy dog"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,56,"   String resolvedString = StringUtils.interpolate( templateString, valuesMap );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,57, </pre></code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,58, yielding:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,59, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,60,   The quick brown fox jumped over the lazy dog.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,61, </pre></code></p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,63, <p>The same <code>templateString</code> from the above example could be reused as:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,64, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,65,   Map valuesMap = HashMap();
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,66,"   valuesMap.put( ""animal"", ""cow"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,67,"   valuesMap.put( ""target"", ""moon"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,68,"   String resolvedString = StringUtils.interpolate( templateString, valuesMap );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,69, </pre></code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,70, yielding:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,71, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,72,   The cow jumped over the moon.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,73, </pre></code></p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,75, <p>The value of <code>templateString</code> is returned in an unaltered
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,76," if <code>templateString</code> is null, empty, or contains no marked variables"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,77," that can be resolved by the key/value pairs found in <code>valuesMap</code>,"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,78," or if <code>valuesMap</code> is null, empty or has no key/value pairs that can be"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,79, applied to the marked variables within <code>templateString</code>.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,81," <p>If a <code>valuesMap</code> value is null, it will be treated as """".</p>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,83, @param templateString  String containing any mixture of variable and non-variable
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,84,"      content, to be used as a template for the value substitution process"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,85, @param valuesMap  Map containing the key/value pairs to be used to resolve
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,86,      the values of the marked variables found within <code>templateString</code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,87, @return the interpolated String
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,89,"ublic static String interpolate(String templateString, Map valuesMap) {"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,90,/ pre-conditions
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,91,f (templateString == null || valuesMap == null ||
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,92,emplateString.length() == 0 || valuesMap.isEmpty()) {
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,93,eturn templateString;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,96,/ default the returned String to the templateString
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,97,tring returnString = templateString;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,98,tring nextKey = null;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,99,tring substitutionValue = null;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,100,tring nextValueToBeSubstituted = null;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,102,/ get a list of substitution valuesMap
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,103,terator keys = valuesMap.keySet().iterator();
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,104,hile (keys.hasNext()) {
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,105,extKey = (String) keys.next();
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,106,ubstitutionValue = StringUtils.defaultString((String) valuesMap.get(nextKey));
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,107,extValueToBeSubstituted = SYMBOLIC_VALUE_MARKER_START + nextKey + SYMBOLIC_VALUE_MARKER_END;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,109,"eturnString = StringUtils.replace(returnString, nextValueToBeSubstituted, substitutionValue);"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,111,eturn returnString;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,115, <p>Interpolates a String to replace variables of the form <code>${variable}</code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,116, where the replace strings may also contain variables to interpolate.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,118, <p>This method is useful for enabling simple strings to be modified based
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,119, on a map of data. A typical use case might be to add data from configuration
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,120," to an error message. This method, and this class, does not seek to replace"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,121," full interpolation mechanisms, for example Velocity.</p>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,123," <p>This method calls {@link #interpolate(String, Map)} repeatedly until the"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,124, returned string does not change. This has the effect of allowing the replace
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,125, strings in <code>valuesMap</code> to contain variables that should also be
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,126, interpolated.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,128, <p>The expected format of <code>templateString</code> is:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,129, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,130,   The ${animal} jumped over the ${target}.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,131, </pre></code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,132, such that the key/value pairs found in <code>values</code> are substituted into the string at the
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,133," <code>${key-name}</code> markers.  In the above example, <code>valuesMap</code>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,134, could have been populated as:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,135, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,136,   Map valuesMap = HashMap();
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,137,"   valuesMap.put( ""animal"", ""${critter}"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,138,"   valuesMap.put( ""target"", ""${pet}"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,139,"   valuesMap.put( ""pet"", ""${petCharacteristic} dog"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,140,"   valuesMap.put( ""petCharacteristic"", ""lazy"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,141,"   valuesMap.put( ""critter"", ""${critterSpeed} ${critterColor} ${critterType}"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,142,"   valuesMap.put( ""critterSpeed"", ""quick"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,143,"   valuesMap.put( ""critterColor"", ""brown"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,144,"   valuesMap.put( ""critterType"", ""fox"" );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,145,"   String resolvedString = StringUtils.interpolate( templateString, valuesMap, true );"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,146, </pre></code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,147, yielding:
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,148, <code><pre>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,149,   The quick brown fox jumped over the lazy dog.
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,150, </pre></code></p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,152, <p>The value of <code>templateString</code> is returned in an unaltered
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,153," if <code>templateString</code> is null, empty, or contains no marked variables"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,154," that can be resolved by the key/value pairs found in <code>valuesMap</code>,"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,155," or if <code>valuesMap</code> is null, empty or has no key/value pairs that can be"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,156, applied to the marked variables within <code>templateString</code>.</p>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,158," <p>If a <code>valuesMap</code> value is null, it will be treated as """".</p>"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,160, @param templateString  String containing any mixture of variable and non-variable
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,161,"      content, to be used as a template for the value substitution process"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,162, @param valuesMap  Map containing the key/value pairs to be used to resolve
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,163,      the values of the marked variables found within <code>templateString</code>
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,164, @return the interpolated String
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,166,"ublic static String interpolateRepeatedly(String templateString, Map valuesMap) {"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,167,/ pre-conditions
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,168,f (templateString == null || valuesMap == null ||
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,169,emplateString.length() == 0 || valuesMap.isEmpty()) {
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,170,eturn templateString;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,173,tring currentResult = templateString;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,174,tring previousResult = null;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,175,"hile (!StringUtils.equals(currentResult, previousResult)) {"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,176,reviousResult = currentResult;
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,177,"urrentResult = Interpolation.interpolate(previousResult, valuesMap);"
False,src/java/org/apache/commons/lang/text/Interpolation.java,src/java/org/apache/commons/lang/text/Interpolation.java,180,eturn currentResult;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,2, Copyright 2002-2005 The Apache Software Foundation.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,14, limitations under the License.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,16,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,18,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,22, Might be replaced by VariableFormatter?
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,24, Substitutes values from one or more maps into designated places within a string.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,25, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,26, For example:
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,27, </p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,28, <pre>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,29,"   ""User ${id} has uid ${uid} and path of env{path}"""
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,30, </pre>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,31," can be expanded using values from a map associated with ""$"" and a different"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,32," map associated with ""env""."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,33, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,34," This class is similar to the {@link java.text.MessageFormat} class, but allows"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,35, data to be retrieved from one or maps instead of from a single list.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,36," Unlike the MessageFormat class, however, it simply uses the result of"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,37, applying toString() to the referenced values in the map(s) and does not
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,38," support any ""format"" operations applied to the objects before substitution"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,39, into the target string.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,40, </p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,41, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,42, Originally org.apache.commons.digester.substitution.MultiVariableExpander.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,43, </p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,45, @since 2.2
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,46, @version $Id$
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,48,ublic class MappedMessageFormat {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,50,rivate int nEntries = 0;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,51,rivate ArrayList markers = new ArrayList(2);
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,52,rivate ArrayList sources = new ArrayList(2);
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,55, Constructs a new instance.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,57,ublic MappedMessageFormat() {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,58,/ no initialization.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,62, Defines a source of data that can later be substituted into
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,63," strings passed to the ""format"" methods."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,65," @param marker the marker prefix for the syntax ""marker{key}"", commonly the String <code>""$""</code>."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,66, @param source A Map where the keys are Strings and the values are non-<code>null</code> Objects.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,68,"ublic void addSource(String marker, Map source) {"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,69,Entries++;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,70,arkers.add(marker);
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,71,ources.add(source);
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,75, Expands any variable declarations using any of the known
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,76, variable marker strings.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,78, @param param The String to expand.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,79, @return The expanded String
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,81, @throws IllegalArgumentException if the input param references
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,82, a variable which is not known to the specified source.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,84,ublic String format(String param) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,85,or(int i=0; i<nEntries; i++) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,86,"aram = format(param, (String) markers.get(i), (Map) sources.get(i));"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,88,eturn param;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,92, Replace any occurrences within the string of the form
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,93," ""marker{key}"" with the value from source[key]."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,94, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,95," Commonly, the variable marker is <code>""$""</code>, in which case variables"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,96, are indicated by <code>${key}</code> in the string.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,97, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,98, Returns the string after performing all substitutions.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,99, <p>
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,100," If no substitutions were made, the input string object is"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,101, returned (not a copy).
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,103, @param str The String to expand.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,104," @param marker The variable marker, commonly, <code>""$""</code>, in which case variables"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,105, are indicated by <code>${key}</code> in the string.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,106, @param source A Map where the keys are Strings and the values are non-<code>null</code> Objects.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,107," @return The expanded String or, if no substitutions were made, the input String object (not a copy)."
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,108, @throws IllegalArgumentException if the input param references
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,109, a variable which is not known to the specified source.
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,111,"ublic static String format(String str, String marker, Map source) {"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,112,"tring startMark = marker + ""{"";"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,113,nt markLen = startMark.length();
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,115,nt index = 0;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,116,hile(true) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,117,"ndex = str.indexOf(startMark, index);"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,118,f (index == -1) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,119,eturn str;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,122,nt startIndex = index + markLen;
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,123,f (startIndex > str.length()) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,124,"hrow new IllegalArgumentException(""var expression starts at end of string"");"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,127,"nt endIndex = str.indexOf(""}"", index + markLen);"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,128,f (endIndex == -1) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,129,"hrow new IllegalArgumentException(""var expression starts but does not end"");"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,132,"tring key = str.substring(index+markLen, endIndex);"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,133,bject value =  source.get(key);
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,134,f (value == null) {
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,135,"hrow new IllegalArgumentException(""parameter ["" + key + ""] is not defined."");"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,137,tring varValue = value.toString();
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,139,"tr = str.substring(0, index) + varValue + str.substring(endIndex+1);"
False,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,140,ndex += varValue.length();

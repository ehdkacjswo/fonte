is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,74,rivate PhonemeBuilder(Rule.Phoneme phoneme) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,74,private PhonemeBuilder(final Rule.Phoneme phoneme) {
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,79,rivate PhonemeBuilder(Set<Rule.Phoneme> phonemes) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,79,private PhonemeBuilder(final Set<Rule.Phoneme> phonemes) {
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,205,"ist<Rule> rules = this.finalRules.get(input.subSequence(i, i+patternLength));"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,205,"final List<Rule> rules = this.finalRules.get(input.subSequence(i, i+patternLength));"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,207,or (Rule rule : rules) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,207,for (final Rule rule : rules) {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,399,"tring patternKey = r.pattern.substring(0,1);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,399,"final String patternKey = r.pattern.substring(0,1);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,117,yte[] result = Base64.decodeBase64(content);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,118,"yte[] shouldBe = StringUtils.getBytesUtf8(""Hello World"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,117,final byte[] result = Base64.decodeBase64(content);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,118,"final byte[] shouldBe = StringUtils.getBytesUtf8(""Hello World"");"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java,102,"honeticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java,102,"final PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);"

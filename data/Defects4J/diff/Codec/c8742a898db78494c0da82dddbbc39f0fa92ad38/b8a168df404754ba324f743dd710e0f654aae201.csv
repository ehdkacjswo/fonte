is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,15, limitations under the License.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,18, NOTE ABOUT PROVENANCE:
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,20, This source file is called ApacheModifiedMiGBase64.java.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,21, We took the BSD-licensed MiGBase64.java file from SourceForge
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,22," on January 28th, 2013 (http://migbase64.sourceforge.net/), and"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,23, modified it to make it suitable for inclusion inside Apache
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,24, Commons-Codec.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,26, The original file is licensed according to the BSD 2-clause
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,27," license (see below, after the section titled ""Licence (BSD)""."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,28, You should also be able to obtain the original file as
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,29," ""MiGBase64.original"" within the same source directory as this file."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,33,ackage org.apache.commons.codec.binary;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,35,mport java.util.Arrays;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,38, <pre>====================================================</pre>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,39," Modified by Apache Software Foundation on February 18th, 2013, in the following ways:"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,40, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,41," - Set all methods to ""package"" level visibility, since this is strictly"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,42, meant to be back-end for our non-streaming Base64 implementation.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,43, (Streaming Base64 still uses our original implementation).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,44, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,45, - Added support for the Apache Commons Codec variations to make all the Commons-Codec
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,46, unit tests pass:
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,47, <ol>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,48, <li> Ability to alter line-length from default of 76</li>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,49," <li> If we are using line-separators, must always end with a line-separator, no matter"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,50, length of final line.</li>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,51, <li> Make '=' and '==' padding optional when decoding.</li>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,52," <li> Make decoding of Base64 with inner padding (e.g., AA==AA==) consistent with Commons-Codec..</li>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,53," <li> Add support for URL-Safe Base64 alphabet (which, incidentally, omits '=' and '==' padding).</li>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,54, </ol>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,55, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,56," - And thus Apache Commons-Codec is now as fast as MiGBase64, since it uses MiGBase64 under the"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,57, hood.  Yay!  (Non-streaming encode speed-up is around 200%).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,58, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,59," And now, back to your regular scheduled programming:"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,60, <pre>====================================================</pre>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,61, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,62, A very fast and memory efficient class to encode and decode to and from BASE64 in full accordance
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,63, with RFC 2045.<br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,64," On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is about 10 times faster"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,65, on small arrays (10 - 1000 bytes) and 2-3 times as fast on larger arrays (10000 - 1000000 bytes)
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,66, compared to <code>sun.misc.Encoder()/Decoder()</code>.<br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,67, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,68, On byte arrays the encoder is about 20% faster than Jakarta Commons Codec for encode and
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,69, about 50% faster for decoding large arrays. This implementation is about twice as fast on very small
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,70, arrays (&lt 30 bytes). If source/destination is a <code>String</code> this
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,71, version is about three times as fast due to the fact that the Commons Codec result has to be recoded
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,72," to a <code>String</code> from <code>byte[]</code>, which is very expensive.<br><br>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,73, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,74," This encode/decode algorithm doesn't create any temporary arrays as many other codecs do, it only"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,75, allocates the resulting array. This produces less garbage and it is possible to handle arrays twice
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,76, as large as algorithms that create a temporary array. (E.g. Jakarta Commons Codec). It is unknown
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,77, whether Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but since performance
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,78, is quite low it probably does.<br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,79, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,80, The encoder produces the same output as the Sun one except that the Sun's encoder appends
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,81, a trailing line separator if the last character isn't a pad. Unclear why but it only adds to the
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,82, length and is probably a side effect. Both are in conformance with RFC 2045 though.<br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,83, Commons codec seem to always att a trailing line separator.<br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,84, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,85, <b>Note!</b>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,86, The encode/decode method pairs (types) come in three versions with the <b>exact</b> same algorithm and
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,87, thus a lot of code redundancy. This is to not create any temporary arrays for transcoding to/from different
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,88, format types. The methods not used can simply be commented out.<br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,89, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,90," <S>There is also a ""fast"" version of all decode methods that works the same way as the normal ones, but"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,91," har a few demands on the decoded input. Normally though, these fast verions should be used if the source if"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,92, the input is known and it hasn't bee tampered with.</S> (- removed for ApacheModifiedMiGBase64). <br><br>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,93, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,94," If you find the code useful or you find a bug, please send me a note at base64 @ miginfocom . com."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,95, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,96, Licence (BSD):
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,98, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,99," Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,100, All rights reserved.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,101, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,102," Redistribution and use in source and binary forms, with or without modification,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,103, are permitted provided that the following conditions are met:
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,104," Redistributions of source code must retain the above copyright notice, this list"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,105, of conditions and the following disclaimer.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,106," Redistributions in binary form must reproduce the above copyright notice, this"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,107, list of conditions and the following disclaimer in the documentation and/or other
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,108, materials provided with the distribution.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,109, Neither the name of the MiG InfoCom AB nor the names of its contributors may be
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,110, used to endorse or promote products derived from this software without specific
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,111, prior written permission.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,112, <p/>
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,113," THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,114," ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,115, WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,116," IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,117," INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,118," BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,119," OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,120," WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,121," ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,122, OF SUCH DAMAGE.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,124, @author Mikael Grev
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,125,         Date: 2004-aug-02
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,126,         Time: 11:31:11
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,127, @version 2.2
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,130,ublic final class ApacheModifiedMiGBase64 {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,131,"/ Marked the class public so that it shows up in javadoc generation.  All methods are static ""package"" level."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,133,"rivate final static byte[] CRLF = {'\r', '\n'};"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,135,rivate static final char[] CA =
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,136,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".toCharArray();"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,138,rivate static final char[] CA_URL_SAFE =
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,139,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"".toCharArray();"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,141,rivate static final int[] IA = new int[256];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,144, Private constructor to prevent instantiation.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,146,rivate ApacheModifiedMiGBase64() {}
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,148,tatic {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,149,"rrays.fill(IA, -1);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,150,"or (int i = 0, iS = CA.length; i < iS; i++) {"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,151,A[CA[i]] = i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,153,/ Store the URL_SAFE values in the same IA array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,154,"/ This way we can auto-decode URL-SAFE or standard alphabet, without"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,155,/ consumer needing to specify decode alphabet ahead of time:
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,156,A[CA_URL_SAFE[i]] = i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,158,A['='] = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,162, Decodes a BASE64 encoded char array. All illegal characters will be ignored and can handle both arrays with
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,163, and without line separators.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,165, @param sArr The source array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,166, @return The decoded array of bytes. May be of length 0.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,168,tatic byte[] decode(final char[] sArr) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,169,inal int sLen = sArr != null ? sArr.length : 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,170,f (sLen == 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,171,eturn new byte[0];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,174,"/ Find earliest pad character so that we can decode things like ""AA==AA=="" consistently."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,175,nt padPos = sLen;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,176,nt padCount = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,177,or (int i = sLen - 1; i >= 0; i--) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,178,f (sArr[i] == '=') {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,179,adPos = i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,180,adCount = 1;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,181,f (i + 1 < sLen && sArr[i + 1] == '=') {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,182,adCount = 2;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,187,"/ Count illegal characters (including '\r', '\n') to know what size the returned array will be,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,188,/ so we don't have to reallocate & copy it later.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,189,"nt sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,190,or (int i = 0; i < padPos; i++) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,191,f (IA[sArr[i]] < 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,192,epCnt++;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,196,inal int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,197,f (len <= 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,198,eturn new byte[0];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,200,inal byte[] dArr = new byte[len];       // Preallocate byte[] of exact length
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,201,nt d = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,202,nt i = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,203,ry {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,204,or (int s = 0; d < len; ) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,205,"/ Assemble three bytes into an int from four ""valid"" characters."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,206, = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,207,or (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,208,nt c = IA[sArr[s++]];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,209,f (c >= 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,210, |= c << (18 - j * 6);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,211, else {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,212,--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,215,/ Add the bytes
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,216,Arr[d++] = (byte) (i >> 16);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,217,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,218,Arr[d++] = (byte) (i >> 8);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,219,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,220,Arr[d++] = (byte) i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,224, catch (ArrayIndexOutOfBoundsException aioobe) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,225,/ Handle url-safe input (with no padding).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,226,Arr[d++] = (byte) (i >> 16);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,227,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,228,Arr[d++] = (byte) (i >> 8);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,229,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,230,Arr[d] = (byte) i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,234,eturn dArr;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,238, Decodes a BASE64 encoded byte array. All illegal characters will be ignored and can handle both arrays with
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,239, and without line separators.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,241, @param sArr The source array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,242, @return The decoded array of bytes. May be of length 0.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,244,tatic byte[] decode(final byte[] sArr) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,245,inal int sLen = sArr != null ? sArr.length : 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,246,f (sLen == 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,247,eturn new byte[0];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,250,"/ Find earliest pad character so that we can decode things like ""AA==AA=="" consistently."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,251,nt padPos = sLen;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,252,nt padCount = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,253,or (int i = sLen - 1; i >= 0; i--) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,254,f (sArr[i] == '=') {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,255,adPos = i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,256,adCount = 1;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,257,f (i + 1 < sLen && sArr[i + 1] == '=') {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,258,adCount = 2;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,263,"/ Count illegal characters (including '\r', '\n') to know what size the returned array will be,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,264,/ so we don't have to reallocate & copy it later.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,265,"nt sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,266,or (int i = 0; i < padPos; i++) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,267,f (IA[sArr[i] & 0xff] < 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,268,epCnt++;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,272,inal int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,273,f (len <= 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,274,eturn new byte[0];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,276,inal byte[] dArr = new byte[len];       // Preallocate byte[] of exact length
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,277,nt d = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,278,nt i = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,279,ry {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,280,or (int s = 0; d < len; ) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,281,"/ Assemble three bytes into an int from four ""valid"" characters."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,282, = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,283,or (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,284,nt c = IA[sArr[s++] & 0xff];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,285,f (c >= 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,286, |= c << (18 - j * 6);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,287, else {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,288,--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,292,/ Add the bytes
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,293,Arr[d++] = (byte) (i >> 16);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,294,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,295,Arr[d++] = (byte) (i >> 8);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,296,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,297,Arr[d++] = (byte) i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,301, catch (ArrayIndexOutOfBoundsException aioobe) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,302,/ Handle url-safe input (with no padding).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,303,Arr[d++] = (byte) (i >> 16);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,304,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,305,Arr[d++] = (byte) (i >> 8);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,306,f (d < len) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,307,Arr[d] = (byte) i;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,311,eturn dArr;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,315, Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,317, @param sArr          The bytes to convert.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,318," @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,319,                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,320,                      little faster.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,321," @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,322, @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,323, @return A BASE64 encoded array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,325,"tatic byte[] encodeToByte(byte[] sArr, final boolean lineSep, boolean urlSafe, int maxResultSize) {"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,326,"eturn encodeToByte(sArr, lineSep, urlSafe, maxResultSize, CRLF, 76);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,330, Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,332, @param sArr          The bytes to convert.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,333," @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,334,                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,335,                      little faster.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,336," @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,337, @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,338," @param lineSeparator Sequence of bytes to use as the line separator (typically {'\r','\n'}).  Ignored"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,339,                      if <code>lineSep</code> is set to false.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,340, @param lineLen       Number of characters to write out per line before writing the lineSeparator
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,341,                      sequence.  Ignored if <code>lineSep</code> is set to false.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,342, @return A BASE64 encoded array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,344,tatic byte[] encodeToByte(
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,345,"inal byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize,"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,346,"inal byte[] lineSeparator, final int lineLen"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,348,f (sArr == null || sArr.length == 0) { return sArr; }
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,350,inal int sLen = sArr.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,351,inal int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,352,inal int left = sLen - eLen;                           // A value between 0 and 2.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,353,inal int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,354,nt dLen = cCnt + (lineSep ? (cCnt - 1) / lineLen * lineSeparator.length : 0); // Length of returned array
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,356,/ org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,357,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,358,Len += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,361,inal char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,362,f (urlSafe && left > 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,363,Len--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,364,f (left != 2) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,365,Len--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,368,"heckLen(dLen, maxResultSize);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,369,inal byte[] dArr = new byte[dLen];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,371,/ Encode even 24-bits
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,372,nt charCount = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,373,"or (int s = 0, d = 0; s < eLen; ) {"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,374,"/ Copy next three bytes into lower 24 bits of int, paying attension to sign."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,375,nt i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,377,/ Encode the int into four chars
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,378,Arr[d++] = (byte) ENCODE_ARRAY[(i >>> 18) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,379,Arr[d++] = (byte) ENCODE_ARRAY[(i >>> 12) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,380,Arr[d++] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,381,Arr[d++] = (byte) ENCODE_ARRAY[i & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,382,harCount += 4;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,384,/ Add optional line separator
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,385,f (lineSep && charCount % lineLen <= 3 && d < dLen - lineSeparator.length) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,386,"ystem.arraycopy(lineSeparator, 0, dArr, d, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,387, += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,391,/ Make space for our final CRLF.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,392,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,393,Len -= lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,396,/ Pad and encode last bits if source isn't an even 24 bits.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,397,f (left > 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,398,/ Prepare the int
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,399,nt i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,401,/ Set last four chars
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,402,/ (url-safe omits the '=' padding).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,403,f (urlSafe && left == 2) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,404,Arr[dLen - 3] = (byte) ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,405,Arr[dLen - 2] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,406,Arr[dLen - 1] = (byte) ENCODE_ARRAY[i & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,407, else if (urlSafe) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,408,Arr[dLen - 2] = (byte) ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,409,Arr[dLen - 1] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,410, else {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,411,Arr[dLen - 4] = (byte) ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,412,Arr[dLen - 3] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,413,Arr[dLen - 2] = (byte) (left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=');
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,414,Arr[dLen - 1] = '=';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,418,/ And now we append our final CRLF if necessary.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,419,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,420,Len += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,421,"ystem.arraycopy(lineSeparator, 0, dArr, dLen - lineSeparator.length, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,423,eturn dArr;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,427, Encodes a raw byte array into a BASE64 <code>char[]</code> representation in accordance with RFC 2045.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,429, @param sArr          The bytes to convert.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,430," @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,431,                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,432,                      little faster.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,433," @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,434, @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,435, @return A BASE64 encoded array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,437,tatic char[] encodeToChar(
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,438,"inal byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,440,f (sArr == null) { return null; }
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,441,f (sArr.length == 0) { return new char[0]; }
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,443,inal int sLen = sArr.length;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,444,inal int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,445,inal int left = sLen - eLen;                           // A value between 0 and 2.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,446,inal int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,447,nt dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,449,/ org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,450,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,451,Len += 2;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,454,inal char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,455,f (urlSafe && left > 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,456,Len--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,457,f (left != 2) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,458,Len--;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,461,"heckLen(dLen, maxResultSize);"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,462,inal char[] dArr = new char[dLen];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,464,/ Encode even 24-bits
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,465,"or (int s = 0, d = 0, cc = 0; s < eLen; ) {"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,466,"/ Copy next three bytes into lower 24 bits of int, paying attension to sign."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,467,nt i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,469,/ Encode the int into four chars
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,470,Arr[d++] = ENCODE_ARRAY[(i >>> 18) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,471,Arr[d++] = ENCODE_ARRAY[(i >>> 12) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,472,Arr[d++] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,473,Arr[d++] = ENCODE_ARRAY[i & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,475,/ Add optional line separator
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,476,f (lineSep && ++cc == 19 && d < dLen - 2) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,477,Arr[d++] = '\r';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,478,Arr[d++] = '\n';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,479,c = 0;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,483,/ Make space for our final CRLF.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,484,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,485,Len -= 2;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,488,/ Pad and encode last bits if source isn't even 24 bits.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,489,f (left > 0) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,490,/ Prepare the int
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,491,nt i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,493,/ Set last four chars
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,494,/ (url-safe omits the '=' padding).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,495,f (urlSafe && left == 2) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,496,Arr[dLen - 3] = ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,497,Arr[dLen - 2] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,498,Arr[dLen - 1] = ENCODE_ARRAY[i & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,499, else if (urlSafe) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,500,Arr[dLen - 2] = ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,501,Arr[dLen - 1] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,502, else {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,503,Arr[dLen - 4] = ENCODE_ARRAY[i >> 12];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,504,Arr[dLen - 3] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,505,Arr[dLen - 2] = left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,506,Arr[dLen - 1] = '=';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,510,/ And now we append our final CRLF if necessary.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,511,f (lineSep) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,512,Len += 2;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,513,Arr[dLen - 2] = '\r';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,514,Arr[dLen - 1] = '\n';
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,516,eturn dArr;
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,520, Encodes a raw byte array into a BASE64 <code>String</code> representation i accordance with RFC 2045.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,522, @param sArr          The bytes to convert.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,523," @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,524,                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,525,                      little faster.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,526," @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,527, @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,528, @return A BASE64 encoded array.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,530,tatic String encodeToString(
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,531,"yte[] sArr, boolean lineSep, boolean urlSafe, int maxResultSize"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,533,f (sArr == null) { return null; }
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,534,"f (sArr.length == 0) { return """"; }"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,536,/ Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,537,"eturn new String(encodeToChar(sArr, lineSep, urlSafe, maxResultSize));"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,541,"rivate static void checkLen(int dLen, int maxResultSize) {"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,542,f (dLen > maxResultSize) {
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,543,"hrow new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,544,Len +
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,545,") than the specified maximum size of "" +"
False,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,546,axResultSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,483,Override
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,484,ublic byte[] decode(final byte[] pArray) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,485,f (pArray == null || pArray.length == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,486,eturn pArray;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,488,eturn ApacheModifiedMiGBase64.decode(pArray);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,491,Override
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,492,ublic byte[] encode(final byte[] pArray) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,493,f (pArray == null || pArray.length == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,494,eturn pArray;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,496,eturn ApacheModifiedMiGBase64.encodeToByte(
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,497,"Array, lineSeparator != null, isUrlSafe(), Integer.MAX_VALUE, lineSeparator, lineLength"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,585,eturn ApacheModifiedMiGBase64.encodeToString(
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,586,"inaryData, false, false, Integer.MAX_VALUE"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,566,"return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,613,eturn ApacheModifiedMiGBase64.encodeToString(
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,614,"inaryData, false, true, Integer.MAX_VALUE"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,592,"return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,682,eturn ApacheModifiedMiGBase64.encodeToByte(
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,683,"inaryData, isChunked, urlSafe, maxResultSize"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,659,if (binaryData == null || binaryData.length == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,660,return binaryData;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,663,// Create this so can use the super-class method
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,664,// Also ensures that the same roundings are performed by the ctor and the code
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,665,"final Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,666,final long len = b64.getEncodedLength(binaryData);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,667,if (len > maxResultSize) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,668,"throw new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,669,len +
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,670,""") than the specified maximum size of "" +"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,671,maxResultSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,674,return b64.encode(binaryData);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,697,f (base64String == null) { return null; }
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,698,"f ("""".equals(base64String)) { return new byte[0]; }"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,700,eturn ApacheModifiedMiGBase64.decode(base64String.toCharArray());
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,686,return new Base64().decode(base64String);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,711,f (base64Data == null || base64Data.length == 0) { return base64Data; }
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,713,eturn ApacheModifiedMiGBase64.decode(base64Data);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,697,return new Base64().decode(base64Data);

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,20,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,21,import org.apache.commons.codec.StringEncoder;
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,24,* <p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,25,* Encodes strings into their Beider-Morse phonetic encoding.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,26,* </p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,27,* <p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,28,"* Beider-Morse phonetic encodings are optimised for family names. However, they may be useful for a wide range of words."
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,29,* </p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,30,* <p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,31,"* This encoder is intentionally mutable to allow dynamic configuration through bean properties. As such, it is mutable, and may not be"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,32,* thread-safe. If you require a guaranteed thread-safe encoding then use {@link PhoneticEngine} directly.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,33,* </p>
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,35,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,36,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,38,public class BeiderMorseEncoder implements StringEncoder {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,39,// a cached object
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,40,"private PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,42,public Object encode(Object source) throws EncoderException {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,43,if (!(source instanceof String)) {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,44,"throw new EncoderException(""BeiderMorseEncoder encode parameter is not of type String"");"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,46,return encode((String) source);
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,49,public String encode(String source) throws EncoderException {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,50,if (source == null) {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,51,return null;
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,53,return this.engine.encode(source);
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,57,* Gets the name type currently in operation.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,59,* @return the NameType currently being used
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,61,public NameType getNameType() {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,62,return this.engine.getNameType();
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,66,* Gets the rule type currently in operation.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,68,* @return the RuleType currently being used
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,70,public RuleType getRuleType() {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,71,return this.engine.getRuleType();
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,75,* Discovers if multiple possible encodings are concatenated.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,77,"* @return true if multiple encodings are concatenated, false if just the first one is returned"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,79,public boolean isConcat() {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,80,return this.engine.isConcat();
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,84,* Sets how multiple possible phonetic encodings are combined.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,86,* @param concat
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,87,"*            true if multiple encodings are to be combined with a '|', false if just the first one is to be considered"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,89,public void setConcat(boolean concat) {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,90,"this.engine = new PhoneticEngine(this.engine.getNameType(), this.engine.getRuleType(), concat);"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,94,* Sets the type of name. Use {@link NameType#GENERIC} unless you specifically want phoentic encodings optimized for Ashkenazi or
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,95,* Sephardic Jewish family names.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,97,* @param nameType
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,98,*            the NameType in use
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,100,public void setNameType(NameType nameType) {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,101,"this.engine = new PhoneticEngine(nameType, this.engine.getRuleType(), this.engine.isConcat());"
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,105,* Sets the rule type to apply. This will widen or narrow the range of phonetic encodings considered.
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,107,* @param ruleType
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,108,*            {@link RuleType#APPROX} or {@link RuleType#EXACT} for approximate or exact phonetic matches
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,110,public void setRuleType(RuleType ruleType) {
True,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,111,"this.engine = new PhoneticEngine(this.engine.getNameType(), ruleType, this.engine.isConcat());"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,22,import java.util.Arrays;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,23,import java.util.Collections;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,24,import java.util.EnumMap;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,25,import java.util.HashSet;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,26,import java.util.List;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,27,import java.util.Map;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,28,import java.util.Scanner;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,29,import java.util.Set;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,30,import java.util.regex.Pattern;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,33,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,34,* Language guessing utility.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,35,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,36,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,37,* This class encapsulates rules used to guess the possible languages that a word originates from. This is done by reference to a whole
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,38,* series of rules distributed in resource files.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,39,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,40,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,41,* Instances of this class are typically managed through the static factory method instance(). Unless you are developing your own language
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,42,"* guessing rules, you will not need to interact with this class directly."
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,43,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,44,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,45,* This class is intended to be immutable and thread-safe.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,46,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,47,* <h2>Lang resources</h2
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,48,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,49,* Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically named
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,50,* following the pattern: <blockquote>org/apache/commons/codec/language/bm/lang.txt</blockquote> The format of these resources is the
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,51,* following:
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,52,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,53,* <ul>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,54,"* <li><b>Rules:</b> whitespace separated strings. There should be 3 columns to each row, and these will be interpreted as:"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,55,* <ol>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,56,* <li>pattern: a regular expression.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,57,* <li>languages: a '+'-separated list of languages.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,58,* <li>acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,59,* </ol>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,60,* </li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,61,* <li><b>End-of-line comments:</b> Any occurance of '//' will cause all text following on that line to be discarded as a comment.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,62,* <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip all content until a
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,63,* line ending in '*' and '/' is found.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,64,* <li><b>Blank lines:</b> All blank lines will be skipped.</li>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,65,* </ul>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,66,* <p/>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,67,* Port of lang.php
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,69,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,70,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,72,public class Lang {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,74,private static class LangRule {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,75,private boolean acceptOnMatch;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,76,private Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,77,private Pattern pattern;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,79,"private LangRule(Pattern pattern, Set<String> languages, boolean acceptOnMatch) {"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,80,this.pattern = pattern;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,81,this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,82,this.acceptOnMatch = acceptOnMatch;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,85,public boolean matches(String txt) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,86,return this.pattern.matcher(txt).find();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,90,"private static final Map<NameType, Lang> Langs = new EnumMap<NameType, Lang>(NameType.class);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,92,"private static final String LANGUAGE_RULES_RN = ""org/apache/commons/codec/language/bm/lang.txt"";"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,94,static {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,95,for (NameType s : NameType.values()) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,96,"Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.instance(s)));"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,101,* Gets a Lang instance for one of the supported NameTypes.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,103,* @param nameType
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,104,*            the NameType to look up
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,105,* @return a Lang encapsulating the language guessing rules for that name type
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,107,public static Lang instance(NameType nameType) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,108,return Langs.get(nameType);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,112,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,113,* Loads language rules from a resource.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,114,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,115,* <p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,116,"* In normal use, you will obtain instances of Lang through the {@link #instance(NameType)} method. You will only need to call this"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,117,* yourself if you are developing custom language mapping rules.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,118,* </p>
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,120,* @param languageRulesResourceName
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,121,*            the fully-qualified resource name to load
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,122,* @param languages
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,123,*            the languages that these rules will support
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,124,* @return a Lang encapsulating the loaded language-guessing rules.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,126,"public static Lang loadFromResource(String languageRulesResourceName, Languages languages) {"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,127,List<LangRule> rules = new ArrayList<LangRule>();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,128,InputStream lRulesIS = Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,130,if (lRulesIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,131,"throw new IllegalStateException(""Unable to resolve required resource:"" + LANGUAGE_RULES_RN);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,134,"Scanner scanner = new Scanner(lRulesIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,135,boolean inExtendedComment = false;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,136,while (scanner.hasNextLine()) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,137,String rawLine = scanner.nextLine();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,138,String line = rawLine;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,140,if (inExtendedComment) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,141,if (line.endsWith(ResourceConstants.EXT_CMT_END)) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,142,inExtendedComment = false;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,143,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,144,// discard doc comment line
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,146,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,147,if (line.startsWith(ResourceConstants.EXT_CMT_START)) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,148,inExtendedComment = true;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,149,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,150,// discard comments
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,151,int cmtI = line.indexOf(ResourceConstants.CMT);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,152,if (cmtI >= 0) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,153,"// System.err.println(""index of comment: "" + cmtI);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,154,"line = line.substring(0, cmtI);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,157,// trim leading-trailing whitespace
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,158,line = line.trim();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,160,if (line.length() == 0)
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,161,continue; // empty lines can be safely skipped
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,163,// split it up
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,164,"String[] parts = line.split(""\\s+"");"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,165,"// System.err.println(""part count: "" + parts.length);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,167,if (parts.length != 3) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,168,// fixme: we really need to log this somewhere
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,169,"System.err.println(""Warning: malformed line '"" + rawLine + ""'"");"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,170,continue;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,173,Pattern pattern = Pattern.compile(parts[0]);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,174,"String[] langs = parts[1].split(""\\+"");"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,175,"boolean accept = parts[2].equals(""true"");"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,177,"rules.add(new LangRule(pattern, new HashSet<String>(Arrays.asList(langs)), accept));"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,182,"return new Lang(rules, languages);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,185,private final Languages languages;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,186,private final List<LangRule> rules;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,188,"private Lang(List<LangRule> rules, Languages languages) {"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,189,this.rules = Collections.unmodifiableList(rules);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,190,this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,194,* Guesses the language of a word.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,196,* @param text
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,197,*            the word
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,198,* @return the language that the word originates from or {@link Languages#ANY} if there was no unique match
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,200,public String guessLanguage(String text) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,201,Set<String> ls = guessLanguages(text);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,202,if (ls.size() == 1) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,203,return ls.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,204,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,205,return Languages.ANY;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,210,* Guesses the languages of a word.
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,212,* @param text
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,213,*            the word
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,214,* @return a Set of Strings of language names that are potential matches for the word
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,216,public Set<String> guessLanguages(String text) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,217,text = text.toLowerCase(); // todo: locale?
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,218,"// System.out.println(""Testing text: '"" + text + ""'"");"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,220,Set<String> langs = new HashSet<String>(this.languages.getLanguages());
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,221,for (LangRule rule : this.rules) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,222,if (rule.matches(text)) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,223,"// System.out.println(""Rule "" + rule.pattern + "" matches "" + text);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,224,if (rule.acceptOnMatch) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,225,"// System.out.println(""Retaining "" + rule.languages);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,226,langs.retainAll(rule.languages);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,227,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,228,"// System.out.println(""Removing "" + rule.languages);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,229,langs.removeAll(rule.languages);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,231,"// System.out.println(""Current languages: "" + langs);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,232,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,233,"// System.out.println(""Rule "" + rule.pattern + "" does not match "" + text);"
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,237,return langs;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,21,import java.util.Collections;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,22,import java.util.EnumMap;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,23,import java.util.HashSet;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,24,import java.util.Map;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,25,import java.util.Scanner;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,26,import java.util.Set;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,29,* <p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,30,* Language codes.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,31,* </p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,32,* <p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,33,* Language codes are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically named following the
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,34,* pattern:
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,35,* </p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,36,* <blockquote>org/apache/commons/codec/language/bm/${{@link NameType#getName()} languages.txt</blockquote>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,37,* <p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,38,* The format of these resources is the following:
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,39,* </p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,40,* <ul>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,41,* <li><b>Language:</b> a single string containing no whitespace</li>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,42,* <li><b>End-of-line comments:</b> Any occurance of '//' will cause all text following on that line to be discarded as a comment.</li>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,43,* <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip all content until a
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,44,* line ending in '*' and '/' is found.</li>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,45,* <li><b>Blank lines:</b> All blank lines will be skipped.</li>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,46,* </ul>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,47,* <p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,48,* Ported from language.php
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,49,* </p>
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,51,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,52,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,54,public class Languages {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,56,"public static final String ANY = ""any"";"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,58,"private static final Map<NameType, Languages> LANGUAGES = new EnumMap<NameType, Languages>(NameType.class);"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,60,static {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,61,for (NameType s : NameType.values()) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,62,"LANGUAGES.put(s, instance(langResourceName(s)));"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,66,public static Languages instance(NameType nameType) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,67,return LANGUAGES.get(nameType);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,70,public static Languages instance(String languagesResourceName) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,71,// read languages list
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,72,Set<String> ls = new HashSet<String>();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,73,InputStream langIS = Languages.class.getClassLoader().getResourceAsStream(languagesResourceName);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,75,if (langIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,76,"throw new IllegalArgumentException(""Unable to resolve required resource: "" + languagesResourceName);"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,79,"Scanner lsScanner = new Scanner(langIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,80,boolean inExtendedComment = false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,81,while (lsScanner.hasNextLine()) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,82,String line = lsScanner.nextLine().trim();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,83,if (inExtendedComment) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,84,if (line.endsWith(ResourceConstants.EXT_CMT_END)) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,85,inExtendedComment = false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,86,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,87,// skip
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,89,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,90,if (line.startsWith(ResourceConstants.EXT_CMT_START)) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,91,inExtendedComment = true;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,92,} else if (line.length() > 0) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,93,ls.add(line);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,94,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,95,// skip blank lines
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,100,return new Languages(Collections.unmodifiableSet(ls));
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,103,private static String langResourceName(NameType nameType) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,104,"return String.format(""org/apache/commons/codec/language/bm/%s_languages.txt"", nameType.getName());"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,107,private final Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,109,private Languages(Set<String> languages) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,110,this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,113,public Set<String> getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,114,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,117,// // The original code mapped sets of languages to unique numerical codes - this doesn't seem to be needed in this impl
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,118,// public static Languages instance(String languagesResourceName)
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,120,// // read languages list
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,121,"// Map<String, Integer> ls = new HashMap<String, Integer>();"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,122,// InputStream langIS = Languages.class.getClassLoader().getResourceAsStream(languagesResourceName);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,124,// if(langIS == null)
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,125,"// throw new IllegalArgumentException(""Unable to resolve required resource: "" + languagesResourceName);"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,127,// Scanner lsScanner = new Scanner(langIS);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,128,// int i = 0;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,129,// while(lsScanner.hasNextLine()) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,130,// String line = lsScanner.nextLine();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,131,// i++;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,132,"// ls.put(line.trim(), i^2);"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,135,"// return new Languages(Collections.unmodifiableSet(ls.keySet()), Collections.unmodifiableMap(ls));"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,138,"// // todo: phoneticutils.php: LanguageIndex, LanguageName, LanguageCode, LanguageIndexFromCode"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,141,// private final Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,142,"// private final Map<String, Integer> language_codes;"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,144,"// private Languages(Set<String> languages, Map<String, Integer> language_codes) {"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,145,// this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,146,// this.language_codes = language_codes;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,149,// public Set<String> getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,150,// return languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,153,"// public Map<String, Integer> getLanguage_codes() {"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,154,// return language_codes;
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,21,"* Supported types of names. Unless you are matching particular family names, use {@link #GENERIC}."
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,23,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,24,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,26,public enum NameType {
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,27,/** Ashkenazi family names */
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,28,"ASHKENAZI(""ash""),"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,29,/** Generic names and words */
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,30,"GENERIC(""gen""),"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,31,/** Sephardic family names */
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,32,"SEPHARDIC(""sep"");"
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,34,private final String name;
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,36,NameType(String name) {
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,37,this.name = name;
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,41,* Gets the short version of the name type.
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,43,* @return the NameType short string
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,45,public String getName() {
True,src/java/org/apache/commons/codec/language/bm/NameType.java,src/java/org/apache/commons/codec/language/bm/NameType.java,46,return this.name;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,22,import java.util.Collections;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,23,import java.util.EnumMap;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,24,import java.util.HashSet;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,25,import java.util.Iterator;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,26,import java.util.List;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,27,import java.util.Locale;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,28,import java.util.Map;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,29,import java.util.Set;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,32,* <p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,33,* Conversion of words into potential phonetic representations.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,34,* </p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,35,* <p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,36,"* This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes into account the likely source"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,37,"* language. Next, this phonetic representation is converted into a pan-european 'average' representation, allowing comparison between"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,38,* different versions of essentially the same word from different languages.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,39,* </p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,40,* <p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,41,"* This class is intentionally immutable. If you wish to alter the settings for a PhoneticEngine, you must make a new one with the updated"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,42,* settings. This makes the class thread-safe.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,43,* </p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,44,* <p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,45,* Ported from phoneticengine.php
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,46,* </p>
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,48,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,49,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,51,public class PhoneticEngine {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,52,"private static final Map<NameType, Set<String>> namePfxs = new EnumMap<NameType, Set<String>>(NameType.class);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,54,static {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,55,"namePfxs.put(NameType.ASHKENAZI,"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,56,"Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""bar"", ""ben"", ""da"", ""de"", ""van"", ""von""))));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,57,"namePfxs.put(NameType.SEPHARDIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""al"", ""el"", ""da"", ""dal"", ""de"","
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,58,"""del"", ""dela"", ""de la"", ""della"", ""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,59,"namePfxs.put(NameType.GENERIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""da"", ""dal"", ""de"", ""del"", ""dela"","
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,60,"""de la"", ""della"", ""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,63,private final Lang lang;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,65,private final NameType nameType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,67,private final RuleType ruleType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,69,private final boolean concat;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,72,"* Generates a new, fully-configured phonetic engine."
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,74,* @param nameType
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,75,*            the type of names it will use
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,76,* @param ruleType
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,77,*            the type of rules it will apply
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,78,* @param concat
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,79,*            if it will concatenate multiple encodings
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,81,"public PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,82,if (ruleType == RuleType.RULES) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,83,"throw new IllegalArgumentException(""ruleType must not be "" + RuleType.RULES);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,85,this.nameType = nameType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,86,this.ruleType = ruleType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,87,this.concat = concat;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,88,this.lang = Lang.instance(nameType);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,92,* Gets the Lang language guessing rules being used.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,94,* @return the Lang in use
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,96,public Lang getLang() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,97,return this.lang;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,101,* Gets the NameType being used.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,103,* @return the NameType in use
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,105,public NameType getNameType() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,106,return this.nameType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,110,* Gets the RuleType being used.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,112,* @return the RuleType in use
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,114,public RuleType getRuleType() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,115,return this.ruleType;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,119,* Gets if multiple phonetic encodings are concatenated or if just the first one is kept.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,121,"* @return true if multiple phonetic encodings are returned, false if just the first is."
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,123,public boolean isConcat() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,124,return this.concat;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,128,* Encodes a string to its phonetic representation.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,130,* @param input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,131,*            the String to encode
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,132,* @return the encoding of the input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,134,public String encode(String input) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,135,Set<String> languageArg = this.lang.guessLanguages(input);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,136,"return phoneticUtf8(input, languageArg);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,140,"* Encodes an input string into an output phonetic representation, given a set of possible origin languages."
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,142,* @param input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,143,*            String to phoneticise; a String with dashes or spaces separating each word
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,144,* @param languageArg
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,145,* @return a phonetic representation of the input; a String containing '-'-separated phonetic representations of the input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,147,"public String phoneticUtf8(String input, final Set<String> languageArg) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,148,"List<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageArg);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,149,"List<Rule> finalRules1 = Rule.instance(this.nameType, this.ruleType, ""common"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,150,"List<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageArg);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,152,// tidy the input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,153,// lower case is a locale-dependent operation
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,154,"input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,156,if (this.nameType == NameType.GENERIC) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,157,for (String l : namePfxs.get(this.nameType)) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,158,// handle generic prefixes
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,159,"if (input.startsWith(l + "" "")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,160,// check for any prefix in the words list
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,161,String remainder = input.substring(l.length() + 1); // input without the prefix
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,162,String combined = l + remainder; // input with prefix without space
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,163,"return encode(remainder) + ""-"" + encode(combined);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,165,// fixme: this case is invariant on l
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,166,"else if (input.length() >= 2 && input.substring(0, 2).equals(""d'"")) // check for d'"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,168,String remainder = input.substring(2);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,169,"String combined = ""d"" + remainder;"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,170,"return encode(remainder) + ""-"" + encode(combined);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,175,"final List<String> words = Arrays.asList(input.split(""\\s+""));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,176,final List<String> words2 = new ArrayList<String>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,178,switch (this.nameType) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,179,case SEPHARDIC:
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,180,for (String aWord : words) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,181,"String[] parts = aWord.split(""'"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,182,String lastPart = parts[parts.length - 1];
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,183,words2.add(lastPart);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,185,words2.removeAll(namePfxs.get(this.nameType));
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,186,break;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,187,case ASHKENAZI:
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,188,words2.addAll(words);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,189,words2.removeAll(namePfxs.get(this.nameType));
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,190,break;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,191,case GENERIC:
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,192,words2.addAll(words);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,193,break;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,194,default:
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,195,"throw new IllegalStateException(""Unreachable case: "" + this.nameType);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,198,if (this.concat) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,199,// concat mode enabled
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,200,"input = join(words2, "" "");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,201,} else if (words2.size() == 1) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,202,// not a multi-word name
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,203,input = words.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,204,} else {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,205,// encode each word in a multi-word name separately (normally used for approx matches)
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,206,StringBuilder result = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,207,for (String word : words2) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,208,"result.append(""-"").append(encode(word));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,210,"// return the result without the leading ""-"""
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,211,return result.substring(1);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,214,"String phonetic = """";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,216,// loop over each char in the input - we will handle the increment manually
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,217,for (int i = 0; i < input.length();) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,218,"RulesApplication rulesApplication = new RulesApplication(rules, languageArg, input, phonetic, i).invoke();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,219,i = rulesApplication.getI();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,220,phonetic = rulesApplication.getPhonetic();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,223,"phonetic = applyFinalRules(phonetic, finalRules1, languageArg, false);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,224,"phonetic = applyFinalRules(phonetic, finalRules2, languageArg, true);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,226,return phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,229,private String removeDuplicateAlternates(final String phonetic) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,230,List<String> altArray = splitOnPipe(phonetic);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,232,"String result = ""|"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,233,for (String alt : altArray) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,"if (!result.contains(""|"" + alt + ""|"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,235,"result += (alt + ""|"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,239,"result = result.substring(1, result.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,240,return result;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,"private String normalizeLanguageAttributes(String text, final boolean strip) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,244,// this is applied to a single alternative at a time -- not to a parenthisized list
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,245,"// it removes all embedded bracketed attributes, logically-ands them together, and places them at the end."
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,247,"// however if strip is true, this can indeed remove embedded bracketed attributes from a parenthesized list"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,249,Set<String> langs = new HashSet<String>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,251,int bracketStart;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,252,while ((bracketStart = text.indexOf('[')) != -1) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,253,"int bracketEnd = text.indexOf(']', bracketStart);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,254,if (bracketEnd == -1) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,255,"throw new IllegalArgumentException(""no closing square bracket in: "" + text);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,258,"String body = text.substring(bracketStart + 1, bracketEnd);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,259,"langs.addAll(Arrays.asList(body.split(""[+]"")));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,260,"text = text.substring(0, bracketStart) + text.substring(bracketEnd + 1);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,263,if (langs.isEmpty() || strip) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,264,return text;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,265,} else if (langs.contains(Languages.ANY)) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,266,"return ""["" + Languages.ANY + ""]"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,267,} else {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,268,"return text + ""["" + (join(langs, ""+"")) + ""]"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,272,"private String applyFinalRules(String phonetic, List<Rule> finalRules, Set<String> languageArg, boolean strip) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,273,if (finalRules == null) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,274,"throw new NullPointerException(""finalRules can not be null"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,276,if (finalRules.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,277,return phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,280,phonetic = expand(phonetic);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,281,"// must protect | in [] as split takes a regex, not a string literal"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,282,List<String> phoneticArray = splitOnPipe(phonetic);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,284,for (int k = 0; k < phoneticArray.size(); k++) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,285,"// log(""k: "" + k);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,287,String aPhonetic = phoneticArray.get(k);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,288,"String phonetic2 = """";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,290,"String phoneticx = normalizeLanguageAttributes(aPhonetic, true);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,291,for (int i = 0; i < aPhonetic.length();) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,292,// we will handle the increment manually
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,293,"if (aPhonetic.substring(i, i + 1).equals(""["")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,294,int attribStart = i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,295,i++;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,296,while (true) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,297,i++;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,298,"String nextChar = aPhonetic.substring(i, i + 1);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,299,"if (nextChar.equals(""]"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,300,"phonetic2 += aPhonetic.substring(attribStart, i);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,301,break;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,305,continue;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,308,"RulesApplication rulesApplication = new RulesApplication(finalRules, languageArg, phoneticx, phonetic2, i).invoke();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,309,boolean found = rulesApplication.isFound();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,310,phonetic2 = rulesApplication.getPhonetic();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,312,if (!found) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,313,"phonetic2 += aPhonetic.substring(i, i + 1);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,316,i = rulesApplication.getI();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,319,"phoneticArray.set(k, expand(phonetic2));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,322,"phonetic = join(phoneticArray, ""|"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,323,if (strip) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,324,"phonetic = normalizeLanguageAttributes(phonetic, true);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,326,"if (!phonetic.contains(""|"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,327,"phonetic = ""("" + removeDuplicateAlternates(phonetic) + "")"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,330,return phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,333,private String expand(String phonetic) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,int altStart = phonetic.indexOf('(');
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,335,if (altStart == -1) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,336,"return normalizeLanguageAttributes(phonetic, false);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,339,"String prefix = phonetic.substring(0, altStart);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,340,altStart++;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,341,int altEnd = phonetic.indexOf(')');
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,342,"String altString = phonetic.substring(altStart, altEnd);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,343,altEnd++;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,344,String suffix = phonetic.substring(altEnd);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,345,List<String> altArray = splitOnPipe(altString);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,347,"String result = """";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,348,for (String alt : altArray) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,349,String alternate = expand(prefix + alt + suffix);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,350,"if (alternate.length() != 0 && !alternate.equals(""[any]"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,351,if (result.length() > 0) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,352,"result += ""|"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,354,result += alternate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,358,return result;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,361,"private String applyRuleIfCompatible(String phonetic, String target, Set<String> languageArg) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,362,// tests for compatible language rules
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,363,"// to do so, apply the rule, expand the results, and detect alternatives with incompatible attributes"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,364,// then drop each alternative that has incompatible attributes and keep those that are compatible
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,365,"// if there are no compatible alternatives left, return false"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,366,// otherwise return the compatible alternatives
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,368,String candidate = phonetic + target;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,369,"if (!candidate.contains(""["")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,370,return candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,373,candidate = expand(candidate);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,374,List<String> candidateArray = splitOnPipe(candidate);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,376,"candidate = """";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,377,boolean found = false;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,379,for (String thisCandidate : candidateArray) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,380,if (!languageArg.contains(Languages.ANY)) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,381,"thisCandidate = normalizeLanguageAttributes(thisCandidate + ""["" + languageArg + ""]"", false);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,384,"if (!thisCandidate.equals(""[0]"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,385,found = true;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,386,if (candidate.length() != 0) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,387,"candidate += ""|"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,389,candidate += thisCandidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,393,if (!found) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,394,return null; // eugh!
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,396,"if (candidate.contains(""|"")) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,397,"candidate = ""("" + candidate + "")"";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,400,return candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,403,"private static String join(Iterable<String> strings, String sep) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,404,StringBuilder sb = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,405,Iterator<String> si = strings.iterator();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,406,if (si.hasNext()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,407,sb.append(si.next());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,409,while (si.hasNext()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,410,sb.append(sep).append(si.next());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,413,return sb.toString();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,416,private static List<String> splitOnPipe(String str) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,417,List<String> res = new ArrayList<String>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,419,while (true) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,420,int i = str.indexOf('|');
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,421,if (i < 0) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,422,res.add(str);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,423,break;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,426,"res.add(str.substring(0, i));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,427,str = str.substring(i + 1);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,430,return res;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,433,private class RulesApplication {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,434,private final List<Rule> finalRules;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,435,private final Set<String> languageArg;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,436,private final String input;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,438,private String phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,439,private int i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,440,private boolean found;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,442,"public RulesApplication(List<Rule> finalRules, Set<String> languageArg, String input, String phonetic, int i) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,443,if (finalRules == null) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,444,"throw new NullPointerException(""The finalRules argument must not be null"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,446,this.finalRules = finalRules;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,447,this.languageArg = languageArg;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,448,this.phonetic = phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,449,this.input = input;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,450,this.i = i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,453,public String getPhonetic() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,454,return this.phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,457,public int getI() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,458,return this.i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,461,public boolean isFound() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,462,return this.found;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,465,public RulesApplication invoke() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,466,this.found = false;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,467,int patternLength = 0;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,468,RULES: for (Rule rule : this.finalRules) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,469,String pattern = rule.getPattern();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,470,patternLength = pattern.length();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,471,"// log(""trying pattern: "" + pattern);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,473,"if (!rule.patternAndContextMatches(this.input, this.i) || !rule.languageMatches(this.languageArg)) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,474,"// log(""no match"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,475,continue RULES;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,478,"String candidate = applyRuleIfCompatible(this.phonetic, rule.getPhoneme(), this.languageArg);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,480,if (candidate == null || candidate.length() == 0) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,481,"// log(""no candidate"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,482,continue RULES;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,484,this.phonetic = candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,485,this.found = true;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,486,break RULES;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,489,if (!this.found) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,490,patternLength = 1;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,493,this.i += patternLength;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,494,return this;
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,21,* Constants used to process resource files.
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,23,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,24,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,26,class ResourceConstants {
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,28,"static final String CMT = ""//"";"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,29,"static final String ENCODING = ""UTF-8"";"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,30,"static final String EXT_CMT_END = ""*/"";"
True,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/java/org/apache/commons/codec/language/bm/ResourceConstants.java,31,"static final String EXT_CMT_START = ""/*"";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,22,import java.util.Collections;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,23,import java.util.EnumMap;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,24,import java.util.HashMap;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,25,import java.util.HashSet;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,26,import java.util.List;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,27,import java.util.Map;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,28,import java.util.Scanner;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,29,import java.util.Set;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,30,import java.util.regex.Pattern;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,33,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,34,* A phoneme rule.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,35,* </p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,36,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,37,"* Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply and a logical flag indicating if"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,38,* all lanugages must be in play. A rule matches if:
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,39,* <ul>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,40,* <li>the pattern matches at the current position</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,41,* <li>the string up until the beginning of the pattern matches the left context</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,42,* <li>the string from the end of the pattern matches the right context</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,43,* <li>logical is ALL and all languages are in scope; or</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,44,* <li>logical is any other value and at least one language is in scope</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,45,* </ul>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,46,* </p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,47,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,48,"* Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user to explicitly construct their"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,49,* own.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,50,* </p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,51,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,52,* Rules are immutable and thread-safe.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,53,* <h2>Rules resources</h2>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,54,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,55,* Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically named following the pattern:
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,56,* <blockquote>org/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt</blockquote>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,57,* </p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,58,* <p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,59,* The format of these resources is the following:
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,60,* <ul>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,61,"* <li><b>Rules:</b> whitespace separated, double-quoted strings. There should be 4 columns to each row, and these will be interpreted as:"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,62,* <ol>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,63,* <li>pattern</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,64,* <li>left context</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,65,* <li>right context</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,66,* <li>phoneme</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,67,* </ol>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,68,* </li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,69,* <li><b>End-of-line comments:</b> Any occurance of '//' will cause all text following on that line to be discarded as a comment.</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,70,* <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip all content until a
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,71,* line ending in '*' and '/' is found.</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,72,* <li><b>Blank lines:</b> All blank lines will be skipped.</li>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,73,* </ul>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,74,* </p>
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,76,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,77,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,79,public class Rule {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,80,"private static final String DOUBLE_QUOTE = ""\"""";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,82,"public static final String ALL = ""ALL"";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,84,"private static final String HASH_INCLUDE = ""#include"";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,86,"private static final Map<NameType, Map<RuleType, Map<String, List<Rule>>>> RULES = new EnumMap<NameType, Map<RuleType, Map<String, List<Rule>>>>("
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,87,NameType.class);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,89,static {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,90,for (NameType s : NameType.values()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,91,"Map<RuleType, Map<String, List<Rule>>> rts = new EnumMap<RuleType, Map<String, List<Rule>>>(RuleType.class);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,93,for (RuleType rt : RuleType.values()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,94,"Map<String, List<Rule>> rs = new HashMap<String, List<Rule>>();"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,96,Languages ls = Languages.instance(s);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,97,for (String l : ls.getLanguages()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,98,"rs.put(l, parseRules(mkScanner(s, rt, l)));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,100,if (!rt.equals(RuleType.RULES)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,101,"rs.put(""common"", parseRules(mkScanner(s, rt, ""common"")));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,104,"rts.put(rt, Collections.unmodifiableMap(rs));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,107,"RULES.put(s, Collections.unmodifiableMap(rts));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,112,"* Gets rules for a combination of name type, rule type and languages."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,114,* @param nameType
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,115,*            the NameType to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,116,* @param rt
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,117,*            the RuleType to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,118,* @param langs
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,119,*            the set of languages to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,120,* @return a list of Rules that apply
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,122,"public static List<Rule> instance(NameType nameType, RuleType rt, Set<String> langs) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,123,if (langs.size() == 1) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,124,"return instance(nameType, rt, langs.iterator().next());"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,125,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,126,"return instance(nameType, rt, ""any"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,131,"* Gets rules for a combination of name type, rule type and a single language."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,133,* @param nameType
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,134,*            the NameType to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,135,* @param rt
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,136,*            the RuleType to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,137,* @param lang
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,138,*            the language to consider
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,139,"* @return a list rules for a combination of name type, rule type and a single language."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,141,"public static List<Rule> instance(NameType nameType, RuleType rt, String lang) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,142,List<Rule> rules = RULES.get(nameType).get(rt).get(lang);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,144,if (rules == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,145,"throw new IllegalArgumentException(String.format(""No rules found for %s, %s, %s."", nameType.getName(), rt.getName(), lang));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,148,return rules;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,151,"private static Scanner mkScanner(NameType nameType, RuleType rt, String lang) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,152,"String resName = String.format(""org/apache/commons/codec/language/bm/%s_%s_%s.txt"", nameType.getName(), rt.getName(), lang);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,153,InputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,155,if (rulesIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,156,"throw new IllegalArgumentException(""Unable to load resource: "" + resName);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,159,"return new Scanner(rulesIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,162,private static Scanner mkScanner(String lang) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,163,"String resName = String.format(""org/apache/commons/codec/language/bm/%s.txt"", lang);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,164,InputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,166,if (rulesIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,167,"throw new IllegalArgumentException(""Unable to load resource: "" + resName);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,170,"return new Scanner(rulesIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,173,private static List<Rule> parseRules(Scanner scanner) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,174,List<Rule> lines = new ArrayList<Rule>();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,176,boolean inMultilineComment = false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,177,while (scanner.hasNextLine()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,178,String rawLine = scanner.nextLine();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,179,String line = rawLine;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,181,if (inMultilineComment) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,182,if (line.endsWith(ResourceConstants.EXT_CMT_END)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,183,inMultilineComment = false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,184,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,185,// skip
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,187,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,188,if (line.startsWith(ResourceConstants.EXT_CMT_START)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,189,inMultilineComment = true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,190,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,191,// discard comments
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,192,int cmtI = line.indexOf(ResourceConstants.CMT);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,193,if (cmtI >= 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,194,"line = line.substring(0, cmtI);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,197,// trim leading-trailing whitespace
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,198,line = line.trim();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,200,if (line.length() == 0)
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,201,continue; // empty lines can be safely skipped
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,203,if (line.startsWith(HASH_INCLUDE)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,204,// include statement
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,205,String incl = line.substring(HASH_INCLUDE.length()).trim();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,206,"if (incl.contains("" "")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,207,"System.err.println(""Warining: malformed import statement: "" + rawLine);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,208,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,209,lines.addAll(parseRules(mkScanner(incl)));
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,211,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,212,// rule
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,213,"String[] parts = line.split(""\\s+"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,214,if (parts.length != 4) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,215,"System.err.println(""Warning: malformed rule statement split into "" + parts.length + "" parts: "" + rawLine);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,216,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,217,String pat = stripQuotes(parts[0]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,218,String lCon = stripQuotes(parts[1]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,219,String rCon = stripQuotes(parts[2]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,220,String ph = stripQuotes(parts[3]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,221,"Rule r = new Rule(pat, lCon, rCon, ph, Collections.<String> emptySet(), """"); // guessing last 2 parameters"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,222,lines.add(r);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,229,return lines;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,232,private static String stripQuotes(String str) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,233,if (str.startsWith(DOUBLE_QUOTE)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,234,str = str.substring(1);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,237,if (str.endsWith(DOUBLE_QUOTE)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,238,"str = str.substring(0, str.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,241,return str;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,244,private Set<String> language;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,246,private Pattern lContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,248,private String logical;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,250,private String pattern;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,252,private String phoneme;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,254,private Pattern rContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,257,* Creates a new rule.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,259,* @param pattern
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,*            the pattern
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,* @param lContext
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,262,*            the left context
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,263,* @param rContext
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,264,*            the right context
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,265,* @param phoneme
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,266,*            the resulting phoneme
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,267,* @param language
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,268,*            the required languages
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,269,* @param logical
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,270,*            flag to indicate if all or only some languages must be in scope
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,272,"public Rule(String pattern, String lContext, String rContext, String phoneme, Set<String> language, String logical) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,273,this.pattern = pattern;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,274,"this.lContext = Pattern.compile(lContext + ""$"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,275,"this.rContext = Pattern.compile(""^"" + rContext + "".*"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,276,this.phoneme = phoneme;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,277,this.language = language;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,278,this.logical = logical;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,282,* Gets the languages that must be in scope. Not all rules apply in every language.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,284,* @return a Set of Strings giving the relevant languages
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,286,public Set<String> getLanguage() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,287,return this.language;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,291,* Gets the left context. This is a regular expression that must match to the left of the pattern.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,293,* @return the left context Pattern
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,295,public Pattern getLContext() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,296,return this.lContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,300,* Gets the logical combinator for the languages. ALL means all languages must be in scope for the rule to apply. Any other value means
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,301,* that any one language must be in scope for the rule to apply.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,303,* @return the logical combinator String
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,305,public String getLogical() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,306,return this.logical;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,310,* Gets the pattern. This is a string-literal that must exactly match.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,312,* @return the pattern
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,314,public String getPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,315,return this.pattern;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,319,"* Gets the phoneme. If the rule matches, this is the phoneme associated with the pattern match."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,321,* @return the phoneme
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,323,public String getPhoneme() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,324,return this.phoneme;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,328,* Gets the right context. This is a regular expression that must match to the right of the pattern.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,330,* @return the right context Pattern
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,332,public Pattern getRContext() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,333,return this.rContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,337,* Decides if the language restriction for this rule applies.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,339,* @param languageArg
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,340,*            a Set of Strings giving the names of the languages in scope
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,341,"* @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,343,public boolean languageMatches(Set<String> languageArg) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,344,if (!languageArg.contains(Languages.ANY) && !this.language.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,345,if (ALL.equals(this.logical) && !languageArg.containsAll(this.language)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,346,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,347,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,348,Set<String> isect = new HashSet<String>(languageArg);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,349,isect.retainAll(this.language);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,350,return !isect.isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,352,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,353,return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,358,* Decides if the pattern and context match the input starting at a position.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,360,* @param input
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,361,*            the input String
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,362,* @param i
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,363,*            the int position within the input
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,364,"* @return true if the pattern and left/right context match, false otherwise"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,366,"public boolean patternAndContextMatches(String input, int i) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,367,if (i < 0)
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,368,"throw new IndexOutOfBoundsException(""Can not match pattern at negative indexes"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,370,int patternLength = this.pattern.length();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,371,int ipl = i + patternLength;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,373,if (ipl > input.length()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,374,// not enough room for the pattern to match
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,375,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,378,"boolean patternMatches = input.substring(i, ipl).equals(this.pattern);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,379,boolean rContextMatches = this.rContext.matcher(input.substring(ipl)).find();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,380,"boolean lContextMatches = this.lContext.matcher(input.substring(0, i)).find();"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,382,return patternMatches && rContextMatches && lContextMatches;
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,18,package org.apache.commons.codec.language.bm;
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,21,* Types of rule.
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,23,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,24,* @since 2.0
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,26,public enum RuleType {
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,28,"APPROX(""approx""), EXACT(""exact""), RULES(""rules"");"
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,30,private final String name;
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,32,RuleType(String name) {
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,33,this.name = name;
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,36,public String getName() {
True,src/java/org/apache/commons/codec/language/bm/RuleType.java,src/java/org/apache/commons/codec/language/bm/RuleType.java,37,return this.name;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,18,package org.apache.commons.codec.language.bm;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,22,import java.util.Collections;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,24,import org.apache.commons.codec.StringEncoder;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,25,import org.apache.commons.codec.StringEncoderAbstractTest;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,26,import org.junit.Test;
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,29,* Tests BeiderMorseEncoder.
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,31,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,32,* @since 2.0
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,34,public class BeiderMorseEncoderTest extends StringEncoderAbstractTest {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,35,@Override
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,36,protected StringEncoder createStringEncoder() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,37,return new BeiderMorseEncoder();
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,40,@Test(expected = IllegalStateException.class)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,41,public void invalidLangResourceShouldRaiseException() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,42,"Lang.loadFromResource(""thisIsAMadeUpResourceName"", Languages.instance(NameType.GENERIC));"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,45,@Test(expected = IllegalArgumentException.class)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,46,public void invalidLangShouldRaiseException() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,47,"Rule.instance(NameType.GENERIC, RuleType.APPROX, ""noSuchLanguage"");"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,50,@Test(expected = IllegalArgumentException.class)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,51,public void invalidLanguageResourceShouldRaiseException() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,52,"Languages.instance(""thereIsNoSuchLanguage"");"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,55,@Test(expected = IndexOutOfBoundsException.class)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,56,public void negativeIndexForRuleMatchShouldRaiseException() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,57,"Rule r = new Rule(""a"", """", """", """", Collections.<String> emptySet(), ""bob"");"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,58,"r.patternAndContextMatches(""bob"", -1);"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,61,@Test
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,62,public void setConcat() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,63,BeiderMorseEncoder bmpm = new BeiderMorseEncoder();
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,64,bmpm.setConcat(false);
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,65,"assertEquals(""Should be able to set concat to false"", false, bmpm.isConcat());"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,68,@Test
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,69,public void setNameTypeAsh() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,70,BeiderMorseEncoder bmpm = new BeiderMorseEncoder();
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,71,bmpm.setNameType(NameType.ASHKENAZI);
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,72,"assertEquals(""Name type should have been set to ash"", NameType.ASHKENAZI, bmpm.getNameType());"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,75,@Test
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,76,public void setRuleTypeExact() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,77,BeiderMorseEncoder bmpm = new BeiderMorseEncoder();
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,78,bmpm.setRuleType(RuleType.EXACT);
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,79,"assertEquals(""Rule type should have been set to exact"", RuleType.EXACT, bmpm.getRuleType());"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,82,@Test(expected = IllegalArgumentException.class)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,83,public void setRuleTypeToRulesShouldRaiseException() {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,84,BeiderMorseEncoder bmpm = new BeiderMorseEncoder();
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,85,bmpm.setRuleType(RuleType.RULES);
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,18,package org.apache.commons.codec.language.bm;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,24,import java.util.List;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,27,import org.junit.Test;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,28,import org.junit.runner.RunWith;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,29,import org.junit.runners.Parameterized;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,32,* Tests guessLanguages API.
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,34,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,35,* @since 2.0
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,37,@RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,38,public class LanguageGuessingTest {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,40,"private static String EXACT = ""exact"";"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,41,"private static String ONE_OF = ""one of"";"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,43,@Parameterized.Parameters
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,44,public static List<Object[]> data() {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,45,return Arrays.asList(new Object[][] {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,46,"{ ""Renault"", ""french"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,47,"{ ""Mickiewicz"", ""polish"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,48,"{ ""Thompson"", ""english"", ONE_OF }, // this also hits german and greeklatin"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,49,"{ ""Nuñez"", ""spanish"", EXACT }, { ""Carvalho"", ""portuguese"", EXACT }, { ""Čapek"", ""czech"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,50,"{ ""Sjneijder"", ""dutch"", EXACT }, { ""Klausewitz"", ""german"", EXACT }, { ""Küçük"", ""turkish"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,51,"{ ""Giacometti"", ""italian"", EXACT }, { ""Nagy"", ""hungarian"", EXACT }, { ""Ceauşescu"", ""romanian"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,52,"{ ""Angelopoulos"", ""greeklatin"", EXACT }, { ""Αγγελόπουλος"", ""greek"", EXACT }, { ""Пушкин"", ""cyrillic"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,53,"{ ""כהן"", ""hebrew"", EXACT } });"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,56,private final String exactness;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,58,private final Lang lang = Lang.instance(NameType.GENERIC);
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,59,private final String language;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,60,private final String name;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,62,"public LanguageGuessingTest(String name, String language, String exactness) {"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,63,this.name = name;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,64,this.language = language;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,65,this.exactness = exactness;
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,68,@Test
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,69,public void testLanguageGuessing() {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,70,Set<String> guesses = this.lang.guessLanguages(this.name);
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,71,String guess = this.lang.guessLanguage(this.name);
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,73,"assertTrue(""language predicted for name '"" + this.name + ""' is wrong: "" + guesses + "" should contain '"" + this.language + ""'"","
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,74,guesses.contains(this.language));
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,76,if (this.exactness.equals(EXACT)) {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,77,"assertEquals(""language predicted for name '"" + this.name + ""' is wrong"", this.language, guess);"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,78,} else {
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,79,"// System.out.println(""warning: test case that maps to multiple languages: '"" +"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,80,"// name + ""':"" + language + "" ~> "" + guesses);"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,18,package org.apache.commons.codec.language.bm;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,23,import java.util.List;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,25,import org.junit.Test;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,26,import org.junit.runner.RunWith;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,27,import org.junit.runners.Parameterized;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,30,* Tests PhoneticEngine.
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,32,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,33,* @since 2.0
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,35,@RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,36,public class PhoneticTest {
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,38,@Parameterized.Parameters
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,39,public static List<Object[]> data() {
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,40,return Arrays
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,41,".asList(new Object[] { ""Renault"", ""rinolt|rino|rinDlt|rinalt|rinult|rinD|rina|rinu"", NameType.GENERIC, RuleType.APPROX,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,42,"true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,43,"new Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI, RuleType.APPROX, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,44,"new Object[] { ""Renault"", ""(rinDlt)"", NameType.SEPHARDIC, RuleType.APPROX, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,45,"new Object[] { ""SntJohn-Smith"", ""(sntjonsmit)"", NameType.GENERIC, RuleType.EXACT, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,46,"new Object[] { ""d'ortley"", ""ortlaj|ortlej|ortlaj|ortlej-dortlaj|dortlej|dortlaj|dortlej"", NameType.GENERIC,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,47,"RuleType.EXACT, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,48,new Object[] {
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,49,"""van helsing"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,50,"""helSink|helsink|helzink|xelSink|xelsink|xelzink|HelSink|Helsink|Helzink-vanhelSink|vanhelsink|vanhelzink|vanjelSink|vanjelsink|vanjelzink|fanhelSink|fanhelsink|fanhelzink|fanjelSink|fanjelsink|fanjelzink|banhelSink|banhelsink|banhelzink|banjelSink|banjelsink|banjelzink"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,51,"NameType.GENERIC, RuleType.EXACT, false });"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,54,private final boolean concat;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,55,private final String name;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,56,private final NameType nameType;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,57,private final String phoneticExpected;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,58,private final RuleType ruleType;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,60,"public PhoneticTest(String name, String phoneticExpected, NameType nameType, RuleType ruleType, boolean concat) {"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,61,this.name = name;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,62,this.phoneticExpected = phoneticExpected;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,63,this.nameType = nameType;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,64,this.ruleType = ruleType;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,65,this.concat = concat;
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,68,@Test(timeout = 10000L)
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,69,public void testPhonetic() {
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,70,"PhoneticEngine engine = new PhoneticEngine(this.nameType, this.ruleType, this.concat);"
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,72,String phoneticActual = engine.encode(this.name);
True,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticTest.java,74,"assertEquals(""phoneme incorrect"", this.phoneticExpected, phoneticActual);"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,18,package org.apache.commons.codec.language.bm;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,23,import java.util.HashSet;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,24,import java.util.List;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,27,import org.junit.Test;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,28,import org.junit.runner.RunWith;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,29,import org.junit.runners.Parameterized;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,32,* Tests Rule.
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,34,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,35,* @since 2.0
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,37,@RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,38,public class RuleTest {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,@Parameterized.Parameters
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,public static List<Object[]> data() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,42,return Arrays.asList(
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,43,"new Object[] { ""matching language sets with ALL"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"new Rule(""e"", """", """", ""o"", new HashSet<String>(Arrays.asList(""english"", ""french"")), Rule.ALL),"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,45,"new HashSet<String>(Arrays.asList(""english"", ""french"")), true },"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,46,"new Object[] { ""non-matching language sets with ALL"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,47,"new Rule(""e"", """", """", ""o"", new HashSet<String>(Arrays.asList(""english"", ""french"")), Rule.ALL),"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,48,"new HashSet<String>(Arrays.asList(""english"")), false });"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,51,private final String caseName;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,52,private final boolean expected;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,53,private final Set<String> langs;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,54,private final Rule rule;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,56,"public RuleTest(String caseName, Rule rule, Set<String> langs, boolean expected) {"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,57,this.caseName = caseName;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,58,this.rule = rule;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,59,this.langs = langs;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,60,this.expected = expected;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,@Test
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,64,public void rule() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,65,"assertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"

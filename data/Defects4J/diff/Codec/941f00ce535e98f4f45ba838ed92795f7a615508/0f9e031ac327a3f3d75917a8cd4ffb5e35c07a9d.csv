is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/binary/Base64Test.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,3, $Revision: 1.1 $
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,4, $Date: 2003/04/25 17:50:56 $
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,10, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,11, reserved.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,15, are met:
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,23,    distribution.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,26,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,29,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,30,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,61,ackage org.apache.commons.codec.binary;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,64,mport java.util.Arrays;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,65,mport java.util.Random;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,67,mport junit.framework.TestCase;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,70, @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,71," @author <a href=""mailto:sanders@apache.org"">Scott Sanders</a>"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,72," @author <a href=""mailto:rwaldhoff@apache.org"">Rodney Waldhoff</a>"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,73," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,75,ublic class Base64Test extends TestCase {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,78, Construct a new instance of this test case.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,80, @param name Name of the test case
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,82,ublic Base64Test(String name) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,83,uper(name);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,88,  Test the Base64 implementation
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,90,ublic void testBase64() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,91,"tring content = ""Hello World"";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,92,tring encodedContent;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,93,ncodedContent = new String(Base64.encodeBase64(content.getBytes()));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,94,"ssertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,97,/ encode/decode random arrays from size 0 to size 11
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,98,ublic void testEncodeDecodeSmall() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,99,or(int i=0;i<12;i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,100,yte[] data = new byte[i];
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,101,random.nextBytes(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,102,yte[] enc =  Base64.encodeBase64(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,103,"ssertTrue(""\"""" + (new String(enc)) + ""\"" is Base64 data."",Base64.isArrayByteBase64(enc) );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,104,yte[] data2 = Base64.decodeBase64(enc);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,105,"ssertTrue(toString(data) + "" equals "" + toString(data2),Arrays.equals(data,data2));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,109,/ encode/decode a large random array
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,110,ublic void testEncodeDecodeRandom() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,111,or(int i=1;i<5;i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,112,yte[] data = new byte[_random.nextInt(10000)+1];
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,113,random.nextBytes(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,114,yte[] enc =  Base64.encodeBase64(data);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,115,ssertTrue(Base64.isArrayByteBase64(enc));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,116,yte[] data2 = Base64.decodeBase64(enc);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,117,"ssertTrue(Arrays.equals(data,data2));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,121,ublic void testSingletons() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,122,"ssertEquals(""AA=="",new String(Base64.encodeBase64(new byte[] { (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,123,"ssertEquals(""AQ=="",new String(Base64.encodeBase64(new byte[] { (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,124,"ssertEquals(""Ag=="",new String(Base64.encodeBase64(new byte[] { (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,125,"ssertEquals(""Aw=="",new String(Base64.encodeBase64(new byte[] { (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,126,"ssertEquals(""BA=="",new String(Base64.encodeBase64(new byte[] { (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,127,"ssertEquals(""BQ=="",new String(Base64.encodeBase64(new byte[] { (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,128,"ssertEquals(""Bg=="",new String(Base64.encodeBase64(new byte[] { (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,129,"ssertEquals(""Bw=="",new String(Base64.encodeBase64(new byte[] { (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,130,"ssertEquals(""CA=="",new String(Base64.encodeBase64(new byte[] { (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,131,"ssertEquals(""CQ=="",new String(Base64.encodeBase64(new byte[] { (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,132,"ssertEquals(""Cg=="",new String(Base64.encodeBase64(new byte[] { (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,133,"ssertEquals(""Cw=="",new String(Base64.encodeBase64(new byte[] { (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,134,"ssertEquals(""DA=="",new String(Base64.encodeBase64(new byte[] { (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,135,"ssertEquals(""DQ=="",new String(Base64.encodeBase64(new byte[] { (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,136,"ssertEquals(""Dg=="",new String(Base64.encodeBase64(new byte[] { (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,137,"ssertEquals(""Dw=="",new String(Base64.encodeBase64(new byte[] { (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,138,"ssertEquals(""EA=="",new String(Base64.encodeBase64(new byte[] { (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,139,"ssertEquals(""EQ=="",new String(Base64.encodeBase64(new byte[] { (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,140,"ssertEquals(""Eg=="",new String(Base64.encodeBase64(new byte[] { (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,141,"ssertEquals(""Ew=="",new String(Base64.encodeBase64(new byte[] { (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,142,"ssertEquals(""FA=="",new String(Base64.encodeBase64(new byte[] { (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,143,"ssertEquals(""FQ=="",new String(Base64.encodeBase64(new byte[] { (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,144,"ssertEquals(""Fg=="",new String(Base64.encodeBase64(new byte[] { (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,145,"ssertEquals(""Fw=="",new String(Base64.encodeBase64(new byte[] { (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,146,"ssertEquals(""GA=="",new String(Base64.encodeBase64(new byte[] { (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,147,"ssertEquals(""GQ=="",new String(Base64.encodeBase64(new byte[] { (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,148,"ssertEquals(""Gg=="",new String(Base64.encodeBase64(new byte[] { (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,149,"ssertEquals(""Gw=="",new String(Base64.encodeBase64(new byte[] { (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,150,"ssertEquals(""HA=="",new String(Base64.encodeBase64(new byte[] { (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,151,"ssertEquals(""HQ=="",new String(Base64.encodeBase64(new byte[] { (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,152,"ssertEquals(""Hg=="",new String(Base64.encodeBase64(new byte[] { (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,153,"ssertEquals(""Hw=="",new String(Base64.encodeBase64(new byte[] { (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,154,"ssertEquals(""IA=="",new String(Base64.encodeBase64(new byte[] { (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,155,"ssertEquals(""IQ=="",new String(Base64.encodeBase64(new byte[] { (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,156,"ssertEquals(""Ig=="",new String(Base64.encodeBase64(new byte[] { (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,157,"ssertEquals(""Iw=="",new String(Base64.encodeBase64(new byte[] { (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,158,"ssertEquals(""JA=="",new String(Base64.encodeBase64(new byte[] { (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,159,"ssertEquals(""JQ=="",new String(Base64.encodeBase64(new byte[] { (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,160,"ssertEquals(""Jg=="",new String(Base64.encodeBase64(new byte[] { (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,161,"ssertEquals(""Jw=="",new String(Base64.encodeBase64(new byte[] { (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,162,"ssertEquals(""KA=="",new String(Base64.encodeBase64(new byte[] { (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,163,"ssertEquals(""KQ=="",new String(Base64.encodeBase64(new byte[] { (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,164,"ssertEquals(""Kg=="",new String(Base64.encodeBase64(new byte[] { (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,165,"ssertEquals(""Kw=="",new String(Base64.encodeBase64(new byte[] { (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,166,"ssertEquals(""LA=="",new String(Base64.encodeBase64(new byte[] { (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,167,"ssertEquals(""LQ=="",new String(Base64.encodeBase64(new byte[] { (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,168,"ssertEquals(""Lg=="",new String(Base64.encodeBase64(new byte[] { (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,169,"ssertEquals(""Lw=="",new String(Base64.encodeBase64(new byte[] { (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,170,"ssertEquals(""MA=="",new String(Base64.encodeBase64(new byte[] { (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,171,"ssertEquals(""MQ=="",new String(Base64.encodeBase64(new byte[] { (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,172,"ssertEquals(""Mg=="",new String(Base64.encodeBase64(new byte[] { (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,173,"ssertEquals(""Mw=="",new String(Base64.encodeBase64(new byte[] { (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,174,"ssertEquals(""NA=="",new String(Base64.encodeBase64(new byte[] { (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,175,"ssertEquals(""NQ=="",new String(Base64.encodeBase64(new byte[] { (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,176,"ssertEquals(""Ng=="",new String(Base64.encodeBase64(new byte[] { (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,177,"ssertEquals(""Nw=="",new String(Base64.encodeBase64(new byte[] { (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,178,"ssertEquals(""OA=="",new String(Base64.encodeBase64(new byte[] { (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,179,"ssertEquals(""OQ=="",new String(Base64.encodeBase64(new byte[] { (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,180,"ssertEquals(""Og=="",new String(Base64.encodeBase64(new byte[] { (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,181,"ssertEquals(""Ow=="",new String(Base64.encodeBase64(new byte[] { (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,182,"ssertEquals(""PA=="",new String(Base64.encodeBase64(new byte[] { (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,183,"ssertEquals(""PQ=="",new String(Base64.encodeBase64(new byte[] { (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,184,"ssertEquals(""Pg=="",new String(Base64.encodeBase64(new byte[] { (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,185,"ssertEquals(""Pw=="",new String(Base64.encodeBase64(new byte[] { (byte)63 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,186,"ssertEquals(""QA=="",new String(Base64.encodeBase64(new byte[] { (byte)64 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,187,"ssertEquals(""QQ=="",new String(Base64.encodeBase64(new byte[] { (byte)65 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,188,"ssertEquals(""Qg=="",new String(Base64.encodeBase64(new byte[] { (byte)66 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,189,"ssertEquals(""Qw=="",new String(Base64.encodeBase64(new byte[] { (byte)67 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,190,"ssertEquals(""RA=="",new String(Base64.encodeBase64(new byte[] { (byte)68 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,191,"ssertEquals(""RQ=="",new String(Base64.encodeBase64(new byte[] { (byte)69 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,192,"ssertEquals(""Rg=="",new String(Base64.encodeBase64(new byte[] { (byte)70 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,193,"ssertEquals(""Rw=="",new String(Base64.encodeBase64(new byte[] { (byte)71 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,194,"ssertEquals(""SA=="",new String(Base64.encodeBase64(new byte[] { (byte)72 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,195,"ssertEquals(""SQ=="",new String(Base64.encodeBase64(new byte[] { (byte)73 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,196,"ssertEquals(""Sg=="",new String(Base64.encodeBase64(new byte[] { (byte)74 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,197,"ssertEquals(""Sw=="",new String(Base64.encodeBase64(new byte[] { (byte)75 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,198,"ssertEquals(""TA=="",new String(Base64.encodeBase64(new byte[] { (byte)76 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,199,"ssertEquals(""TQ=="",new String(Base64.encodeBase64(new byte[] { (byte)77 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,200,"ssertEquals(""Tg=="",new String(Base64.encodeBase64(new byte[] { (byte)78 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,201,"ssertEquals(""Tw=="",new String(Base64.encodeBase64(new byte[] { (byte)79 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,202,"ssertEquals(""UA=="",new String(Base64.encodeBase64(new byte[] { (byte)80 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,203,"ssertEquals(""UQ=="",new String(Base64.encodeBase64(new byte[] { (byte)81 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,204,"ssertEquals(""Ug=="",new String(Base64.encodeBase64(new byte[] { (byte)82 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,205,"ssertEquals(""Uw=="",new String(Base64.encodeBase64(new byte[] { (byte)83 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,206,"ssertEquals(""VA=="",new String(Base64.encodeBase64(new byte[] { (byte)84 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,207,"ssertEquals(""VQ=="",new String(Base64.encodeBase64(new byte[] { (byte)85 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,208,"ssertEquals(""Vg=="",new String(Base64.encodeBase64(new byte[] { (byte)86 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,209,"ssertEquals(""Vw=="",new String(Base64.encodeBase64(new byte[] { (byte)87 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,210,"ssertEquals(""WA=="",new String(Base64.encodeBase64(new byte[] { (byte)88 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,211,"ssertEquals(""WQ=="",new String(Base64.encodeBase64(new byte[] { (byte)89 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,212,"ssertEquals(""Wg=="",new String(Base64.encodeBase64(new byte[] { (byte)90 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,213,"ssertEquals(""Ww=="",new String(Base64.encodeBase64(new byte[] { (byte)91 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,214,"ssertEquals(""XA=="",new String(Base64.encodeBase64(new byte[] { (byte)92 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,215,"ssertEquals(""XQ=="",new String(Base64.encodeBase64(new byte[] { (byte)93 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,216,"ssertEquals(""Xg=="",new String(Base64.encodeBase64(new byte[] { (byte)94 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,217,"ssertEquals(""Xw=="",new String(Base64.encodeBase64(new byte[] { (byte)95 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,218,"ssertEquals(""YA=="",new String(Base64.encodeBase64(new byte[] { (byte)96 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,219,"ssertEquals(""YQ=="",new String(Base64.encodeBase64(new byte[] { (byte)97 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,"ssertEquals(""Yg=="",new String(Base64.encodeBase64(new byte[] { (byte)98 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,221,"ssertEquals(""Yw=="",new String(Base64.encodeBase64(new byte[] { (byte)99 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,222,"ssertEquals(""ZA=="",new String(Base64.encodeBase64(new byte[] { (byte)100 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,223,"ssertEquals(""ZQ=="",new String(Base64.encodeBase64(new byte[] { (byte)101 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,224,"ssertEquals(""Zg=="",new String(Base64.encodeBase64(new byte[] { (byte)102 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,225,"ssertEquals(""Zw=="",new String(Base64.encodeBase64(new byte[] { (byte)103 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,"ssertEquals(""aA=="",new String(Base64.encodeBase64(new byte[] { (byte)104 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,229,ublic void testTriplets() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,230,"ssertEquals(""AAAA"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,"ssertEquals(""AAAB"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"ssertEquals(""AAAC"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)2 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"ssertEquals(""AAAD"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)3 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"ssertEquals(""AAAE"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)4 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"ssertEquals(""AAAF"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)5 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"ssertEquals(""AAAG"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)6 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"ssertEquals(""AAAH"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)7 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,"ssertEquals(""AAAI"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)8 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,"ssertEquals(""AAAJ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)9 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,240,"ssertEquals(""AAAK"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)10 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,241,"ssertEquals(""AAAL"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)11 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,242,"ssertEquals(""AAAM"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)12 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,243,"ssertEquals(""AAAN"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)13 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,244,"ssertEquals(""AAAO"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)14 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"ssertEquals(""AAAP"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)15 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"ssertEquals(""AAAQ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)16 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"ssertEquals(""AAAR"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)17 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"ssertEquals(""AAAS"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)18 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"ssertEquals(""AAAT"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)19 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,250,"ssertEquals(""AAAU"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)20 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,251,"ssertEquals(""AAAV"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)21 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,252,"ssertEquals(""AAAW"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)22 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,253,"ssertEquals(""AAAX"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)23 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,254,"ssertEquals(""AAAY"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)24 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,"ssertEquals(""AAAZ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)25 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"ssertEquals(""AAAa"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)26 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,257,"ssertEquals(""AAAb"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)27 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,258,"ssertEquals(""AAAc"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)28 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,259,"ssertEquals(""AAAd"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)29 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,260,"ssertEquals(""AAAe"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)30 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,261,"ssertEquals(""AAAf"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)31 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,262,"ssertEquals(""AAAg"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)32 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,"ssertEquals(""AAAh"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)33 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"ssertEquals(""AAAi"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)34 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,265,"ssertEquals(""AAAj"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)35 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,266,"ssertEquals(""AAAk"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)36 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,267,"ssertEquals(""AAAl"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)37 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,268,"ssertEquals(""AAAm"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)38 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,269,"ssertEquals(""AAAn"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)39 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,270,"ssertEquals(""AAAo"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)40 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,271,"ssertEquals(""AAAp"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)41 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"ssertEquals(""AAAq"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)42 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,273,"ssertEquals(""AAAr"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)43 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,274,"ssertEquals(""AAAs"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)44 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,"ssertEquals(""AAAt"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)45 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"ssertEquals(""AAAu"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)46 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,277,"ssertEquals(""AAAv"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)47 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,278,"ssertEquals(""AAAw"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)48 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,279,"ssertEquals(""AAAx"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)49 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,280,"ssertEquals(""AAAy"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)50 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,281,"ssertEquals(""AAAz"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)51 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,282,"ssertEquals(""AAA0"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)52 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,"ssertEquals(""AAA1"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)53 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"ssertEquals(""AAA2"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)54 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,285,"ssertEquals(""AAA3"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)55 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,286,"ssertEquals(""AAA4"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)56 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,287,"ssertEquals(""AAA5"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)57 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,288,"ssertEquals(""AAA6"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)58 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,289,"ssertEquals(""AAA7"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)59 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,290,"ssertEquals(""AAA8"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)60 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,291,"ssertEquals(""AAA9"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)61 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,292,"ssertEquals(""AAA+"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)62 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,293,"ssertEquals(""AAA/"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,296,ublic void testKnownEncodings() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,297,"ssertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,298,"ssertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\nbGFoIGJsYWg=\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,299,"ssertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encodeBase64(""It was the best of times, it was the worst of times."".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,300,"ssertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,301,"ssertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,302,"ssertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,303,"ssertEquals(""eHl6enkh"",new String(Base64.encodeBase64(""xyzzy!"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,306,ublic void testKnownDecodings() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,307,"ssertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,308,"ssertEquals(""It was the best of times, it was the worst of times."",new String(Base64.decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,309,"ssertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,310,"ssertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,311,"ssertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"",new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,312,"ssertEquals(""xyzzy!"",new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,315,ublic void testNonBase64() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,317,yte[] bArray = { '%' };
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,319,"ssertFalse( ""Invalid Base64 array was incorrectly validated as "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,320,"an array of Base64 encoded data"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,321,ase64.isArrayByteBase64( bArray ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,323,oolean exceptionThrown = false;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,325,ry {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,326,ase64 b64 = new Base64();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,327,64.decode( bArray );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,329,atch( Exception e ) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,330,xceptionThrown = true;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,333,"ssertTrue( ""Exception wasn't thrown when trying to decode "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,334,"invalid base64 encoded data"", exceptionThrown );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,338,ublic void testObjectDecodeWithInvalidParameter() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,339,oolean exceptionThrown = false;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,341,ase64 b64 = new Base64();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,343,ry {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,344,"bject o = new String( ""Yadayadayada"" );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,345,64.decode( o );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,346, catch( Exception e ) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,347,xceptionThrown = true;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,350,"ssertTrue( ""decode(Object) didn't throw an exception when passed a "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,351,"String object"", exceptionThrown );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,354,ublic void testObjectDecodeWithValidParameter() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,355,oolean exceptionThrown = false;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,357,"tring original = ""Hello World!"";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,358,yte[] bArray =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,359,ase64.encodeBase64( (new String(original)).getBytes() );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,360,bject o = (Object) bArray;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,362,ase64 b64 = new Base64();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,363,bject oDecoded = (Object) b64.decode( o );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,364,yte[] baDecoded = (byte[]) oDecoded;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,365,tring dest = new String( baDecoded );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,367,"ssertTrue( ""dest string down not equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,368,est.equals( original ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,371,ublic void testObjectEncodeWithInvalidParameter() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,372,oolean exceptionThrown = false;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,374,ase64 b64 = new Base64();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,376,ry {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,377,"bject o = new String( ""Yadayadayada"" );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,378,64.encode( o );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,379, catch( Exception e ) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,380,xceptionThrown = true;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,383,"ssertTrue( ""encode(Object) didn't throw an exception when passed a "" +"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,384,"String object"", exceptionThrown );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,387,ublic void testObjectEncodeWithValidParameter() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,389,"tring original = ""Hello World!"";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,390,yte[] origBytes = original.getBytes();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,391,bject origObj = (Object) origBytes;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,393,ase64 b64 = new Base64();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,bject oEncoded = b64.encode( origObj );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,395,yte[] bArray =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,396,ase64.decodeBase64( (byte[]) oEncoded );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,tring dest = new String( bArray );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"ssertTrue( ""dest string down not equal original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,est.equals( original ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,403,ublic void testDiscardingOfWhiteSpace() throws Exception {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,"tring orig = ""I am a late night coder."";"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,yte[] encodedArray = Base64.encodeBase64( orig.getBytes() );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,tringBuffer intermediate =
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,ew StringBuffer( new String(encodedArray) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"ntermediate.insert( 2, ' ' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,"ntermediate.insert( 5, '\t' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,"ntermediate.insert( 10, '\r' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"ntermediate.insert( 15, '\n' );"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,416,yte[] encodedWithWS = intermediate.toString().getBytes();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,yte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,419,tring dest = new String( decodedWithWS );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,421,"ssertTrue( ""Dest string doesn't eausl original"","
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,422,est.equals( orig ) );
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,426,/ -------------------------------------------------------- Private Methods
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,428,rivate String toString(byte[] data) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,429,tringBuffer buf = new StringBuffer();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,430,or(int i=0;i<data.length;i++) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,431,uf.append(data[i]);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,432,f(i != data.length-1) {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,433,"uf.append("","");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,436,eturn buf.toString();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,rivate Random _random = new Random();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/binary/Base64Test.java,v 1.2 2003/05/06 20:45:16 ggregory Exp $"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,3,* $Revision: 1.2 $
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,4,* $Date: 2003/05/06 20:45:16 $
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,8,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,10,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,11,* reserved.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,14,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,15,* are met:
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,22,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,23,*    distribution.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,26,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,27,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,29,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,30,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,34,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,35,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,39,*    permission of the Apache Group.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,52,* SUCH DAMAGE.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,55,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,57,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,58,* <http://www.apache.org/>.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,61,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,64,import java.util.Arrays;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,65,import java.util.Random;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,67,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,70,* @version $Revision: 1.2 $ $Date: 2003/05/06 20:45:16 $
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,71,"* @author <a href=""mailto:sanders@apache.org"">Scott Sanders</a>"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,72,"* @author <a href=""mailto:rwaldhoff@apache.org"">Rodney Waldhoff</a>"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,73,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,74,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,76,public class Base64Test extends TestCase {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,79,* Construct a new instance of this test case.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,81,* @param name Name of the test case
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,83,public Base64Test(String name) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,84,super(name);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,89,*  Test the Base64 implementation
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,91,public void testBase64() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,92,"String content = ""Hello World"";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,93,String encodedContent;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,94,encodedContent = new String(Base64.encodeBase64(content.getBytes()));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,95,"assertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,98,// encode/decode random arrays from size 0 to size 11
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,99,public void testEncodeDecodeSmall() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,100,for(int i=0;i<12;i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,101,byte[] data = new byte[i];
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,102,_random.nextBytes(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,103,byte[] enc =  Base64.encodeBase64(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,104,"assertTrue(""\"""" + (new String(enc)) + ""\"" is Base64 data."",Base64.isArrayByteBase64(enc) );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,105,byte[] data2 = Base64.decodeBase64(enc);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,106,"assertTrue(toString(data) + "" equals "" + toString(data2),Arrays.equals(data,data2));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,110,// encode/decode a large random array
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,111,public void testEncodeDecodeRandom() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,112,for(int i=1;i<5;i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,113,byte[] data = new byte[_random.nextInt(10000)+1];
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,114,_random.nextBytes(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,115,byte[] enc =  Base64.encodeBase64(data);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,116,assertTrue(Base64.isArrayByteBase64(enc));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,117,byte[] data2 = Base64.decodeBase64(enc);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,118,"assertTrue(Arrays.equals(data,data2));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,122,public void testSingletons() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,123,"assertEquals(""AA=="",new String(Base64.encodeBase64(new byte[] { (byte)0 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,124,"assertEquals(""AQ=="",new String(Base64.encodeBase64(new byte[] { (byte)1 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,125,"assertEquals(""Ag=="",new String(Base64.encodeBase64(new byte[] { (byte)2 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,126,"assertEquals(""Aw=="",new String(Base64.encodeBase64(new byte[] { (byte)3 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,127,"assertEquals(""BA=="",new String(Base64.encodeBase64(new byte[] { (byte)4 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,128,"assertEquals(""BQ=="",new String(Base64.encodeBase64(new byte[] { (byte)5 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,129,"assertEquals(""Bg=="",new String(Base64.encodeBase64(new byte[] { (byte)6 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,130,"assertEquals(""Bw=="",new String(Base64.encodeBase64(new byte[] { (byte)7 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,131,"assertEquals(""CA=="",new String(Base64.encodeBase64(new byte[] { (byte)8 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,132,"assertEquals(""CQ=="",new String(Base64.encodeBase64(new byte[] { (byte)9 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,133,"assertEquals(""Cg=="",new String(Base64.encodeBase64(new byte[] { (byte)10 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,134,"assertEquals(""Cw=="",new String(Base64.encodeBase64(new byte[] { (byte)11 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,135,"assertEquals(""DA=="",new String(Base64.encodeBase64(new byte[] { (byte)12 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,136,"assertEquals(""DQ=="",new String(Base64.encodeBase64(new byte[] { (byte)13 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,137,"assertEquals(""Dg=="",new String(Base64.encodeBase64(new byte[] { (byte)14 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,138,"assertEquals(""Dw=="",new String(Base64.encodeBase64(new byte[] { (byte)15 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,139,"assertEquals(""EA=="",new String(Base64.encodeBase64(new byte[] { (byte)16 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,140,"assertEquals(""EQ=="",new String(Base64.encodeBase64(new byte[] { (byte)17 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,141,"assertEquals(""Eg=="",new String(Base64.encodeBase64(new byte[] { (byte)18 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,142,"assertEquals(""Ew=="",new String(Base64.encodeBase64(new byte[] { (byte)19 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,143,"assertEquals(""FA=="",new String(Base64.encodeBase64(new byte[] { (byte)20 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,144,"assertEquals(""FQ=="",new String(Base64.encodeBase64(new byte[] { (byte)21 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,145,"assertEquals(""Fg=="",new String(Base64.encodeBase64(new byte[] { (byte)22 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,146,"assertEquals(""Fw=="",new String(Base64.encodeBase64(new byte[] { (byte)23 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,147,"assertEquals(""GA=="",new String(Base64.encodeBase64(new byte[] { (byte)24 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,148,"assertEquals(""GQ=="",new String(Base64.encodeBase64(new byte[] { (byte)25 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,149,"assertEquals(""Gg=="",new String(Base64.encodeBase64(new byte[] { (byte)26 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,150,"assertEquals(""Gw=="",new String(Base64.encodeBase64(new byte[] { (byte)27 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,151,"assertEquals(""HA=="",new String(Base64.encodeBase64(new byte[] { (byte)28 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,152,"assertEquals(""HQ=="",new String(Base64.encodeBase64(new byte[] { (byte)29 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,153,"assertEquals(""Hg=="",new String(Base64.encodeBase64(new byte[] { (byte)30 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,154,"assertEquals(""Hw=="",new String(Base64.encodeBase64(new byte[] { (byte)31 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,155,"assertEquals(""IA=="",new String(Base64.encodeBase64(new byte[] { (byte)32 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,156,"assertEquals(""IQ=="",new String(Base64.encodeBase64(new byte[] { (byte)33 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,157,"assertEquals(""Ig=="",new String(Base64.encodeBase64(new byte[] { (byte)34 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,158,"assertEquals(""Iw=="",new String(Base64.encodeBase64(new byte[] { (byte)35 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,159,"assertEquals(""JA=="",new String(Base64.encodeBase64(new byte[] { (byte)36 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,160,"assertEquals(""JQ=="",new String(Base64.encodeBase64(new byte[] { (byte)37 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,161,"assertEquals(""Jg=="",new String(Base64.encodeBase64(new byte[] { (byte)38 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,162,"assertEquals(""Jw=="",new String(Base64.encodeBase64(new byte[] { (byte)39 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,163,"assertEquals(""KA=="",new String(Base64.encodeBase64(new byte[] { (byte)40 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,164,"assertEquals(""KQ=="",new String(Base64.encodeBase64(new byte[] { (byte)41 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,165,"assertEquals(""Kg=="",new String(Base64.encodeBase64(new byte[] { (byte)42 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,166,"assertEquals(""Kw=="",new String(Base64.encodeBase64(new byte[] { (byte)43 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,167,"assertEquals(""LA=="",new String(Base64.encodeBase64(new byte[] { (byte)44 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,168,"assertEquals(""LQ=="",new String(Base64.encodeBase64(new byte[] { (byte)45 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,169,"assertEquals(""Lg=="",new String(Base64.encodeBase64(new byte[] { (byte)46 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,170,"assertEquals(""Lw=="",new String(Base64.encodeBase64(new byte[] { (byte)47 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,171,"assertEquals(""MA=="",new String(Base64.encodeBase64(new byte[] { (byte)48 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,172,"assertEquals(""MQ=="",new String(Base64.encodeBase64(new byte[] { (byte)49 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,173,"assertEquals(""Mg=="",new String(Base64.encodeBase64(new byte[] { (byte)50 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,174,"assertEquals(""Mw=="",new String(Base64.encodeBase64(new byte[] { (byte)51 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,175,"assertEquals(""NA=="",new String(Base64.encodeBase64(new byte[] { (byte)52 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,176,"assertEquals(""NQ=="",new String(Base64.encodeBase64(new byte[] { (byte)53 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,177,"assertEquals(""Ng=="",new String(Base64.encodeBase64(new byte[] { (byte)54 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,178,"assertEquals(""Nw=="",new String(Base64.encodeBase64(new byte[] { (byte)55 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,179,"assertEquals(""OA=="",new String(Base64.encodeBase64(new byte[] { (byte)56 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,180,"assertEquals(""OQ=="",new String(Base64.encodeBase64(new byte[] { (byte)57 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,181,"assertEquals(""Og=="",new String(Base64.encodeBase64(new byte[] { (byte)58 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,182,"assertEquals(""Ow=="",new String(Base64.encodeBase64(new byte[] { (byte)59 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,183,"assertEquals(""PA=="",new String(Base64.encodeBase64(new byte[] { (byte)60 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,184,"assertEquals(""PQ=="",new String(Base64.encodeBase64(new byte[] { (byte)61 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,185,"assertEquals(""Pg=="",new String(Base64.encodeBase64(new byte[] { (byte)62 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,186,"assertEquals(""Pw=="",new String(Base64.encodeBase64(new byte[] { (byte)63 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,187,"assertEquals(""QA=="",new String(Base64.encodeBase64(new byte[] { (byte)64 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,188,"assertEquals(""QQ=="",new String(Base64.encodeBase64(new byte[] { (byte)65 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,189,"assertEquals(""Qg=="",new String(Base64.encodeBase64(new byte[] { (byte)66 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,190,"assertEquals(""Qw=="",new String(Base64.encodeBase64(new byte[] { (byte)67 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,191,"assertEquals(""RA=="",new String(Base64.encodeBase64(new byte[] { (byte)68 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,192,"assertEquals(""RQ=="",new String(Base64.encodeBase64(new byte[] { (byte)69 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,193,"assertEquals(""Rg=="",new String(Base64.encodeBase64(new byte[] { (byte)70 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,194,"assertEquals(""Rw=="",new String(Base64.encodeBase64(new byte[] { (byte)71 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,195,"assertEquals(""SA=="",new String(Base64.encodeBase64(new byte[] { (byte)72 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,196,"assertEquals(""SQ=="",new String(Base64.encodeBase64(new byte[] { (byte)73 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,197,"assertEquals(""Sg=="",new String(Base64.encodeBase64(new byte[] { (byte)74 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,198,"assertEquals(""Sw=="",new String(Base64.encodeBase64(new byte[] { (byte)75 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,199,"assertEquals(""TA=="",new String(Base64.encodeBase64(new byte[] { (byte)76 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,200,"assertEquals(""TQ=="",new String(Base64.encodeBase64(new byte[] { (byte)77 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,201,"assertEquals(""Tg=="",new String(Base64.encodeBase64(new byte[] { (byte)78 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,202,"assertEquals(""Tw=="",new String(Base64.encodeBase64(new byte[] { (byte)79 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,203,"assertEquals(""UA=="",new String(Base64.encodeBase64(new byte[] { (byte)80 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,204,"assertEquals(""UQ=="",new String(Base64.encodeBase64(new byte[] { (byte)81 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,205,"assertEquals(""Ug=="",new String(Base64.encodeBase64(new byte[] { (byte)82 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,206,"assertEquals(""Uw=="",new String(Base64.encodeBase64(new byte[] { (byte)83 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,207,"assertEquals(""VA=="",new String(Base64.encodeBase64(new byte[] { (byte)84 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,208,"assertEquals(""VQ=="",new String(Base64.encodeBase64(new byte[] { (byte)85 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,209,"assertEquals(""Vg=="",new String(Base64.encodeBase64(new byte[] { (byte)86 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,210,"assertEquals(""Vw=="",new String(Base64.encodeBase64(new byte[] { (byte)87 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,211,"assertEquals(""WA=="",new String(Base64.encodeBase64(new byte[] { (byte)88 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,212,"assertEquals(""WQ=="",new String(Base64.encodeBase64(new byte[] { (byte)89 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,213,"assertEquals(""Wg=="",new String(Base64.encodeBase64(new byte[] { (byte)90 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,214,"assertEquals(""Ww=="",new String(Base64.encodeBase64(new byte[] { (byte)91 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,215,"assertEquals(""XA=="",new String(Base64.encodeBase64(new byte[] { (byte)92 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,216,"assertEquals(""XQ=="",new String(Base64.encodeBase64(new byte[] { (byte)93 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,217,"assertEquals(""Xg=="",new String(Base64.encodeBase64(new byte[] { (byte)94 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,218,"assertEquals(""Xw=="",new String(Base64.encodeBase64(new byte[] { (byte)95 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,219,"assertEquals(""YA=="",new String(Base64.encodeBase64(new byte[] { (byte)96 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,"assertEquals(""YQ=="",new String(Base64.encodeBase64(new byte[] { (byte)97 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,221,"assertEquals(""Yg=="",new String(Base64.encodeBase64(new byte[] { (byte)98 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,222,"assertEquals(""Yw=="",new String(Base64.encodeBase64(new byte[] { (byte)99 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,223,"assertEquals(""ZA=="",new String(Base64.encodeBase64(new byte[] { (byte)100 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,224,"assertEquals(""ZQ=="",new String(Base64.encodeBase64(new byte[] { (byte)101 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,225,"assertEquals(""Zg=="",new String(Base64.encodeBase64(new byte[] { (byte)102 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,"assertEquals(""Zw=="",new String(Base64.encodeBase64(new byte[] { (byte)103 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,"assertEquals(""aA=="",new String(Base64.encodeBase64(new byte[] { (byte)104 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,230,public void testTriplets() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,"assertEquals(""AAAA"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"assertEquals(""AAAB"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"assertEquals(""AAAC"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)2 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"assertEquals(""AAAD"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)3 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"assertEquals(""AAAE"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)4 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"assertEquals(""AAAF"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)5 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"assertEquals(""AAAG"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)6 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,"assertEquals(""AAAH"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)7 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,"assertEquals(""AAAI"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)8 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,240,"assertEquals(""AAAJ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)9 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,241,"assertEquals(""AAAK"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)10 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,242,"assertEquals(""AAAL"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)11 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,243,"assertEquals(""AAAM"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)12 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,244,"assertEquals(""AAAN"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)13 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"assertEquals(""AAAO"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)14 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"assertEquals(""AAAP"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)15 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"assertEquals(""AAAQ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)16 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"assertEquals(""AAAR"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)17 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"assertEquals(""AAAS"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)18 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,250,"assertEquals(""AAAT"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)19 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,251,"assertEquals(""AAAU"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)20 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,252,"assertEquals(""AAAV"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)21 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,253,"assertEquals(""AAAW"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)22 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,254,"assertEquals(""AAAX"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)23 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,"assertEquals(""AAAY"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)24 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"assertEquals(""AAAZ"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)25 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,257,"assertEquals(""AAAa"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)26 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,258,"assertEquals(""AAAb"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)27 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,259,"assertEquals(""AAAc"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)28 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,260,"assertEquals(""AAAd"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)29 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,261,"assertEquals(""AAAe"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)30 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,262,"assertEquals(""AAAf"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)31 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,"assertEquals(""AAAg"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)32 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"assertEquals(""AAAh"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)33 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,265,"assertEquals(""AAAi"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)34 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,266,"assertEquals(""AAAj"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)35 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,267,"assertEquals(""AAAk"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)36 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,268,"assertEquals(""AAAl"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)37 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,269,"assertEquals(""AAAm"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)38 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,270,"assertEquals(""AAAn"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)39 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,271,"assertEquals(""AAAo"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)40 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"assertEquals(""AAAp"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)41 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,273,"assertEquals(""AAAq"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)42 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,274,"assertEquals(""AAAr"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)43 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,"assertEquals(""AAAs"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)44 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"assertEquals(""AAAt"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)45 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,277,"assertEquals(""AAAu"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)46 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,278,"assertEquals(""AAAv"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)47 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,279,"assertEquals(""AAAw"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)48 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,280,"assertEquals(""AAAx"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)49 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,281,"assertEquals(""AAAy"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)50 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,282,"assertEquals(""AAAz"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)51 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,"assertEquals(""AAA0"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)52 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"assertEquals(""AAA1"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)53 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,285,"assertEquals(""AAA2"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)54 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,286,"assertEquals(""AAA3"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)55 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,287,"assertEquals(""AAA4"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)56 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,288,"assertEquals(""AAA5"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)57 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,289,"assertEquals(""AAA6"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)58 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,290,"assertEquals(""AAA7"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)59 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,291,"assertEquals(""AAA8"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)60 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,292,"assertEquals(""AAA9"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)61 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,293,"assertEquals(""AAA+"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)62 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,294,"assertEquals(""AAA/"",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,297,public void testKnownEncodings() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,298,"assertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,299,"assertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\nbGFoIGJsYWg=\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,300,"assertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encodeBase64(""It was the best of times, it was the worst of times."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,301,"assertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,302,"assertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,303,"assertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,304,"assertEquals(""eHl6enkh"",new String(Base64.encodeBase64(""xyzzy!"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,307,public void testKnownDecodings() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,308,"assertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,309,"assertEquals(""It was the best of times, it was the worst of times."",new String(Base64.decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,310,"assertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,311,"assertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,312,"assertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"",new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,313,"assertEquals(""xyzzy!"",new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,316,public void testNonBase64() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,318,byte[] bArray = { '%' };
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,320,"assertFalse( ""Invalid Base64 array was incorrectly validated as "" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,321,"""an array of Base64 encoded data"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,322,Base64.isArrayByteBase64( bArray ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,324,boolean exceptionThrown = false;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,326,try {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,327,Base64 b64 = new Base64();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,328,b64.decode( bArray );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,330,catch( Exception e ) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,331,exceptionThrown = true;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,334,"assertTrue( ""Exception wasn't thrown when trying to decode "" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,335,"""invalid base64 encoded data"", exceptionThrown );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,339,public void testObjectDecodeWithInvalidParameter() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,340,boolean exceptionThrown = false;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,342,Base64 b64 = new Base64();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,344,try {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,345,"Object o = new String( ""Yadayadayada"" );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,346,b64.decode( o );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,347,} catch( Exception e ) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,348,exceptionThrown = true;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,351,"assertTrue( ""decode(Object) didn't throw an exception when passed a "" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,352,"""String object"", exceptionThrown );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,355,public void testObjectDecodeWithValidParameter() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,357,"String original = ""Hello World!"";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,358,byte[] bArray =
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,359,Base64.encodeBase64( (new String(original)).getBytes() );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,360,Object o = (Object) bArray;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,362,Base64 b64 = new Base64();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,363,Object oDecoded = (Object) b64.decode( o );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,364,byte[] baDecoded = (byte[]) oDecoded;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,365,String dest = new String( baDecoded );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,367,"assertTrue( ""dest string down not equal original"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,368,dest.equals( original ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,371,public void testObjectEncodeWithInvalidParameter() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,372,boolean exceptionThrown = false;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,374,Base64 b64 = new Base64();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,376,try {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,377,"Object o = new String( ""Yadayadayada"" );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,378,b64.encode( o );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,379,} catch( Exception e ) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,380,exceptionThrown = true;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,383,"assertTrue( ""encode(Object) didn't throw an exception when passed a "" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,384,"""String object"", exceptionThrown );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,387,public void testObjectEncodeWithValidParameter() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,389,"String original = ""Hello World!"";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,390,byte[] origBytes = original.getBytes();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,391,Object origObj = (Object) origBytes;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,393,Base64 b64 = new Base64();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,Object oEncoded = b64.encode( origObj );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,395,byte[] bArray =
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,396,Base64.decodeBase64( (byte[]) oEncoded );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,String dest = new String( bArray );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"assertTrue( ""dest string down not equal original"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,dest.equals( original ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,403,public void testDiscardingOfWhiteSpace() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,"String orig = ""I am a late night coder."";"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,byte[] encodedArray = Base64.encodeBase64( orig.getBytes() );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,StringBuffer intermediate =
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,new StringBuffer( new String(encodedArray) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"intermediate.insert( 2, ' ' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,"intermediate.insert( 5, '\t' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,"intermediate.insert( 10, '\r' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"intermediate.insert( 15, '\n' );"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,416,byte[] encodedWithWS = intermediate.toString().getBytes();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,byte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,419,String dest = new String( decodedWithWS );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,421,"assertTrue( ""Dest string doesn't eausl original"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,422,dest.equals( orig ) );
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,426,// -------------------------------------------------------- Private Methods
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,428,private String toString(byte[] data) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,429,StringBuffer buf = new StringBuffer();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,430,for(int i=0;i<data.length;i++) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,431,buf.append(data[i]);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,432,if(i != data.length-1) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,433,"buf.append("","");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,436,return buf.toString();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,private Random _random = new Random();

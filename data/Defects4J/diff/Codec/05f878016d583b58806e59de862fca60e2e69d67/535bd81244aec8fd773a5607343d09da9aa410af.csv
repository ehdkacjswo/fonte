is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,351, else {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,352,"inal byte[] buffer = ensureBufferSize(decodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,353,f (b >= 0 && b < this.decodeTable.length) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,354,inal int result = this.decodeTable[b];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,355,f (result >= 0) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,356,ontext.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,357,/ collect decoded bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,358,ontext.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,359,f (context.modulus == 0) { // we can output the 5 bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,360,uffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,361,uffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,362,uffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,363,uffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,364,uffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,352,"final byte[] buffer = ensureBufferSize(decodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,353,if (b >= 0 && b < this.decodeTable.length) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,354,final int result = this.decodeTable[b];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,355,if (result >= 0) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,356,context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,357,// collect decoded bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,358,context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,359,if (context.modulus == 0) { // we can output the 5 bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,360,buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,361,buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,362,buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,363,buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,364,buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,444, else {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,445,f (b >= 0 && b < DECODE_TABLE.length) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,446,inal int result = DECODE_TABLE[b];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,447,f (result >= 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,448,ontext.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,ontext.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,450,f (context.modulus == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,451,uffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,452,uffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,453,uffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,445,if (b >= 0 && b < DECODE_TABLE.length) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,446,final int result = DECODE_TABLE[b];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,447,if (result >= 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,448,context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,450,if (context.modulus == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,451,buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,452,buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,453,buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,289, else {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,290,inal String leftCharacter = parts[0];
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,291,inal String rightCharacter = parts[1];
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,293,f (leftCharacter.length() != 1 || rightCharacter.length() != 1) {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,294,"hrow new IllegalArgumentException(""Malformed folding statement - "" +"
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,295,"patterns are not single characters: "" + rawLine + "" in "" + location);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,290,final String leftCharacter = parts[0];
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,291,final String rightCharacter = parts[1];
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,298,"sciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,293,if (leftCharacter.length() != 1 || rightCharacter.length() != 1) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,294,"throw new IllegalArgumentException(""Malformed folding statement - "" +"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,295,"""patterns are not single characters: "" + rawLine + "" in "" + location);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,298,"asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));"
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,306, else {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,307,ry {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,308,inal String pattern = stripQuotes(parts[0]);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,309,inal String replacement1 = stripQuotes(parts[1]);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,310,inal String replacement2 = stripQuotes(parts[2]);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,311,inal String replacement3 = stripQuotes(parts[3]);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,313,"inal Rule r = new Rule(pattern, replacement1, replacement2, replacement3);"
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,314,inal char patternKey = r.pattern.charAt(0);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,315,ist<Rule> rules = ruleMapping.get(patternKey);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,316,f (rules == null) {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,317,ules = new ArrayList<Rule>();
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,318,"uleMapping.put(patternKey, rules);"
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,320,ules.add(r);
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,321, catch (final IllegalArgumentException e) {
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,322,hrow new IllegalStateException(
False,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,323,"Problem parsing line '"" + currentLine + ""' in "" + location, e);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,306,try {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,307,final String pattern = stripQuotes(parts[0]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,308,final String replacement1 = stripQuotes(parts[1]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,309,final String replacement2 = stripQuotes(parts[2]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,310,final String replacement3 = stripQuotes(parts[3]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,312,"final Rule r = new Rule(pattern, replacement1, replacement2, replacement3);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,313,final char patternKey = r.pattern.charAt(0);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,314,List<Rule> rules = ruleMapping.get(patternKey);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,315,if (rules == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,316,rules = new ArrayList<Rule>();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,317,"ruleMapping.put(patternKey, rules);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,319,rules.add(r);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,320,} catch (final IllegalArgumentException e) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,321,throw new IllegalStateException(
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,322,"""Problem parsing line '"" + currentLine + ""' in "" + location, e);"
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,166, else {
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,167,eturn name;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,167,return name;
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,338, else {
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,339,eturn Math.abs(SIX - strB.length());
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,338,return Math.abs(SIX - strB.length());
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,422, else {
False,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,423,eturn name;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,421,return name;
False,src/main/java/org/apache/commons/codec/language/Nysiis.java,src/main/java/org/apache/commons/codec/language/Nysiis.java,142, else {
False,src/main/java/org/apache/commons/codec/language/Nysiis.java,src/main/java/org/apache/commons/codec/language/Nysiis.java,143,eturn CHARS_C;
True,src/main/java/org/apache/commons/codec/language/Nysiis.java,src/main/java/org/apache/commons/codec/language/Nysiis.java,143,return CHARS_C;
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,376, else {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,377,"eturn new Phoneme(ph, Languages.ANY_LANGUAGE);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,377,"return new Phoneme(ph, Languages.ANY_LANGUAGE);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,397, else {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,398,eturn parsePhoneme(ph);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,397,return parsePhoneme(ph);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,439, else {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,440,"ines.putAll(parseRules(createScanner(incl), location + ""->"" + incl));"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,438,"lines.putAll(parseRules(createScanner(incl), location + ""->"" + incl));"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,448, else {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,449,ry {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,450,inal String pat = stripQuotes(parts[0]);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,451,inal String lCon = stripQuotes(parts[1]);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,452,inal String rCon = stripQuotes(parts[2]);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,453,inal PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,454,inal int cLine = currentLine;
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,455,"inal Rule r = new Rule(pat, lCon, rCon, ph) {"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,456,rivate final int myLine = cLine;
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,457,rivate final String loc = location;
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,459,Override
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,460,ublic String toString() {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,461,inal StringBuilder sb = new StringBuilder();
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,462,"b.append(""Rule"");"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,463,"b.append(""{line="").append(myLine);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,464,"b.append("", loc='"").append(loc).append('\'');"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,465,"b.append("", pat='"").append(pat).append('\'');"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,466,"b.append("", lcon='"").append(lCon).append('\'');"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,467,"b.append("", rcon='"").append(rCon).append('\'');"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,468,b.append('}');
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,469,eturn sb.toString();
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,472,"inal String patternKey = r.pattern.substring(0,1);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,473,ist<Rule> rules = lines.get(patternKey);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,474,f (rules == null) {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,475,ules = new ArrayList<Rule>();
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,476,"ines.put(patternKey, rules);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,446,try {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,447,final String pat = stripQuotes(parts[0]);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,448,final String lCon = stripQuotes(parts[1]);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,449,final String rCon = stripQuotes(parts[2]);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,450,final PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,451,final int cLine = currentLine;
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,452,"final Rule r = new Rule(pat, lCon, rCon, ph) {"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,453,private final int myLine = cLine;
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,454,private final String loc = location;
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,456,@Override
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,457,public String toString() {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,458,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,459,"sb.append(""Rule"");"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,460,"sb.append(""{line="").append(myLine);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,461,"sb.append("", loc='"").append(loc).append('\'');"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,462,"sb.append("", pat='"").append(pat).append('\'');"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,463,"sb.append("", lcon='"").append(lCon).append('\'');"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,464,"sb.append("", rcon='"").append(rCon).append('\'');"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,465,sb.append('}');
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,466,return sb.toString();
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,478,ules.add(r);
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,479, catch (final IllegalArgumentException e) {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,480,"hrow new IllegalStateException(""Problem parsing line '"" + currentLine + ""' in "" +"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,481,"ocation, e);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,469,"final String patternKey = r.pattern.substring(0,1);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,470,List<Rule> rules = lines.get(patternKey);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,471,if (rules == null) {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,472,rules = new ArrayList<Rule>();
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,473,"lines.put(patternKey, rules);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,475,rules.add(r);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,476,} catch (final IllegalArgumentException e) {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,477,"throw new IllegalStateException(""Problem parsing line '"" + currentLine + ""' in "" +"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,478,"location, e);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,516, else {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,517,eturn new RPattern() {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,518,Override
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,519,ublic boolean isMatch(final CharSequence input) {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,520,eturn input.equals(content);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,513,return new RPattern() {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,514,@Override
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,515,public boolean isMatch(final CharSequence input) {
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,516,return input.equals(content);
False,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,224, else {
False,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,225,uffer.write(b);
False,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,226,eturn 1;
True,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,225,buffer.write(b);
True,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,226,return 1;
False,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,40, else {
False,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,41,eturn EOF;
True,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,41,return EOF;
False,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,50, else {
False,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,51,eturn EOF;
True,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,50,return EOF;
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,240, else {
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,241,"eturn engine.encode(input, languageSet);"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,241,"return engine.encode(input, languageSet);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,18,* NOTE ABOUT PROVENANCE:
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,20,* This source file is called ApacheModifiedMiGBase64.java.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,21,* We took the BSD-licensed MiGBase64.java file from SourceForge
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,22,"* on January 28th, 2013 (http://migbase64.sourceforge.net/), and"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,23,* modified it to make it suitable for inclusion inside Apache
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,24,* Commons-Codec.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,26,* The original file is licensed according to the BSD 2-clause
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,27,"* license (see below, after the section titled ""Licence (BSD)""."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,28,* You should also be able to obtain the original file as
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,29,"* ""MiGBase64.original"" within the same source directory as this file."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,33,package org.apache.commons.codec.binary;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,35,import java.util.Arrays;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,38,* <pre>====================================================</pre>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,39,"* Modified by Apache Software Foundation on February 18th, 2013, in the following ways:"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,40,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,41,"* - Set all methods to ""package"" level visibility, since this is strictly"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,42,* meant to be back-end for our non-streaming Base64 implementation.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,43,* (Streaming Base64 still uses our original implementation).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,44,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,45,* - Added support for the Apache Commons Codec variations to make all the Commons-Codec
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,46,* unit tests pass:
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,47,* <ol>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,48,* <li> Ability to alter line-length from default of 76</li>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,49,"* <li> If we are using line-separators, must always end with a line-separator, no matter"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,50,* length of final line.</li>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,51,* <li> Make '=' and '==' padding optional when decoding.</li>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,52,"* <li> Make decoding of Base64 with inner padding (e.g., AA==AA==) consistent with Commons-Codec..</li>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,53,"* <li> Add support for URL-Safe Base64 alphabet (which, incidentally, omits '=' and '==' padding).</li>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,54,* </ol>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,55,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,56,"* - And thus Apache Commons-Codec is now as fast as MiGBase64, since it uses MiGBase64 under the"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,57,* hood.  Yay!  (Non-streaming encode speed-up is around 200%).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,58,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,59,"* And now, back to your regular scheduled programming:"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,60,* <pre>====================================================</pre>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,61,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,62,* A very fast and memory efficient class to encode and decode to and from BASE64 in full accordance
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,63,* with RFC 2045.<br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,64,"* On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is about 10 times faster"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,65,* on small arrays (10 - 1000 bytes) and 2-3 times as fast on larger arrays (10000 - 1000000 bytes)
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,66,* compared to <code>sun.misc.Encoder()/Decoder()</code>.<br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,67,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,68,* On byte arrays the encoder is about 20% faster than Jakarta Commons Codec for encode and
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,69,* about 50% faster for decoding large arrays. This implementation is about twice as fast on very small
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,70,* arrays (&lt 30 bytes). If source/destination is a <code>String</code> this
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,71,* version is about three times as fast due to the fact that the Commons Codec result has to be recoded
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,72,"* to a <code>String</code> from <code>byte[]</code>, which is very expensive.<br><br>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,73,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,74,"* This encode/decode algorithm doesn't create any temporary arrays as many other codecs do, it only"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,75,* allocates the resulting array. This produces less garbage and it is possible to handle arrays twice
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,76,* as large as algorithms that create a temporary array. (E.g. Jakarta Commons Codec). It is unknown
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,77,* whether Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but since performance
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,78,* is quite low it probably does.<br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,79,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,80,* The encoder produces the same output as the Sun one except that the Sun's encoder appends
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,81,* a trailing line separator if the last character isn't a pad. Unclear why but it only adds to the
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,82,* length and is probably a side effect. Both are in conformance with RFC 2045 though.<br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,83,* Commons codec seem to always att a trailing line separator.<br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,84,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,85,* <b>Note!</b>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,86,* The encode/decode method pairs (types) come in three versions with the <b>exact</b> same algorithm and
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,87,* thus a lot of code redundancy. This is to not create any temporary arrays for transcoding to/from different
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,88,* format types. The methods not used can simply be commented out.<br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,89,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,90,"* <S>There is also a ""fast"" version of all decode methods that works the same way as the normal ones, but"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,91,"* har a few demands on the decoded input. Normally though, these fast verions should be used if the source if"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,92,* the input is known and it hasn't bee tampered with.</S> (- removed for ApacheModifiedMiGBase64). <br><br>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,93,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,94,"* If you find the code useful or you find a bug, please send me a note at base64 @ miginfocom . com."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,95,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,96,* Licence (BSD):
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,98,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,99,"* Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,100,* All rights reserved.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,101,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,102,"* Redistribution and use in source and binary forms, with or without modification,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,103,* are permitted provided that the following conditions are met:
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,104,"* Redistributions of source code must retain the above copyright notice, this list"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,105,* of conditions and the following disclaimer.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,106,"* Redistributions in binary form must reproduce the above copyright notice, this"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,107,* list of conditions and the following disclaimer in the documentation and/or other
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,108,* materials provided with the distribution.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,109,* Neither the name of the MiG InfoCom AB nor the names of its contributors may be
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,110,* used to endorse or promote products derived from this software without specific
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,111,* prior written permission.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,112,* <p/>
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,113,"* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,114,"* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,115,* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,116,"* IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,117,"* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,118,"* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,119,"* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,120,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,121,"* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,122,* OF SUCH DAMAGE.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,124,* @author Mikael Grev
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,125,*         Date: 2004-aug-02
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,126,*         Time: 11:31:11
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,127,* @version 2.2
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,130,public final class ApacheModifiedMiGBase64 {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,131,"// Marked the class public so that it shows up in javadoc generation.  All methods are static ""package"" level."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,133,"private final static byte[] CRLF = {'\r', '\n'};"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,135,private static final char[] CA =
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,136,"""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".toCharArray();"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,138,private static final char[] CA_URL_SAFE =
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,139,"""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"".toCharArray();"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,141,private static final int[] IA = new int[256];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,144,* Private constructor to prevent instantiation.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,146,private ApacheModifiedMiGBase64() {}
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,148,static {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,149,"Arrays.fill(IA, -1);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,150,"for (int i = 0, iS = CA.length; i < iS; i++) {"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,151,IA[CA[i]] = i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,153,// Store the URL_SAFE values in the same IA array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,154,"// This way we can auto-decode URL-SAFE or standard alphabet, without"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,155,// consumer needing to specify decode alphabet ahead of time:
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,156,IA[CA_URL_SAFE[i]] = i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,158,IA['='] = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,162,* Decodes a BASE64 encoded char array. All illegal characters will be ignored and can handle both arrays with
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,163,* and without line separators.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,165,* @param sArr The source array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,166,* @return The decoded array of bytes. May be of length 0.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,168,static byte[] decode(final char[] sArr) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,169,final int sLen = sArr != null ? sArr.length : 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,170,if (sLen == 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,171,return new byte[0];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,174,"// Find earliest pad character so that we can decode things like ""AA==AA=="" consistently."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,175,int padPos = sLen;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,176,int padCount = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,177,for (int i = sLen - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,178,if (sArr[i] == '=') {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,179,padPos = i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,180,padCount = 1;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,181,if (i + 1 < sLen && sArr[i + 1] == '=') {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,182,padCount = 2;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,187,"// Count illegal characters (including '\r', '\n') to know what size the returned array will be,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,188,// so we don't have to reallocate & copy it later.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,189,"int sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,190,for (int i = 0; i < padPos; i++) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,191,if (IA[sArr[i]] < 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,192,sepCnt++;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,196,final int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,197,if (len <= 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,198,return new byte[0];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,200,final byte[] dArr = new byte[len];       // Preallocate byte[] of exact length
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,201,int d = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,202,int i = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,203,try {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,204,for (int s = 0; d < len; ) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,205,"// Assemble three bytes into an int from four ""valid"" characters."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,206,i = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,207,for (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,208,int c = IA[sArr[s++]];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,209,if (c >= 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,210,i |= c << (18 - j * 6);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,211,} else {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,212,j--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,215,// Add the bytes
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,216,dArr[d++] = (byte) (i >> 16);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,217,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,218,dArr[d++] = (byte) (i >> 8);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,219,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,220,dArr[d++] = (byte) i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,224,} catch (ArrayIndexOutOfBoundsException aioobe) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,225,// Handle url-safe input (with no padding).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,226,dArr[d++] = (byte) (i >> 16);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,227,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,228,dArr[d++] = (byte) (i >> 8);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,229,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,230,dArr[d] = (byte) i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,234,return dArr;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,238,* Decodes a BASE64 encoded byte array. All illegal characters will be ignored and can handle both arrays with
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,239,* and without line separators.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,241,* @param sArr The source array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,242,* @return The decoded array of bytes. May be of length 0.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,244,static byte[] decode(final byte[] sArr) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,245,final int sLen = sArr != null ? sArr.length : 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,246,if (sLen == 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,247,return new byte[0];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,250,"// Find earliest pad character so that we can decode things like ""AA==AA=="" consistently."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,251,int padPos = sLen;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,252,int padCount = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,253,for (int i = sLen - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,254,if (sArr[i] == '=') {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,255,padPos = i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,256,padCount = 1;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,257,if (i + 1 < sLen && sArr[i + 1] == '=') {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,258,padCount = 2;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,263,"// Count illegal characters (including '\r', '\n') to know what size the returned array will be,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,264,// so we don't have to reallocate & copy it later.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,265,"int sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,266,for (int i = 0; i < padPos; i++) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,267,if (IA[sArr[i] & 0xff] < 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,268,sepCnt++;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,272,final int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,273,if (len <= 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,274,return new byte[0];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,276,final byte[] dArr = new byte[len];       // Preallocate byte[] of exact length
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,277,int d = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,278,int i = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,279,try {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,280,for (int s = 0; d < len; ) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,281,"// Assemble three bytes into an int from four ""valid"" characters."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,282,i = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,283,for (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,284,int c = IA[sArr[s++] & 0xff];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,285,if (c >= 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,286,i |= c << (18 - j * 6);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,287,} else {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,288,j--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,292,// Add the bytes
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,293,dArr[d++] = (byte) (i >> 16);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,294,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,295,dArr[d++] = (byte) (i >> 8);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,296,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,297,dArr[d++] = (byte) i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,301,} catch (ArrayIndexOutOfBoundsException aioobe) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,302,// Handle url-safe input (with no padding).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,303,dArr[d++] = (byte) (i >> 16);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,304,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,305,dArr[d++] = (byte) (i >> 8);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,306,if (d < len) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,307,dArr[d] = (byte) i;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,311,return dArr;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,315,* Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,317,* @param sArr          The bytes to convert.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,318,"* @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,319,*                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,320,*                      little faster.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,321,"* @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,322,* @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,323,* @return A BASE64 encoded array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,325,"static byte[] encodeToByte(byte[] sArr, final boolean lineSep, boolean urlSafe, int maxResultSize) {"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,326,"return encodeToByte(sArr, lineSep, urlSafe, maxResultSize, CRLF, 76);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,330,* Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,332,* @param sArr          The bytes to convert.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,333,"* @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,334,*                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,335,*                      little faster.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,336,"* @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,337,* @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,338,"* @param lineSeparator Sequence of bytes to use as the line separator (typically {'\r','\n'}).  Ignored"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,339,*                      if <code>lineSep</code> is set to false.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,340,* @param lineLen       Number of characters to write out per line before writing the lineSeparator
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,341,*                      sequence.  Ignored if <code>lineSep</code> is set to false.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,342,* @return A BASE64 encoded array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,344,static byte[] encodeToByte(
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,345,"final byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize,"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,346,"final byte[] lineSeparator, final int lineLen"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,348,if (sArr == null || sArr.length == 0) { return sArr; }
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,350,final int sLen = sArr.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,351,final int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,352,final int left = sLen - eLen;                           // A value between 0 and 2.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,353,final int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,354,int dLen = cCnt + (lineSep ? (cCnt - 1) / lineLen * lineSeparator.length : 0); // Length of returned array
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,356,// org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,357,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,358,dLen += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,361,final char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,362,if (urlSafe && left > 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,363,dLen--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,364,if (left != 2) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,365,dLen--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,368,"checkLen(dLen, maxResultSize);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,369,final byte[] dArr = new byte[dLen];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,371,// Encode even 24-bits
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,372,int charCount = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,373,"for (int s = 0, d = 0; s < eLen; ) {"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,374,"// Copy next three bytes into lower 24 bits of int, paying attension to sign."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,375,int i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,377,// Encode the int into four chars
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,378,dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 18) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,379,dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 12) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,380,dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,381,dArr[d++] = (byte) ENCODE_ARRAY[i & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,382,charCount += 4;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,384,// Add optional line separator
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,385,if (lineSep && charCount % lineLen <= 3 && d < dLen - lineSeparator.length) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,386,"System.arraycopy(lineSeparator, 0, dArr, d, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,387,d += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,391,// Make space for our final CRLF.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,392,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,393,dLen -= lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,396,// Pad and encode last bits if source isn't an even 24 bits.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,397,if (left > 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,398,// Prepare the int
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,399,int i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,401,// Set last four chars
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,402,// (url-safe omits the '=' padding).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,403,if (urlSafe && left == 2) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,404,dArr[dLen - 3] = (byte) ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,405,dArr[dLen - 2] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,406,dArr[dLen - 1] = (byte) ENCODE_ARRAY[i & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,407,} else if (urlSafe) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,408,dArr[dLen - 2] = (byte) ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,409,dArr[dLen - 1] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,410,} else {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,411,dArr[dLen - 4] = (byte) ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,412,dArr[dLen - 3] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,413,dArr[dLen - 2] = (byte) (left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=');
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,414,dArr[dLen - 1] = '=';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,418,// And now we append our final CRLF if necessary.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,419,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,420,dLen += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,421,"System.arraycopy(lineSeparator, 0, dArr, dLen - lineSeparator.length, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,423,return dArr;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,427,* Encodes a raw byte array into a BASE64 <code>char[]</code> representation in accordance with RFC 2045.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,429,* @param sArr          The bytes to convert.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,430,"* @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,431,*                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,432,*                      little faster.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,433,"* @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,434,* @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,435,* @return A BASE64 encoded array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,437,static char[] encodeToChar(
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,438,"final byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,440,if (sArr == null) { return null; }
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,441,if (sArr.length == 0) { return new char[0]; }
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,443,final int sLen = sArr.length;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,444,final int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,445,final int left = sLen - eLen;                           // A value between 0 and 2.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,446,final int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,447,int dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,449,// org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,450,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,451,dLen += 2;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,454,final char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,455,if (urlSafe && left > 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,456,dLen--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,457,if (left != 2) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,458,dLen--;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,461,"checkLen(dLen, maxResultSize);"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,462,final char[] dArr = new char[dLen];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,464,// Encode even 24-bits
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,465,"for (int s = 0, d = 0, cc = 0; s < eLen; ) {"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,466,"// Copy next three bytes into lower 24 bits of int, paying attension to sign."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,467,int i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,469,// Encode the int into four chars
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,470,dArr[d++] = ENCODE_ARRAY[(i >>> 18) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,471,dArr[d++] = ENCODE_ARRAY[(i >>> 12) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,472,dArr[d++] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,473,dArr[d++] = ENCODE_ARRAY[i & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,475,// Add optional line separator
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,476,if (lineSep && ++cc == 19 && d < dLen - 2) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,477,dArr[d++] = '\r';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,478,dArr[d++] = '\n';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,479,cc = 0;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,483,// Make space for our final CRLF.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,484,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,485,dLen -= 2;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,488,// Pad and encode last bits if source isn't even 24 bits.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,489,if (left > 0) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,490,// Prepare the int
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,491,int i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,493,// Set last four chars
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,494,// (url-safe omits the '=' padding).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,495,if (urlSafe && left == 2) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,496,dArr[dLen - 3] = ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,497,dArr[dLen - 2] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,498,dArr[dLen - 1] = ENCODE_ARRAY[i & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,499,} else if (urlSafe) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,500,dArr[dLen - 2] = ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,501,dArr[dLen - 1] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,502,} else {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,503,dArr[dLen - 4] = ENCODE_ARRAY[i >> 12];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,504,dArr[dLen - 3] = ENCODE_ARRAY[(i >>> 6) & 0x3f];
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,505,dArr[dLen - 2] = left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,506,dArr[dLen - 1] = '=';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,510,// And now we append our final CRLF if necessary.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,511,if (lineSep) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,512,dLen += 2;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,513,dArr[dLen - 2] = '\r';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,514,dArr[dLen - 1] = '\n';
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,516,return dArr;
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,520,* Encodes a raw byte array into a BASE64 <code>String</code> representation i accordance with RFC 2045.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,522,* @param sArr          The bytes to convert.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,523,"* @param lineSep       Optional ""\r\n"" after 76 characters, unless end of file.<br>"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,524,*                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,525,*                      little faster.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,526,"* @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/)."
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,527,* @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,528,* @return A BASE64 encoded array.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,530,static String encodeToString(
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,531,"byte[] sArr, boolean lineSep, boolean urlSafe, int maxResultSize"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,533,if (sArr == null) { return null; }
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,534,"if (sArr.length == 0) { return """"; }"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,536,// Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,537,"return new String(encodeToChar(sArr, lineSep, urlSafe, maxResultSize));"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,541,"private static void checkLen(int dLen, int maxResultSize) {"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,542,if (dLen > maxResultSize) {
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,543,"throw new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,544,dLen +
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,545,""") than the specified maximum size of "" +"
True,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java,546,maxResultSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,483,@Override
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,484,public byte[] decode(final byte[] pArray) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,485,if (pArray == null || pArray.length == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,486,return pArray;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,488,return ApacheModifiedMiGBase64.decode(pArray);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,491,@Override
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,492,public byte[] encode(final byte[] pArray) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,493,if (pArray == null || pArray.length == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,494,return pArray;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,496,return ApacheModifiedMiGBase64.encodeToByte(
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,497,"pArray, lineSeparator != null, isUrlSafe(), Integer.MAX_VALUE, lineSeparator, lineLength"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,566,"eturn StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,585,return ApacheModifiedMiGBase64.encodeToString(
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,586,"binaryData, false, false, Integer.MAX_VALUE"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,592,"eturn StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,613,return ApacheModifiedMiGBase64.encodeToString(
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,614,"binaryData, false, true, Integer.MAX_VALUE"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,659,f (binaryData == null || binaryData.length == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,660,eturn binaryData;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,663,/ Create this so can use the super-class method
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,664,/ Also ensures that the same roundings are performed by the ctor and the code
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,665,"inal Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,666,inal long len = b64.getEncodedLength(binaryData);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,667,f (len > maxResultSize) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,668,"hrow new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,669,en +
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,670,") than the specified maximum size of "" +"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,671,axResultSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,674,eturn b64.encode(binaryData);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,682,return ApacheModifiedMiGBase64.encodeToByte(
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,683,"binaryData, isChunked, urlSafe, maxResultSize"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,686,eturn new Base64().decode(base64String);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,697,if (base64String == null) { return null; }
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,698,"if ("""".equals(base64String)) { return new byte[0]; }"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,700,return ApacheModifiedMiGBase64.decode(base64String.toCharArray());
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,697,eturn new Base64().decode(base64Data);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,711,if (base64Data == null || base64Data.length == 0) { return base64Data; }
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,713,return ApacheModifiedMiGBase64.decode(base64Data);

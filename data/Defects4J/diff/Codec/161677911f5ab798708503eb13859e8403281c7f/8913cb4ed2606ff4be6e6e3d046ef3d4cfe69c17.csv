is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,30,import java.util.TreeSet;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,64,ublic PhonemeBuilder append(String str) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,65,public PhonemeBuilder append(CharSequence str) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,94,ist<String> sorted = new ArrayList<String>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,96,or (Rule.Phoneme ph : this.phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,97,orted.add(ph.getPhonemeText());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,100,ollections.sort(sorted);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,97,// System.err.println(this.phonemes.getClass());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,103,or (String ph : sorted) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,99,for (Rule.Phoneme ph : this.phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,106,b.append(ph);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,102,sb.append(ph.getPhonemeText());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,115,rivate final String input;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,111,private final CharSequence input;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,121,"ublic RulesApplication(List<Rule> finalRules, String input, PhonemeBuilder phonemeBuilder, int i) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,117,"public RulesApplication(List<Rule> finalRules, CharSequence input, PhonemeBuilder phonemeBuilder, int i) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,230,et<Rule.Phoneme> phonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,226,Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,tring phonemeText = phoneme.getPhonemeText();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,230,CharSequence phonemeText = phoneme.getPhonemeText();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,244,"ubBuilder = subBuilder.append(phonemeText.substring(i, i + 1));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,240,"subBuilder = subBuilder.append(phonemeText.subSequence(i, i + 1));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,"eturn encode(remainder) + ""-"" + encode(combined);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,330,"return ""("" + encode(remainder) + "")-("" + encode(combined) + "")"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,341,"eturn encode(remainder) + ""-"" + encode(combined);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,337,"return ""("" + encode(remainder) + "")-("" + encode(combined) + "")"";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,31,import java.util.regex.Matcher;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,81,ublic static class Phoneme implements PhonemeExpr {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,82,rivate final String phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,82,"public static class Phoneme implements PhonemeExpr, Comparable<Phoneme> {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,83,private final CharSequence phonemeText;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,85,"ublic Phoneme(String phonemeText, Languages.LanguageSet languages) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,86,"public Phoneme(CharSequence phonemeText, Languages.LanguageSet languages) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,90,ublic Phoneme append(String str) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,91,"eturn new Phoneme(this.phonemeText + str, this.languages);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,91,public Phoneme append(CharSequence str) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,92,"return new Phoneme(new AppendableCharSeqeuence(this.phonemeText, str), this.languages);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,102,ublic String getPhonemeText() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,103,public CharSequence getPhonemeText() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,107,"eturn new Phoneme(this.phonemeText + right.phonemeText, this.languages.restrictTo(right.languages));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,108,"return new Phoneme(new AppendableCharSeqeuence(this.phonemeText, right.phonemeText), this.languages.restrictTo(right.languages));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,111,public int compareTo(Phoneme o) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,112,for (int i = 0; i < phonemeText.length(); i++) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,113,if (i >= o.phonemeText.length())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,114,return +1;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,115,int c = phonemeText.charAt(i) - o.phonemeText.charAt(i);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,116,if (c != 0)
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,117,return c;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,120,if (phonemeText.length() < o.phonemeText.length())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,121,return -1;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,123,return 0;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,356,rivate final Pattern lContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,372,private final RPattern lContext;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,362,rivate final Pattern rContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,378,private final RPattern rContext;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,378,"his.lContext = Pattern.compile(lContext + ""$"");"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,379,"his.rContext = Pattern.compile(""^"" + rContext + "".*"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,394,"this.lContext = pattern(lContext + ""$"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,395,"this.rContext = pattern(""^"" + rContext);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,388,ublic Pattern getLContext() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,404,public RPattern getLContext() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,393,/ * Decides if the language restriction for this rule applies.
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,395,/ * @param languageArg
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,396,/ * a Set of Strings giving the names of the languages in scope
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,397,"/ * @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,399,/ public boolean languageMatches(Set<String> languageArg) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,400,/ if (!languageArg.contains(Languages.ANY) && !this.languages.isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,401,/ if (ALL.equals(this.logical) && !languageArg.containsAll(this.languages)) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,402,/ return false;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,403,/ } else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,404,/ Set<String> isect = new HashSet<String>(languageArg);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,405,/ isect.retainAll(this.languages);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,406,/ return !isect.isEmpty();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,408,/ } else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,409,/ return true;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,436,ublic Pattern getRContext() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,431,public RPattern getRContext() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,449,"ublic boolean patternAndContextMatches(String input, int i) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,444,"public boolean patternAndContextMatches(CharSequence input, int i) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,461,"oolean patternMatches = input.substring(i, ipl).equals(this.pattern);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,462,oolean rContextMatches = this.rContext.matcher(input.substring(ipl)).find();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,463,"oolean lContextMatches = this.lContext.matcher(input.substring(0, i)).find();"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,456,"boolean patternMatches = input.subSequence(i, ipl).equals(this.pattern);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,457,"boolean rContextMatches = this.rContext.matcher(input.subSequence(ipl, input.length())).find();"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,458,"boolean lContextMatches = this.lContext.matcher(input.subSequence(0, i)).find();"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,464,"* A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,466,public static interface RPattern {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,467,public RMatcher matcher(CharSequence input);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,471,"* A minimal wrapper around the functionality of Matcher that we use, to allow for alternate implementations."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,473,public static interface RMatcher {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,474,public boolean find();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,478,"* Attempt to compile the regex into direct string ops, falling back to Pattern and Matcher in the worst case."
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,480,* @param regex
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,481,*            the regular expression to compile
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,482,* @return an RPattern that will match this regex
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,484,private static RPattern pattern(final String regex) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,485,"boolean startsWith = regex.startsWith(""^"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,486,"boolean endsWith = regex.endsWith(""$"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,487,"final String content = regex.substring(startsWith ? 1 : 0, endsWith ? regex.length() - 1 : regex.length());"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,488,"boolean boxes = content.contains(""["");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,490,if (!boxes) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,491,if (startsWith && endsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,492,// exact match
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,493,if (content.length() == 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,494,// empty
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,495,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,496,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,497,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,498,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,499,return input.length() == 0;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,504,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,505,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,506,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,507,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,508,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,509,return input.equals(content);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,515,} else if ((startsWith || endsWith) && content.length() == 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,516,// matches every string
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,517,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,518,public RMatcher matcher(CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,519,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,520,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,521,return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,526,} else if (startsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,527,// matches from start
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,528,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,529,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,530,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,531,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,532,"return startsWith(input, content);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,537,} else if (endsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,538,// matches from start
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,539,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,540,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,541,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,542,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,543,"return endsWith(input, content);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,549,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,550,"boolean startsWithBox = content.startsWith(""["");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,551,"boolean endsWithBox = content.endsWith(""]"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,553,if (startsWithBox && endsWithBox) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,554,"String boxContent = content.substring(1, content.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,555,"if (!boxContent.contains(""["")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,556,// box containing alternatives
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,557,"boolean negate = boxContent.startsWith(""^"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,558,if (negate) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,559,boxContent = boxContent.substring(1);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,561,final String bContent = boxContent;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,562,final boolean shouldMatch = !negate;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,564,if (startsWith && endsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,565,// exact match
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,566,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,567,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,568,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,569,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,570,"return input.length() == 1 && (contains(bContent, input.charAt(0)) == shouldMatch);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,575,} else if (startsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,576,// first char
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,577,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,578,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,579,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,580,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,581,"return input.length() > 0 && (contains(bContent, input.charAt(0)) == shouldMatch);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,586,} else if (endsWith) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,587,// last char
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,588,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,589,public RMatcher matcher(final CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,590,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,591,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,592,"return input.length() > 0 && (contains(bContent, input.charAt(input.length() - 1)) == shouldMatch);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,602,"// System.out.println(""Couldn't optimize regex: "" + regex);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,603,return new RPattern() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,604,Pattern pattern = Pattern.compile(regex);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,606,public RMatcher matcher(CharSequence input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,607,final Matcher matcher = pattern.matcher(input);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,608,return new RMatcher() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,609,public boolean find() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,610,return matcher.find();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,617,"private static boolean startsWith(CharSequence input, CharSequence prefix) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,618,if (prefix.length() > input.length())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,619,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,620,for (int i = 0; i < prefix.length(); i++) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,621,if (input.charAt(i) != prefix.charAt(i)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,622,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,625,return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,628,"private static boolean endsWith(CharSequence input, CharSequence suffix) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,629,if (suffix.length() > input.length())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,630,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,631,"for (int i = input.length() - 1, j = suffix.length() - 1; j >= 0; i--, j--) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,632,if (input.charAt(i) != suffix.charAt(j)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,633,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,636,return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,639,"private static boolean contains(CharSequence chars, char input) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,640,for (int i = 0; i < chars.length(); i++) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,641,if (chars.charAt(i) == input) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,642,return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,645,return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,648,private static class AppendableCharSeqeuence implements CharSequence {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,649,private final CharSequence left;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,650,private final CharSequence right;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,651,private final int length;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,652,private String contentCache = null;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,654,"private AppendableCharSeqeuence(CharSequence left, CharSequence right) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,655,this.left = left;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,656,this.right = right;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,657,this.length = left.length() + right.length();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,660,public int length() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,661,return length;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,664,public char charAt(int index) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,665,// int lLength = left.length();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,666,// if(index < lLength) return left.charAt(index);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,667,// else return right.charAt(index - lLength);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,668,return toString().charAt(index);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,671,"public CharSequence subSequence(int start, int end) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,672,// int lLength = left.length();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,673,"// if(start > lLength) return right.subSequence(start - lLength, end - lLength);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,674,"// else if(end <= lLength) return left.subSequence(start, end);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,675,// else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,676,"// CharSequence newLeft = left.subSequence(start, lLength);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,677,"// CharSequence newRight = right.subSequence(0, end - lLength);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,678,"// return new AppendableCharSeqeuence(newLeft, newRight);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,680,"return toString().subSequence(start, end);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,683,public CharSequence append(CharSequence right) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,684,"return new AppendableCharSeqeuence(this, right);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,687,@Override
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,688,public String toString() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,689,if (contentCache == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,690,StringBuilder sb = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,691,buildString(sb);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,692,contentCache = sb.toString();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,693,"// System.err.println(""Materialized string: "" + contentCache);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,695,return contentCache;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,698,public void buildString(StringBuilder sb) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,699,if (left instanceof AppendableCharSeqeuence) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,700,((AppendableCharSeqeuence) left).buildString(sb);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,701,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,702,sb.append(left);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,704,if (right instanceof AppendableCharSeqeuence) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,705,((AppendableCharSeqeuence) right).buildString(sb);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,706,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,707,sb.append(right);
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,165,Test(timeout = 20000L)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,165,@Test(/* timeout = 20000L */)
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,47," ""Nuñez"", ""spanish"", EXACT }, { ""Carvalho"", ""portuguese"", EXACT }, { ""Čapek"", ""czech"", EXACT },"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,48," ""Sjneijder"", ""dutch"", EXACT }, { ""Klausewitz"", ""german"", EXACT }, { ""Küçük"", ""turkish"", EXACT },"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,49," ""Giacometti"", ""italian"", EXACT }, { ""Nagy"", ""hungarian"", EXACT }, { ""Ceauşescu"", ""romanian"", EXACT },"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,50," ""Angelopoulos"", ""greeklatin"", EXACT }, { ""Αγγελόπουλος"", ""greek"", EXACT }, { ""Пушкин"", ""cyrillic"", EXACT },"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,51," ""כהן"", ""hebrew"", EXACT }, { ""ácz"", ""any"", EXACT }, { ""átz"", ""any"", EXACT } });"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,47,"{ ""Nuñez"", ""spanish"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,48,"{ ""Carvalho"", ""portuguese"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,49,"{ ""Čapek"", ""czech"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,50,"{ ""Sjneijder"", ""dutch"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,51,"{ ""Klausewitz"", ""german"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,52,"{ ""Küçük"", ""turkish"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,53,"{ ""Giacometti"", ""italian"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,54,"{ ""Nagy"", ""hungarian"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,55,"{ ""Ceauşescu"", ""romanian"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,56,"{ ""Angelopoulos"", ""greeklatin"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,57,"{ ""Αγγελόπουλος"", ""greek"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,58,"{ ""Пушкин"", ""cyrillic"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,59,"{ ""כהן"", ""hebrew"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,60,"{ ""ácz"", ""any"", EXACT },"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,61,"{ ""átz"", ""any"", EXACT } });"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,40,"eturn Arrays.asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,"uleType.APPROX, true }, new Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,"uleType.APPROX, true }, new Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true }, new Object[] {"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true }, new Object[] { ""d'ortley"","
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"ortlaj|ortlaj|ortlej|ortlej-dortlaj|dortlaj|dortlej|dortlej"", NameType.GENERIC, RuleType.EXACT, true }, new Object[] {"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"van helsing"","
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"elSink|elsink|helSink|helsink|helzink|xelsink-banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink"","
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"ameType.GENERIC, RuleType.EXACT, false });"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,40,return Arrays
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,.asList(new Object[] {
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,"""Renault"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"NameType.GENERIC,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"RuleType.APPROX,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"new Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI, RuleType.APPROX, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,48,"new Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,49,"new Object[] { ""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,50,"new Object[] { ""d'ortley"", ""(ortlaj|ortlej)-(dortlaj|dortlej)"", NameType.GENERIC, RuleType.EXACT, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,51,new Object[] {
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,52,"""van helsing"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,53,"""(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,54,"NameType.GENERIC,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,55,"RuleType.EXACT,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,56,false });
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,20,mport java.util.Arrays;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,21,mport java.util.HashSet;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,22,mport java.util.List;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,23,mport java.util.Set;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,21,import static org.junit.Assert.assertThat;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,25,mport org.junit.runners.Parameterized;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,23,import org.hamcrest.BaseMatcher;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,24,import org.hamcrest.Description;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,25,import org.junit.Test;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,33,/ @RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,34,private Rule.Phoneme[][] makePhonemes() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,35,String[][] words = {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,36,"{ ""rinD"", ""rinDlt"", ""rina"", ""rinalt"", ""rino"", ""rinolt"", ""rinu"", ""rinult"" },"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,37,"{ ""dortlaj"", ""dortlej"", ""ortlaj"", ""ortlej"", ""ortlej-dortlaj"" } };"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,38,Rule.Phoneme[][] phonemes = new Rule.Phoneme[words.length][];
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,36,Parameterized.Parameters
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,37,ublic static List<Object[]> data() {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,38,eturn Arrays.asList(
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,39,ew Object[] {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,"matching language sets with ALL"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,"ew Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(""english"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,42,"french""))))), new HashSet<String>(Arrays.asList(""english"", ""french"")), true },"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,43,ew Object[] {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"non-matching language sets with ALL"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,45,"ew Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(""english"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,46,"french""))))), new HashSet<String>(Arrays.asList(""english"")), false });"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,for (int i = 0; i < words.length; i++) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,String[] words_i = words[i];
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,42,Rule.Phoneme[] phonemes_i = phonemes[i] = new Rule.Phoneme[words_i.length];
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,43,for (int j = 0; j < words_i.length; j++) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"phonemes_i[j] = new Rule.Phoneme(words_i[j], Languages.NO_LANGUAGES);"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,48,return phonemes;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,51,@Test
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,52,public void phonemeComparedToSelfIsZero() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,53,for (Rule.Phoneme[] phs : makePhonemes()) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,54,for (Rule.Phoneme ph : phs) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,55,"assertEquals(""Phoneme compared to itself should be zero: "" + ph.getPhonemeText(), 0, ph.compareTo(ph));"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,49,rivate final String caseName;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,50,rivate final boolean expected;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,51,rivate final Set<String> langs;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,52,rivate final Rule rule;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,60,@Test
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,61,public void phonemeComparedToLaterIsNegative() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,62,for (Rule.Phoneme[] phs : makePhonemes()) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,for (int i = 0; i < phs.length; i++) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,64,for (int j = i + 1; j < phs.length; j++) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,65,int c = phs[i].compareTo(phs[j]);
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,54,"ublic RuleTest(String caseName, Rule rule, Set<String> langs, boolean expected) {"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,55,his.caseName = caseName;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,56,his.rule = rule;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,57,his.langs = langs;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,58,his.expected = expected;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,67,"assertThat(""Comparing "" + phs[i].getPhonemeText() + "" to "" + phs[j].getPhonemeText() + "" should be negative"", c,"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,68,new NegativeIntegerBaseMatcher());
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,61,/ @Test
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,62,/ public void testRuleLanguageMatches() {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,"/ assertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,74,private static class NegativeIntegerBaseMatcher extends BaseMatcher<Integer> {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,75,public boolean matches(Object item) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,76,return ((Integer) item) < 0;
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,79,public void describeTo(Description description) {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,80,"description.appendText(""value should be negative"");"

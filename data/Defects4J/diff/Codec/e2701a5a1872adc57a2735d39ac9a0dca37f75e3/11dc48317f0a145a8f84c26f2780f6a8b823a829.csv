is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,17,package org.apache.commons.codec.language;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,19,import java.util.Locale;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,21,import org.apache.commons.codec.EncoderException;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,22,import org.apache.commons.codec.StringEncoder;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,25,* Match Rating Approach Phonetic Algorithm Developed by <CITE>Western Airlines</CITE> in 1977.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,27,"* @see <a href=""http://en.wikipedia.org/wiki/Match_rating_approach"">Wikipedia - Match Rating Approach</a>"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,28,* @since 1.8
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,30,public class MatchRatingApproachEncoder implements StringEncoder {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,32,"private static final String SPACE = "" "";"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,34,"private static final String EMPTY = """";"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,37,* Constants used mainly for the min rating value.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,39,"private static final int ONE = 1, TWO = 2, THREE = 3, FOUR = 4, FIVE = 5, SIX = 6, SEVEN = 7, EIGHT = 8, ELEVEN = 11, TWELVE = 12;"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,42,* The plain letter equivalent of the accented letters.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,44,"private static final String PLAIN_ASCII = ""AaEeIiOoUu"" // grave"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,45,"+ ""AaEeIiOoUuYy"" // acute"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,46,"+ ""AaEeIiOoUuYy"" // circumflex"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,47,"+ ""AaOoNn"" // tilde"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,48,"+ ""AaEeIiOoUuYy"" // umlaut"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,49,"+ ""Aa"" // ring"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,50,"+ ""Cc"" // cedilla"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,51,"+ ""OoUu""; // double acute"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,54,* Unicode characters corresponding to various accented letters. For example: \u00DA is U acute etc...
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,56,"private static final String UNICODE = ""\u00C0\u00E0\u00C8\u00E8\u00CC\u00EC\u00D2\u00F2\u00D9\u00F9"""
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,57,"+ ""\u00C1\u00E1\u00C9\u00E9\u00CD\u00ED\u00D3\u00F3\u00DA\u00FA\u00DD\u00FD"""
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,58,"+ ""\u00C2\u00E2\u00CA\u00EA\u00CE\u00EE\u00D4\u00F4\u00DB\u00FB\u0176\u0177"" + ""\u00C3\u00E3\u00D5\u00F5\u00D1\u00F1"""
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,59,"+ ""\u00C4\u00E4\u00CB\u00EB\u00CF\u00EF\u00D6\u00F6\u00DC\u00FC\u0178\u00FF"" + ""\u00C5\u00E5"" + ""\u00C7\u00E7"""
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,60,"+ ""\u0150\u0151\u0170\u0171"";"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,63,* Cleans up a name: 1. Upper-cases everything 2. Removes some common punctuation 3. Removes accents 4. Removes any
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,64,* spaces.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,66,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,67,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,68,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,69,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,71,* @param name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,72,*            The name to be cleaned
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,73,* @return The cleaned name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,75,String cleanName(final String name) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,76,String upperName = name.toUpperCase(Locale.ENGLISH);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,78,"String[] charsToTrim = { ""\\-"", ""[&]"", ""\\'"", ""\\."", ""[\\,]"" };"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,79,for (String str : charsToTrim) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,80,"upperName = upperName.replaceAll(str, EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,83,upperName = removeAccents(upperName);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,84,"upperName = upperName.replaceAll(""\\s+"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,86,return upperName;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,90,* Encodes an Object using the Match Rating Approach algo. Method is here to satisfy the requirements of the
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,91,* Encoder interface Throws an EncoderException if input object is not of type java.lang.String.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,93,* @param pObject
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,94,*            Object to encode
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,95,* @return An object (or type java.lang.String) containing the Match Rating Approach code which corresponds to the
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,96,*         String supplied.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,97,* @throws EncoderException
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,98,*             if the parameter supplied is not of type java.lang.String
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,100,@Override
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,101,public final Object encode(final Object pObject) throws EncoderException {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,102,if (!(pObject instanceof String)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,103,"throw new EncoderException(""Parameter supplied to Match Rating Approach encoder is not of type java.lang.String"");"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,105,return encode((String) pObject);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,109,* Encodes a String using the Match Rating Approach (MRA) algorithm.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,111,* @param name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,112,*            String object to encode
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,113,* @return The MRA code corresponding to the String supplied
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,115,@Override
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,116,public final String encode(String name) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,117,// Bulletproof for trivial input - NINO
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,118,if (name == null || EMPTY.equalsIgnoreCase(name) || SPACE.equalsIgnoreCase(name) || name.length() == 1) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,119,return EMPTY;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,122,// Preprocessing
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,123,name = cleanName(name);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,125,// BEGIN: Actual encoding part of the algorithm...
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,126,// 1. Delete all vowels unless the vowel begins the word
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,127,name = removeVowels(name);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,129,// 2. Remove second consonant from any double consonant
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,130,name = removeDoubleConsonants(name);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,132,// 3. Reduce codex to 6 letters by joining the first 3 and last 3 letters
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,133,name = getFirst3Last3(name);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,135,return name;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,139,* Gets the first & last 3 letters of a name (if > 6 characters) Else just returns the name.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,141,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,142,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,143,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,144,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,146,* @param name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,147,*            The string to get the substrings from
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,148,* @return Annexed first & last 3 letters of input word.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,150,String getFirst3Last3(final String name) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,151,int nameLength = name.length();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,153,if (nameLength > SIX) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,154,"String firstThree = name.substring(0, THREE);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,155,"String lastThree = name.substring(nameLength - THREE, nameLength);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,156,return firstThree + lastThree;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,157,} else {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,158,return name;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,163,* Obtains the min rating of the length sum of the 2 names. In essence the larger the sum length the smaller the
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,164,* min rating. Values strictly from documentation.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,166,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,167,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,168,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,169,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,171,* @param sumLength
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,172,*            The length of 2 strings sent down
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,173,* @return The min rating value
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,175,int getMinRating(final int sumLength) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,176,int minRating = 0;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,178,if (sumLength <= FOUR) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,179,minRating = FIVE;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,180,} else if ((sumLength >= FIVE) && (sumLength <= SEVEN)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,181,minRating = FOUR;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,182,} else if ((sumLength >= EIGHT) && (sumLength <= ELEVEN)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,183,minRating = THREE;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,184,} else if (sumLength == TWELVE) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,185,minRating = TWO;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,186,} else {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,187,minRating = ONE; // docs said little here.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,190,return minRating;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,194,* Determines if two names are homophonous via Match Rating Approach (MRA) algorithm. It should be noted that the
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,195,* strings are cleaned in the same way as {@link #encode(String)}.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,197,* @param name1
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,198,*            First of the 2 strings (names) to compare
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,199,* @param name2
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,200,*            Second of the 2 names to compare
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,201,* @return <code>true</code> if the encodings are identical <code>false</code> otherwise.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,203,"public boolean isEncodeEquals(String name1, String name2) {"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,204,// Bulletproof for trivial input - NINO
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,205,if (name1 == null || EMPTY.equalsIgnoreCase(name1) || SPACE.equalsIgnoreCase(name1)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,206,return false;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,207,} else if (name2 == null || EMPTY.equalsIgnoreCase(name2) || SPACE.equalsIgnoreCase(name2)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,208,return false;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,209,} else if (name1.length() == 1 || name2.length() == 1) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,210,return false;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,211,} else if (name1.equalsIgnoreCase(name2)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,212,return true;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,215,// Preprocessing
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,216,name1 = cleanName(name1);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,217,name2 = cleanName(name2);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,219,// Actual MRA Algorithm
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,221,// 1. Remove vowels
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,222,name1 = removeVowels(name1);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,223,name2 = removeVowels(name2);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,225,// 2. Remove double consonants
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,226,name1 = removeDoubleConsonants(name1);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,227,name2 = removeDoubleConsonants(name2);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,229,// 3. Reduce down to 3 letters
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,230,name1 = getFirst3Last3(name1);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,231,name2 = getFirst3Last3(name2);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,233,// 4. Check for length difference - if 3 or greater then no similarity
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,234,// comparison is done
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,235,if (Math.abs(name1.length() - name2.length()) >= THREE) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,236,return false;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,239,// 5. Obtain the minimum rating value by calculating the length sum of the
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,240,// encoded Strings and sending it down.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,241,int sumLength = Math.abs(name1.length() + name2.length());
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,242,int minRating = 0;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,243,minRating = getMinRating(sumLength);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,245,// 6. Process the encoded Strings from left to right and remove any
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,246,// identical characters found from both Strings respectively.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,247,"int count = leftToRightThenRightToLeftProcessing(name1, name2);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,249,// 7. Each PNI item that has a similarity rating equal to or greater than
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,250,// the min is considered to be a good candidate match
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,251,return count >= minRating;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,256,* Determines if a letter is a vowel.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,258,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,259,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,260,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,261,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,263,* @param letter
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,264,*            The letter under investiagtion
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,265,"* @return True if a vowel, else false"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,267,boolean isVowel(String letter) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,268,"return letter.equalsIgnoreCase(""E"") || letter.equalsIgnoreCase(""A"") || letter.equalsIgnoreCase(""O"") || letter.equalsIgnoreCase(""I"") ||"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,269,"letter.equalsIgnoreCase(""U"");"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,273,* Processes the names from left to right (first) then right to left removing identical letters in same positions.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,274,* Then subtracts the longer string that remains from 6 and returns this.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,276,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,277,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,278,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,279,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,281,* @param name1
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,282,*            name2
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,283,* @return
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,285,"int leftToRightThenRightToLeftProcessing(String name1, String name2) {"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,286,char[] name1Char = name1.toCharArray();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,287,char[] name2Char = name2.toCharArray();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,289,int name1Size = name1.length() - 1;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,290,int name2Size = name2.length() - 1;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,292,String name1LtRStart = EMPTY;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,293,String name1LtREnd = EMPTY;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,295,String name2RtLStart = EMPTY;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,296,String name2RtLEnd = EMPTY;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,298,for (int i = 0; i < name1Char.length; i++) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,299,if (i > name2Size) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,300,break;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,303,"name1LtRStart = name1.substring(i, i + 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,304,"name1LtREnd = name1.substring(name1Size - i, (name1Size - i) + 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,306,"name2RtLStart = name2.substring(i, i + 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,307,"name2RtLEnd = name2.substring(name2Size - i, (name2Size - i) + 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,309,// Left to right...
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,310,if (name1LtRStart.equals(name2RtLStart)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,311,name1Char[i] = ' ';
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,312,name2Char[i] = ' ';
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,315,// Right to left...
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,316,if (name1LtREnd.equals(name2RtLEnd)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,317,name1Char[name1Size - i] = ' ';
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,318,name2Char[name2Size - i] = ' ';
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,322,// Char arrays -> string & remove extraneous space
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,323,"String strA = new String(name1Char).replaceAll(""\\s+"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,324,"String strB = new String(name2Char).replaceAll(""\\s+"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,326,// Final bit - subtract longest string from 6 and return this int value
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,327,if (strA.length() > strB.length()) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,328,return Math.abs(SIX - strA.length());
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,329,} else {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,330,return Math.abs(SIX - strB.length());
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,335,* Removes accented letters and replaces with non-accented ascii equivalent Case is preserved.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,336,* http://www.codecodex.com/wiki/Remove_accent_from_letters_%28ex_.%C3%A9_to_e%29
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,338,* @param accentedWord
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,339,*            The word that may have accents in it.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,340,* @return De-accented word
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,342,String removeAccents(final String accentedWord) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,343,if (accentedWord == null) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,344,return null;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,347,StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,348,int n = accentedWord.length();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,350,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,351,char c = accentedWord.charAt(i);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,352,int pos = UNICODE.indexOf(c);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,353,if (pos > -1) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,354,sb.append(PLAIN_ASCII.charAt(pos));
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,355,} else {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,356,sb.append(c);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,360,return sb.toString();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,364,* Replaces any double consonant pair with the single letter equivalent.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,366,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,367,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,368,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,369,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,371,* @param name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,372,*            String to have double consonants removed
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,373,* @return Single consonant word
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,375,String removeDoubleConsonants(String name) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,376,"String[] dblCnstArray = new String[] { ""BB"", ""CC"", ""DD"", ""FF"", ""GG"", ""HH"", ""JJ"", ""KK"", ""LL"", ""MM"", ""NN"", ""PP"", ""QQ"", ""RR"", ""SS"", ""TT"", ""VV"","
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,377,"""WW"", ""XX"", ""YY"", ""ZZ"" };"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,379,String replacedName = name.toUpperCase();
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,380,for (String dc : dblCnstArray) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,381,if (replacedName.contains(dc)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,382,"String singleLetter = dc.substring(0, 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,383,"replacedName = replacedName.replace(dc, singleLetter);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,387,return replacedName;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,391,* Deletes all vowels unless the vowel begins the word.
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,393,* <h2>API Usage</h2>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,394,* <p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,395,"* Consider this method private, it is package protected for unit testing only."
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,396,* </p>
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,398,* @param name
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,399,*            The name to have vowels removed
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,400,* @return De-voweled word
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,402,String removeVowels(String name) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,403,// Extract first letter
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,404,"String firstLetter = name.substring(0, 1);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,406,"name = name.replaceAll(""A"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,407,"name = name.replaceAll(""E"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,408,"name = name.replaceAll(""I"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,409,"name = name.replaceAll(""O"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,410,"name = name.replaceAll(""U"", EMPTY);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,412,"name = name.replaceAll(""\\s{2,}\\b"", SPACE);"
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,414,// return isVowel(firstLetter) ? (firstLetter + name) : name;
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,415,if (isVowel(firstLetter)) {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,416,return (firstLetter + name);
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,417,} else {
True,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java,418,return name;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,18,package org.apache.commons.codec.language;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,21,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,22,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,24,import org.apache.commons.codec.StringEncoder;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,25,import org.apache.commons.codec.StringEncoderAbstractTest;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,29,* Series of tests for the Match Rating Approach algorithm.
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,31,* General naming nomeneclature for the test is of the form:
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,32,* GeneralMetadataOnTheTestArea_ActualTestValues_ExpectedResult
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,34,"* An unusual value is indicated by the term ""corner case"""
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,36,public class MatchRatingApproachEncoderTest extends StringEncoderAbstractTest {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,38,private MatchRatingApproachEncoder getMatchRatingApproachEncoder() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,39,return (MatchRatingApproachEncoder) this.getStringEncoder();
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,42,// ********** BEGIN REGION - TEST SUPPORT METHODS
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,44,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,45,public final void testAccentRemoval_AllLower_SuccessfullyRemoved() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,46,"assertEquals(""aeiou"", getMatchRatingApproachEncoder().removeAccents(""áéíóú""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,49,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,50,public final void testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,51,"assertEquals(""ae io  u"", getMatchRatingApproachEncoder().removeAccents(""áé íó  ú""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,54,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,55,public final void testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,56,"assertEquals(""AeiOuu"", getMatchRatingApproachEncoder().removeAccents(""ÁeíÓuu""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,59,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,60,public final void testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,61,"assertEquals(""A-e'i.,o&u"", getMatchRatingApproachEncoder().removeAccents(""Á-e'í.,ó&ú""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,64,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,65,public final void testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,66,"assertEquals(""aeoußAEOUnNa"", getMatchRatingApproachEncoder().removeAccents(""äëöüßÄËÖÜñÑà""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,69,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,70,public final void testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,71,"assertEquals(""E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c"","
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,72,"getMatchRatingApproachEncoder().removeAccents(""È,É,Ê,Ë,Û,Ù,Ï,Î,À,Â,Ô,è,é,ê,ë,û,ù,ï,î,à,â,ô,ç""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,75,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,76,public final void testAccentRemovalNormalString_NoChange() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,77,"assertEquals(""Colorless green ideas sleep furiously"", getMatchRatingApproachEncoder().removeAccents(""Colorless green ideas sleep furiously""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,80,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,81,public final void testAccentRemoval_NINO_NoChange() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,82,"assertEquals("""", getMatchRatingApproachEncoder().removeAccents(""""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,85,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,86,public final void testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,87,"assertEquals(""BUBLE"", getMatchRatingApproachEncoder().removeDoubleConsonants(""BUBBLE""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,90,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,91,public final void testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,92,"assertEquals(""MISISIPI"", getMatchRatingApproachEncoder().removeDoubleConsonants(""MISSISSIPPI""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,95,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,96,public final void testRemoveDoubleDoubleVowel_BEETLE_NotRemoved() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,97,"assertEquals(""BEETLE"", getMatchRatingApproachEncoder().removeDoubleConsonants(""BEETLE""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,100,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,101,public final void testIsVowel_CapitalA_ReturnsTrue() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,102,"assertEquals(true, getMatchRatingApproachEncoder().isVowel(""A""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,105,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,106,public final void testIsVowel_SmallD_ReturnsFalse() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,107,"assertFalse(getMatchRatingApproachEncoder().isVowel(""d""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,110,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,111,public final void testRemoveVowel_ALESSANDRA_Returns_ALSSNDR() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,112,"assertEquals(""ALSSNDR"", getMatchRatingApproachEncoder().removeVowels(""ALESSANDRA""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,115,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,116,public final void testRemoveVowel__AIDAN_Returns_ADN() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,117,"assertEquals(""ADN"", getMatchRatingApproachEncoder().removeVowels(""AIDAN""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,120,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,121,public final void testRemoveVowel__DECLAN_Returns_DCLN() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,122,"assertEquals(""DCLN"", getMatchRatingApproachEncoder().removeVowels(""DECLAN""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,125,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,126,public final void testGetFirstLast3__ALEXANDER_Returns_Aleder() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,127,"assertEquals(""Aleder"", getMatchRatingApproachEncoder().getFirst3Last3(""Alexzander""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,130,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,131,public final void testGetFirstLast3_PETE_Returns_PETE() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,132,"assertEquals(""PETE"", getMatchRatingApproachEncoder().getFirst3Last3(""PETE""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,135,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,136,public final void testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,137,"assertEquals(4, getMatchRatingApproachEncoder().leftToRightThenRightToLeftProcessing(""ALEXANDER"", ""ALEXANDRA""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,140,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,141,public final void testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,142,"assertEquals(0, getMatchRatingApproachEncoder().leftToRightThenRightToLeftProcessing(""EINSTEIN"", ""MICHAELA""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,145,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,146,public final void testGetMinRating_7_Return4_Successfully() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,147,"assertEquals(4, getMatchRatingApproachEncoder().getMinRating(7));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,150,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,151,public final void testGetMinRating_2_Returns5_Successfully() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,152,"assertEquals(5, getMatchRatingApproachEncoder().getMinRating(2));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,155,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,156,public final void testGetMinRating_2_Return1_Successfully() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,157,"assertEquals(1, getMatchRatingApproachEncoder().getMinRating(13));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,160,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,161,public final void testcleanName_SuccessfullyClean() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,162,"assertEquals(""THISISATEST"", getMatchRatingApproachEncoder().cleanName(""This-ís   a t.,es &t""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,165,// ***** END REGION - TEST SUPPORT METHODS
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,167,// ***** BEGIN REGION - TEST GET MRA ENCODING
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,169,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,170,public final void testGetEncoding_HARPER_HRPR() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,171,"assertEquals(""HRPR"", getMatchRatingApproachEncoder().encode(""HARPER""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,174,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,175,public final void testGetEncoding_SMITH_to_SMTH() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,176,"assertEquals(""SMTH"", getMatchRatingApproachEncoder().encode(""Smith""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,179,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,180,public final void testGetEncoding_SMYTH_to_SMYTH() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,181,"assertEquals(""SMYTH"", getMatchRatingApproachEncoder().encode(""Smyth""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,184,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,185,public final void testGetEncoding_Space_to_Nothing() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,186,"assertEquals("""", getMatchRatingApproachEncoder().encode("" ""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,189,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,190,public final void testGetEncoding_NoSpace_to_Nothing() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,191,"assertEquals("""", getMatchRatingApproachEncoder().encode(""""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,194,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,195,public final void testGetEncoding_Null_to_Nothing() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,196,"assertEquals("""", getMatchRatingApproachEncoder().encode(null));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,199,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,200,public final void testGetEncoding_One_Letter_to_Nothing() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,201,"assertEquals("""", getMatchRatingApproachEncoder().encode(""E""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,204,// ***** END REGION - TEST GET MRA ENCODING
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,206,// ***** BEGIN REGION - TEST GET MRA COMPARISONS
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,208,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,209,public final void testCompare_SMITH_SMYTH_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,210,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""smith"", ""smyth""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,213,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,214,public final void testCompare_BURNS_BOURNE_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,215,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Burns"", ""Bourne""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,218,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,219,public final void testCompare_ShortNames_AL_ED_WorksButNoMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,220,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Al"", ""Ed""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,223,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,224,public final void testCompare_CATHERINE_KATHRYN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,225,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Catherine"", ""Kathryn""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,228,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,229,public final void testCompare_BRIAN_BRYAN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,230,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Brian"", ""Bryan""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,233,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,234,public final void testCompare_SEAN_SHAUN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,235,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Séan"", ""Shaun""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,238,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,239,public final void testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,240,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Cólm.   "", ""C-olín""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,243,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,244,public final void testCompare_STEPHEN_STEVEN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,245,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Stephen"", ""Steven""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,248,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,249,public final void testCompare_STEVEN_STEFAN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,250,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Steven"", ""Stefan""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,253,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,254,public final void testCompare_STEPHEN_STEFAN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,255,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Stephen"", ""Stefan""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,258,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,259,public final void testCompare_SAM_SAMUEL_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,260,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Sam"", ""Samuel""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,263,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,264,public final void testCompare_MICKY_MICHAEL_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,265,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Micky"", ""Michael""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,268,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,269,public final void testCompare_OONA_OONAGH_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,270,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Oona"", ""Oonagh""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,273,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,274,public final void testCompare_SOPHIE_SOFIA_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,275,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Sophie"", ""Sofia""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,278,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,279,public final void testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,280,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Franciszek"", ""Frances""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,283,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,284,public final void testCompare_TOMASZ_TOM_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,285,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Tomasz"", ""tom""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,288,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,289,public final void testCompare_SmallInput_CARK_Kl_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,290,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Kl"", ""Karl""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,293,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,294,public final void testCompareNameToSingleLetter_KARL_C_DoesNotMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,295,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Karl"", ""C""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,298,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,299,public final void testCompare_ZACH_ZAKARIA_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,300,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Zach"", ""Zacharia""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,303,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,304,public final void testCompare_KARL_ALESSANDRO_DoesNotMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,305,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Karl"", ""Alessandro""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,308,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,309,public final void testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,310,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Úna"", ""Oonagh"")); // Disappointing"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,313,// ***** Begin Region - Test Get Encoding - Surnames
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,315,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,316,public final void testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,317,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""O'Sullivan"", ""Ó ' Súilleabháin""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,320,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,321,public final void testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,322,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Moriarty"", ""OMuircheartaigh""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,325,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,326,public final void testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,327,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""o'muireadhaigh"", ""Ó 'Muircheartaigh ""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,330,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,331,public final void testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,332,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Cooper-Flynn"", ""Super-Lyn""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,335,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,336,public final void testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,337,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Hailey"", ""Halley""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,340,// **** BEGIN YIDDISH/SLAVIC SECTION ****
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,342,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,343,public final void testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,344,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Auerbach"", ""Uhrbach""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,347,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,348,public final void testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,349,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Moskowitz"", ""Moskovitz""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,352,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,353,public final void testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,354,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""LIPSHITZ"", ""LIPPSZYC""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,357,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,358,public final void testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,359,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""LEWINSKY"", ""LEVINSKI""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,362,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,363,public final void testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,364,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""SZLAMAWICZ"", ""SHLAMOVITZ""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,367,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,368,public final void testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,369,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""R o s o ch o w a c ie c"", "" R o s o k ho v a ts e ts""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,372,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,373,public final void testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,374,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals("" P rz e m y s l"", "" P sh e m e sh i l""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,377,// **** END YIDDISH/SLAVIC SECTION ****
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,379,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,380,public final void testCompare_PETERSON_PETERS_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,381,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Peterson"", ""Peters""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,384,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,385,public final void testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,386,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""McGowan"", ""Mc Geoghegan""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,389,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,390,public final void testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,391,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Murphy"", "" ""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,394,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,395,public final void testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,396,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Murphy"", """"));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,399,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,400,public final void testCompare_SurnameCornerCase_Nulls_NoMatch() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,401,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(null, null));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,404,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,405,public final void testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,406,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Murphy"", ""Lynch""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,409,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,410,public final void testCompare_Forenames_SEAN_JOHN_MatchExpected() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,411,"assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(""Sean"", ""John""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,414,@Test
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,415,public final void testCompare_Forenames_SEAN_PETE_NoMatchExpected() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,416,"assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(""Sean"", ""Pete""));"
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,419,@Override
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,420,protected StringEncoder createStringEncoder() {
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,421,return new MatchRatingApproachEncoder();
True,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,424,// ***** END REGION - TEST GET MRA COMPARISONS

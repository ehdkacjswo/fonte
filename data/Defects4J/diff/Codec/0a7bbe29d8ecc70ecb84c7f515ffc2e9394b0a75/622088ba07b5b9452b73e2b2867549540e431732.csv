is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/BinaryDecoder.java,src/main/java/org/apache/commons/codec/BinaryDecoder.java,23, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/BinaryEncoder.java,src/main/java/org/apache/commons/codec/BinaryEncoder.java,23, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/CharEncoding.java,src/main/java/org/apache/commons/codec/CharEncoding.java,51, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/Charsets.java,src/main/java/org/apache/commons/codec/Charsets.java,53, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/Decoder.java,src/main/java/org/apache/commons/codec/Decoder.java,30, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/DecoderException.java,src/main/java/org/apache/commons/codec/DecoderException.java,24, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/Encoder.java,src/main/java/org/apache/commons/codec/Encoder.java,26, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/EncoderException.java,src/main/java/org/apache/commons/codec/EncoderException.java,25, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/StringDecoder.java,src/main/java/org/apache/commons/codec/StringDecoder.java,23, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/StringEncoder.java,src/main/java/org/apache/commons/codec/StringEncoder.java,23, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/StringEncoderComparator.java,src/main/java/org/apache/commons/codec/StringEncoderComparator.java,27, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,36, This class is not thread-safe. Each thread should use its own instance.
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,36,* This class is thread-safe.
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,125,rivate long bitWorkArea;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,276,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,282,"oid decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,283,f (eof) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,281,"void decode(byte[] in, int inPos, int inAvail, Context context) { // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,282,if (context.eof) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,287,of = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,286,context.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,293,of = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,292,context.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,296,nsureBufferSize(decodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,295,"ensureBufferSize(decodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,300,odulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,301,itWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,302,f (modulus == 0) { // we can output the 5 bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,303,uffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,304,uffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,305,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,306,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,307,uffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,299,context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,300,context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,301,if (context.modulus == 0) { // we can output the 5 bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,302,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,303,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,304,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,305,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,306,context.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,317,"f (eof && modulus >= 2) { // if modulus < 2, nothing to do"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,318,nsureBufferSize(decodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,316,"if (context.eof && context.modulus >= 2) { // if modulus < 2, nothing to do"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,317,"ensureBufferSize(decodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,321,witch (modulus) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,320,switch (context.modulus) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,323,uffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,322,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,326,uffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,325,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,329,itWorkArea = bitWorkArea >> 4; // drop 4 bits
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,330,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,331,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,328,context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,329,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,330,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,334,itWorkArea = bitWorkArea >> 1;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,335,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,336,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,337,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,333,context.lbitWorkArea = context.lbitWorkArea >> 1;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,334,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,335,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,336,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,340,itWorkArea = bitWorkArea >> 6;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,341,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,342,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,343,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,339,context.lbitWorkArea = context.lbitWorkArea >> 6;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,340,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,341,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,342,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,346,itWorkArea = bitWorkArea >> 3;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,347,uffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,348,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,349,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,350,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,345,context.lbitWorkArea = context.lbitWorkArea >> 3;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,346,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,347,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,348,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,349,context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,368,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,371,"oid encode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,372,f (eof) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,371,"void encode(byte[] in, int inPos, int inAvail, Context context) { // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,372,if (context.eof) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,378,of = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,379,f (0 == modulus && lineLength == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,378,context.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,379,if (0 == context.modulus && lineLength == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,382,nsureBufferSize(encodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,383,nt savedPos = pos;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,384,witch (modulus) { // % 5
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,382,"ensureBufferSize(encodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,383,int savedPos = context.pos;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,384,switch (context.modulus) { // % 5
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,386,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,387,uffer[pos++] = encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS]; // 5-3=2
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,388,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,389,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,390,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,391,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,392,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,393,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,386,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,387,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,388,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,389,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,390,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,391,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,392,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,393,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,397,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,398,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,399,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,400,uffer[pos++] = encodeTable[(int)(bitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,401,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,402,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,403,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,404,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,397,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,398,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,399,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,400,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,401,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,402,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,403,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,404,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,407,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,408,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,409,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,410,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,411,uffer[pos++] = encodeTable[(int)(bitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,412,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,413,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,414,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,407,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,408,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,409,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,410,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,411,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,412,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,413,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,414,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,417,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,418,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,419,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,420,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,421,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,422,uffer[pos++] = encodeTable[(int)(bitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,423,uffer[pos++] = encodeTable[(int)(bitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,424,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,417,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,418,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,419,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,420,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,421,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,422,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,423,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,424,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,427,urrentLinePos += pos - savedPos; // keep track of current line position
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,427,context.currentLinePos += context.pos - savedPos; // keep track of current line position
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,429,f (lineLength > 0 && currentLinePos > 0){ // add chunk separator if required
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,430,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,431,os += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,429,if (lineLength > 0 && context.currentLinePos > 0){ // add chunk separator if required
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,430,"System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,431,context.pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,435,nsureBufferSize(encodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,436,odulus = (modulus+1) % BYTES_PER_UNENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,435,"ensureBufferSize(encodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,436,context.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,441,itWorkArea = (bitWorkArea << 8) + b; // BITS_PER_BYTE
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,442,f (0 == modulus) { // we have enough bytes to create our output
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,443,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,444,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,445,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,446,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,447,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,448,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,449,uffer[pos++] = encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,450,uffer[pos++] = encodeTable[(int)bitWorkArea & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,451,urrentLinePos += BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,452,f (lineLength > 0 && lineLength <= currentLinePos) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,453,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,454,os += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,455,urrentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,441,context.lbitWorkArea = (context.lbitWorkArea << 8) + b; // BITS_PER_BYTE
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,442,if (0 == context.modulus) { // we have enough bytes to create our output
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,443,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,444,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,445,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,446,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 20) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,447,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 15) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,448,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 10) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,449,context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 5) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,450,context.buffer[context.pos++] = encodeTable[(int)context.lbitWorkArea & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,451,context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,452,if (lineLength > 0 && lineLength <= context.currentLinePos) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,453,"System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,454,context.pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,455,context.currentLinePos = 0;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,43, This class is not thread-safe. Each thread should use its own instance.
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,43,* This class is thread-safe.
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,47, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,160, Place holder for the bytes we're dealing with for our based logic.
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,161, Bitwise operations store and extract the encoding or decoding from this variable.
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,163,rivate int bitWorkArea;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,318,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,327,"oid encode(byte[] in, int inPos, int inAvail) {"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,328,f (eof) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,321,"void encode(byte[] in, int inPos, int inAvail, Context context) {"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,322,if (context.eof) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,334,of = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,335,f (0 == modulus && lineLength == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,328,context.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,329,if (0 == context.modulus && lineLength == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,338,nsureBufferSize(encodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,339,nt savedPos = pos;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,340,witch (modulus) { // 0-2
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,332,"ensureBufferSize(encodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,333,int savedPos = context.pos;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,334,switch (context.modulus) { // 0-2
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,342,uffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS]; // top 6 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,343,uffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS]; // remaining 2
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,336,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS]; // top 6 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,337,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS]; // remaining 2
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,346,uffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,347,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,340,context.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,341,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,352,uffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,353,uffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,354,uffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,346,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,347,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,348,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,357,uffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,351,context.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,361,urrentLinePos += pos - savedPos; // keep track of current line position
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,355,context.currentLinePos += context.pos - savedPos; // keep track of current line position
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,363,f (lineLength > 0 && currentLinePos > 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,364,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,365,os += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,357,if (lineLength > 0 && context.currentLinePos > 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,358,"System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,359,context.pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,369,nsureBufferSize(encodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,370,odulus = (modulus+1) % BYTES_PER_UNENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,363,"ensureBufferSize(encodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,364,context.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,375,itWorkArea = (bitWorkArea << 8) + b; //  BITS_PER_BYTE
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,376,f (0 == modulus) { // 3 bytes = 24 bits = 4 * 6 bits to extract
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,377,uffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,378,uffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,379,uffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,380,uffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,381,urrentLinePos += BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,382,f (lineLength > 0 && lineLength <= currentLinePos) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,383,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,384,os += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,385,urrentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,369,context.ibitWorkArea = (context.ibitWorkArea << 8) + b; //  BITS_PER_BYTE
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,370,if (0 == context.modulus) { // 3 bytes = 24 bits = 4 * 6 bits to extract
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,371,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,372,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,373,context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,374,context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,375,context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,376,if (lineLength > 0 && lineLength <= context.currentLinePos) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,377,"System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,378,context.pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,379,context.currentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,408,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,416,"oid decode(byte[] in, int inPos, int inAvail) {"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,417,f (eof) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,411,"void decode(byte[] in, int inPos, int inAvail, Context context) {"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,412,if (context.eof) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,421,of = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,416,context.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,424,nsureBufferSize(decodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,419,"ensureBufferSize(decodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,428,of = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,423,context.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,434,odulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,435,itWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,436,f (modulus == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,437,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,438,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,439,uffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,429,context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,430,context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,431,if (context.modulus == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,432,context.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,433,context.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,434,context.buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,f (eof && modulus != 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,450,nsureBufferSize(decodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,444,if (context.eof && context.modulus != 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,445,"ensureBufferSize(decodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,454,witch (modulus) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,switch (context.modulus) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,458,itWorkArea = bitWorkArea >> 4; // dump the extra 4 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,459,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,453,context.ibitWorkArea = context.ibitWorkArea >> 4; // dump the extra 4 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,454,context.buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,462,itWorkArea = bitWorkArea >> 2; // dump 2 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,463,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,464,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,457,context.ibitWorkArea = context.ibitWorkArea >> 2; // dump 2 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,458,context.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,459,context.buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64InputStream.java,src/main/java/org/apache/commons/codec/binary/Base64InputStream.java,39, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java,39, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,29, This class is not thread-safe.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,30, Each thread should use its own instance.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,29,* This class is thread-safe.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,35,* Holds thread context so classes can be thread-safe.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,37,* This class is not itself thread-safe; each thread must allocate its own copy.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,39,* @since 1.7
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,41,static class Context {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,44,* Place holder for the bytes we're dealing with for our based logic.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,45,* Bitwise operations store and extract the encoding or decoding from this variable.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,47,int ibitWorkArea;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,50,* Place holder for the bytes we're dealing with for our based logic.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,51,* Bitwise operations store and extract the encoding or decoding from this variable.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,53,long lbitWorkArea;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,56,* Buffer for streaming.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,58,byte[] buffer;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,61,* Position where next character should be written in the buffer.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,63,int pos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,66,* Position where next character should be read from the buffer.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,68,int readPos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,71,"* Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,72,* and must be thrown away.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,74,boolean eof;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,77,* Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,78,* make sure each encoded line never goes beyond lineLength (if lineLength > 0).
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,80,int currentLinePos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,83,"* Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,84,* This variable helps track that.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,86,int modulus;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,88,Context() {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,103, Buffer for streaming.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,105,rotected byte[] buffer;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,108, Position where next character should be written in the buffer.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,110,rotected int pos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,113, Position where next character should be read from the buffer.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,115,rivate int readPos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,118," Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,119, and must be thrown away.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,121,rotected boolean eof;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,124, Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,125, make sure each encoded line never goes beyond lineLength (if lineLength > 0).
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,127,rotected int currentLinePos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,130," Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,131, This variable helps track that.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,133,rotected int modulus;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,177,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,155,oolean hasData() {  // package protected for access from I/O streams
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,156,eturn this.buffer != null;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,180,boolean hasData(Context context) {  // package protected for access from I/O streams
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,181,return context.buffer != null;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,187,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,164,nt available() {  // package protected for access from I/O streams
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,165,eturn buffer != null ? pos - readPos : 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,190,int available(Context context) {  // package protected for access from I/O streams
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,191,return context.buffer != null ? context.pos - context.readPos : 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,177,** Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}. */
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,178,rivate void resizeBuffer() {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,179,f (buffer == null) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,180,uffer = new byte[getDefaultBufferSize()];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,181,os = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,182,eadPos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,204,* Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,205,* @param context the context to be used
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,207,private void resizeBuffer(Context context) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,208,if (context.buffer == null) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,209,context.buffer = new byte[getDefaultBufferSize()];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,210,context.pos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,211,context.readPos = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,184,yte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,185,"ystem.arraycopy(buffer, 0, b, 0, buffer.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,186,uffer = b;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,213,byte[] b = new byte[context.buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,214,"System.arraycopy(context.buffer, 0, b, 0, context.buffer.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,215,context.buffer = b;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,223,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,195,rotected void ensureBufferSize(int size){
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,196,f ((buffer == null) || (buffer.length < pos + size)){
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,197,esizeBuffer();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,225,"protected void ensureBufferSize(int size, Context context){"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,226,if ((context.buffer == null) || (context.buffer.length < context.pos + size)){
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,227,resizeBuffer(context);
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,241,* @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,213,"nt readResults(byte[] b, int bPos, int bAvail) {  // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,214,f (buffer != null) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,215,"nt len = Math.min(available(), bAvail);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,216,"ystem.arraycopy(buffer, readPos, b, bPos, len);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,217,eadPos += len;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,218,f (readPos >= pos) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,219,"uffer = null; // so hasData() will return false, and this method can return -1"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,244,"int readResults(byte[] b, int bPos, int bAvail, Context context) {  // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,245,if (context.buffer != null) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,246,"int len = Math.min(available(context), bAvail);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,247,"System.arraycopy(context.buffer, context.readPos, b, bPos, len);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,248,context.readPos += len;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,249,if (context.readPos >= context.pos) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,250,"context.buffer = null; // so hasData() will return false, and this method can return -1"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,223,eturn eof ? EOF : 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,254,return context.eof ? EOF : 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,246, Resets this object to its initial newly constructed state.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,248,rivate void reset() {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,249,uffer = null;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,250,os = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,251,eadPos = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,252,urrentLinePos = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,253,odulus = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,254,of = false;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,324,eset();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,343,Context context = new Context();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,328,"ecode(pArray, 0, pArray.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,329,"ecode(pArray, 0, EOF); // Notify decoder of EOF."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,330,yte[] result = new byte[pos];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,331,"eadResults(result, 0, result.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,347,"decode(pArray, 0, pArray.length, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,348,"decode(pArray, 0, EOF, context); // Notify decoder of EOF."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,349,byte[] result = new byte[context.pos];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,350,"readResults(result, 0, result.length, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,343,eset();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,362,Context context = new Context();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,347,"ncode(pArray, 0, pArray.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,348,"ncode(pArray, 0, EOF); // Notify encoder of EOF."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,349,yte[] buf = new byte[pos - readPos];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,350,"eadResults(buf, 0, buf.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,366,"encode(pArray, 0, pArray.length, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,367,"encode(pArray, 0, EOF, context); // Notify encoder of EOF."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,368,byte[] buf = new byte[context.pos - context.readPos];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,369,"readResults(buf, 0, buf.length, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,365,"bstract void encode(byte[] pArray, int i, int length);  // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,384,"abstract void encode(byte[] pArray, int i, int length, Context context);  // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,367,"bstract void decode(byte[] pArray, int i, int length); // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,386,"abstract void decode(byte[] pArray, int i, int length, Context context); // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,26,import org.apache.commons.codec.binary.BaseNCodec.Context;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,41,private Context context = new Context();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,58,/ use the EOF flag of the underlying codec instance
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,59,eturn baseNCodec.eof ? 0 : 1;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,62,return context.eof ? 0 : 1;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,139,f (!baseNCodec.hasData()) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,142,if (!baseNCodec.hasData(context)) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,143,"aseNCodec.encode(buf, 0, c);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,146,"baseNCodec.encode(buf, 0, c, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,145,"aseNCodec.decode(buf, 0, c);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,148,"baseNCodec.decode(buf, 0, c, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,148,"eadLen = baseNCodec.readResults(b, offset, len);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,151,"readLen = baseNCodec.readResults(b, offset, len, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,26,import org.apache.commons.codec.binary.BaseNCodec.Context;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,41,private Context context = new Context();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,43,// TODO should this be protected?
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,87,"aseNCodec.encode(b, offset, len);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,92,"baseNCodec.encode(b, offset, len, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,89,"aseNCodec.decode(b, offset, len);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,94,"baseNCodec.decode(b, offset, len, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,105,nt avail = baseNCodec.available();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,110,int avail = baseNCodec.available(context);
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,108,"nt c = baseNCodec.readResults(buf, 0, avail);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,113,"int c = baseNCodec.readResults(buf, 0, avail, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,139,"aseNCodec.encode(singleByte, 0, EOF);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,144,"baseNCodec.encode(singleByte, 0, EOF, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,141,"aseNCodec.decode(singleByte, 0, EOF);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,146,"baseNCodec.decode(singleByte, 0, EOF, context);"
False,src/main/java/org/apache/commons/codec/binary/BinaryCodec.java,src/main/java/org/apache/commons/codec/binary/BinaryCodec.java,31, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/Hex.java,src/main/java/org/apache/commons/codec/binary/Hex.java,35, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/StringUtils.java,src/main/java/org/apache/commons/codec/binary/StringUtils.java,32," @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
False,src/main/java/org/apache/commons/codec/digest/DigestUtils.java,src/main/java/org/apache/commons/codec/digest/DigestUtils.java,31, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java,src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java,29, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/Caverphone.java,src/main/java/org/apache/commons/codec/language/Caverphone.java,29, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/Caverphone1.java,src/main/java/org/apache/commons/codec/language/Caverphone1.java,26, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/Caverphone2.java,src/main/java/org/apache/commons/codec/language/Caverphone2.java,26, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/ColognePhonetic.java,src/main/java/org/apache/commons/codec/language/ColognePhonetic.java,180, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java,src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java,30, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/Metaphone.java,src/main/java/org/apache/commons/codec/language/Metaphone.java,40, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/RefinedSoundex.java,src/main/java/org/apache/commons/codec/language/RefinedSoundex.java,28, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/Soundex.java,src/main/java/org/apache/commons/codec/language/Soundex.java,27, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/SoundexUtils.java,src/main/java/org/apache/commons/codec/language/SoundexUtils.java,26, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,77, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,70, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,52, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,25, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,50, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,59, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,168, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java,25, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,79, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,23, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/BCodec.java,src/main/java/org/apache/commons/codec/net/BCodec.java,46, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/QCodec.java,src/main/java/org/apache/commons/codec/net/QCodec.java,47, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,61, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/RFC1522Codec.java,src/main/java/org/apache/commons/codec/net/RFC1522Codec.java,44, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/URLCodec.java,src/main/java/org/apache/commons/codec/net/URLCodec.java,49, @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/net/Utils.java,src/main/java/org/apache/commons/codec/net/Utils.java,25," @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,90,BaseNCodec.Context context = new BaseNCodec.Context();
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,94,"odec.encode(unencoded, j, 1);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,95,"codec.encode(unencoded, j, 1, context);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,96,"odec.encode(unencoded, 0, -1);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,97,"codec.encode(unencoded, 0, -1, context);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,98,"odec.readResults(singly, 0, 100);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,99,"codec.readResults(singly, 0, 100, context);"
False,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,41,"oid encode(byte[] pArray, int i, int length) {"
True,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,41,"void encode(byte[] pArray, int i, int length, Context context) {"
False,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,45,"oid decode(byte[] pArray, int i, int length) {"
True,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,45,"void decode(byte[] pArray, int i, int length, Context context) {"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/codec/CharsetsTest.java,src/test/java/org/apache/commons/codec/CharsetsTest.java,30,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,25,import java.nio.charset.Charset;
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,33,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,34,private static final Charset CHARSET_UTF8 = Charsets.UTF_8;
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,77,"ssertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,81,"assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,85,"ssertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,89,"assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,93,"ssertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,97,"assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,152,"ssertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,156,"assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java,src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java,507,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,27,import java.nio.charset.Charset;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,45,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,46,private static final Charset CHARSET_UTF8 = Charsets.UTF_8;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,150,"ssertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,154,"assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,159,"ssertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,163,"assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,170,"ssertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,174,"assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,187,"ssertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(Charsets.UTF_8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,191,"assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,272,"ssertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,276,"assertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,280,"ssertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes(Charsets.UTF_8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,281,"ssertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,284,"assertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,285,"assertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,286,"ssertEquals(0, Base64.decodeBase64(""===="".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,287,"ssertEquals("""", new String(Base64.decodeBase64(""===="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,290,"assertEquals(0, Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,291,"assertEquals("""", new String(Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,289,"ssertEquals(0, Base64.decodeBase64(""==="".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,290,"ssertEquals(0, Base64.decodeBase64(""=="".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,291,"ssertEquals(0, Base64.decodeBase64(""="".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,292,"ssertEquals(0, Base64.decodeBase64("""".getBytes(Charsets.UTF_8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,293,"assertEquals(0, Base64.decodeBase64(""==="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,294,"assertEquals(0, Base64.decodeBase64(""=="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,295,"assertEquals(0, Base64.decodeBase64(""="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,296,"assertEquals(0, Base64.decodeBase64("""".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,297,"ssertEquals(0, Base64.decodeBase64(""====\n"".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,298,"ssertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,301,"assertEquals(0, Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,302,"assertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,300,"ssertEquals(0, Base64.decodeBase64(""===\n"".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,301,"ssertEquals(0, Base64.decodeBase64(""==\n"".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,302,"ssertEquals(0, Base64.decodeBase64(""=\n"".getBytes(Charsets.UTF_8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,303,"ssertEquals(0, Base64.decodeBase64(""\n"".getBytes(Charsets.UTF_8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,304,"assertEquals(0, Base64.decodeBase64(""===\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,305,"assertEquals(0, Base64.decodeBase64(""==\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,306,"assertEquals(0, Base64.decodeBase64(""=\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,307,"assertEquals(0, Base64.decodeBase64(""\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,311,inal byte[] encodedArray = Base64.encodeBase64(orig.getBytes(Charsets.UTF_8));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,315,final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,319,inal byte[] encodedWithWS = intermediate.toString().getBytes(Charsets.UTF_8);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,323,final byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,396,"decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,400,".decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,432,"decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,436,".decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,434,"decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,438,".decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,436,"decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,440,".decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,438,"decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,442,".decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,440,getBytes(Charsets.UTF_8))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,441,"ssertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,444,.getBytes(CHARSET_UTF8))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,445,"assertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,447,"encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,451,".encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,453,getBytes(Charsets.UTF_8))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,457,.getBytes(CHARSET_UTF8))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,455,"encodeBase64(""It was the best of times, it was the worst of times."".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,459,".encodeBase64(""It was the best of times, it was the worst of times."".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,457,"encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,461,".encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,459,"encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,463,".encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,461,getBytes(Charsets.UTF_8))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,462,"ssertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,465,.getBytes(CHARSET_UTF8))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,466,"assertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,504,inal Object o = Base64.encodeBase64(original.getBytes(Charsets.UTF_8));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,508,final Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,529,inal Object origObj = original.getBytes(Charsets.UTF_8);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,533,final Object origObj = original.getBytes(CHARSET_UTF8);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,542,"ssertEquals(""SGVsbG8gV29ybGQ="", new String(b64.encode(""Hello World"".getBytes(Charsets.UTF_8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,546,"assertEquals(""SGVsbG8gV29ybGQ="", new String(b64.encode(""Hello World"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,23,import java.nio.charset.Charset;
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,39,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,40,private static final Charset CHARSET_UTF8 = Charsets.UTF_8;
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,184,ecoded = (byte[]) instance.decode((Object) encodeMe.getBytes(Charsets.UTF_8));
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,190,decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(CHARSET_UTF8));
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,202,"yte[] decoded = instance.decode(""00000000"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,208,"byte[] decoded = instance.decode(""00000000"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,206,"ecoded = instance.decode(""00000001"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,212,"decoded = instance.decode(""00000001"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,210,"ecoded = instance.decode(""00000011"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,216,"decoded = instance.decode(""00000011"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,214,"ecoded = instance.decode(""00000111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,220,"decoded = instance.decode(""00000111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,218,"ecoded = instance.decode(""00001111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,224,"decoded = instance.decode(""00001111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,222,"ecoded = instance.decode(""00011111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,228,"decoded = instance.decode(""00011111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,226,"ecoded = instance.decode(""00111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,232,"decoded = instance.decode(""00111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,230,"ecoded = instance.decode(""01111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,236,"decoded = instance.decode(""01111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,234,"ecoded = instance.decode(""11111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,240,"decoded = instance.decode(""11111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,239,"ecoded = instance.decode(""0000000011111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,245,"decoded = instance.decode(""0000000011111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,244,"ecoded = instance.decode(""0000000111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,250,"decoded = instance.decode(""0000000111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,249,"ecoded = instance.decode(""0000001111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,255,"decoded = instance.decode(""0000001111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,254,"ecoded = instance.decode(""0000011111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,260,"decoded = instance.decode(""0000011111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,259,"ecoded = instance.decode(""0000111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,265,"decoded = instance.decode(""0000111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,264,"ecoded = instance.decode(""0001111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,270,"decoded = instance.decode(""0001111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,269,"ecoded = instance.decode(""0011111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,275,"decoded = instance.decode(""0011111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,274,"ecoded = instance.decode(""0111111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,280,"decoded = instance.decode(""0111111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,279,"ecoded = instance.decode(""1111111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,285,"decoded = instance.decode(""1111111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,487,"yte[] decoded = BinaryCodec.fromAscii(""00000000"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,493,"byte[] decoded = BinaryCodec.fromAscii(""00000000"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,491,"ecoded = BinaryCodec.fromAscii(""00000001"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,497,"decoded = BinaryCodec.fromAscii(""00000001"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,495,"ecoded = BinaryCodec.fromAscii(""00000011"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,501,"decoded = BinaryCodec.fromAscii(""00000011"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,499,"ecoded = BinaryCodec.fromAscii(""00000111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,505,"decoded = BinaryCodec.fromAscii(""00000111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,503,"ecoded = BinaryCodec.fromAscii(""00001111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,509,"decoded = BinaryCodec.fromAscii(""00001111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,507,"ecoded = BinaryCodec.fromAscii(""00011111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,513,"decoded = BinaryCodec.fromAscii(""00011111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,511,"ecoded = BinaryCodec.fromAscii(""00111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,517,"decoded = BinaryCodec.fromAscii(""00111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,515,"ecoded = BinaryCodec.fromAscii(""01111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,521,"decoded = BinaryCodec.fromAscii(""01111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,519,"ecoded = BinaryCodec.fromAscii(""11111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,525,"decoded = BinaryCodec.fromAscii(""11111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,524,"ecoded = BinaryCodec.fromAscii(""0000000011111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,530,"decoded = BinaryCodec.fromAscii(""0000000011111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,529,"ecoded = BinaryCodec.fromAscii(""0000000111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,535,"decoded = BinaryCodec.fromAscii(""0000000111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,534,"ecoded = BinaryCodec.fromAscii(""0000001111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,540,"decoded = BinaryCodec.fromAscii(""0000001111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,539,"ecoded = BinaryCodec.fromAscii(""0000011111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,545,"decoded = BinaryCodec.fromAscii(""0000011111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,544,"ecoded = BinaryCodec.fromAscii(""0000111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,550,"decoded = BinaryCodec.fromAscii(""0000111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,549,"ecoded = BinaryCodec.fromAscii(""0001111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,555,"decoded = BinaryCodec.fromAscii(""0001111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,554,"ecoded = BinaryCodec.fromAscii(""0011111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,560,"decoded = BinaryCodec.fromAscii(""0011111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,559,"ecoded = BinaryCodec.fromAscii(""0111111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,565,"decoded = BinaryCodec.fromAscii(""0111111111111111"".getBytes(CHARSET_UTF8));"
False,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,564,"ecoded = BinaryCodec.fromAscii(""1111111111111111"".getBytes(Charsets.UTF_8));"
True,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,570,"decoded = BinaryCodec.fromAscii(""1111111111111111"".getBytes(CHARSET_UTF8));"
True,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,435,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,441,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,44,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,47,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,43,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,54,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,44,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,72,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,81,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,46,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,154,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,195,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,227,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,191,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,231,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"
True,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,src/test/java/org/apache/commons/codec/net/URLCodecTest.java,278,"@SuppressWarnings(""deprecation"") // TODO remove when Java 7 is minimum and Charsets constants can be replaced"

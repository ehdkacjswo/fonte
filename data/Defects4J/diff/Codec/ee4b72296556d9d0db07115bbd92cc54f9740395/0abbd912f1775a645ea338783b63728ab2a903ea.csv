is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,20,mport org.apache.commons.codec.BinaryDecoder;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,21,mport org.apache.commons.codec.BinaryEncoder;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,22,mport org.apache.commons.codec.DecoderException;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,23,mport org.apache.commons.codec.EncoderException;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,49,"ublic class Base32 implements BinaryEncoder, BinaryDecoder {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,51,rivate static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,53,rivate static final int DEFAULT_BUFFER_SIZE = 8192;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,44,public class Base32 extends BasedCodec {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,66,  MIME chunk size per RFC 2045 section 6.8.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,68, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,69," The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,70, equal signs.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,71, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,73," @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 6.8</a>"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,75,ublic static final int MIME_CHUNK_SIZE = 76;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,78, PEM chunk size per RFC 1421 section 4.3.2.4.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,80, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,81," The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,82, equal signs.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,83, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,85," @see <a href=""http://tools.ietf.org/html/rfc1421"">RFC 1421 section 4.3.2.4</a>"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,87,ublic static final int PEM_CHUNK_SIZE = 64;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,172,rivate final byte[] decodeTable; // need different decode table to support Hex version
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,138,private final byte[] decodeTable;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,200, Buffer for streaming.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,202,rivate byte[] buffer;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,205, Position where next character should be written in the buffer.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,207,rivate int pos;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,210, Position where next character should be read from the buffer.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,212,rivate int readPos;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,215, Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,216, make sure each encoded line never goes beyond lineLength (if lineLength > 0).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,218,rivate int currentLinePos;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,221," Writes to the buffer only occur after every 5 reads when encoding, and every 8 reads when decoding. This variable"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,222, helps track that.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,224,rivate int modulus;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,227," Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this Base32 object becomes useless,"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,228, and must be thrown away.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,230,rivate boolean eof;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,233, Place holder for the 8 bytes we're dealing with for our Base32 logic. Bitwise operations store and extract the
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,234, Base32 encoding or decoding from this variable.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,236,rivate long x; // 64 bits; enough for 40 bits i.e. 5 octets unencoded
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,341, Returns true if this Base32 object has buffered data for reading.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,343, @return true if there is Base32 object still available for reading.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,345,oolean hasData() {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,346,eturn this.buffer != null;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,350, Returns the amount of buffered data available for reading.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,352, @return The amount of buffered data available for reading.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,354,nt avail() {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,355,eturn buffer != null ? pos - readPos : 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,358,** Doubles our buffer. */
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,359,rivate void resizeBuffer() {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,360,f (buffer == null) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,361,uffer = new byte[DEFAULT_BUFFER_SIZE];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,362,os = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,363,eadPos = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,364, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,365,yte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,366,"ystem.arraycopy(buffer, 0, b, 0, buffer.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,367,uffer = b;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,372," Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,373, bytes. Returns how many bytes were actually extracted.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,375, @param b
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,376,            byte[] array to extract the buffered data into.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,377, @param bPos
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,378,            position in byte[] array to start extraction at.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,379, @param bAvail
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,380,            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,381, @return The number of bytes successfully extracted into the provided byte[] array.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,383,"nt readResults(byte[] b, int bPos, int bAvail) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,384,f (buffer != null) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,385,"nt len = Math.min(avail(), bAvail);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,386,"ystem.arraycopy(buffer, readPos, b, bPos, len);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,387,eadPos += len;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,388,f (readPos >= pos) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,389,uffer = null;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,391,eturn len;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,393,eturn eof ? -1 : 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,397, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,398," Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,399," the data to encode, and once with inAvail set to ""-1"" to alert encoder that EOF has been reached, so flush last"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,400, remaining bytes (if not multiple of 5).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,401, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,403, @param in
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,404,            byte[] array of binary data to Base32 encode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,405, @param inPos
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,406,            Position to start reading data from.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,407, @param inAvail
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,408,            Amount of bytes available from input for encoding.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,410,"oid encode(byte[] in, int inPos, int inAvail) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,411,f (eof) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,412,eturn;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,414,/ inAvail < 0 is how we're informed of EOF in the underlying data we're
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,415,/ encoding.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,416,f (inAvail < 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,417,of = true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,418,f (buffer == null || buffer.length - pos < encodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,419,esizeBuffer();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,421,witch (modulus) { // % 5
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,422,ase 1 : // Only 1 octet; take top 5 bits then remainder
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,423,uffer[pos++] = encodeTable[(int)(x >> 3) & MASK_5BITS]; // 8-1*5 = 3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,424,uffer[pos++] = encodeTable[(int)(x << 2) & MASK_5BITS]; // 5-3=2
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,425,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,426,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,427,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,428,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,429,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,430,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,431,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,433,ase 2 : // 2 octets = 16 bits to use
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,434,uffer[pos++] = encodeTable[(int)(x >> 11) & MASK_5BITS]; // 16-1*5 = 11
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,435,uffer[pos++] = encodeTable[(int)(x >>  6) & MASK_5BITS]; // 16-2*5 = 6
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,436,uffer[pos++] = encodeTable[(int)(x >>  1) & MASK_5BITS]; // 16-3*5 = 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,437,uffer[pos++] = encodeTable[(int)(x <<  4) & MASK_5BITS]; // 5-1 = 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,438,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,439,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,440,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,441,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,442,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,443,ase 3 : // 3 octets = 24 bits to use
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,444,uffer[pos++] = encodeTable[(int)(x >> 19) & MASK_5BITS]; // 24-1*5 = 19
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,445,uffer[pos++] = encodeTable[(int)(x >> 14) & MASK_5BITS]; // 24-2*5 = 14
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,446,uffer[pos++] = encodeTable[(int)(x >>  9) & MASK_5BITS]; // 24-3*5 = 9
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,447,uffer[pos++] = encodeTable[(int)(x >>  4) & MASK_5BITS]; // 24-4*5 = 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,448,uffer[pos++] = encodeTable[(int)(x <<  1) & MASK_5BITS]; // 5-4 = 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,449,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,450,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,451,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,452,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,453,ase 4 : // 4 octets = 32 bits to use
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,454,uffer[pos++] = encodeTable[(int)(x >> 27) & MASK_5BITS]; // 32-1*5 = 27
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,455,uffer[pos++] = encodeTable[(int)(x >> 22) & MASK_5BITS]; // 32-2*5 = 22
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,456,uffer[pos++] = encodeTable[(int)(x >> 17) & MASK_5BITS]; // 32-3*5 = 17
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,457,uffer[pos++] = encodeTable[(int)(x >> 12) & MASK_5BITS]; // 32-4*5 = 12
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,458,uffer[pos++] = encodeTable[(int)(x >>  7) & MASK_5BITS]; // 32-5*5 =  7
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,459,uffer[pos++] = encodeTable[(int)(x >>  2) & MASK_5BITS]; // 32-6*5 =  2
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,460,uffer[pos++] = encodeTable[(int)(x <<  3) & MASK_5BITS]; // 5-2 = 3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,461,uffer[pos++] = PAD;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,462,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,464,"/ Don't want to append the CRLF two times in a row, so make sure previous"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,465,/ character is not from CRLF!
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,466,yte b = lineSeparator[lineSeparator.length - 1];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,467,f (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,468,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,469,os += lineSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,471, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,472,or (int i = 0; i < inAvail; i++) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,473,f (buffer == null || buffer.length - pos < encodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,474,esizeBuffer();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,476,odulus = (++modulus) % BITS_PER_ENCODED_CHAR;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,477,nt b = in[inPos++];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,478,f (b < 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,479, += 256;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,481, = (x << 8) + b; // ??
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,482,f (0 == modulus) { // we have enough bytes to create our output
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,483,uffer[pos++] = encodeTable[(int)(x >> 35) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,484,uffer[pos++] = encodeTable[(int)(x >> 30) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,485,uffer[pos++] = encodeTable[(int)(x >> 25) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,486,uffer[pos++] = encodeTable[(int)(x >> 20) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,487,uffer[pos++] = encodeTable[(int)(x >> 15) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,488,uffer[pos++] = encodeTable[(int)(x >> 10) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,489,uffer[pos++] = encodeTable[(int)(x >> 5) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,490,uffer[pos++] = encodeTable[(int)x & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,491,urrentLinePos += BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,492,f (lineLength > 0 && lineLength <= currentLinePos) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,493,"ystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,494,os += lineSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,495,urrentLinePos = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,503, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,504," Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,505," with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"""
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,506," call is not necessary when decoding, but it doesn't hurt, either."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,507, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,508, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,509," Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,510," silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,511, garbage-out philosophy: it will not check the provided data for validity.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,512, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,514, @param in
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,515,            byte[] array of ascii data to Base32 decode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,516, @param inPos
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,517,            Position to start reading data from.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,518, @param inAvail
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,519,            Amount of bytes available from input for encoding.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,521," Output is written to {@link #buffer} as 8-bit octets, using {@link pos} as the buffer position"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,523,"oid decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,524,f (eof) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,525,eturn;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,527,f (inAvail < 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,528,of = true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,530,or (int i = 0; i < inAvail; i++) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,531,f (buffer == null || buffer.length - pos < decodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,532,esizeBuffer();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,534,yte b = in[inPos++];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,535,f (b == PAD) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,536,/ We're done.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,537,of = true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,538,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,539, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,540,f (b >= 0 && b < this.decodeTable.length) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,541,nt result = this.decodeTable[b];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,542,f (result >= 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,543,odulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,544, = (x << BITS_PER_ENCODED_CHAR) + result; // collect decoded bytes
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,545,f (modulus == 0) { // we can output the 5 bytes
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,546,uffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,547,uffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,548,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,549,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,550,uffer[pos++] = (byte) (x & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,557,/ Two forms of EOF as far as Base32 decoder is concerned: actual
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,558,/ EOF (-1) and first time '=' character is encountered in stream.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,559,/ This approach makes the '=' padding characters completely optional.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,560,f (eof && modulus != 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,561,f (buffer == null || buffer.length - pos < decodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,562,esizeBuffer();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,565,"/  we ignore partial bytes, i.e. only multiples of 8 count"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,566,witch (modulus) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,567,"ase 2 : // 10 bits, drop 2 and output one byte"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,568,uffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,569,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,570,"ase 3 : // 15 bits, drop 7 and output 1 byte"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,571,uffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,572,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,573,ase 4 : // 20 bits = 2*8 + 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,574, = x >> 4; // drop 4 bits
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,575,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,576,uffer[pos++] = (byte) ((x) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,577,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,578,ase 5 : // 25bits = 3*8 + 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,579, = x >> 1;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,580,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,581,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,582,uffer[pos++] = (byte) ((x) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,583,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,584,ase 6 : // 30bits = 3*8 + 6
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,585, = x >> 6;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,586,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,587,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,588,uffer[pos++] = (byte) ((x) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,589,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,590,ase 7 : // 35 = 4*8 +3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,591, = x >> 3;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,592,uffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,593,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,594,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,595,uffer[pos++] = (byte) ((x) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,596,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,608,ublic static boolean isBase32(byte octet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,273,public boolean isBase32(byte octet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,619,ublic static boolean isBase32Hex(byte octet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,284,public boolean isBase32Hex(byte octet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,632,ublic static boolean isBase32(String base32) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,297,public boolean isBase32(String base32) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,645,ublic static boolean isBase32(byte[] arrayOctet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,310,public boolean isBase32(byte[] arrayOctet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,655, Tests a given byte array to see if it contains only valid characters within the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,320,* Tests a given byte array to see if it contains any characters within the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,662,rivate static boolean containsBase32Byte(byte[] arrayOctet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,327,private boolean containsBase32Byte(byte[] arrayOctet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,716, Decodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,717," Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,719, @param pObject
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,720,            Object to decode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,721, @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,722, @throws DecoderException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,723,             if the parameter supplied is not of type byte[]
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,725,ublic Object decode(Object pObject) throws DecoderException {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,726,f (pObject instanceof byte[]) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,727,eturn decode((byte[]) pObject);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,728, else if (pObject instanceof String) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,729,eturn decode((String) pObject);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,730, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,731,"hrow new DecoderException(""Parameter supplied to Base32 decode is not a byte[] or a String"");"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,736, Decodes a String containing characters in the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,738, @param pArray
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,739,            A String containing Base32 character data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,740, @return a byte array containing binary data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,742,ublic byte[] decode(String pArray) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,743,eturn decode(StringUtils.getBytesUtf8(pArray));
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,747, Decodes a byte[] containing characters in the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,749, @param pArray
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,750,            A byte array containing Base32 character data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,751, @return a byte array containing binary data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,753,ublic byte[] decode(byte[] pArray) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,754,eset();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,755,f (pArray == null || pArray.length == 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,756,eturn pArray;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,758,"ecode(pArray, 0, pArray.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,759,"ecode(pArray, 0, -1); // Notify decoder of EOF."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,760,yte[] result = new byte[pos];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,761,"eadResults(result, 0, result.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,762,eturn result;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,900, Checks if a byte value is whitespace or not.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,515,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,516,"* Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,517,"* the data to encode, and once with inAvail set to ""-1"" to alert encoder that EOF has been reached, so flush last"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,518,* remaining bytes (if not multiple of 5).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,519,* </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,902, @param byteToCheck
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,903,            the byte to check
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,904," @return true if byte is whitespace, false otherwise"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,906,rivate static boolean isWhiteSpace(byte byteToCheck) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,907,witch (byteToCheck) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,908,ase ' ' :
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,909,ase '\n' :
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,910,ase '\r' :
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,911,ase '\t' :
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,912,eturn true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,913,efault :
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,914,eturn false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,521,* @param in
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,522,*            byte[] array of binary data to Base32 encode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,523,* @param inPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,524,*            Position to start reading data from.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,525,* @param inAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,526,*            Amount of bytes available from input for encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,528,"void encode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,529,if (eof) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,530,return;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,918,/ Implementation of the Encoder Interface
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,921, Encodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,922," Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,924, @param pObject
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,925,            Object to encode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,926, @return An object (of type byte[]) containing the Base32 encoded data which corresponds to the byte[] supplied.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,927, @throws EncoderException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,928,             if the parameter supplied is not of type byte[]
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,930,ublic Object encode(Object pObject) throws EncoderException {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,931,f (!(pObject instanceof byte[])) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,932,"hrow new EncoderException(""Parameter supplied to Base32 encode is not a byte[]"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,532,// inAvail < 0 is how we're informed of EOF in the underlying data we're
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,533,// encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,534,if (inAvail < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,535,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,536,if (buffer == null || buffer.length - pos < encodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,537,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,539,switch (modulus) { // % 5
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,540,case 1 : // Only 1 octet; take top 5 bits then remainder
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,541,buffer[pos++] = encodeTable[(int)(x >> 3) & MASK_5BITS]; // 8-1*5 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,542,buffer[pos++] = encodeTable[(int)(x << 2) & MASK_5BITS]; // 5-3=2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,543,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,544,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,545,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,546,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,547,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,548,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,549,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,551,case 2 : // 2 octets = 16 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,552,buffer[pos++] = encodeTable[(int)(x >> 11) & MASK_5BITS]; // 16-1*5 = 11
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,553,buffer[pos++] = encodeTable[(int)(x >>  6) & MASK_5BITS]; // 16-2*5 = 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,554,buffer[pos++] = encodeTable[(int)(x >>  1) & MASK_5BITS]; // 16-3*5 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,555,buffer[pos++] = encodeTable[(int)(x <<  4) & MASK_5BITS]; // 5-1 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,556,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,557,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,558,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,559,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,560,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,561,case 3 : // 3 octets = 24 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,562,buffer[pos++] = encodeTable[(int)(x >> 19) & MASK_5BITS]; // 24-1*5 = 19
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,563,buffer[pos++] = encodeTable[(int)(x >> 14) & MASK_5BITS]; // 24-2*5 = 14
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,564,buffer[pos++] = encodeTable[(int)(x >>  9) & MASK_5BITS]; // 24-3*5 = 9
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,565,buffer[pos++] = encodeTable[(int)(x >>  4) & MASK_5BITS]; // 24-4*5 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,566,buffer[pos++] = encodeTable[(int)(x <<  1) & MASK_5BITS]; // 5-4 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,567,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,568,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,569,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,570,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,571,case 4 : // 4 octets = 32 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,572,buffer[pos++] = encodeTable[(int)(x >> 27) & MASK_5BITS]; // 32-1*5 = 27
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,573,buffer[pos++] = encodeTable[(int)(x >> 22) & MASK_5BITS]; // 32-2*5 = 22
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,574,buffer[pos++] = encodeTable[(int)(x >> 17) & MASK_5BITS]; // 32-3*5 = 17
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,575,buffer[pos++] = encodeTable[(int)(x >> 12) & MASK_5BITS]; // 32-4*5 = 12
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,576,buffer[pos++] = encodeTable[(int)(x >>  7) & MASK_5BITS]; // 32-5*5 =  7
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,577,buffer[pos++] = encodeTable[(int)(x >>  2) & MASK_5BITS]; // 32-6*5 =  2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,578,buffer[pos++] = encodeTable[(int)(x <<  3) & MASK_5BITS]; // 5-2 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,579,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,580,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,582,"// Don't want to append the CRLF two times in a row, so make sure previous"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,583,// character is not from CRLF!
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,584,byte b = lineSeparator[lineSeparator.length - 1];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,585,if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,586,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,587,pos += lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,589,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,590,for (int i = 0; i < inAvail; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,591,if (buffer == null || buffer.length - pos < encodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,592,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,594,modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,595,int b = in[inPos++];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,596,if (b < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,597,b += 256;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,599,x = (x << 8) + b; // ??
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,600,if (0 == modulus) { // we have enough bytes to create our output
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,601,buffer[pos++] = encodeTable[(int)(x >> 35) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,602,buffer[pos++] = encodeTable[(int)(x >> 30) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,603,buffer[pos++] = encodeTable[(int)(x >> 25) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,604,buffer[pos++] = encodeTable[(int)(x >> 20) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,605,buffer[pos++] = encodeTable[(int)(x >> 15) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,606,buffer[pos++] = encodeTable[(int)(x >> 10) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,607,buffer[pos++] = encodeTable[(int)(x >> 5) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,608,buffer[pos++] = encodeTable[(int)x & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,609,currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,610,if (lineLength > 0 && lineLength <= currentLinePos) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,611,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,612,pos += lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,613,currentLinePos = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,934,eturn encode((byte[]) pObject);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,938," Encodes a byte[] containing binary data, into a String containing characters in the Base32 alphabet."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,940, @param pArray
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,941,            a byte array containing binary data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,942, @return A String containing only Base32 character data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,944,ublic String encodeToString(byte[] pArray) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,945,eturn StringUtils.newStringUtf8(encode(pArray));
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,949," Encodes a byte[] containing binary data, into a byte[] containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,621,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,622,"* Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,623,"* with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,624,"* call is not necessary when decoding, but it doesn't hurt, either."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,625,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,626,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,627,"* Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,628,"* silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,629,* garbage-out philosophy: it will not check the provided data for validity.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,630,* </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,951, @param pArray
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,952,            a byte array containing binary data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,953, @return A byte array containing only Base32 character data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,955,ublic byte[] encode(byte[] pArray) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,956,eset();
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,957,f (pArray == null || pArray.length == 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,958,eturn pArray;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,960,"ncode(pArray, 0, pArray.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,961,"ncode(pArray, 0, -1); // Notify encoder of EOF."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,962,yte[] buf = new byte[pos - readPos];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,963,"eadResults(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,964,eturn buf;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,968, Pre-calculates the amount of space needed to Base32-encode the supplied array.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,970, @param pArray byte[] array which will later be encoded
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,971, @param chunkSize line-length of the output (<= 0 means no chunking) between each
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,972,        chunkSeparator (e.g. CRLF).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,973, @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,632,* @param in
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,633,*            byte[] array of ascii data to Base32 decode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,634,* @param inPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,635,*            Position to start reading data from.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,636,* @param inAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,637,*            Amount of bytes available from input for encoding.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,975, @return amount of space needed to encoded the supplied array.  Returns
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,976,         a long since a max-len array will require Integer.MAX_VALUE + 33%.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,639,"* Output is written to {@link #buffer} as 8-bit octets, using {@link pos} as the buffer position"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,978,"rivate static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,979,/ Base32 always encodes to multiples of 8 (BYTES_PER_ENCODED_CHUNK).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,980,hunkSize = (chunkSize / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,982,ong len = (pArray.length * BYTES_PER_ENCODED_BLOCK) / BYTES_PER_UNENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,983,ong mod = len % BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,984,f (mod != 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,985,en += BYTES_PER_ENCODED_BLOCK - mod;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,641,"void decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,642,if (eof) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,643,return;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,645,if (inAvail < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,646,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,648,for (int i = 0; i < inAvail; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,649,if (buffer == null || buffer.length - pos < decodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,650,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,652,byte b = in[inPos++];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,653,if (b == PAD) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,654,// We're done.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,655,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,656,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,657,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,658,if (b >= 0 && b < this.decodeTable.length) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,659,int result = this.decodeTable[b];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,660,if (result >= 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,661,modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,662,x = (x << BITS_PER_ENCODED_CHAR) + result; // collect decoded bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,663,if (modulus == 0) { // we can output the 5 bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,664,buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,665,buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,666,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,667,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,668,buffer[pos++] = (byte) (x & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,987,f (chunkSize > 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,988,oolean lenChunksPerfectly = len % chunkSize == 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,989,en += (len / chunkSize) * chunkSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,990,f (!lenChunksPerfectly) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,991,en += chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,675,// Two forms of EOF as far as Base32 decoder is concerned: actual
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,676,// EOF (-1) and first time '=' character is encountered in stream.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,677,// This approach makes the '=' padding characters completely optional.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,678,if (eof && modulus != 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,679,if (buffer == null || buffer.length - pos < decodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,680,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,683,"//  we ignore partial bytes, i.e. only multiples of 8 count"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,684,switch (modulus) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,685,"case 2 : // 10 bits, drop 2 and output one byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,686,buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,687,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,688,"case 3 : // 15 bits, drop 7 and output 1 byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,689,buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,690,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,691,case 4 : // 20 bits = 2*8 + 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,692,x = x >> 4; // drop 4 bits
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,693,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,694,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,695,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,696,case 5 : // 25bits = 3*8 + 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,697,x = x >> 1;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,698,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,699,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,700,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,701,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,702,case 6 : // 30bits = 3*8 + 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,703,x = x >> 6;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,704,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,705,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,706,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,707,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,708,case 7 : // 35 = 4*8 +3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,709,x = x >> 3;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,710,buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,711,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,712,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,713,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,714,break;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,994,eturn len;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,998, Resets this Base32 object to its initial newly constructed state.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1000,rivate void reset() {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1001,uffer = null;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1002,os = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1003,eadPos = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1004,urrentLinePos = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1005,odulus = 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,1006,of = false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,720,* Pre-calculates the amount of space needed to Base32-encode the supplied array.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,722,* @param pArray byte[] array which will later be encoded
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,723,* @param chunkSize line-length of the output (<= 0 means no chunking) between each
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,724,*        chunkSeparator (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,725,* @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,727,* @return amount of space needed to encoded the supplied array.  Returns
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,728,*         a long since a max-len array will require Integer.MAX_VALUE + 33%.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,730,"private static long getEncodeLength(byte[] pArray, int chunkSize,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,731,byte[] chunkSeparator) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,732,// Base32 always encodes to multiples of 8 (BYTES_PER_ENCODED_CHUNK).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,733,chunkSize = (chunkSize / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,735,long len = (pArray.length * BYTES_PER_ENCODED_BLOCK) / BYTES_PER_UNENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,736,long mod = len % BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,737,if (mod != 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,738,len += BYTES_PER_ENCODED_BLOCK - mod;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,740,if (chunkSize > 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,741,boolean lenChunksPerfectly = len % chunkSize == 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,742,len += (len / chunkSize) * chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,743,if (!lenChunksPerfectly) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,744,len += chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,747,return len;

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,27,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,32,import org.junit.Ignore;
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,43,"private static final String STRING_FIXTURE = ""Hello World"";"
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,46,* Tests the problem reported in CODEC-130. Missing / wrong implementation of skip.
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,48,@Test
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,49,@Ignore
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,50,public void testCodec130() throws IOException {
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,51,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,52,Base32OutputStream base32os = new Base32OutputStream(bos);
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,54,base32os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,55,base32os.close();
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,57,ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,58,Base32InputStream ins = new Base32InputStream(bis);
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,60,// we skip the first character read from the reader
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,61,ins.skip(1);
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,62,"byte[] decodedBytes = Base32TestData.streamToBytes(ins, new byte[64]);"
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,63,String str = StringUtils.newStringUtf8(decodedBytes);
True,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,65,"assertEquals(STRING_FIXTURE.substring(1), str);"
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,64,ase64os.write(STRING_FIXTURE.getBytes());
True,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,64,base64os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));
True,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,65,base64os.close();
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,71,tringBuffer sb = new StringBuffer();
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,72,nt len = 0;
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,73,yte[] bytes = new byte[10];
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,74,hile ((len = ins.read(bytes)) != -1) {
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,75,"tring s = new String(bytes, 0, len, ""iso-8859-1"");"
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,76,b.append(s);
False,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,78,tring str = sb.toString();
True,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,72,"byte[] decodedBytes = Base64TestData.streamToBytes(ins, new byte[64]);"
True,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,73,String str = StringUtils.newStringUtf8(decodedBytes);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,433," Encodes a byte[] containing binary data, into a byte[] containing"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,434, characters in the alphabet.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,436, @param pArray
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,437,            a byte array containing binary data
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,438, @param offset
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,439,            initial offset of the subarray.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,440, @param length
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,441,            length of the subarray.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,442, @return A byte array containing only the base N alphabetic character data
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,443, @since 1.11
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,433,"* Encodes a byte[] containing binary data, into a byte[] containing"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,434,* characters in the alphabet.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,436,* @param pArray
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,437,*            a byte array containing binary data
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,438,* @param offset
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,439,*            initial offset of the subarray.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,440,* @param length
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,441,*            length of the subarray.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,442,* @return A byte array containing only the base N alphabetic character data
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,443,* @since 1.11
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,78,Test
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,79,ublic void testBase64AtBufferStart() {
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,80,"estBase64InBuffer(0, 100);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,83,Test
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,84,ublic void testBase64AtBufferEnd() {
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,85,"estBase64InBuffer(100, 0);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,88,Test
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,89,ublic void testBase64AtBufferMiddle() {
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,90,"estBase64InBuffer(100, 100);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,93,"rivate void testBase64InBuffer(int startPasSize, int endPadSize) {"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,94,inal Base32 codec = new Base32();
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,95,or (final String[] element : BASE32_TEST_CASES) {
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,96,inal byte[] bytes = element[0].getBytes(CHARSET_UTF8);
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,97,"yte[] buffer = ArrayUtils.addAll(bytes, new byte[endPadSize]);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,98,"uffer = ArrayUtils.addAll(new byte[startPasSize], buffer);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,99,"ssertEquals(element[1], StringUtils.newStringUtf8(codec.encode(buffer, startPasSize, bytes.length)));"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,78,@Test
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,79,public void testBase64AtBufferStart() {
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,80,"testBase64InBuffer(0, 100);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,83,@Test
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,84,public void testBase64AtBufferEnd() {
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,85,"testBase64InBuffer(100, 0);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,88,@Test
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,89,public void testBase64AtBufferMiddle() {
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,90,"testBase64InBuffer(100, 100);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,93,"private void testBase64InBuffer(int startPasSize, int endPadSize) {"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,94,final Base32 codec = new Base32();
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,95,for (final String[] element : BASE32_TEST_CASES) {
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,96,final byte[] bytes = element[0].getBytes(CHARSET_UTF8);
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,97,"byte[] buffer = ArrayUtils.addAll(bytes, new byte[endPadSize]);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,98,"buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,99,"assertEquals(element[1], StringUtils.newStringUtf8(codec.encode(buffer, startPasSize, bytes.length)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,46,rivate static final Charset CHARSET_UTF8 = Charsets.UTF_8;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,48,rivate final Random random = new Random();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,51, @return Returns the random.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,53,ublic Random getRandom() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,54,eturn this.random;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,58, Test the isStringBase64 method.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,60,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,61,ublic void testIsStringBase64() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,62,inal String nullString = null;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,63,"inal String emptyString = """";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,64,"inal String validString = ""abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL=============="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,65,inal String invalidString = validString + (char) 0; // append null
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,66,/ character
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,68,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,69,ase64.isBase64(nullString);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,70,"ail(""Base64.isStringBase64() should not be null-safe."");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,71, catch (final NullPointerException npe) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,72,"ssertNotNull(""Base64.isStringBase64() should not be null-safe."", npe);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,75,"ssertTrue(""Base64.isStringBase64(empty-string) is true"", Base64.isBase64(emptyString));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,76,"ssertTrue(""Base64.isStringBase64(valid-string) is true"", Base64.isBase64(validString));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,77,"ssertFalse(""Base64.isStringBase64(invalid-string) is false"", Base64.isBase64(invalidString));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,81, Test the Base64 implementation
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,83,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,84,ublic void testBase64() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,85,"inal String content = ""Hello World"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,86,tring encodedContent;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,87,yte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,88,ncodedContent = StringUtils.newStringUtf8(encodedBytes);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,89,"ssertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,91,"ase64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null); // null"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,92,/ lineSeparator
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,93,/ same as
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,94,/ saying
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,95,/ no-chunking
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,96,ncodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,97,ncodedContent = StringUtils.newStringUtf8(encodedBytes);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,98,"ssertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,100,"64 = new Base64(0, null); // null lineSeparator same as saying"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,101,/ no-chunking
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,102,ncodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,103,ncodedContent = StringUtils.newStringUtf8(encodedBytes);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,104,"ssertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,106,/ bogus characters to decode (to skip actually) {e-acute*6}
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,107,"inal byte[] decode = b64.decode(""SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,108,inal String decodeString = StringUtils.newStringUtf8(decode);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,109,"ssertEquals(""decode hello world"", ""Hello World"", decodeString);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,112,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,113,ublic void testBase64AtBufferStart() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,114,"estBase64InBuffer(0, 100);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,117,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,118,ublic void testBase64AtBufferEnd() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,119,"estBase64InBuffer(100, 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,122,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,123,ublic void testBase64AtBufferMiddle() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,124,"estBase64InBuffer(100, 100);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,127,"rivate void testBase64InBuffer(int startPasSize, int endPadSize) {"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,128,"inal String content = ""Hello World"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,129,tring encodedContent;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,130,inal byte[] bytesUtf8 = StringUtils.getBytesUtf8(content);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,131,"yte[] buffer = ArrayUtils.addAll(bytesUtf8, new byte[endPadSize]);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,132,"uffer = ArrayUtils.addAll(new byte[startPasSize], buffer);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,133,"yte[] encodedBytes = new Base64().encode(buffer, startPasSize, bytesUtf8.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,134,ncodedContent = StringUtils.newStringUtf8(encodedBytes);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,135,"ssertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,139, Test our decode with pad character in the middle. (Our current
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,140, implementation: halt decode and return what we've got so far).
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,142, The point of this test is not to say
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,143," ""this is the correct way to decode base64."" The point is simply to keep"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,144, us aware of the current logic since 1.4 so we don't accidentally break it
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,145, without realizing.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,147, Note for historians. The 1.3 logic would decode to:
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,148," ""Hello World\u0000Hello World"" -- null in the middle --- and 1.4"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,149, unwittingly changed it to current logic.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,151,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,152,ublic void testDecodeWithInnerPad() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,153,"inal String content = ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,154,inal byte[] result = Base64.decodeBase64(content);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,155,"inal byte[] shouldBe = StringUtils.getBytesUtf8(""Hello World"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,156,"ssertTrue(""decode should halt at pad (=)"", Arrays.equals(result, shouldBe));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,160, Tests Base64.encodeBase64().
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,162,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,163,ublic void testChunkedEncodeMultipleOf76() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,164,"inal byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,165,"/ convert to ""\r\n"" so we're equal to the old openssl encoding test"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,166,/ stored
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,167,/ in Base64TestData.ENCODED_76_CHARS_PER_LINE:
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,168,"inal String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(""\n"", ""\r\n"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,169,inal byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,170,"ssertTrue(""chunkedEncodeMultipleOf76"", Arrays.equals(expectedEncode, actualEncode));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,174, CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,175, non-BASE64 bytes
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,177,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,178,ublic void testCodec68() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,179,"inal byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,180,ase64.decodeBase64(x);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,183,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,184,ublic void testCodeInteger1() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,185,"inal String encodedInt1 = ""li7dzDacuo67Jg7mtqEm2TRuOMU="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,186,"inal BigInteger bigInt1 = new BigInteger(""85739377120809420210425962799"" + ""0318636601332086981"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,188,"ssertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,189,"ssertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,192,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,193,ublic void testCodeInteger2() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,194,"inal String encodedInt2 = ""9B5ypLY9pMOmtxCeTDHgwdNFeGs="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,195,"inal BigInteger bigInt2 = new BigInteger(""13936727572861167254666467268"" + ""91466679477132949611"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,197,"ssertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,198,"ssertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,201,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,202,ublic void testCodeInteger3() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,203,"inal String encodedInt3 = ""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,204," ""rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,205,inal BigInteger bigInt3 = new BigInteger(
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,206,"10806548154093873461951748545"" + ""1196989136416448805819079363524309897749044958112417136240557"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,207," ""4495062430572478766856090958495998158114332651671116876320938126"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,209,"ssertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,210,"ssertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,213,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,214,ublic void testCodeInteger4() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,215,"inal String encodedInt4 = ""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,216," ""4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,217," ""DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv"" + ""Q0="";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,218,inal BigInteger bigInt4 = new BigInteger(
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,219,"80624726256040348115552042320"" + ""6968135001872753709424419772586693950232350200555646471175944"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,220," ""519297087885987040810778908507262272892702303774422853675597"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,221," ""748008534040890923814202286633163248086055216976551456088015"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,222," ""338880713818192088877057717530169381044092839402438015097654"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,223," ""53542091716518238707344493641683483917"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,225,"ssertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,226,"ssertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,229,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,230,ublic void testCodeIntegerEdgeCases() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,231,/ TODO
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,234,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,235,ublic void testCodeIntegerNull() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,236,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,237,ase64.encodeInteger(null);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,238,"ail(""Exception not thrown when passing in null to encodeInteger(BigInteger)"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,239, catch (final NullPointerException npe) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,240,/ expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,241, catch (final Exception e) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,242,"ail(""Incorrect Exception caught when passing in null to encodeInteger(BigInteger)"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,246,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,247,ublic void testConstructors() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,248,ase64 base64;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,249,ase64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,250,ase64 = new Base64(-1);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,251,"ase64 = new Base64(-1, new byte[] {});"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,252,"ase64 = new Base64(64, new byte[] {});"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,253,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,254,"ase64 = new Base64(-1, new byte[] { 'A' }); // TODO do we need to"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,255,/ check sep if len
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,256,/ = -1?
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,257,"ail(""Should have rejected attempt to use 'A' as a line separator"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,258, catch (final IllegalArgumentException ignored) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,259,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,261,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,262,"ase64 = new Base64(64, new byte[] { 'A' });"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,263,"ail(""Should have rejected attempt to use 'A' as a line separator"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,264, catch (final IllegalArgumentException ignored) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,265,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,267,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,268,"ase64 = new Base64(64, new byte[] { '=' });"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,269,"ail(""Should have rejected attempt to use '=' as a line separator"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,270, catch (final IllegalArgumentException ignored) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,271,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,273,"ase64 = new Base64(64, new byte[] { '$' }); // OK"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,274,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,275,"ase64 = new Base64(64, new byte[] { 'A', '$' });"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,276,"ail(""Should have rejected attempt to use 'A$' as a line separator"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,277, catch (final IllegalArgumentException ignored) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,278,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,280,"ase64 = new Base64(64, new byte[] { ' ', '$', '\n', '\r', '\t' }); // OK"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,281,ssertNotNull(base64);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,284,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,285,ublic void testConstructor_Int_ByteArray_Boolean() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,286,"inal Base64 base64 = new Base64(65, new byte[] { '\t' }, false);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,287,inal byte[] encoded = base64.encode(Base64TestData.DECODED);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,288,tring expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,289,"xpectedResult = expectedResult.replace('\n', '\t');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,290,inal String result = StringUtils.newStringUtf8(encoded);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,291,"ssertEquals(""new Base64(65, \\t, false)"", expectedResult, result);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,294,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,295,ublic void testConstructor_Int_ByteArray_Boolean_UrlSafe() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,296,/ url-safe variation
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,297,"inal Base64 base64 = new Base64(64, new byte[] { '\t' }, true);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,298,inal byte[] encoded = base64.encode(Base64TestData.DECODED);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,299,tring expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,300,"xpectedResult = expectedResult.replaceAll(""="", """"); // url-safe has no"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,301,/ == padding.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,302,"xpectedResult = expectedResult.replace('\n', '\t');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,303,"xpectedResult = expectedResult.replace('+', '-');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,304,"xpectedResult = expectedResult.replace('/', '_');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,305,inal String result = StringUtils.newStringUtf8(encoded);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,306,"ssertEquals(""new Base64(64, \\t, true)"", result, expectedResult);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,310," Tests conditional true branch for ""marker0"" test."
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,312,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,313,ublic void testDecodePadMarkerIndex2() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,314,"ssertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,318," Tests conditional branches for ""marker1"" test."
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,320,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,321,ublic void testDecodePadMarkerIndex3() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,322,"ssertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,323,"ssertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,326,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,327,ublic void testDecodePadOnly() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,328,"ssertEquals(0, Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,329,"ssertEquals("""", new String(Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,330,/ Test truncated padding
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,331,"ssertEquals(0, Base64.decodeBase64(""==="".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,332,"ssertEquals(0, Base64.decodeBase64(""=="".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,333,"ssertEquals(0, Base64.decodeBase64(""="".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,334,"ssertEquals(0, Base64.decodeBase64("""".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,337,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,338,ublic void testDecodePadOnlyChunked() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,339,"ssertEquals(0, Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,340,"ssertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,341,/ Test truncated padding
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,342,"ssertEquals(0, Base64.decodeBase64(""===\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,343,"ssertEquals(0, Base64.decodeBase64(""==\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,344,"ssertEquals(0, Base64.decodeBase64(""=\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,345,"ssertEquals(0, Base64.decodeBase64(""\n"".getBytes(CHARSET_UTF8)).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,348,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,349,ublic void testDecodeWithWhitespace() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,351,"inal String orig = ""I am a late night coder."";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,353,inal byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,354,inal StringBuilder intermediate = new StringBuilder(new String(encodedArray));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,356,"ntermediate.insert(2, ' ');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,357,"ntermediate.insert(5, '\t');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,358,"ntermediate.insert(10, '\r');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,359,"ntermediate.insert(15, '\n');"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,361,inal byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,362,inal byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,364,inal String dest = new String(decodedWithWS);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,366,"ssertEquals(""Dest string doesn't equal the original"", orig, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,370, Test encode and decode of empty byte array.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,372,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,373,ublic void testEmptyBase64() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,374,yte[] empty = new byte[0];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,375,yte[] result = Base64.encodeBase64(empty);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,376,"ssertEquals(""empty base64 encode"", 0, result.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,377,"ssertEquals(""empty base64 encode"", null, Base64.encodeBase64(null));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,379,mpty = new byte[0];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,380,esult = Base64.decodeBase64(empty);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,381,"ssertEquals(""empty base64 decode"", 0, result.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,382,"ssertEquals(""empty base64 encode"", null, Base64.decodeBase64((byte[]) null));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,385,/ encode/decode a large random array
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,386,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,387,ublic void testEncodeDecodeRandom() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,388,or (int i = 1; i < 5; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,389,inal byte[] data = new byte[this.getRandom().nextInt(10000) + 1];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,390,his.getRandom().nextBytes(data);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,391,inal byte[] enc = Base64.encodeBase64(data);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,392,ssertTrue(Base64.isBase64(enc));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,393,inal byte[] data2 = Base64.decodeBase64(enc);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,394,"ssertTrue(Arrays.equals(data, data2));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,398,/ encode/decode random arrays from size 0 to size 11
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,399,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,400,ublic void testEncodeDecodeSmall() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,401,or (int i = 0; i < 12; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,402,inal byte[] data = new byte[i];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,403,his.getRandom().nextBytes(data);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,404,inal byte[] enc = Base64.encodeBase64(data);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,405,"ssertTrue(""\"""" + new String(enc) + ""\"" is Base64 data."", Base64.isBase64(enc));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,406,inal byte[] data2 = Base64.decodeBase64(enc);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,407,"ssertTrue(toString(data) + "" equals "" + toString(data2), Arrays.equals(data, data2));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,411,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,412,ublic void testEncodeOverMaxSize() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,413,estEncodeOverMaxSize(-1);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,414,estEncodeOverMaxSize(0);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,415,estEncodeOverMaxSize(1);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,416,estEncodeOverMaxSize(2);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,419,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,420,ublic void testCodec112() { // size calculation assumes always chunked
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,421,inal byte[] in = new byte[] { 0 };
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,422,inal byte[] out = Base64.encodeBase64(in);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,423,"ase64.encodeBase64(in, false, false, out.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,426,rivate void testEncodeOverMaxSize(final int maxSize) throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,427,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,428,"ase64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,429,"ail(""Expected "" + IllegalArgumentException.class.getName());"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,430, catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,431,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,435,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,436,ublic void testIgnoringNonBase64InDecode() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,437,"ssertEquals(""The quick brown fox jumped over the lazy dogs."","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,438,ew String(Base64.decodeBase64(
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,439,"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,440,getBytes(CHARSET_UTF8))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,443,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,444,ublic void testIsArrayByteBase64() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,445,ssertFalse(Base64.isBase64(new byte[] { Byte.MIN_VALUE }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,446,ssertFalse(Base64.isBase64(new byte[] { -125 }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,447,ssertFalse(Base64.isBase64(new byte[] { -10 }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,448,ssertFalse(Base64.isBase64(new byte[] { 0 }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,449,"ssertFalse(Base64.isBase64(new byte[] { 64, Byte.MAX_VALUE }));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,450,ssertFalse(Base64.isBase64(new byte[] { Byte.MAX_VALUE }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,451,ssertTrue(Base64.isBase64(new byte[] { 'A' }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,452,"ssertFalse(Base64.isBase64(new byte[] { 'A', Byte.MIN_VALUE }));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,453,"ssertTrue(Base64.isBase64(new byte[] { 'A', 'Z', 'a' }));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,454,"ssertTrue(Base64.isBase64(new byte[] { '/', '=', '+' }));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,455,ssertFalse(Base64.isBase64(new byte[] { '$' }));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,459, Tests isUrlSafe.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,461,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,462,ublic void testIsUrlSafe() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,463,inal Base64 base64Standard = new Base64(false);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,464,inal Base64 base64URLSafe = new Base64(true);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,466,"ssertFalse(""Base64.isUrlSafe=false"", base64Standard.isUrlSafe());"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,467,"ssertTrue(""Base64.isUrlSafe=true"", base64URLSafe.isUrlSafe());"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,469,"inal byte[] whiteSpace = { ' ', '\n', '\r', '\t' };"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,470,"ssertTrue(""Base64.isBase64(whiteSpace)=true"", Base64.isBase64(whiteSpace));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,473,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,474,ublic void testKnownDecodings() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,475,"ssertEquals(""The quick brown fox jumped over the lazy dogs."", new String(Base64.decodeBase64("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,476,"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,477,"ssertEquals(""It was the best of times, it was the worst of times."", new String(Base64.decodeBase64("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,478,"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,479,"ssertEquals(""http://jakarta.apache.org/commmons"", new String("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,480,"ase64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,481,"ssertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"", new String(Base64.decodeBase64("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,482,"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,483,"ssertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,484,"ew String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,485,"ssertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,488,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,489,ublic void testKnownEncodings() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,490,"ssertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="", new String("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,491,"ase64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,492,ssertEquals(
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,493,"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,494,ew String(Base64.encodeBase64Chunked(
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,495,"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,496,getBytes(CHARSET_UTF8))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,497,"ssertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="", new String("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,498,"ase64.encodeBase64(""It was the best of times, it was the worst of times."".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,499,"ssertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,500,"ew String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,501,"ssertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="", new String("
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,502,"ase64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,503,"ssertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,504,"ew String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,505,"ssertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,508,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,509,ublic void testNonBase64Test() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,511,inal byte[] bArray = { '%' };
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,513,"ssertFalse(""Invalid Base64 array was incorrectly validated as "" + ""an array of Base64 encoded data"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,514,ase64.isBase64(bArray));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,516,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,517,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,518,inal byte[] result = b64.decode(bArray);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,520,"ssertEquals(""The result should be empty as the test encoded content did """
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,521," ""not contain any valid base 64 characters"", 0, result.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,522, catch (final Exception e) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,523,"ail(""Exception was thrown when trying to decode """
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,524," ""invalid base64 encoded data - RFC 2045 requires that all """
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,525," ""non base64 character be discarded, an exception should not"" + "" have been thrown"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,529,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,530,ublic void testObjectDecodeWithInvalidParameter() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,531,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,533,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,534,64.decode(Integer.valueOf(5));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,535,"ail(""decode(Object) didn't throw an exception when passed an Integer object"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,536, catch (final DecoderException e) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,537,/ ignored
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,542,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,543,ublic void testObjectDecodeWithValidParameter() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,545,"inal String original = ""Hello World!"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,546,inal Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,548,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,549,inal Object oDecoded = b64.decode(o);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,550,inal byte[] baDecoded = (byte[]) oDecoded;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,551,inal String dest = new String(baDecoded);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,553,"ssertEquals(""dest string does not equal original"", original, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,556,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,557,ublic void testObjectEncodeWithInvalidParameter() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,558,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,559,ry {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,560,"64.encode(""Yadayadayada"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,561,"ail(""encode(Object) didn't throw an exception when passed a String object"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,562, catch (final EncoderException e) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,563,/ Expected
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,567,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,568,ublic void testObjectEncodeWithValidParameter() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,570,"inal String original = ""Hello World!"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,571,inal Object origObj = original.getBytes(CHARSET_UTF8);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,573,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,574,inal Object oEncoded = b64.encode(origObj);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,575,inal byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,576,inal String dest = new String(bArray);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,578,"ssertEquals(""dest string does not equal original"", original, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,581,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,582,ublic void testObjectEncode() throws Exception {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,583,inal Base64 b64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,584,"ssertEquals(""SGVsbG8gV29ybGQ="", new String(b64.encode(""Hello World"".getBytes(CHARSET_UTF8))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,587,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,588,ublic void testPairs() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,589,"ssertEquals(""AAA="", new String(Base64.encodeBase64(new byte[] { 0, 0 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,590,or (int i = -128; i <= 127; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,591,"inal byte test[] = { (byte) i, (byte) i };"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,592,"ssertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,597, Tests RFC 2045 section 2.1 CRLF definition.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,599,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,600,ublic void testRfc2045Section2Dot1CrLfDefinition() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,601,"ssertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,605, Tests RFC 2045 section 6.8 chuck size definition.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,607,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,608,ublic void testRfc2045Section6Dot8ChunkSizeDefinition() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,609,"ssertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,613, Tests RFC 1421 section 4.3.2.4 chuck size definition.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,615,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,616,ublic void testRfc1421Section6Dot8ChunkSizeDefinition() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,617,"ssertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,621, Tests RFC 4648 section 10 test vectors.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,622, <ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,623," <li>BASE64("""") = """"</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,624," <li>BASE64(""f"") = ""Zg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,625," <li>BASE64(""fo"") = ""Zm8=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,626," <li>BASE64(""foo"") = ""Zm9v""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,627," <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,628," <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,629," <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,630, </ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,632," @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,633,      html/rfc4648</a>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,635,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,636,ublic void testRfc4648Section10Decode() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,637,"ssertEquals("""", StringUtils.newStringUsAscii(Base64.decodeBase64("""")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,638,"ssertEquals(""f"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,639,"ssertEquals(""fo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,640,"ssertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,641,"ssertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,642,"ssertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,643,"ssertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,647, Tests RFC 4648 section 10 test vectors.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,648, <ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,649," <li>BASE64("""") = """"</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,650," <li>BASE64(""f"") = ""Zg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,651," <li>BASE64(""fo"") = ""Zm8=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,652," <li>BASE64(""foo"") = ""Zm9v""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,653," <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,654," <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,655," <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,656, </ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,658," @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,659,      html/rfc4648</a>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,661,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,662,ublic void testRfc4648Section10DecodeWithCrLf() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,663,inal String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,664,"ssertEquals("""", StringUtils.newStringUsAscii(Base64.decodeBase64("""" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,665,"ssertEquals(""f"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,666,"ssertEquals(""fo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,667,"ssertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,668,"ssertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,669,"ssertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,670,"ssertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"" + CRLF)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,674, Tests RFC 4648 section 10 test vectors.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,675, <ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,676," <li>BASE64("""") = """"</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,677," <li>BASE64(""f"") = ""Zg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,678," <li>BASE64(""fo"") = ""Zm8=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,679," <li>BASE64(""foo"") = ""Zm9v""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,680," <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,681," <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,682," <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,683, </ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,685," @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,686,      html/rfc4648</a>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,688,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,689,ublic void testRfc4648Section10Encode() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,690,"ssertEquals("""", Base64.encodeBase64String(StringUtils.getBytesUtf8("""")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,691,"ssertEquals(""Zg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""f"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,692,"ssertEquals(""Zm8="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fo"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,693,"ssertEquals(""Zm9v"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foo"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,694,"ssertEquals(""Zm9vYg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foob"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,695,"ssertEquals(""Zm9vYmE="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fooba"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,696,"ssertEquals(""Zm9vYmFy"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foobar"")));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,700, Tests RFC 4648 section 10 test vectors.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,701, <ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,702," <li>BASE64("""") = """"</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,703," <li>BASE64(""f"") = ""Zg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,704," <li>BASE64(""fo"") = ""Zm8=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,705," <li>BASE64(""foo"") = ""Zm9v""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,706," <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,707," <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,708," <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,709, </ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,711," @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,712,      html/rfc4648</a>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,714,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,715,ublic void testRfc4648Section10DecodeEncode() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,716,"estDecodeEncode("""");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,717,"estDecodeEncode(""Zg=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,718,"estDecodeEncode(""Zm8="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,719,"estDecodeEncode(""Zm9v"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,720,"estDecodeEncode(""Zm9vYg=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,721,"estDecodeEncode(""Zm9vYmE="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,722,"estDecodeEncode(""Zm9vYmFy"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,725,rivate void testDecodeEncode(final String encodedText) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,726,inal String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,727,inal String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,728,"ssertEquals(encodedText, encodedText2);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,732, Tests RFC 4648 section 10 test vectors.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,733, <ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,734," <li>BASE64("""") = """"</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,735," <li>BASE64(""f"") = ""Zg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,736," <li>BASE64(""fo"") = ""Zm8=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,737," <li>BASE64(""foo"") = ""Zm9v""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,738," <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,739," <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,740," <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,741, </ul>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,743," @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,744,      html/rfc4648</a>
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,746,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,747,ublic void testRfc4648Section10EncodeDecode() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,748,"estEncodeDecode("""");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,749,"estEncodeDecode(""f"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,750,"estEncodeDecode(""fo"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,751,"estEncodeDecode(""foo"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,752,"estEncodeDecode(""foob"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,753,"estEncodeDecode(""fooba"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,754,"estEncodeDecode(""foobar"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,757,rivate void testEncodeDecode(final String plainText) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,758,inal String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,759,inal String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,760,"ssertEquals(plainText, decodedText);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,763,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,764,ublic void testSingletons() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,765,"ssertEquals(""AA=="", new String(Base64.encodeBase64(new byte[] { (byte) 0 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,766,"ssertEquals(""AQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 1 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,767,"ssertEquals(""Ag=="", new String(Base64.encodeBase64(new byte[] { (byte) 2 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,768,"ssertEquals(""Aw=="", new String(Base64.encodeBase64(new byte[] { (byte) 3 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,769,"ssertEquals(""BA=="", new String(Base64.encodeBase64(new byte[] { (byte) 4 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,770,"ssertEquals(""BQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 5 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,771,"ssertEquals(""Bg=="", new String(Base64.encodeBase64(new byte[] { (byte) 6 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,772,"ssertEquals(""Bw=="", new String(Base64.encodeBase64(new byte[] { (byte) 7 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,773,"ssertEquals(""CA=="", new String(Base64.encodeBase64(new byte[] { (byte) 8 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,774,"ssertEquals(""CQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 9 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,775,"ssertEquals(""Cg=="", new String(Base64.encodeBase64(new byte[] { (byte) 10 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,776,"ssertEquals(""Cw=="", new String(Base64.encodeBase64(new byte[] { (byte) 11 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,777,"ssertEquals(""DA=="", new String(Base64.encodeBase64(new byte[] { (byte) 12 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,778,"ssertEquals(""DQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 13 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,779,"ssertEquals(""Dg=="", new String(Base64.encodeBase64(new byte[] { (byte) 14 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,780,"ssertEquals(""Dw=="", new String(Base64.encodeBase64(new byte[] { (byte) 15 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,781,"ssertEquals(""EA=="", new String(Base64.encodeBase64(new byte[] { (byte) 16 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,782,"ssertEquals(""EQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 17 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,783,"ssertEquals(""Eg=="", new String(Base64.encodeBase64(new byte[] { (byte) 18 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,784,"ssertEquals(""Ew=="", new String(Base64.encodeBase64(new byte[] { (byte) 19 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,785,"ssertEquals(""FA=="", new String(Base64.encodeBase64(new byte[] { (byte) 20 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,786,"ssertEquals(""FQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 21 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,787,"ssertEquals(""Fg=="", new String(Base64.encodeBase64(new byte[] { (byte) 22 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,788,"ssertEquals(""Fw=="", new String(Base64.encodeBase64(new byte[] { (byte) 23 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,789,"ssertEquals(""GA=="", new String(Base64.encodeBase64(new byte[] { (byte) 24 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,790,"ssertEquals(""GQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 25 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,791,"ssertEquals(""Gg=="", new String(Base64.encodeBase64(new byte[] { (byte) 26 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,792,"ssertEquals(""Gw=="", new String(Base64.encodeBase64(new byte[] { (byte) 27 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,793,"ssertEquals(""HA=="", new String(Base64.encodeBase64(new byte[] { (byte) 28 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,794,"ssertEquals(""HQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 29 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,795,"ssertEquals(""Hg=="", new String(Base64.encodeBase64(new byte[] { (byte) 30 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,796,"ssertEquals(""Hw=="", new String(Base64.encodeBase64(new byte[] { (byte) 31 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,797,"ssertEquals(""IA=="", new String(Base64.encodeBase64(new byte[] { (byte) 32 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,798,"ssertEquals(""IQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 33 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,799,"ssertEquals(""Ig=="", new String(Base64.encodeBase64(new byte[] { (byte) 34 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,800,"ssertEquals(""Iw=="", new String(Base64.encodeBase64(new byte[] { (byte) 35 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,801,"ssertEquals(""JA=="", new String(Base64.encodeBase64(new byte[] { (byte) 36 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,802,"ssertEquals(""JQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 37 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,803,"ssertEquals(""Jg=="", new String(Base64.encodeBase64(new byte[] { (byte) 38 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,804,"ssertEquals(""Jw=="", new String(Base64.encodeBase64(new byte[] { (byte) 39 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,805,"ssertEquals(""KA=="", new String(Base64.encodeBase64(new byte[] { (byte) 40 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,806,"ssertEquals(""KQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 41 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,807,"ssertEquals(""Kg=="", new String(Base64.encodeBase64(new byte[] { (byte) 42 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,808,"ssertEquals(""Kw=="", new String(Base64.encodeBase64(new byte[] { (byte) 43 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,809,"ssertEquals(""LA=="", new String(Base64.encodeBase64(new byte[] { (byte) 44 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,810,"ssertEquals(""LQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 45 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,811,"ssertEquals(""Lg=="", new String(Base64.encodeBase64(new byte[] { (byte) 46 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,812,"ssertEquals(""Lw=="", new String(Base64.encodeBase64(new byte[] { (byte) 47 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,813,"ssertEquals(""MA=="", new String(Base64.encodeBase64(new byte[] { (byte) 48 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,814,"ssertEquals(""MQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 49 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,815,"ssertEquals(""Mg=="", new String(Base64.encodeBase64(new byte[] { (byte) 50 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,816,"ssertEquals(""Mw=="", new String(Base64.encodeBase64(new byte[] { (byte) 51 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,817,"ssertEquals(""NA=="", new String(Base64.encodeBase64(new byte[] { (byte) 52 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,818,"ssertEquals(""NQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 53 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,819,"ssertEquals(""Ng=="", new String(Base64.encodeBase64(new byte[] { (byte) 54 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,820,"ssertEquals(""Nw=="", new String(Base64.encodeBase64(new byte[] { (byte) 55 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,821,"ssertEquals(""OA=="", new String(Base64.encodeBase64(new byte[] { (byte) 56 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,822,"ssertEquals(""OQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 57 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,823,"ssertEquals(""Og=="", new String(Base64.encodeBase64(new byte[] { (byte) 58 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,824,"ssertEquals(""Ow=="", new String(Base64.encodeBase64(new byte[] { (byte) 59 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,825,"ssertEquals(""PA=="", new String(Base64.encodeBase64(new byte[] { (byte) 60 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,826,"ssertEquals(""PQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 61 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,827,"ssertEquals(""Pg=="", new String(Base64.encodeBase64(new byte[] { (byte) 62 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,828,"ssertEquals(""Pw=="", new String(Base64.encodeBase64(new byte[] { (byte) 63 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,829,"ssertEquals(""QA=="", new String(Base64.encodeBase64(new byte[] { (byte) 64 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,830,"ssertEquals(""QQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 65 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,831,"ssertEquals(""Qg=="", new String(Base64.encodeBase64(new byte[] { (byte) 66 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,832,"ssertEquals(""Qw=="", new String(Base64.encodeBase64(new byte[] { (byte) 67 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,833,"ssertEquals(""RA=="", new String(Base64.encodeBase64(new byte[] { (byte) 68 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,834,"ssertEquals(""RQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 69 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,835,"ssertEquals(""Rg=="", new String(Base64.encodeBase64(new byte[] { (byte) 70 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,836,"ssertEquals(""Rw=="", new String(Base64.encodeBase64(new byte[] { (byte) 71 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,837,"ssertEquals(""SA=="", new String(Base64.encodeBase64(new byte[] { (byte) 72 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,838,"ssertEquals(""SQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 73 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,839,"ssertEquals(""Sg=="", new String(Base64.encodeBase64(new byte[] { (byte) 74 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,840,"ssertEquals(""Sw=="", new String(Base64.encodeBase64(new byte[] { (byte) 75 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,841,"ssertEquals(""TA=="", new String(Base64.encodeBase64(new byte[] { (byte) 76 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,842,"ssertEquals(""TQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 77 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,843,"ssertEquals(""Tg=="", new String(Base64.encodeBase64(new byte[] { (byte) 78 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,844,"ssertEquals(""Tw=="", new String(Base64.encodeBase64(new byte[] { (byte) 79 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,845,"ssertEquals(""UA=="", new String(Base64.encodeBase64(new byte[] { (byte) 80 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,846,"ssertEquals(""UQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 81 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,847,"ssertEquals(""Ug=="", new String(Base64.encodeBase64(new byte[] { (byte) 82 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,848,"ssertEquals(""Uw=="", new String(Base64.encodeBase64(new byte[] { (byte) 83 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,849,"ssertEquals(""VA=="", new String(Base64.encodeBase64(new byte[] { (byte) 84 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,850,"ssertEquals(""VQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 85 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,851,"ssertEquals(""Vg=="", new String(Base64.encodeBase64(new byte[] { (byte) 86 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,852,"ssertEquals(""Vw=="", new String(Base64.encodeBase64(new byte[] { (byte) 87 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,853,"ssertEquals(""WA=="", new String(Base64.encodeBase64(new byte[] { (byte) 88 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,854,"ssertEquals(""WQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 89 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,855,"ssertEquals(""Wg=="", new String(Base64.encodeBase64(new byte[] { (byte) 90 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,856,"ssertEquals(""Ww=="", new String(Base64.encodeBase64(new byte[] { (byte) 91 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,857,"ssertEquals(""XA=="", new String(Base64.encodeBase64(new byte[] { (byte) 92 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,858,"ssertEquals(""XQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 93 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,859,"ssertEquals(""Xg=="", new String(Base64.encodeBase64(new byte[] { (byte) 94 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,860,"ssertEquals(""Xw=="", new String(Base64.encodeBase64(new byte[] { (byte) 95 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,861,"ssertEquals(""YA=="", new String(Base64.encodeBase64(new byte[] { (byte) 96 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,862,"ssertEquals(""YQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 97 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,863,"ssertEquals(""Yg=="", new String(Base64.encodeBase64(new byte[] { (byte) 98 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,864,"ssertEquals(""Yw=="", new String(Base64.encodeBase64(new byte[] { (byte) 99 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,865,"ssertEquals(""ZA=="", new String(Base64.encodeBase64(new byte[] { (byte) 100 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,866,"ssertEquals(""ZQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 101 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,867,"ssertEquals(""Zg=="", new String(Base64.encodeBase64(new byte[] { (byte) 102 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,868,"ssertEquals(""Zw=="", new String(Base64.encodeBase64(new byte[] { (byte) 103 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,869,"ssertEquals(""aA=="", new String(Base64.encodeBase64(new byte[] { (byte) 104 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,870,or (int i = -128; i <= 127; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,871,inal byte test[] = { (byte) i };
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,872,"ssertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,876,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,877,ublic void testSingletonsChunked() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,878,"ssertEquals(""AA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,879,"ssertEquals(""AQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,880,"ssertEquals(""Ag==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,881,"ssertEquals(""Aw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,882,"ssertEquals(""BA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,883,"ssertEquals(""BQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,884,"ssertEquals(""Bg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,885,"ssertEquals(""Bw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,886,"ssertEquals(""CA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,887,"ssertEquals(""CQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,888,"ssertEquals(""Cg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,889,"ssertEquals(""Cw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,890,"ssertEquals(""DA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,891,"ssertEquals(""DQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,892,"ssertEquals(""Dg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,893,"ssertEquals(""Dw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,894,"ssertEquals(""EA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,895,"ssertEquals(""EQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,896,"ssertEquals(""Eg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,897,"ssertEquals(""Ew==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,898,"ssertEquals(""FA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,899,"ssertEquals(""FQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,900,"ssertEquals(""Fg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,901,"ssertEquals(""Fw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,902,"ssertEquals(""GA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,903,"ssertEquals(""GQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,904,"ssertEquals(""Gg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,905,"ssertEquals(""Gw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,906,"ssertEquals(""HA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,907,"ssertEquals(""HQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,908,"ssertEquals(""Hg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,909,"ssertEquals(""Hw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,910,"ssertEquals(""IA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,911,"ssertEquals(""IQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,912,"ssertEquals(""Ig==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,913,"ssertEquals(""Iw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,914,"ssertEquals(""JA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,915,"ssertEquals(""JQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,916,"ssertEquals(""Jg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,917,"ssertEquals(""Jw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,918,"ssertEquals(""KA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,919,"ssertEquals(""KQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,920,"ssertEquals(""Kg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,921,"ssertEquals(""Kw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,922,"ssertEquals(""LA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,923,"ssertEquals(""LQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,924,"ssertEquals(""Lg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,925,"ssertEquals(""Lw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,926,"ssertEquals(""MA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,927,"ssertEquals(""MQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,928,"ssertEquals(""Mg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,929,"ssertEquals(""Mw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,930,"ssertEquals(""NA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,931,"ssertEquals(""NQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,932,"ssertEquals(""Ng==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,933,"ssertEquals(""Nw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,934,"ssertEquals(""OA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,935,"ssertEquals(""OQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,936,"ssertEquals(""Og==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,937,"ssertEquals(""Ow==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,938,"ssertEquals(""PA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,939,"ssertEquals(""PQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,940,"ssertEquals(""Pg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,941,"ssertEquals(""Pw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,942,"ssertEquals(""QA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,943,"ssertEquals(""QQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,944,"ssertEquals(""Qg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,945,"ssertEquals(""Qw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,946,"ssertEquals(""RA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,947,"ssertEquals(""RQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,948,"ssertEquals(""Rg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,949,"ssertEquals(""Rw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,950,"ssertEquals(""SA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,951,"ssertEquals(""SQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,952,"ssertEquals(""Sg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,953,"ssertEquals(""Sw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,954,"ssertEquals(""TA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,955,"ssertEquals(""TQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,956,"ssertEquals(""Tg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,957,"ssertEquals(""Tw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,958,"ssertEquals(""UA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,959,"ssertEquals(""UQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,960,"ssertEquals(""Ug==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,961,"ssertEquals(""Uw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,962,"ssertEquals(""VA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,963,"ssertEquals(""VQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,964,"ssertEquals(""Vg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,965,"ssertEquals(""Vw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,966,"ssertEquals(""WA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,967,"ssertEquals(""WQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,968,"ssertEquals(""Wg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,969,"ssertEquals(""Ww==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,970,"ssertEquals(""XA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,971,"ssertEquals(""XQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,972,"ssertEquals(""Xg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,973,"ssertEquals(""Xw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,974,"ssertEquals(""YA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,975,"ssertEquals(""YQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,976,"ssertEquals(""Yg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,977,"ssertEquals(""Yw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,978,"ssertEquals(""ZA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,979,"ssertEquals(""ZQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,980,"ssertEquals(""Zg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,981,"ssertEquals(""Zw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,982,"ssertEquals(""aA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,985,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,986,ublic void testTriplets() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,987,"ssertEquals(""AAAA"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,988,"ssertEquals(""AAAB"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,989,"ssertEquals(""AAAC"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,990,"ssertEquals(""AAAD"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,991,"ssertEquals(""AAAE"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,992,"ssertEquals(""AAAF"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,993,"ssertEquals(""AAAG"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,994,"ssertEquals(""AAAH"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,995,"ssertEquals(""AAAI"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,996,"ssertEquals(""AAAJ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,997,"ssertEquals(""AAAK"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,998,"ssertEquals(""AAAL"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,999,"ssertEquals(""AAAM"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1000,"ssertEquals(""AAAN"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1001,"ssertEquals(""AAAO"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1002,"ssertEquals(""AAAP"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1003,"ssertEquals(""AAAQ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1004,"ssertEquals(""AAAR"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1005,"ssertEquals(""AAAS"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1006,"ssertEquals(""AAAT"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1007,"ssertEquals(""AAAU"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1008,"ssertEquals(""AAAV"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1009,"ssertEquals(""AAAW"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1010,"ssertEquals(""AAAX"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1011,"ssertEquals(""AAAY"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1012,"ssertEquals(""AAAZ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1013,"ssertEquals(""AAAa"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1014,"ssertEquals(""AAAb"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1015,"ssertEquals(""AAAc"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1016,"ssertEquals(""AAAd"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1017,"ssertEquals(""AAAe"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1018,"ssertEquals(""AAAf"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1019,"ssertEquals(""AAAg"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1020,"ssertEquals(""AAAh"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1021,"ssertEquals(""AAAi"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1022,"ssertEquals(""AAAj"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1023,"ssertEquals(""AAAk"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1024,"ssertEquals(""AAAl"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1025,"ssertEquals(""AAAm"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1026,"ssertEquals(""AAAn"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1027,"ssertEquals(""AAAo"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1028,"ssertEquals(""AAAp"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1029,"ssertEquals(""AAAq"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1030,"ssertEquals(""AAAr"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1031,"ssertEquals(""AAAs"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1032,"ssertEquals(""AAAt"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1033,"ssertEquals(""AAAu"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1034,"ssertEquals(""AAAv"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1035,"ssertEquals(""AAAw"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1036,"ssertEquals(""AAAx"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1037,"ssertEquals(""AAAy"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1038,"ssertEquals(""AAAz"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1039,"ssertEquals(""AAA0"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1040,"ssertEquals(""AAA1"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1041,"ssertEquals(""AAA2"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1042,"ssertEquals(""AAA3"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1043,"ssertEquals(""AAA4"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1044,"ssertEquals(""AAA5"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1045,"ssertEquals(""AAA6"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1046,"ssertEquals(""AAA7"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1047,"ssertEquals(""AAA8"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1048,"ssertEquals(""AAA9"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1049,"ssertEquals(""AAA+"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1050,"ssertEquals(""AAA/"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1053,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1054,ublic void testTripletsChunked() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1055,"ssertEquals(""AAAA\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1056,"ssertEquals(""AAAB\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1057,"ssertEquals(""AAAC\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1058,"ssertEquals(""AAAD\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1059,"ssertEquals(""AAAE\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1060,"ssertEquals(""AAAF\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1061,"ssertEquals(""AAAG\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1062,"ssertEquals(""AAAH\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1063,"ssertEquals(""AAAI\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1064,"ssertEquals(""AAAJ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1065,"ssertEquals(""AAAK\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1066,"ssertEquals(""AAAL\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1067,"ssertEquals(""AAAM\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1068,"ssertEquals(""AAAN\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1069,"ssertEquals(""AAAO\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1070,"ssertEquals(""AAAP\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1071,"ssertEquals(""AAAQ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1072,"ssertEquals(""AAAR\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1073,"ssertEquals(""AAAS\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1074,"ssertEquals(""AAAT\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1075,"ssertEquals(""AAAU\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1076,"ssertEquals(""AAAV\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1077,"ssertEquals(""AAAW\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1078,"ssertEquals(""AAAX\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1079,"ssertEquals(""AAAY\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1080,"ssertEquals(""AAAZ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1081,"ssertEquals(""AAAa\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1082,"ssertEquals(""AAAb\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1083,"ssertEquals(""AAAc\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1084,"ssertEquals(""AAAd\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1085,"ssertEquals(""AAAe\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1086,"ssertEquals(""AAAf\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1087,"ssertEquals(""AAAg\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1088,"ssertEquals(""AAAh\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1089,"ssertEquals(""AAAi\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1090,"ssertEquals(""AAAj\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1091,"ssertEquals(""AAAk\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1092,"ssertEquals(""AAAl\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1093,"ssertEquals(""AAAm\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1094,"ssertEquals(""AAAn\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1095,"ssertEquals(""AAAo\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1096,"ssertEquals(""AAAp\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1097,"ssertEquals(""AAAq\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1098,"ssertEquals(""AAAr\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1099,"ssertEquals(""AAAs\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1100,"ssertEquals(""AAAt\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1101,"ssertEquals(""AAAu\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1102,"ssertEquals(""AAAv\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1103,"ssertEquals(""AAAw\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1104,"ssertEquals(""AAAx\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1105,"ssertEquals(""AAAy\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1106,"ssertEquals(""AAAz\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1107,"ssertEquals(""AAA0\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1108,"ssertEquals(""AAA1\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1109,"ssertEquals(""AAA2\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1110,"ssertEquals(""AAA3\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1111,"ssertEquals(""AAA4\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1112,"ssertEquals(""AAA5\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1113,"ssertEquals(""AAA6\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1114,"ssertEquals(""AAA7\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1115,"ssertEquals(""AAA8\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1116,"ssertEquals(""AAA9\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1117,"ssertEquals(""AAA+\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1118,"ssertEquals(""AAA/\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1122," Tests url-safe Base64 against random data, sizes 0 to 150."
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1124,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1125,ublic void testUrlSafe() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1126,/ test random data of sizes 0 thru 150
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1127,or (int i = 0; i <= 150; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1128,"inal byte[][] randomData = Base64TestData.randomData(i, true);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1129,inal byte[] encoded = randomData[1];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1130,inal byte[] decoded = randomData[0];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1131,inal byte[] result = Base64.decodeBase64(encoded);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1132,"ssertTrue(""url-safe i="" + i, Arrays.equals(decoded, result));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1133,"ssertFalse(""url-safe i="" + i + "" no '='"", Base64TestData.bytesContain(encoded, (byte) '='));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1134,"ssertFalse(""url-safe i="" + i + "" no '\\'"", Base64TestData.bytesContain(encoded, (byte) '\\'));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1135,"ssertFalse(""url-safe i="" + i + "" no '+'"", Base64TestData.bytesContain(encoded, (byte) '+'));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1141," Base64 encoding of UUID's is a common use-case, especially in URL-SAFE"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1142," mode. This test case ends up being the ""URL-SAFE"" JUnit's."
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1144, @throws DecoderException
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1145,             if Hex.decode() fails - a serious problem since Hex comes
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1146,             from our own commons-codec!
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1148,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1149,ublic void testUUID() throws DecoderException {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1150,/ The 4 UUID's below contains mixtures of + and / to help us test the
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1151,/ URL-SAFE encoding mode.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1152,inal byte[][] ids = new byte[4][];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1154,/ ids[0] was chosen so that it encodes with at least one +.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1155,"ds[0] = Hex.decodeHex(""94ed8d0319e4493399560fb67404d370"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1157,/ ids[1] was chosen so that it encodes with both / and +.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1158,"ds[1] = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1160,/ ids[2] was chosen so that it encodes with at least one /.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1161,"ds[2] = Hex.decodeHex(""64be154b6ffa40258d1a01288e7c31ca"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1163,"/ ids[3] was chosen so that it encodes with both / and +, with /"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1164,/ right at the beginning.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1165,"ds[3] = Hex.decodeHex(""ff7f8fc01cdb471a8c8b5a9306183fe8"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1167,inal byte[][] standard = new byte[4][];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1168,"tandard[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1169,"tandard[1] = StringUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1170,"tandard[2] = StringUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1171,"tandard[3] = StringUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1173,inal byte[][] urlSafe1 = new byte[4][];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1174,/ regular padding (two '==' signs).
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1175,"rlSafe1[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1176,"rlSafe1[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1177,"rlSafe1[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1178,"rlSafe1[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1180,inal byte[][] urlSafe2 = new byte[4][];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1181,/ single padding (only one '=' sign).
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1182,"rlSafe2[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1183,"rlSafe2[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1184,"rlSafe2[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1185,"rlSafe2[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1187,inal byte[][] urlSafe3 = new byte[4][];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1188,/ no padding (no '=' signs).
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1189,"rlSafe3[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1190,"rlSafe3[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1191,"rlSafe3[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1192,"rlSafe3[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1194,or (int i = 0; i < 4; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1195,inal byte[] encodedStandard = Base64.encodeBase64(ids[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1196,inal byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1197,inal byte[] decodedStandard = Base64.decodeBase64(standard[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1198,inal byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1199,inal byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1200,inal byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1202,/ Very important debugging output should anyone
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1203,/ ever need to delve closely into this stuff.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1205,"/				System.out.println(""reference: ["" + Hex.encodeHexString(ids[i]) + ""]"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1206,"/				System.out.println(""standard:  ["" + Hex.encodeHexString(decodedStandard) + ""] From: ["""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1207,"/						+ StringUtils.newStringUtf8(standard[i]) + ""]"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1208,"/				System.out.println(""safe1:     ["" + Hex.encodeHexString(decodedUrlSafe1) + ""] From: ["""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1209,"/						+ StringUtils.newStringUtf8(urlSafe1[i]) + ""]"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1210,"/				System.out.println(""safe2:     ["" + Hex.encodeHexString(decodedUrlSafe2) + ""] From: ["""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1211,"/						+ StringUtils.newStringUtf8(urlSafe2[i]) + ""]"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1212,"/				System.out.println(""safe3:     ["" + Hex.encodeHexString(decodedUrlSafe3) + ""] From: ["""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1213,"/						+ StringUtils.newStringUtf8(urlSafe3[i]) + ""]"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1216,"ssertTrue(""standard encode uuid"", Arrays.equals(encodedStandard, standard[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1217,"ssertTrue(""url-safe encode uuid"", Arrays.equals(encodedUrlSafe, urlSafe3[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1218,"ssertTrue(""standard decode uuid"", Arrays.equals(decodedStandard, ids[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1219,"ssertTrue(""url-safe1 decode uuid"", Arrays.equals(decodedUrlSafe1, ids[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1220,"ssertTrue(""url-safe2 decode uuid"", Arrays.equals(decodedUrlSafe2, ids[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1221,"ssertTrue(""url-safe3 decode uuid"", Arrays.equals(decodedUrlSafe3, ids[i]));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1225,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1226,ublic void testByteToStringVariations() throws DecoderException {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1227,inal Base64 base64 = new Base64(0);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1228,"inal byte[] b1 = StringUtils.getBytesUtf8(""Hello World"");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1229,inal byte[] b2 = new byte[0];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1230,inal byte[] b3 = null;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1231,"inal byte[] b4 = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090""); // for"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1232,/ url-safe
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1233,/ tests
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1235,"ssertEquals(""byteToString Hello World"", ""SGVsbG8gV29ybGQ="", base64.encodeToString(b1));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1236,"ssertEquals(""byteToString static Hello World"", ""SGVsbG8gV29ybGQ="", Base64.encodeBase64String(b1));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1237,"ssertEquals(""byteToString \""\"""", """", base64.encodeToString(b2));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1238,"ssertEquals(""byteToString static \""\"""", """", Base64.encodeBase64String(b2));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1239,"ssertEquals(""byteToString null"", null, base64.encodeToString(b3));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1240,"ssertEquals(""byteToString static null"", null, Base64.encodeBase64String(b3));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1241,"ssertEquals(""byteToString UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", base64.encodeToString(b4));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1242,"ssertEquals(""byteToString static UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", Base64.encodeBase64String(b4));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1243,"ssertEquals(""byteToString static-url-safe UUID"", ""K_fMJwH-Q5e0nr7tWsxwkA"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1244,ase64.encodeBase64URLSafeString(b4));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1247,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1248,ublic void testStringToByteVariations() throws DecoderException {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1249,inal Base64 base64 = new Base64();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1250,"inal String s1 = ""SGVsbG8gV29ybGQ=\r\n"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1251,"inal String s2 = """";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1252,inal String s3 = null;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1253,"inal String s4a = ""K/fMJwH+Q5e0nr7tWsxwkA==\r\n"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1254,"inal String s4b = ""K_fMJwH-Q5e0nr7tWsxwkA"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1255,"inal byte[] b4 = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090""); // for"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1256,/ url-safe
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1257,/ tests
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1259,"ssertEquals(""StringToByte Hello World"", ""Hello World"", StringUtils.newStringUtf8(base64.decode(s1)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1260,"ssertEquals(""StringToByte Hello World"", ""Hello World"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1261,tringUtils.newStringUtf8((byte[]) base64.decode((Object) s1)));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1262,"ssertEquals(""StringToByte static Hello World"", ""Hello World"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1263,tringUtils.newStringUtf8(Base64.decodeBase64(s1)));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1264,"ssertEquals(""StringToByte \""\"""", """", StringUtils.newStringUtf8(base64.decode(s2)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1265,"ssertEquals(""StringToByte static \""\"""", """", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1266,"ssertEquals(""StringToByte null"", null, StringUtils.newStringUtf8(base64.decode(s3)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1267,"ssertEquals(""StringToByte static null"", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1268,"ssertTrue(""StringToByte UUID"", Arrays.equals(b4, base64.decode(s4b)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1269,"ssertTrue(""StringToByte static UUID"", Arrays.equals(b4, Base64.decodeBase64(s4a)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1270,"ssertTrue(""StringToByte static-url-safe UUID"", Arrays.equals(b4, Base64.decodeBase64(s4b)));"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1273,rivate String toString(final byte[] data) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1274,inal StringBuilder buf = new StringBuilder();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1275,or (int i = 0; i < data.length; i++) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1276,uf.append(data[i]);
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1277,f (i != data.length - 1) {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1278,"uf.append("","");"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1281,eturn buf.toString();
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1285, Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1287," @see ""<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>"""
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1289,Test
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1290,Ignore
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1291,ublic void testHugeLineSeparator() {
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1292,inal int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1293,inal int Base64_BYTES_PER_ENCODED_BLOCK = 4;
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1294,inal byte[] baLineSeparator = new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1295,"inal Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1296,"inal String strOriginal = ""Hello World"";"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1297,inal String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1298,"ssertEquals(""testDEFAULT_BUFFER_SIZE"", strOriginal, strDecoded);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,46,private static final Charset CHARSET_UTF8 = Charsets.UTF_8;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,48,private final Random random = new Random();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,51,* @return Returns the random.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,53,public Random getRandom() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,54,return this.random;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,58,* Test the isStringBase64 method.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,60,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,61,public void testIsStringBase64() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,62,final String nullString = null;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,63,"final String emptyString = """";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,64,"final String validString = ""abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL=============="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,65,final String invalidString = validString + (char) 0; // append null
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,66,// character
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,68,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,69,Base64.isBase64(nullString);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,70,"fail(""Base64.isStringBase64() should not be null-safe."");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,71,} catch (final NullPointerException npe) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,72,"assertNotNull(""Base64.isStringBase64() should not be null-safe."", npe);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,75,"assertTrue(""Base64.isStringBase64(empty-string) is true"", Base64.isBase64(emptyString));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,76,"assertTrue(""Base64.isStringBase64(valid-string) is true"", Base64.isBase64(validString));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,77,"assertFalse(""Base64.isStringBase64(invalid-string) is false"", Base64.isBase64(invalidString));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,81,* Test the Base64 implementation
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,83,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,84,public void testBase64() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,85,"final String content = ""Hello World"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,86,String encodedContent;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,87,byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,88,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,89,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,91,"Base64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null); // null"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,92,// lineSeparator
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,93,// same as
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,94,// saying
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,95,// no-chunking
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,96,encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,97,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,98,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,100,"b64 = new Base64(0, null); // null lineSeparator same as saying"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,101,// no-chunking
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,102,encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,103,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,104,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,106,// bogus characters to decode (to skip actually) {e-acute*6}
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,107,"final byte[] decode = b64.decode(""SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,108,final String decodeString = StringUtils.newStringUtf8(decode);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,109,"assertEquals(""decode hello world"", ""Hello World"", decodeString);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,112,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,113,public void testBase64AtBufferStart() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,114,"testBase64InBuffer(0, 100);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,117,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,118,public void testBase64AtBufferEnd() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,119,"testBase64InBuffer(100, 0);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,122,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,123,public void testBase64AtBufferMiddle() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,124,"testBase64InBuffer(100, 100);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,127,"private void testBase64InBuffer(int startPasSize, int endPadSize) {"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,128,"final String content = ""Hello World"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,129,String encodedContent;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,130,final byte[] bytesUtf8 = StringUtils.getBytesUtf8(content);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,131,"byte[] buffer = ArrayUtils.addAll(bytesUtf8, new byte[endPadSize]);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,132,"buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,133,"byte[] encodedBytes = new Base64().encode(buffer, startPasSize, bytesUtf8.length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,134,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,135,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,139,* Test our decode with pad character in the middle. (Our current
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,140,* implementation: halt decode and return what we've got so far).
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,142,* The point of this test is not to say
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,143,"* ""this is the correct way to decode base64."" The point is simply to keep"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,144,* us aware of the current logic since 1.4 so we don't accidentally break it
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,145,* without realizing.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,147,* Note for historians. The 1.3 logic would decode to:
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,148,"* ""Hello World\u0000Hello World"" -- null in the middle --- and 1.4"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,149,* unwittingly changed it to current logic.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,151,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,152,public void testDecodeWithInnerPad() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,153,"final String content = ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,154,final byte[] result = Base64.decodeBase64(content);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,155,"final byte[] shouldBe = StringUtils.getBytesUtf8(""Hello World"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,156,"assertTrue(""decode should halt at pad (=)"", Arrays.equals(result, shouldBe));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,160,* Tests Base64.encodeBase64().
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,162,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,163,public void testChunkedEncodeMultipleOf76() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,164,"final byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,165,"// convert to ""\r\n"" so we're equal to the old openssl encoding test"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,166,// stored
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,167,// in Base64TestData.ENCODED_76_CHARS_PER_LINE:
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,168,"final String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(""\n"", ""\r\n"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,169,final byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,170,"assertTrue(""chunkedEncodeMultipleOf76"", Arrays.equals(expectedEncode, actualEncode));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,174,* CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,175,* non-BASE64 bytes
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,177,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,178,public void testCodec68() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,179,"final byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,180,Base64.decodeBase64(x);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,183,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,184,public void testCodeInteger1() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,185,"final String encodedInt1 = ""li7dzDacuo67Jg7mtqEm2TRuOMU="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,186,"final BigInteger bigInt1 = new BigInteger(""85739377120809420210425962799"" + ""0318636601332086981"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,188,"assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,189,"assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,192,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,193,public void testCodeInteger2() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,194,"final String encodedInt2 = ""9B5ypLY9pMOmtxCeTDHgwdNFeGs="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,195,"final BigInteger bigInt2 = new BigInteger(""13936727572861167254666467268"" + ""91466679477132949611"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,197,"assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,198,"assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,201,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,202,public void testCodeInteger3() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,203,"final String encodedInt3 = ""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,204,"+ ""rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,205,final BigInteger bigInt3 = new BigInteger(
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,206,"""10806548154093873461951748545"" + ""1196989136416448805819079363524309897749044958112417136240557"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,207,"+ ""4495062430572478766856090958495998158114332651671116876320938126"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,209,"assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,210,"assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,213,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,214,public void testCodeInteger4() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,215,"final String encodedInt4 = ""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,216,"+ ""4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,217,"+ ""DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv"" + ""Q0="";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,218,final BigInteger bigInt4 = new BigInteger(
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,219,"""80624726256040348115552042320"" + ""6968135001872753709424419772586693950232350200555646471175944"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,220,"+ ""519297087885987040810778908507262272892702303774422853675597"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,221,"+ ""748008534040890923814202286633163248086055216976551456088015"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,222,"+ ""338880713818192088877057717530169381044092839402438015097654"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,223,"+ ""53542091716518238707344493641683483917"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,225,"assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,226,"assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,229,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,230,public void testCodeIntegerEdgeCases() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,231,// TODO
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,234,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,235,public void testCodeIntegerNull() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,236,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,237,Base64.encodeInteger(null);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,238,"fail(""Exception not thrown when passing in null to encodeInteger(BigInteger)"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,239,} catch (final NullPointerException npe) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,240,// expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,241,} catch (final Exception e) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,242,"fail(""Incorrect Exception caught when passing in null to encodeInteger(BigInteger)"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,246,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,247,public void testConstructors() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,248,Base64 base64;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,249,base64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,250,base64 = new Base64(-1);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,251,"base64 = new Base64(-1, new byte[] {});"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,252,"base64 = new Base64(64, new byte[] {});"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,253,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,254,"base64 = new Base64(-1, new byte[] { 'A' }); // TODO do we need to"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,255,// check sep if len
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,256,// = -1?
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,257,"fail(""Should have rejected attempt to use 'A' as a line separator"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,258,} catch (final IllegalArgumentException ignored) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,259,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,261,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,262,"base64 = new Base64(64, new byte[] { 'A' });"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,263,"fail(""Should have rejected attempt to use 'A' as a line separator"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,264,} catch (final IllegalArgumentException ignored) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,265,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,267,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,268,"base64 = new Base64(64, new byte[] { '=' });"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,269,"fail(""Should have rejected attempt to use '=' as a line separator"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,270,} catch (final IllegalArgumentException ignored) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,271,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,273,"base64 = new Base64(64, new byte[] { '$' }); // OK"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,274,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,275,"base64 = new Base64(64, new byte[] { 'A', '$' });"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,276,"fail(""Should have rejected attempt to use 'A$' as a line separator"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,277,} catch (final IllegalArgumentException ignored) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,278,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,280,"base64 = new Base64(64, new byte[] { ' ', '$', '\n', '\r', '\t' }); // OK"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,281,assertNotNull(base64);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,284,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,285,public void testConstructor_Int_ByteArray_Boolean() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,286,"final Base64 base64 = new Base64(65, new byte[] { '\t' }, false);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,287,final byte[] encoded = base64.encode(Base64TestData.DECODED);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,288,String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,289,"expectedResult = expectedResult.replace('\n', '\t');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,290,final String result = StringUtils.newStringUtf8(encoded);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,291,"assertEquals(""new Base64(65, \\t, false)"", expectedResult, result);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,294,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,295,public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,296,// url-safe variation
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,297,"final Base64 base64 = new Base64(64, new byte[] { '\t' }, true);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,298,final byte[] encoded = base64.encode(Base64TestData.DECODED);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,299,String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,300,"expectedResult = expectedResult.replaceAll(""="", """"); // url-safe has no"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,301,// == padding.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,302,"expectedResult = expectedResult.replace('\n', '\t');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,303,"expectedResult = expectedResult.replace('+', '-');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,304,"expectedResult = expectedResult.replace('/', '_');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,305,final String result = StringUtils.newStringUtf8(encoded);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,306,"assertEquals(""new Base64(64, \\t, true)"", result, expectedResult);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,310,"* Tests conditional true branch for ""marker0"" test."
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,312,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,313,public void testDecodePadMarkerIndex2() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,314,"assertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,318,"* Tests conditional branches for ""marker1"" test."
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,320,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,321,public void testDecodePadMarkerIndex3() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,322,"assertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,323,"assertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,326,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,327,public void testDecodePadOnly() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,328,"assertEquals(0, Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,329,"assertEquals("""", new String(Base64.decodeBase64(""===="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,330,// Test truncated padding
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,331,"assertEquals(0, Base64.decodeBase64(""==="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,332,"assertEquals(0, Base64.decodeBase64(""=="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,333,"assertEquals(0, Base64.decodeBase64(""="".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,334,"assertEquals(0, Base64.decodeBase64("""".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,337,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,338,public void testDecodePadOnlyChunked() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,339,"assertEquals(0, Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,340,"assertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,341,// Test truncated padding
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,342,"assertEquals(0, Base64.decodeBase64(""===\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,343,"assertEquals(0, Base64.decodeBase64(""==\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,344,"assertEquals(0, Base64.decodeBase64(""=\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,345,"assertEquals(0, Base64.decodeBase64(""\n"".getBytes(CHARSET_UTF8)).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,348,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,349,public void testDecodeWithWhitespace() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,351,"final String orig = ""I am a late night coder."";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,353,final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,354,final StringBuilder intermediate = new StringBuilder(new String(encodedArray));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,356,"intermediate.insert(2, ' ');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,357,"intermediate.insert(5, '\t');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,358,"intermediate.insert(10, '\r');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,359,"intermediate.insert(15, '\n');"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,361,final byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,362,final byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,364,final String dest = new String(decodedWithWS);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,366,"assertEquals(""Dest string doesn't equal the original"", orig, dest);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,370,* Test encode and decode of empty byte array.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,372,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,373,public void testEmptyBase64() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,374,byte[] empty = new byte[0];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,375,byte[] result = Base64.encodeBase64(empty);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,376,"assertEquals(""empty base64 encode"", 0, result.length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,377,"assertEquals(""empty base64 encode"", null, Base64.encodeBase64(null));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,379,empty = new byte[0];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,380,result = Base64.decodeBase64(empty);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,381,"assertEquals(""empty base64 decode"", 0, result.length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,382,"assertEquals(""empty base64 encode"", null, Base64.decodeBase64((byte[]) null));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,385,// encode/decode a large random array
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,386,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,387,public void testEncodeDecodeRandom() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,388,for (int i = 1; i < 5; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,389,final byte[] data = new byte[this.getRandom().nextInt(10000) + 1];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,390,this.getRandom().nextBytes(data);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,391,final byte[] enc = Base64.encodeBase64(data);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,392,assertTrue(Base64.isBase64(enc));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,393,final byte[] data2 = Base64.decodeBase64(enc);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,394,"assertTrue(Arrays.equals(data, data2));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,398,// encode/decode random arrays from size 0 to size 11
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,399,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,400,public void testEncodeDecodeSmall() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,401,for (int i = 0; i < 12; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,402,final byte[] data = new byte[i];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,403,this.getRandom().nextBytes(data);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,404,final byte[] enc = Base64.encodeBase64(data);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,405,"assertTrue(""\"""" + new String(enc) + ""\"" is Base64 data."", Base64.isBase64(enc));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,406,final byte[] data2 = Base64.decodeBase64(enc);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,407,"assertTrue(toString(data) + "" equals "" + toString(data2), Arrays.equals(data, data2));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,411,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,412,public void testEncodeOverMaxSize() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,413,testEncodeOverMaxSize(-1);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,414,testEncodeOverMaxSize(0);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,415,testEncodeOverMaxSize(1);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,416,testEncodeOverMaxSize(2);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,419,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,420,public void testCodec112() { // size calculation assumes always chunked
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,421,final byte[] in = new byte[] { 0 };
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,422,final byte[] out = Base64.encodeBase64(in);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,423,"Base64.encodeBase64(in, false, false, out.length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,426,private void testEncodeOverMaxSize(final int maxSize) throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,427,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,428,"Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,429,"fail(""Expected "" + IllegalArgumentException.class.getName());"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,430,} catch (final IllegalArgumentException e) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,431,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,435,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,436,public void testIgnoringNonBase64InDecode() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,437,"assertEquals(""The quick brown fox jumped over the lazy dogs."","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,438,new String(Base64.decodeBase64(
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,439,"""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,440,.getBytes(CHARSET_UTF8))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,443,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,444,public void testIsArrayByteBase64() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,445,assertFalse(Base64.isBase64(new byte[] { Byte.MIN_VALUE }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,446,assertFalse(Base64.isBase64(new byte[] { -125 }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,447,assertFalse(Base64.isBase64(new byte[] { -10 }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,448,assertFalse(Base64.isBase64(new byte[] { 0 }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,449,"assertFalse(Base64.isBase64(new byte[] { 64, Byte.MAX_VALUE }));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,450,assertFalse(Base64.isBase64(new byte[] { Byte.MAX_VALUE }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,451,assertTrue(Base64.isBase64(new byte[] { 'A' }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,452,"assertFalse(Base64.isBase64(new byte[] { 'A', Byte.MIN_VALUE }));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,453,"assertTrue(Base64.isBase64(new byte[] { 'A', 'Z', 'a' }));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,454,"assertTrue(Base64.isBase64(new byte[] { '/', '=', '+' }));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,455,assertFalse(Base64.isBase64(new byte[] { '$' }));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,459,* Tests isUrlSafe.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,461,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,462,public void testIsUrlSafe() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,463,final Base64 base64Standard = new Base64(false);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,464,final Base64 base64URLSafe = new Base64(true);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,466,"assertFalse(""Base64.isUrlSafe=false"", base64Standard.isUrlSafe());"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,467,"assertTrue(""Base64.isUrlSafe=true"", base64URLSafe.isUrlSafe());"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,469,"final byte[] whiteSpace = { ' ', '\n', '\r', '\t' };"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,470,"assertTrue(""Base64.isBase64(whiteSpace)=true"", Base64.isBase64(whiteSpace));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,473,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,474,public void testKnownDecodings() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,475,"assertEquals(""The quick brown fox jumped over the lazy dogs."", new String(Base64.decodeBase64("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,476,"""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,477,"assertEquals(""It was the best of times, it was the worst of times."", new String(Base64.decodeBase64("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,478,"""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,479,"assertEquals(""http://jakarta.apache.org/commmons"", new String("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,480,"Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,481,"assertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"", new String(Base64.decodeBase64("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,482,"""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,483,"assertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,484,"new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,485,"assertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,488,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,489,public void testKnownEncodings() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,490,"assertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="", new String("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,491,"Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,492,assertEquals(
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,493,"""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,494,new String(Base64.encodeBase64Chunked(
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,495,"""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,496,.getBytes(CHARSET_UTF8))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,497,"assertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="", new String("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,498,"Base64.encodeBase64(""It was the best of times, it was the worst of times."".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,499,"assertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,500,"new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,501,"assertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="", new String("
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,502,"Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,503,"assertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,504,"new String(Base64.encodeBase64(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,505,"assertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,508,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,509,public void testNonBase64Test() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,511,final byte[] bArray = { '%' };
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,513,"assertFalse(""Invalid Base64 array was incorrectly validated as "" + ""an array of Base64 encoded data"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,514,Base64.isBase64(bArray));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,516,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,517,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,518,final byte[] result = b64.decode(bArray);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,520,"assertEquals(""The result should be empty as the test encoded content did """
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,521,"+ ""not contain any valid base 64 characters"", 0, result.length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,522,} catch (final Exception e) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,523,"fail(""Exception was thrown when trying to decode """
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,524,"+ ""invalid base64 encoded data - RFC 2045 requires that all """
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,525,"+ ""non base64 character be discarded, an exception should not"" + "" have been thrown"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,529,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,530,public void testObjectDecodeWithInvalidParameter() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,531,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,533,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,534,b64.decode(Integer.valueOf(5));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,535,"fail(""decode(Object) didn't throw an exception when passed an Integer object"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,536,} catch (final DecoderException e) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,537,// ignored
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,542,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,543,public void testObjectDecodeWithValidParameter() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,545,"final String original = ""Hello World!"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,546,final Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,548,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,549,final Object oDecoded = b64.decode(o);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,550,final byte[] baDecoded = (byte[]) oDecoded;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,551,final String dest = new String(baDecoded);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,553,"assertEquals(""dest string does not equal original"", original, dest);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,556,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,557,public void testObjectEncodeWithInvalidParameter() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,558,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,559,try {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,560,"b64.encode(""Yadayadayada"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,561,"fail(""encode(Object) didn't throw an exception when passed a String object"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,562,} catch (final EncoderException e) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,563,// Expected
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,567,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,568,public void testObjectEncodeWithValidParameter() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,570,"final String original = ""Hello World!"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,571,final Object origObj = original.getBytes(CHARSET_UTF8);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,573,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,574,final Object oEncoded = b64.encode(origObj);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,575,final byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,576,final String dest = new String(bArray);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,578,"assertEquals(""dest string does not equal original"", original, dest);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,581,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,582,public void testObjectEncode() throws Exception {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,583,final Base64 b64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,584,"assertEquals(""SGVsbG8gV29ybGQ="", new String(b64.encode(""Hello World"".getBytes(CHARSET_UTF8))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,587,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,588,public void testPairs() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,589,"assertEquals(""AAA="", new String(Base64.encodeBase64(new byte[] { 0, 0 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,590,for (int i = -128; i <= 127; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,591,"final byte test[] = { (byte) i, (byte) i };"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,592,"assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,597,* Tests RFC 2045 section 2.1 CRLF definition.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,599,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,600,public void testRfc2045Section2Dot1CrLfDefinition() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,601,"assertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,605,* Tests RFC 2045 section 6.8 chuck size definition.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,607,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,608,public void testRfc2045Section6Dot8ChunkSizeDefinition() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,609,"assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,613,* Tests RFC 1421 section 4.3.2.4 chuck size definition.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,615,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,616,public void testRfc1421Section6Dot8ChunkSizeDefinition() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,617,"assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,621,* Tests RFC 4648 section 10 test vectors.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,622,* <ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,623,"* <li>BASE64("""") = """"</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,624,"* <li>BASE64(""f"") = ""Zg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,625,"* <li>BASE64(""fo"") = ""Zm8=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,626,"* <li>BASE64(""foo"") = ""Zm9v""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,627,"* <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,628,"* <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,629,"* <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,630,* </ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,632,"* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,633,*      html/rfc4648</a>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,635,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,636,public void testRfc4648Section10Decode() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,637,"assertEquals("""", StringUtils.newStringUsAscii(Base64.decodeBase64("""")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,638,"assertEquals(""f"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,639,"assertEquals(""fo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,640,"assertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,641,"assertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,642,"assertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,643,"assertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,647,* Tests RFC 4648 section 10 test vectors.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,648,* <ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,649,"* <li>BASE64("""") = """"</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,650,"* <li>BASE64(""f"") = ""Zg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,651,"* <li>BASE64(""fo"") = ""Zm8=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,652,"* <li>BASE64(""foo"") = ""Zm9v""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,653,"* <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,654,"* <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,655,"* <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,656,* </ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,658,"* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,659,*      html/rfc4648</a>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,661,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,662,public void testRfc4648Section10DecodeWithCrLf() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,663,final String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,664,"assertEquals("""", StringUtils.newStringUsAscii(Base64.decodeBase64("""" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,665,"assertEquals(""f"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,666,"assertEquals(""fo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,667,"assertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,668,"assertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,669,"assertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,670,"assertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"" + CRLF)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,674,* Tests RFC 4648 section 10 test vectors.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,675,* <ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,676,"* <li>BASE64("""") = """"</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,677,"* <li>BASE64(""f"") = ""Zg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,678,"* <li>BASE64(""fo"") = ""Zm8=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,679,"* <li>BASE64(""foo"") = ""Zm9v""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,680,"* <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,681,"* <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,682,"* <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,683,* </ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,685,"* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,686,*      html/rfc4648</a>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,688,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,689,public void testRfc4648Section10Encode() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,690,"assertEquals("""", Base64.encodeBase64String(StringUtils.getBytesUtf8("""")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,691,"assertEquals(""Zg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""f"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,692,"assertEquals(""Zm8="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fo"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,693,"assertEquals(""Zm9v"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foo"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,694,"assertEquals(""Zm9vYg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foob"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,695,"assertEquals(""Zm9vYmE="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fooba"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,696,"assertEquals(""Zm9vYmFy"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foobar"")));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,700,* Tests RFC 4648 section 10 test vectors.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,701,* <ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,702,"* <li>BASE64("""") = """"</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,703,"* <li>BASE64(""f"") = ""Zg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,704,"* <li>BASE64(""fo"") = ""Zm8=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,705,"* <li>BASE64(""foo"") = ""Zm9v""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,706,"* <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,707,"* <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,708,"* <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,709,* </ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,711,"* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,712,*      html/rfc4648</a>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,714,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,715,public void testRfc4648Section10DecodeEncode() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,716,"testDecodeEncode("""");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,717,"testDecodeEncode(""Zg=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,718,"testDecodeEncode(""Zm8="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,719,"testDecodeEncode(""Zm9v"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,720,"testDecodeEncode(""Zm9vYg=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,721,"testDecodeEncode(""Zm9vYmE="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,722,"testDecodeEncode(""Zm9vYmFy"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,725,private void testDecodeEncode(final String encodedText) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,726,final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,727,final String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,728,"assertEquals(encodedText, encodedText2);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,732,* Tests RFC 4648 section 10 test vectors.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,733,* <ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,734,"* <li>BASE64("""") = """"</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,735,"* <li>BASE64(""f"") = ""Zg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,736,"* <li>BASE64(""fo"") = ""Zm8=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,737,"* <li>BASE64(""foo"") = ""Zm9v""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,738,"* <li>BASE64(""foob"") = ""Zm9vYg==""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,739,"* <li>BASE64(""fooba"") = ""Zm9vYmE=""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,740,"* <li>BASE64(""foobar"") = ""Zm9vYmFy""</li>"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,741,* </ul>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,743,"* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,744,*      html/rfc4648</a>
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,746,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,747,public void testRfc4648Section10EncodeDecode() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,748,"testEncodeDecode("""");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,749,"testEncodeDecode(""f"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,750,"testEncodeDecode(""fo"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,751,"testEncodeDecode(""foo"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,752,"testEncodeDecode(""foob"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,753,"testEncodeDecode(""fooba"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,754,"testEncodeDecode(""foobar"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,757,private void testEncodeDecode(final String plainText) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,758,final String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,759,final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,760,"assertEquals(plainText, decodedText);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,763,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,764,public void testSingletons() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,765,"assertEquals(""AA=="", new String(Base64.encodeBase64(new byte[] { (byte) 0 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,766,"assertEquals(""AQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 1 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,767,"assertEquals(""Ag=="", new String(Base64.encodeBase64(new byte[] { (byte) 2 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,768,"assertEquals(""Aw=="", new String(Base64.encodeBase64(new byte[] { (byte) 3 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,769,"assertEquals(""BA=="", new String(Base64.encodeBase64(new byte[] { (byte) 4 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,770,"assertEquals(""BQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 5 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,771,"assertEquals(""Bg=="", new String(Base64.encodeBase64(new byte[] { (byte) 6 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,772,"assertEquals(""Bw=="", new String(Base64.encodeBase64(new byte[] { (byte) 7 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,773,"assertEquals(""CA=="", new String(Base64.encodeBase64(new byte[] { (byte) 8 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,774,"assertEquals(""CQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 9 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,775,"assertEquals(""Cg=="", new String(Base64.encodeBase64(new byte[] { (byte) 10 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,776,"assertEquals(""Cw=="", new String(Base64.encodeBase64(new byte[] { (byte) 11 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,777,"assertEquals(""DA=="", new String(Base64.encodeBase64(new byte[] { (byte) 12 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,778,"assertEquals(""DQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 13 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,779,"assertEquals(""Dg=="", new String(Base64.encodeBase64(new byte[] { (byte) 14 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,780,"assertEquals(""Dw=="", new String(Base64.encodeBase64(new byte[] { (byte) 15 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,781,"assertEquals(""EA=="", new String(Base64.encodeBase64(new byte[] { (byte) 16 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,782,"assertEquals(""EQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 17 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,783,"assertEquals(""Eg=="", new String(Base64.encodeBase64(new byte[] { (byte) 18 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,784,"assertEquals(""Ew=="", new String(Base64.encodeBase64(new byte[] { (byte) 19 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,785,"assertEquals(""FA=="", new String(Base64.encodeBase64(new byte[] { (byte) 20 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,786,"assertEquals(""FQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 21 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,787,"assertEquals(""Fg=="", new String(Base64.encodeBase64(new byte[] { (byte) 22 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,788,"assertEquals(""Fw=="", new String(Base64.encodeBase64(new byte[] { (byte) 23 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,789,"assertEquals(""GA=="", new String(Base64.encodeBase64(new byte[] { (byte) 24 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,790,"assertEquals(""GQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 25 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,791,"assertEquals(""Gg=="", new String(Base64.encodeBase64(new byte[] { (byte) 26 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,792,"assertEquals(""Gw=="", new String(Base64.encodeBase64(new byte[] { (byte) 27 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,793,"assertEquals(""HA=="", new String(Base64.encodeBase64(new byte[] { (byte) 28 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,794,"assertEquals(""HQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 29 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,795,"assertEquals(""Hg=="", new String(Base64.encodeBase64(new byte[] { (byte) 30 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,796,"assertEquals(""Hw=="", new String(Base64.encodeBase64(new byte[] { (byte) 31 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,797,"assertEquals(""IA=="", new String(Base64.encodeBase64(new byte[] { (byte) 32 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,798,"assertEquals(""IQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 33 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,799,"assertEquals(""Ig=="", new String(Base64.encodeBase64(new byte[] { (byte) 34 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,800,"assertEquals(""Iw=="", new String(Base64.encodeBase64(new byte[] { (byte) 35 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,801,"assertEquals(""JA=="", new String(Base64.encodeBase64(new byte[] { (byte) 36 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,802,"assertEquals(""JQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 37 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,803,"assertEquals(""Jg=="", new String(Base64.encodeBase64(new byte[] { (byte) 38 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,804,"assertEquals(""Jw=="", new String(Base64.encodeBase64(new byte[] { (byte) 39 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,805,"assertEquals(""KA=="", new String(Base64.encodeBase64(new byte[] { (byte) 40 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,806,"assertEquals(""KQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 41 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,807,"assertEquals(""Kg=="", new String(Base64.encodeBase64(new byte[] { (byte) 42 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,808,"assertEquals(""Kw=="", new String(Base64.encodeBase64(new byte[] { (byte) 43 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,809,"assertEquals(""LA=="", new String(Base64.encodeBase64(new byte[] { (byte) 44 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,810,"assertEquals(""LQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 45 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,811,"assertEquals(""Lg=="", new String(Base64.encodeBase64(new byte[] { (byte) 46 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,812,"assertEquals(""Lw=="", new String(Base64.encodeBase64(new byte[] { (byte) 47 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,813,"assertEquals(""MA=="", new String(Base64.encodeBase64(new byte[] { (byte) 48 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,814,"assertEquals(""MQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 49 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,815,"assertEquals(""Mg=="", new String(Base64.encodeBase64(new byte[] { (byte) 50 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,816,"assertEquals(""Mw=="", new String(Base64.encodeBase64(new byte[] { (byte) 51 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,817,"assertEquals(""NA=="", new String(Base64.encodeBase64(new byte[] { (byte) 52 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,818,"assertEquals(""NQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 53 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,819,"assertEquals(""Ng=="", new String(Base64.encodeBase64(new byte[] { (byte) 54 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,820,"assertEquals(""Nw=="", new String(Base64.encodeBase64(new byte[] { (byte) 55 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,821,"assertEquals(""OA=="", new String(Base64.encodeBase64(new byte[] { (byte) 56 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,822,"assertEquals(""OQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 57 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,823,"assertEquals(""Og=="", new String(Base64.encodeBase64(new byte[] { (byte) 58 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,824,"assertEquals(""Ow=="", new String(Base64.encodeBase64(new byte[] { (byte) 59 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,825,"assertEquals(""PA=="", new String(Base64.encodeBase64(new byte[] { (byte) 60 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,826,"assertEquals(""PQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 61 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,827,"assertEquals(""Pg=="", new String(Base64.encodeBase64(new byte[] { (byte) 62 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,828,"assertEquals(""Pw=="", new String(Base64.encodeBase64(new byte[] { (byte) 63 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,829,"assertEquals(""QA=="", new String(Base64.encodeBase64(new byte[] { (byte) 64 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,830,"assertEquals(""QQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 65 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,831,"assertEquals(""Qg=="", new String(Base64.encodeBase64(new byte[] { (byte) 66 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,832,"assertEquals(""Qw=="", new String(Base64.encodeBase64(new byte[] { (byte) 67 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,833,"assertEquals(""RA=="", new String(Base64.encodeBase64(new byte[] { (byte) 68 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,834,"assertEquals(""RQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 69 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,835,"assertEquals(""Rg=="", new String(Base64.encodeBase64(new byte[] { (byte) 70 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,836,"assertEquals(""Rw=="", new String(Base64.encodeBase64(new byte[] { (byte) 71 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,837,"assertEquals(""SA=="", new String(Base64.encodeBase64(new byte[] { (byte) 72 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,838,"assertEquals(""SQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 73 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,839,"assertEquals(""Sg=="", new String(Base64.encodeBase64(new byte[] { (byte) 74 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,840,"assertEquals(""Sw=="", new String(Base64.encodeBase64(new byte[] { (byte) 75 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,841,"assertEquals(""TA=="", new String(Base64.encodeBase64(new byte[] { (byte) 76 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,842,"assertEquals(""TQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 77 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,843,"assertEquals(""Tg=="", new String(Base64.encodeBase64(new byte[] { (byte) 78 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,844,"assertEquals(""Tw=="", new String(Base64.encodeBase64(new byte[] { (byte) 79 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,845,"assertEquals(""UA=="", new String(Base64.encodeBase64(new byte[] { (byte) 80 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,846,"assertEquals(""UQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 81 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,847,"assertEquals(""Ug=="", new String(Base64.encodeBase64(new byte[] { (byte) 82 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,848,"assertEquals(""Uw=="", new String(Base64.encodeBase64(new byte[] { (byte) 83 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,849,"assertEquals(""VA=="", new String(Base64.encodeBase64(new byte[] { (byte) 84 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,850,"assertEquals(""VQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 85 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,851,"assertEquals(""Vg=="", new String(Base64.encodeBase64(new byte[] { (byte) 86 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,852,"assertEquals(""Vw=="", new String(Base64.encodeBase64(new byte[] { (byte) 87 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,853,"assertEquals(""WA=="", new String(Base64.encodeBase64(new byte[] { (byte) 88 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,854,"assertEquals(""WQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 89 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,855,"assertEquals(""Wg=="", new String(Base64.encodeBase64(new byte[] { (byte) 90 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,856,"assertEquals(""Ww=="", new String(Base64.encodeBase64(new byte[] { (byte) 91 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,857,"assertEquals(""XA=="", new String(Base64.encodeBase64(new byte[] { (byte) 92 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,858,"assertEquals(""XQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 93 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,859,"assertEquals(""Xg=="", new String(Base64.encodeBase64(new byte[] { (byte) 94 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,860,"assertEquals(""Xw=="", new String(Base64.encodeBase64(new byte[] { (byte) 95 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,861,"assertEquals(""YA=="", new String(Base64.encodeBase64(new byte[] { (byte) 96 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,862,"assertEquals(""YQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 97 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,863,"assertEquals(""Yg=="", new String(Base64.encodeBase64(new byte[] { (byte) 98 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,864,"assertEquals(""Yw=="", new String(Base64.encodeBase64(new byte[] { (byte) 99 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,865,"assertEquals(""ZA=="", new String(Base64.encodeBase64(new byte[] { (byte) 100 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,866,"assertEquals(""ZQ=="", new String(Base64.encodeBase64(new byte[] { (byte) 101 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,867,"assertEquals(""Zg=="", new String(Base64.encodeBase64(new byte[] { (byte) 102 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,868,"assertEquals(""Zw=="", new String(Base64.encodeBase64(new byte[] { (byte) 103 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,869,"assertEquals(""aA=="", new String(Base64.encodeBase64(new byte[] { (byte) 104 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,870,for (int i = -128; i <= 127; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,871,final byte test[] = { (byte) i };
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,872,"assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,876,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,877,public void testSingletonsChunked() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,878,"assertEquals(""AA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,879,"assertEquals(""AQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,880,"assertEquals(""Ag==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,881,"assertEquals(""Aw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,882,"assertEquals(""BA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,883,"assertEquals(""BQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,884,"assertEquals(""Bg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,885,"assertEquals(""Bw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,886,"assertEquals(""CA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,887,"assertEquals(""CQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,888,"assertEquals(""Cg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,889,"assertEquals(""Cw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,890,"assertEquals(""DA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,891,"assertEquals(""DQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,892,"assertEquals(""Dg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,893,"assertEquals(""Dw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,894,"assertEquals(""EA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,895,"assertEquals(""EQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,896,"assertEquals(""Eg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,897,"assertEquals(""Ew==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,898,"assertEquals(""FA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,899,"assertEquals(""FQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,900,"assertEquals(""Fg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,901,"assertEquals(""Fw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,902,"assertEquals(""GA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,903,"assertEquals(""GQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,904,"assertEquals(""Gg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,905,"assertEquals(""Gw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,906,"assertEquals(""HA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,907,"assertEquals(""HQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,908,"assertEquals(""Hg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,909,"assertEquals(""Hw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,910,"assertEquals(""IA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,911,"assertEquals(""IQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,912,"assertEquals(""Ig==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,913,"assertEquals(""Iw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,914,"assertEquals(""JA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,915,"assertEquals(""JQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,916,"assertEquals(""Jg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,917,"assertEquals(""Jw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,918,"assertEquals(""KA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,919,"assertEquals(""KQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,920,"assertEquals(""Kg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,921,"assertEquals(""Kw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,922,"assertEquals(""LA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,923,"assertEquals(""LQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,924,"assertEquals(""Lg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,925,"assertEquals(""Lw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,926,"assertEquals(""MA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,927,"assertEquals(""MQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,928,"assertEquals(""Mg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,929,"assertEquals(""Mw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,930,"assertEquals(""NA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,931,"assertEquals(""NQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,932,"assertEquals(""Ng==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,933,"assertEquals(""Nw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,934,"assertEquals(""OA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,935,"assertEquals(""OQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,936,"assertEquals(""Og==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,937,"assertEquals(""Ow==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,938,"assertEquals(""PA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,939,"assertEquals(""PQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,940,"assertEquals(""Pg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,941,"assertEquals(""Pw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,942,"assertEquals(""QA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,943,"assertEquals(""QQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,944,"assertEquals(""Qg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,945,"assertEquals(""Qw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,946,"assertEquals(""RA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,947,"assertEquals(""RQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,948,"assertEquals(""Rg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,949,"assertEquals(""Rw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,950,"assertEquals(""SA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,951,"assertEquals(""SQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,952,"assertEquals(""Sg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,953,"assertEquals(""Sw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,954,"assertEquals(""TA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,955,"assertEquals(""TQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,956,"assertEquals(""Tg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,957,"assertEquals(""Tw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,958,"assertEquals(""UA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,959,"assertEquals(""UQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,960,"assertEquals(""Ug==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,961,"assertEquals(""Uw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,962,"assertEquals(""VA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,963,"assertEquals(""VQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,964,"assertEquals(""Vg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,965,"assertEquals(""Vw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,966,"assertEquals(""WA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,967,"assertEquals(""WQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,968,"assertEquals(""Wg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,969,"assertEquals(""Ww==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,970,"assertEquals(""XA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,971,"assertEquals(""XQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,972,"assertEquals(""Xg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,973,"assertEquals(""Xw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,974,"assertEquals(""YA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,975,"assertEquals(""YQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,976,"assertEquals(""Yg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,977,"assertEquals(""Yw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,978,"assertEquals(""ZA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,979,"assertEquals(""ZQ==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,980,"assertEquals(""Zg==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,981,"assertEquals(""Zw==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,982,"assertEquals(""aA==\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,985,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,986,public void testTriplets() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,987,"assertEquals(""AAAA"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,988,"assertEquals(""AAAB"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,989,"assertEquals(""AAAC"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,990,"assertEquals(""AAAD"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,991,"assertEquals(""AAAE"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,992,"assertEquals(""AAAF"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,993,"assertEquals(""AAAG"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,994,"assertEquals(""AAAH"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,995,"assertEquals(""AAAI"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,996,"assertEquals(""AAAJ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,997,"assertEquals(""AAAK"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,998,"assertEquals(""AAAL"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,999,"assertEquals(""AAAM"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1000,"assertEquals(""AAAN"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1001,"assertEquals(""AAAO"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1002,"assertEquals(""AAAP"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1003,"assertEquals(""AAAQ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1004,"assertEquals(""AAAR"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1005,"assertEquals(""AAAS"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1006,"assertEquals(""AAAT"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1007,"assertEquals(""AAAU"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1008,"assertEquals(""AAAV"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1009,"assertEquals(""AAAW"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1010,"assertEquals(""AAAX"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1011,"assertEquals(""AAAY"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1012,"assertEquals(""AAAZ"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1013,"assertEquals(""AAAa"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1014,"assertEquals(""AAAb"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1015,"assertEquals(""AAAc"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1016,"assertEquals(""AAAd"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1017,"assertEquals(""AAAe"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1018,"assertEquals(""AAAf"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1019,"assertEquals(""AAAg"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1020,"assertEquals(""AAAh"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1021,"assertEquals(""AAAi"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1022,"assertEquals(""AAAj"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1023,"assertEquals(""AAAk"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1024,"assertEquals(""AAAl"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1025,"assertEquals(""AAAm"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1026,"assertEquals(""AAAn"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1027,"assertEquals(""AAAo"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1028,"assertEquals(""AAAp"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1029,"assertEquals(""AAAq"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1030,"assertEquals(""AAAr"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1031,"assertEquals(""AAAs"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1032,"assertEquals(""AAAt"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1033,"assertEquals(""AAAu"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1034,"assertEquals(""AAAv"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1035,"assertEquals(""AAAw"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1036,"assertEquals(""AAAx"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1037,"assertEquals(""AAAy"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1038,"assertEquals(""AAAz"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1039,"assertEquals(""AAA0"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1040,"assertEquals(""AAA1"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1041,"assertEquals(""AAA2"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1042,"assertEquals(""AAA3"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1043,"assertEquals(""AAA4"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1044,"assertEquals(""AAA5"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1045,"assertEquals(""AAA6"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1046,"assertEquals(""AAA7"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1047,"assertEquals(""AAA8"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1048,"assertEquals(""AAA9"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1049,"assertEquals(""AAA+"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1050,"assertEquals(""AAA/"", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1053,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1054,public void testTripletsChunked() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1055,"assertEquals(""AAAA\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1056,"assertEquals(""AAAB\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1057,"assertEquals(""AAAC\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1058,"assertEquals(""AAAD\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1059,"assertEquals(""AAAE\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1060,"assertEquals(""AAAF\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1061,"assertEquals(""AAAG\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1062,"assertEquals(""AAAH\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1063,"assertEquals(""AAAI\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1064,"assertEquals(""AAAJ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1065,"assertEquals(""AAAK\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1066,"assertEquals(""AAAL\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1067,"assertEquals(""AAAM\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1068,"assertEquals(""AAAN\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1069,"assertEquals(""AAAO\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1070,"assertEquals(""AAAP\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1071,"assertEquals(""AAAQ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1072,"assertEquals(""AAAR\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1073,"assertEquals(""AAAS\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1074,"assertEquals(""AAAT\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1075,"assertEquals(""AAAU\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1076,"assertEquals(""AAAV\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1077,"assertEquals(""AAAW\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1078,"assertEquals(""AAAX\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1079,"assertEquals(""AAAY\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1080,"assertEquals(""AAAZ\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1081,"assertEquals(""AAAa\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1082,"assertEquals(""AAAb\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1083,"assertEquals(""AAAc\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1084,"assertEquals(""AAAd\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1085,"assertEquals(""AAAe\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1086,"assertEquals(""AAAf\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1087,"assertEquals(""AAAg\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1088,"assertEquals(""AAAh\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1089,"assertEquals(""AAAi\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1090,"assertEquals(""AAAj\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1091,"assertEquals(""AAAk\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1092,"assertEquals(""AAAl\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1093,"assertEquals(""AAAm\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1094,"assertEquals(""AAAn\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1095,"assertEquals(""AAAo\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1096,"assertEquals(""AAAp\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1097,"assertEquals(""AAAq\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1098,"assertEquals(""AAAr\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1099,"assertEquals(""AAAs\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1100,"assertEquals(""AAAt\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1101,"assertEquals(""AAAu\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1102,"assertEquals(""AAAv\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1103,"assertEquals(""AAAw\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1104,"assertEquals(""AAAx\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1105,"assertEquals(""AAAy\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1106,"assertEquals(""AAAz\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1107,"assertEquals(""AAA0\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1108,"assertEquals(""AAA1\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1109,"assertEquals(""AAA2\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1110,"assertEquals(""AAA3\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1111,"assertEquals(""AAA4\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1112,"assertEquals(""AAA5\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1113,"assertEquals(""AAA6\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1114,"assertEquals(""AAA7\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1115,"assertEquals(""AAA8\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1116,"assertEquals(""AAA9\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1117,"assertEquals(""AAA+\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1118,"assertEquals(""AAA/\r\n"", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1122,"* Tests url-safe Base64 against random data, sizes 0 to 150."
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1124,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1125,public void testUrlSafe() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1126,// test random data of sizes 0 thru 150
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1127,for (int i = 0; i <= 150; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1128,"final byte[][] randomData = Base64TestData.randomData(i, true);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1129,final byte[] encoded = randomData[1];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1130,final byte[] decoded = randomData[0];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1131,final byte[] result = Base64.decodeBase64(encoded);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1132,"assertTrue(""url-safe i="" + i, Arrays.equals(decoded, result));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1133,"assertFalse(""url-safe i="" + i + "" no '='"", Base64TestData.bytesContain(encoded, (byte) '='));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1134,"assertFalse(""url-safe i="" + i + "" no '\\'"", Base64TestData.bytesContain(encoded, (byte) '\\'));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1135,"assertFalse(""url-safe i="" + i + "" no '+'"", Base64TestData.bytesContain(encoded, (byte) '+'));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1141,"* Base64 encoding of UUID's is a common use-case, especially in URL-SAFE"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1142,"* mode. This test case ends up being the ""URL-SAFE"" JUnit's."
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1144,* @throws DecoderException
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1145,*             if Hex.decode() fails - a serious problem since Hex comes
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1146,*             from our own commons-codec!
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1148,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1149,public void testUUID() throws DecoderException {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1150,// The 4 UUID's below contains mixtures of + and / to help us test the
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1151,// URL-SAFE encoding mode.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1152,final byte[][] ids = new byte[4][];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1154,// ids[0] was chosen so that it encodes with at least one +.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1155,"ids[0] = Hex.decodeHex(""94ed8d0319e4493399560fb67404d370"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1157,// ids[1] was chosen so that it encodes with both / and +.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1158,"ids[1] = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1160,// ids[2] was chosen so that it encodes with at least one /.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1161,"ids[2] = Hex.decodeHex(""64be154b6ffa40258d1a01288e7c31ca"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1163,"// ids[3] was chosen so that it encodes with both / and +, with /"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1164,// right at the beginning.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1165,"ids[3] = Hex.decodeHex(""ff7f8fc01cdb471a8c8b5a9306183fe8"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1167,final byte[][] standard = new byte[4][];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1168,"standard[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1169,"standard[1] = StringUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1170,"standard[2] = StringUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1171,"standard[3] = StringUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1173,final byte[][] urlSafe1 = new byte[4][];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1174,// regular padding (two '==' signs).
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1175,"urlSafe1[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1176,"urlSafe1[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1177,"urlSafe1[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1178,"urlSafe1[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1180,final byte[][] urlSafe2 = new byte[4][];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1181,// single padding (only one '=' sign).
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1182,"urlSafe2[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1183,"urlSafe2[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1184,"urlSafe2[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1185,"urlSafe2[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1187,final byte[][] urlSafe3 = new byte[4][];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1188,// no padding (no '=' signs).
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1189,"urlSafe3[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1190,"urlSafe3[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1191,"urlSafe3[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1192,"urlSafe3[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1194,for (int i = 0; i < 4; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1195,final byte[] encodedStandard = Base64.encodeBase64(ids[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1196,final byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1197,final byte[] decodedStandard = Base64.decodeBase64(standard[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1198,final byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1199,final byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1200,final byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1202,// Very important debugging output should anyone
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1203,// ever need to delve closely into this stuff.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1205,"//                System.out.println(""reference: ["" + Hex.encodeHexString(ids[i]) + ""]"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1206,"//                System.out.println(""standard:  ["" + Hex.encodeHexString(decodedStandard) + ""] From: ["""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1207,"//                        + StringUtils.newStringUtf8(standard[i]) + ""]"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1208,"//                System.out.println(""safe1:     ["" + Hex.encodeHexString(decodedUrlSafe1) + ""] From: ["""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1209,"//                        + StringUtils.newStringUtf8(urlSafe1[i]) + ""]"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1210,"//                System.out.println(""safe2:     ["" + Hex.encodeHexString(decodedUrlSafe2) + ""] From: ["""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1211,"//                        + StringUtils.newStringUtf8(urlSafe2[i]) + ""]"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1212,"//                System.out.println(""safe3:     ["" + Hex.encodeHexString(decodedUrlSafe3) + ""] From: ["""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1213,"//                        + StringUtils.newStringUtf8(urlSafe3[i]) + ""]"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1216,"assertTrue(""standard encode uuid"", Arrays.equals(encodedStandard, standard[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1217,"assertTrue(""url-safe encode uuid"", Arrays.equals(encodedUrlSafe, urlSafe3[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1218,"assertTrue(""standard decode uuid"", Arrays.equals(decodedStandard, ids[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1219,"assertTrue(""url-safe1 decode uuid"", Arrays.equals(decodedUrlSafe1, ids[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1220,"assertTrue(""url-safe2 decode uuid"", Arrays.equals(decodedUrlSafe2, ids[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1221,"assertTrue(""url-safe3 decode uuid"", Arrays.equals(decodedUrlSafe3, ids[i]));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1225,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1226,public void testByteToStringVariations() throws DecoderException {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1227,final Base64 base64 = new Base64(0);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1228,"final byte[] b1 = StringUtils.getBytesUtf8(""Hello World"");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1229,final byte[] b2 = new byte[0];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1230,final byte[] b3 = null;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1231,"final byte[] b4 = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090""); // for"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1232,// url-safe
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1233,// tests
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1235,"assertEquals(""byteToString Hello World"", ""SGVsbG8gV29ybGQ="", base64.encodeToString(b1));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1236,"assertEquals(""byteToString static Hello World"", ""SGVsbG8gV29ybGQ="", Base64.encodeBase64String(b1));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1237,"assertEquals(""byteToString \""\"""", """", base64.encodeToString(b2));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1238,"assertEquals(""byteToString static \""\"""", """", Base64.encodeBase64String(b2));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1239,"assertEquals(""byteToString null"", null, base64.encodeToString(b3));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1240,"assertEquals(""byteToString static null"", null, Base64.encodeBase64String(b3));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1241,"assertEquals(""byteToString UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", base64.encodeToString(b4));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1242,"assertEquals(""byteToString static UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", Base64.encodeBase64String(b4));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1243,"assertEquals(""byteToString static-url-safe UUID"", ""K_fMJwH-Q5e0nr7tWsxwkA"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1244,Base64.encodeBase64URLSafeString(b4));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1247,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1248,public void testStringToByteVariations() throws DecoderException {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1249,final Base64 base64 = new Base64();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1250,"final String s1 = ""SGVsbG8gV29ybGQ=\r\n"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1251,"final String s2 = """";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1252,final String s3 = null;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1253,"final String s4a = ""K/fMJwH+Q5e0nr7tWsxwkA==\r\n"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1254,"final String s4b = ""K_fMJwH-Q5e0nr7tWsxwkA"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1255,"final byte[] b4 = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090""); // for"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1256,// url-safe
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1257,// tests
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1259,"assertEquals(""StringToByte Hello World"", ""Hello World"", StringUtils.newStringUtf8(base64.decode(s1)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1260,"assertEquals(""StringToByte Hello World"", ""Hello World"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1261,StringUtils.newStringUtf8((byte[]) base64.decode((Object) s1)));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1262,"assertEquals(""StringToByte static Hello World"", ""Hello World"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1263,StringUtils.newStringUtf8(Base64.decodeBase64(s1)));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1264,"assertEquals(""StringToByte \""\"""", """", StringUtils.newStringUtf8(base64.decode(s2)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1265,"assertEquals(""StringToByte static \""\"""", """", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1266,"assertEquals(""StringToByte null"", null, StringUtils.newStringUtf8(base64.decode(s3)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1267,"assertEquals(""StringToByte static null"", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1268,"assertTrue(""StringToByte UUID"", Arrays.equals(b4, base64.decode(s4b)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1269,"assertTrue(""StringToByte static UUID"", Arrays.equals(b4, Base64.decodeBase64(s4a)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1270,"assertTrue(""StringToByte static-url-safe UUID"", Arrays.equals(b4, Base64.decodeBase64(s4b)));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1273,private String toString(final byte[] data) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1274,final StringBuilder buf = new StringBuilder();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1275,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1276,buf.append(data[i]);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1277,if (i != data.length - 1) {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1278,"buf.append("","");"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1281,return buf.toString();
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1285,* Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1287,"* @see ""<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>"""
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1289,@Test
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1290,@Ignore
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1291,public void testHugeLineSeparator() {
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1292,final int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1293,final int Base64_BYTES_PER_ENCODED_BLOCK = 4;
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1294,final byte[] baLineSeparator = new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1295,"final Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1296,"final String strOriginal = ""Hello World"";"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1297,final String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1298,"assertEquals(""testDEFAULT_BUFFER_SIZE"", strOriginal, strDecoded);"
False,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,173,"odec = new BaseNCodec(0, 0, 0, 0, (byte)0x25) {"
True,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,173,"codec = new BaseNCodec(0, 0, 0, 0, (byte)0x25) {"

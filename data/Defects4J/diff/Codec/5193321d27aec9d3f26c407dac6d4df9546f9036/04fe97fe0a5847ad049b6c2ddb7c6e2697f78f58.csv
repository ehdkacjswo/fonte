is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,20,import java.io.UnsupportedEncodingException;
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,103,ublic void testCodeInteger1() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,104,public void testCodeInteger1() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,108,"ssertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,109,"assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,111,ublic void testCodeInteger2() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,112,public void testCodeInteger2() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,116,"ssertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,117,"assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,119,ublic void testCodeInteger3() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,120,public void testCodeInteger3() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,126,"ssertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,127,"assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,129,ublic void testCodeInteger4() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,130,public void testCodeInteger4() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,142,"ssertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,143,"assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,219,ublic void testDecodePadMarkerIndex2() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,"ssertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,220,public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,221,"assertEquals(""A"", new String(Base64.decodeBase64(""QQ=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,ublic void testDecodePadMarkerIndex3() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,"ssertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,228,"ssertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,228,"assertEquals(""AA"", new String(Base64.decodeBase64(""QUE="".getBytes(""UTF-8""))));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,229,"assertEquals(""AAA"", new String(Base64.decodeBase64(""QUFB"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,ublic void testDecodePadOnly() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"ssertTrue(Base64.decodeBase64(""===="".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"ssertEquals("""", new String(Base64.decodeBase64(""===="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,public void testDecodePadOnly() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"assertTrue(Base64.decodeBase64(""===="".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"assertEquals("""", new String(Base64.decodeBase64(""===="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"ssertTrue(Base64.decodeBase64(""==="".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"ssertTrue(Base64.decodeBase64(""=="".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"ssertTrue(Base64.decodeBase64(""="".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,"ssertTrue(Base64.decodeBase64("""".getBytes()).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"assertTrue(Base64.decodeBase64(""==="".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"assertTrue(Base64.decodeBase64(""=="".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,"assertTrue(Base64.decodeBase64(""="".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,"assertTrue(Base64.decodeBase64("""".getBytes(""UTF-8"")).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,241,ublic void testDecodePadOnlyChunked() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,242,"ssertTrue(Base64.decodeBase64(""====\n"".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,243,"ssertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,242,public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,243,"assertTrue(Base64.decodeBase64(""====\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,244,"assertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"ssertTrue(Base64.decodeBase64(""===\n"".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"ssertTrue(Base64.decodeBase64(""==\n"".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"ssertTrue(Base64.decodeBase64(""=\n"".getBytes()).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"ssertTrue(Base64.decodeBase64(""\n"".getBytes()).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"assertTrue(Base64.decodeBase64(""===\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"assertTrue(Base64.decodeBase64(""==\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"assertTrue(Base64.decodeBase64(""=\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"assertTrue(Base64.decodeBase64(""\n"".getBytes(""UTF-8"")).length == 0);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,yte[] encodedArray = Base64.encodeBase64(orig.getBytes());
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"byte[] encodedArray = Base64.encodeBase64(orig.getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,yte[] encodedWithWS = intermediate.toString().getBytes();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"byte[] encodedWithWS = intermediate.toString().getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,yte[] encodedArray = Base64.encodeBase64(orig.getBytes());
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"byte[] encodedArray = Base64.encodeBase64(orig.getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,yte[] encodedWithWS = intermediate.toString().getBytes();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"byte[] encodedWithWS = intermediate.toString().getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,352,"decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,353,".decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,383,ublic void testKnownDecodings() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,384,public void testKnownDecodings() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,385,"decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,386,".decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,387,"decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,388,".decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,389,"decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,390,".decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,391,"decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,392,".decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,393,getBytes())));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,"ssertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,394,".getBytes(""UTF-8""))));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,395,"assertEquals(""xyzzy!"", new String(Base64.decodeBase64(""eHl6enkh"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,ublic void testKnownEncodings() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,398,public void testKnownEncodings() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,".encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,getBytes())));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,406,".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,"encodeBase64(""It was the best of times, it was the worst of times."".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,".encodeBase64(""It was the best of times, it was the worst of times."".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,"encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,410,".encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,".encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,getBytes())));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"ssertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,".getBytes(""UTF-8""))));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,415,"assertEquals(""eHl6enkh"", new String(Base64.encodeBase64(""xyzzy!"".getBytes(""UTF-8""))));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,453,bject o = Base64.encodeBase64(original.getBytes());
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,454,"Object o = Base64.encodeBase64(original.getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,476,bject origObj = original.getBytes();
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,477,"Object origObj = original.getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,20,import java.io.UnsupportedEncodingException;
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,186,"oid assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,188,"void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException, UnsupportedEncodingException {"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,193,ecoded = (byte[]) instance.decode((Object) encodeMe.getBytes());
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,195,"decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,207,ublic void testDecodeByteArray() {
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,209,public void testDecodeByteArray() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,210,"yte[] decoded = instance.decode(""00000000"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,212,"byte[] decoded = instance.decode(""00000000"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,214,"ecoded = instance.decode(""00000001"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,216,"decoded = instance.decode(""00000001"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,218,"ecoded = instance.decode(""00000011"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,220,"decoded = instance.decode(""00000011"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,222,"ecoded = instance.decode(""00000111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,224,"decoded = instance.decode(""00000111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,226,"ecoded = instance.decode(""00001111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,228,"decoded = instance.decode(""00001111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,230,"ecoded = instance.decode(""00011111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,232,"decoded = instance.decode(""00011111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,234,"ecoded = instance.decode(""00111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,236,"decoded = instance.decode(""00111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,238,"ecoded = instance.decode(""01111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,240,"decoded = instance.decode(""01111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,242,"ecoded = instance.decode(""11111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,244,"decoded = instance.decode(""11111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,247,"ecoded = instance.decode(""0000000011111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,249,"decoded = instance.decode(""0000000011111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,252,"ecoded = instance.decode(""0000000111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,254,"decoded = instance.decode(""0000000111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,257,"ecoded = instance.decode(""0000001111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,259,"decoded = instance.decode(""0000001111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,262,"ecoded = instance.decode(""0000011111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,264,"decoded = instance.decode(""0000011111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,267,"ecoded = instance.decode(""0000111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,269,"decoded = instance.decode(""0000111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,272,"ecoded = instance.decode(""0001111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,274,"decoded = instance.decode(""0001111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,277,"ecoded = instance.decode(""0011111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,279,"decoded = instance.decode(""0011111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,282,"ecoded = instance.decode(""0111111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,284,"decoded = instance.decode(""0111111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,287,"ecoded = instance.decode(""1111111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,289,"decoded = instance.decode(""1111111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,487,ublic void testFromAsciiByteArray() {
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,489,public void testFromAsciiByteArray() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,492,"yte[] decoded = BinaryCodec.fromAscii(""00000000"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,494,"byte[] decoded = BinaryCodec.fromAscii(""00000000"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,496,"ecoded = BinaryCodec.fromAscii(""00000001"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,498,"decoded = BinaryCodec.fromAscii(""00000001"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,500,"ecoded = BinaryCodec.fromAscii(""00000011"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,502,"decoded = BinaryCodec.fromAscii(""00000011"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,504,"ecoded = BinaryCodec.fromAscii(""00000111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,506,"decoded = BinaryCodec.fromAscii(""00000111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,508,"ecoded = BinaryCodec.fromAscii(""00001111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,510,"decoded = BinaryCodec.fromAscii(""00001111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,512,"ecoded = BinaryCodec.fromAscii(""00011111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,514,"decoded = BinaryCodec.fromAscii(""00011111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,516,"ecoded = BinaryCodec.fromAscii(""00111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,518,"decoded = BinaryCodec.fromAscii(""00111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,520,"ecoded = BinaryCodec.fromAscii(""01111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,522,"decoded = BinaryCodec.fromAscii(""01111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,524,"ecoded = BinaryCodec.fromAscii(""11111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,526,"decoded = BinaryCodec.fromAscii(""11111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,529,"ecoded = BinaryCodec.fromAscii(""0000000011111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,531,"decoded = BinaryCodec.fromAscii(""0000000011111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,534,"ecoded = BinaryCodec.fromAscii(""0000000111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,536,"decoded = BinaryCodec.fromAscii(""0000000111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,539,"ecoded = BinaryCodec.fromAscii(""0000001111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,541,"decoded = BinaryCodec.fromAscii(""0000001111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,544,"ecoded = BinaryCodec.fromAscii(""0000011111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,546,"decoded = BinaryCodec.fromAscii(""0000011111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,549,"ecoded = BinaryCodec.fromAscii(""0000111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,551,"decoded = BinaryCodec.fromAscii(""0000111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,554,"ecoded = BinaryCodec.fromAscii(""0001111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,556,"decoded = BinaryCodec.fromAscii(""0001111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,559,"ecoded = BinaryCodec.fromAscii(""0011111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,561,"decoded = BinaryCodec.fromAscii(""0011111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,564,"ecoded = BinaryCodec.fromAscii(""0111111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,566,"decoded = BinaryCodec.fromAscii(""0111111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,569,"ecoded = BinaryCodec.fromAscii(""1111111111111111"".getBytes());"
True,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,src/test/org/apache/commons/codec/binary/BinaryCodecTest.java,571,"decoded = BinaryCodec.fromAscii(""1111111111111111"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,178,ublic void testCustomCharsetBadNameEncodeByteArray() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,178,public void testCustomCharsetBadNameEncodeByteArray() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,180,"ew Hex(BAD_ENCODING_NAME).encode(""Hello World"".getBytes());"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,180,"new Hex(BAD_ENCODING_NAME).encode(""Hello World"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,196,ublic void testCustomCharsetBadNameDecodeObject() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,196,public void testCustomCharsetBadNameDecodeObject() throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,198,"ew Hex(BAD_ENCODING_NAME).decode(""Hello World"".getBytes());"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,198,"new Hex(BAD_ENCODING_NAME).decode(""Hello World"".getBytes(""UTF-8""));"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,148,"ncodeQuotedPrintable(null, plain.getBytes()));"
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,148,"encodeQuotedPrintable(null, plain.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,183,yte[] plainBA = plain.getBytes();
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,183,"byte[] plainBA = plain.getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,225,yte[] plainBA = plain.getBytes();
True,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,225,"byte[] plainBA = plain.getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,183,"tring encoded = new String( URLCodec.encodeUrl(null, plain.getBytes()));"
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,183,"String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(""UTF-8"")));"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,218,yte[] plainBA = plain.getBytes();
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,218,"byte[] plainBA = plain.getBytes(""UTF-8"");"
False,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,262,yte[] plainBA = plain.getBytes();
True,src/test/org/apache/commons/codec/net/URLCodecTest.java,src/test/org/apache/commons/codec/net/URLCodecTest.java,262,"byte[] plainBA = plain.getBytes(""UTF-8"");"

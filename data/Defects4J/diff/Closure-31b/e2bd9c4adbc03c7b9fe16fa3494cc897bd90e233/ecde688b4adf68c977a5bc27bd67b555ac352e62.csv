is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,313,ry {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,314,"tring[] sourceLines = ast.getSourceFile().getCode().split(""\n"");"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,315,ineOffsets = new int[sourceLines.length];
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,316,or (int ii = 1; ii < sourceLines.length; ++ii) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,317,ineOffsets[ii] =
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,318,ineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,320, catch (IOException e) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,321,eturn 0;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,313,findLineOffsets();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,322,/** @return The number of lines in this input. */
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,323,public int getNumLines() {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,324,if (lineOffsets == null) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,325,findLineOffsets();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,327,return lineOffsets.length;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,330,private void findLineOffsets() {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,331,try {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,332,"String[] sourceLines = ast.getSourceFile().getCode().split(""\n"");"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,333,lineOffsets = new int[sourceLines.length];
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,334,for (int ii = 1; ii < sourceLines.length; ++ii) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,335,lineOffsets[ii] =
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,336,lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,338,} catch (IOException e) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,339,lineOffsets = new int[1];
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,340,lineOffsets[0] = 0;

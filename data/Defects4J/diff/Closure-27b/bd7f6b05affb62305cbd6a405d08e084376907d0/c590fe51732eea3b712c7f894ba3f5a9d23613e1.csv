is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,741,"tatic void escapeRegularCharOnto(char ch, StringBuilder sb) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,742,* @param ch The code-unit to escape.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,743,* @param next The next code-unit or -1 if indeterminable.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,745,private static void escapeRegularCharOnto(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,746,"char ch, int next, StringBuilder sb) {"
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,749,ase '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,761,case '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,762,"// If possibly part of a repetition, then escape."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,763,// Concatenation is handled by the digitsMightBleed check.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,764,if ('0' <= next && next <= '9') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,765,sb.append('\\');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,767,sb.append(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,768,break;
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,790,"scapeRegularCharOnto(text.charAt(i), sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,802,"escapeRegularCharOnto(text.charAt(i), i + 1 < n ? text.charAt(i + 1) : -1, sb);"
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,869,Override
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,870,rotected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,881,private void appendBodySourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,893,"private static int suffixLen(int min, int max) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,894,// This mirrors the branches that renders a suffix in appendSourceCode below.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,895,if (max == Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,896,switch (min) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,897,case 0: return 1;  // *
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,898,case 1: return 1;  // +
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,899,"default: return 3 + numDecimalDigits(min);  // {3,}"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,902,if (min == 0 && max == 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,903,return 1;  // ?
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,905,if (min == max) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,906,if (min == 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,907,return 0;  // No suffix needed for {1}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,909,return 2 + numDecimalDigits(min);  // {4}
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,911,"return 3 + numDecimalDigits(min) + numDecimalDigits(max);  // {2,7}"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,914,private static int numDecimalDigits(int n) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,915,if (n < 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,916,// Negative values should not be passed in.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,917,throw new AssertionError();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,918,"// If changing this code to support negative values,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,919,// Integer.MIN_VALUE is a corner-case..
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,921,int nDigits = 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,922,while (n >= 10) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,923,++nDigits;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,924,n /= 10;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,926,return nDigits;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,929,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,930,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,931,int bodyStart = sb.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,932,appendBodySourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,933,int bodyEnd = sb.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,934,int bodyLen = bodyEnd - bodyStart;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,935,int min = this.min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,936,int max = this.max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,937,if (min >= 2 && max == Integer.MAX_VALUE || max - min <= 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,938,int expanded =
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,939,// If min == max then we want to try expanding to the limit and
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,940,"// attach the empty suffix, which is equivalent to min = max = 1,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,941,// i.e. /a/ vs /a{1}/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,942,min == max
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,943,// Give aa+ preference over aaa*.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,944,|| max == Integer.MAX_VALUE
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,945,? min - 1
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,946,: min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,947,int expandedMin = min - expanded;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,948,int expandedMax = max == Integer.MAX_VALUE ? max : max - expanded;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,949,"int suffixLen = suffixLen(min, max);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,950,"int expandedSuffixLen = suffixLen(expandedMin, expandedMax);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,951,if (bodyLen * expanded + expandedSuffixLen < suffixLen
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,952,&& !body.hasCapturingGroup()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,953,// a{2} -> aa
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,954,"// a{2,} -> aa+"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,955,"// a{2,3} -> aaa?"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,956,while (--expanded >= 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,957,"sb.append(sb, bodyStart, bodyEnd);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,959,min = expandedMin;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,960,max = expandedMax;
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,890,b.append('{').append(min).append('}');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,974,if (min != 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,975,sb.append('{').append(min).append('}');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1757,// True if the last content written might consume
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1758,// decimal digits written subsequently.
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1677, else {
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1678,igitsMightBleed = element instanceof Text;
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1679,f (digitsMightBleed) {
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1680,ext text = (Text) element;
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1681,f (text.text.length() != 0) {
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1682,har first = text.text.charAt(0);
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1683,arenthesize = '0' <= first && first <= '9';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1771,int start = sb.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1773,if (digitsMightBleed && sb.length() > start) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1774,char firstChar = sb.charAt(start);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1775,if ('0' <= firstChar && firstChar <= '9') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1776,// Bleeding happened.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1777,// If the last character would be ambiguous
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1778,"// with a repetition, escape it."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1779,if (sb.charAt(start - 1) == '{') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1780,// Concatenation from optimization of
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1781,"// /{(?:0,}/ -> /\{0,}/"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1782,"sb.insert(start - 1, '\\');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1783,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1784,// Or parenthesize otherwise.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1785,// Concatenation from optimization of
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1786,// /(.)\1(?:0)/ -> /(.)\1(?:0)/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1787,"sb.insert(start, ""(?:"").append(')');"
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1694,igitsMightBleed = element instanceof BackReference
False,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1695,& ((BackReference) element).groupIndex < 10;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1792,digitsMightBleed = (
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1793,// \1(?:0) bleeds if there are 10 or more
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1794,// capturing groups preceding.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1795,(element instanceof BackReference
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1796,&& ((BackReference) element).groupIndex < 10)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1797,// foo{(?:10}) bleeds.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1798,|| (element instanceof Text
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1799,"&& ((Text) element).text.endsWith(""{"")));"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,165,"test(""/a{3,}/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,166,"""/aaa+/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,173,"estSame(""/a{2,3}b{3,4}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,175,"testSame(""/a{5,7}b{5,6}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,176,"test(""/a{2,3}b{3,4}/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,177,"""/aaa?bbbb?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,178,"test(""/a{3}b{3,4}/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,179,"""/aaabbbb?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,180,"testSame(""/[a-z]{1,2}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,181,"test(""/\\d{1,2}/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,182,"""/\\d\\d?/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,175,"est(""/a+a+/"", ""/a{2,}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,184,"test(""/a+a+/"", ""/aa+/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,177,/ In partial repetitions the open curly is treated literally.
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,178,"est(""/a{/"", ""/a\\{/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,179,"est(""/a{}/"", ""/a\\{}/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,180,"est(""/a{,3}/"", ""/a\\{,3}/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,181,"est(""/a{x}/"", ""/a\\{x}/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,182,"est(""/a{-1}/"", ""/a\\{-1}/"");"
False,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,183,"est(""/a{3,1}/"", ""/a\\{3,1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,186,// We don't conflate literal curly brackets with repetitions.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,187,"testSame(""/a\\{3,1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,188,"test(""/a(?:{3,1})/"", ""/a\\{3,1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,189,"test(""/a{3\\,1}/"", ""/a\\{3,1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,190,"testSame(""/a\\{3}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,191,"testSame(""/a\\{3,}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,192,"testSame(""/a\\{1,3}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,193,// We don't over-escape curly brackets.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,194,"testSame(""/a{/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,195,"testSame(""/a{}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,196,"testSame(""/a{x}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,197,"testSame(""/a{-1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,198,"testSame(""/a{,3}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,199,"testSame(""/{{[a-z]+}}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,200,"testSame(""/{\\{0}}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,201,"testSame(""/{\\{0?}}/"");"

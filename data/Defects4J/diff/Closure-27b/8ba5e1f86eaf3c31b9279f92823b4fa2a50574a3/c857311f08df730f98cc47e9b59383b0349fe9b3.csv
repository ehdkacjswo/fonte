is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,430,"ddLeftExpr(first, NodeUtil.precedence(type), context);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,430,"// If the left hand side of the call is a direct reference to eval,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,431,"// then it must have a DIRECT_EVAL annotation. If it does not, then"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,432,"// that means it was originally an indirect call to eval, and that"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,433,// indirectness must be preserved.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,434,if (first.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,435,"""eval"".equals(first.getString()) &&"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,436,!first.getBooleanProp(Node.DIRECT_EVAL)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,437,"add(""(0,eval)"");"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,438,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,439,"addLeftExpr(first, NodeUtil.precedence(type), context);"
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,31,// TODO(nicksantos): This pass should really be merged together with
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,32,// NodeTypeNormalizer. They really do one task: they fill in information
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,33,// on the AST that we expect to be there.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,54,witch (n.getType()) {
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,57,int nType = n.getType();
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,58,switch (nType) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,57,f (convention.isConstant(n.getString())) {
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,61,String nString = n.getString();
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,62,if (nType == Token.NAME &&
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,63,n.getParent().getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,64,"""eval"".equals(nString)) {"
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,65,"n.putBooleanProp(Node.DIRECT_EVAL, true);"
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,67,if (convention.isConstant(nString)) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,151,AST_PROP          = 48;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,151,"DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,152,// indirect calls to eval.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,153,LAST_PROP          = 49;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,234,"case DIRECT_EVAL:        return ""direct_eval"";"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,639,public void testDirectEval() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,640,"assertPrint(""eval('1');"", ""eval(\""1\"")"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,643,public void testIndirectEval() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,644,"Node n = parse(""eval('1');"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,645,"assertPrintNode(""eval(\""1\"")"", n);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,646,n.getFirstChild().getFirstChild().getFirstChild().putBooleanProp(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,647,"Node.DIRECT_EVAL, false);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,648,"assertPrintNode(""(0,eval)(\""1\"")"", n);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,37,"// If set to true, uses comparison by string instead of by AST."
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,38,private boolean useStringComparison = false;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,55,useStringComparison = false;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,163,public void testIssue81() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,164,CompilerRunner.FLAG_compilation_level.setForTest(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,165,CompilationLevel.ADVANCED_OPTIMIZATIONS);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,166,useStringComparison = true;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,167,"test(""eval('1'); var x = eval; x('2');"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,168,"""eval(\""1\"");(0,eval)(\""2\"");"");"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,226,ode expectedRoot = parse(compiled);
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,227,tring explanation = expectedRoot.checkTreeEquals(root);
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,228,"ssertNull(""\nExpected: "" + compiler.toSource(expectedRoot) +"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,229,"\nResult: "" + compiler.toSource(root) +"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,230,"\n"" + explanation, explanation);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,238,if (useStringComparison) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,239,"assertEquals(Joiner.on("""").join(compiled), compiler.toSource());"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,240,} else {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,241,Node expectedRoot = parse(compiled);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,242,String explanation = expectedRoot.checkTreeEquals(root);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,243,"assertNull(""\nExpected: "" + compiler.toSource(expectedRoot) +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,244,"""\nResult: "" + compiler.toSource(root) +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,245,"""\n"" + explanation, explanation);"

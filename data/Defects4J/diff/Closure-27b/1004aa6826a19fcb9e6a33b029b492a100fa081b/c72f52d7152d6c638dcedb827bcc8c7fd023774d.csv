is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,128,* The warning classes that are available from the command-line.
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,128,eturn new DiagnosticGroups();
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,131,if (compiler == null) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,132,return new DiagnosticGroups();
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,134,return compiler.getDiagnosticGroups();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,86,// Warnings guard for filtering warnings.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,87,private WarningsGuard warningsGuard;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,231,// Initialize the warnings guard.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,232,List<WarningsGuard> guards = Lists.newArrayList();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,233,guards.add(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,234,new SuppressDocWarningsGuard(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,235,getDiagnosticGroups().getRegisteredGroups()));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,236,WarningsGuard warningsGuard = options.getWarningsGuard();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,237,if (warningsGuard != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,238,guards.add(options.getWarningsGuard());
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,241,// All passes must run the variable check. This synthesizes
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,242,// variables later so that the compiler doesn't crash. It also
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,243,// checks the externs file for validity. If you don't want to warn
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,244,"// about missing variable declarations, we shut that specific"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,245,// error off.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,246,if (!options.checkSymbols &&
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,247,(warningsGuard == null || !warningsGuard.disables(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,248,DiagnosticGroups.CHECK_VARIABLES))) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,249,guards.add(new DiagnosticGroupWarningsGuard(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,250,"DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,252,this.warningsGuard = new ComposeWarningsGuard(guards);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1604,"* The warning classes that are available from the command-line, and"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1605,* are suppressable by the {@code @suppress} annotation.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1607,protected DiagnosticGroups getDiagnosticGroups() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1608,return new DiagnosticGroups();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1580,arningsGuard guard = options.getWarningsGuard();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1581,f (guard != null) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1582,heckLevel newLevel = guard.level(error);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1614,if (warningsGuard != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1615,CheckLevel newLevel = warningsGuard.level(error);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,218,/ All passes must run the variable check. This synthesizes
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,219,/ variables later so that the compiler doesn't crash. It also
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,220,/ checks the externs file for validity. If you don't want to warn
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,221,"/ about missing variable declarations, we shut that specific"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,222,/ error off.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,223,arningsGuard warningsGuard = options.getWarningsGuard();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,224,f (!options.checkSymbols &&
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,225,warningsGuard == null || !warningsGuard.disables(
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,226,iagnosticGroups.CHECK_VARIABLES))) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,227,"ptions.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,228,heckLevel.OFF);
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,20,import com.google.common.collect.ImmutableMap;
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,43,"/** Get the registered diagnostic groups, indexed by name. */"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,44,"protected Map<String, DiagnosticGroup> getRegisteredGroups() {"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,45,return ImmutableMap.copyOf(groupsByName);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,143,// This doesn't affect whether checkSymbols is run--it just affects
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,144,// whether variable warnings are filtered.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,145,options.checkSymbols = true;
True,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,125,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,126,options.checkSymbols = true;
True,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java,127,compiler.initOptions(options);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7050,public void testMissingProperty34() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7051,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7052,"""/** @fileoverview \n * @suppress {missingProperties} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7053,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7054,"""Foo.prototype.bar = function() { return this.a; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7055,"""Foo.prototype.baz = function() { this.b = 3; };"");"
False,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,36,ublic CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,36,public CompilerOptions getOptions() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,37,CompilerOptions options = super.getOptions();
False,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,38,ompiler.getOptions().setWarningLevel(
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,39,options.setWarningLevel(
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,42,return options;
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,45,@Override
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,46,public CompilerPass getProcessor(Compiler compiler) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,295,"* Returns the root node of the AST, which includes both externs and source."
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,297,abstract Node getRoot();
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,128,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,128,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,900," Returns the root node of the AST, which includes both externs and source."
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,899,@Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,841,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,842,"ass.hotSwapScript(scriptRoot, globalScope);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,841,public void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,842,pass.hotSwapScript(scriptRoot);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1012,inal PassFactory resolveTypes =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1013,"ew PassFactory(""resolveTypes"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1012,final HotSwapPassFactory resolveTypes =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1013,"new HotSwapPassFactory(""resolveTypes"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1015,rotected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1015,protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1035,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1035,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1079,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1079,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1125,rivate class GlobalTypeResolver implements CompilerPass {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1125,private class GlobalTypeResolver implements HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1140,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1141,public void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1142,// We have to rebuild the global scope.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1143,"// If this is not fast enough, we'll need to change the interface"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1144,// of ScopeCreator so that it can patch new variables into an existing
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1145,// scope (right now it can only create new scopes).
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1146,"regenerateGlobalTypedScope(compiler, compiler.getRoot());"
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,30, {@code Token.SCRIPT}. Also the global-scope is supposed to be updated based
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,31, on new js file prior to this call.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,30,* {@code Token.SCRIPT}.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,42, @param globalScope The global scope which is not necessarily types.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,44,"oid hotSwapScript(Node scriptRoot, Scope globalScope);"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,42,void hotSwapScript(Node scriptRoot);
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,162,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,162,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,"ublic void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,public void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,".traverseWithScope(scriptRoot, globalScope);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,// TODO(bashir) Currently VarCheck is the only pass that its hotSwapScript
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,// needs a global scope and cannot use global typed scope. If other passes
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,124,// in future need a similar top scope we have to refactor the next scope
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,125,// generation and generate such global scope only once.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,126,Scope scope = new SyntacticScopeCreator(compiler).createScope(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,127,"compiler.getRoot(), null);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,128,"t.traverseWithScope(scriptRoot, scope);"

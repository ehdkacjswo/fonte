is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1553,rivate CodingConvention codingConvention = new DefaultCodingConvention();
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1553,private CodingConvention codingConvention = CodingConventions.getDefault();
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,23,import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,24,import com.google.javascript.jscomp.CodingConvention.Bind;
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,25,import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,26,import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,27,import com.google.javascript.jscomp.CodingConvention.SubclassType;
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,38,ublic class ClosureCodingConvention extends DefaultCodingConvention {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,43,public class ClosureCodingConvention extends CodingConventions.Proxy {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,51,public ClosureCodingConvention() {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,52,this(CodingConventions.getDefault());
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,55,public ClosureCodingConvention(CodingConvention wrapped) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,56,super(wrapped);
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,33, // TODO(bolinfest): Tighten up this interface -- it is far too big.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,19,import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,20,import com.google.javascript.jscomp.CodingConvention.Bind;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,21,import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,22,import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,23,import com.google.javascript.jscomp.CodingConvention.SubclassType;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,24,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,25,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,26,import com.google.javascript.rhino.jstype.FunctionType;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,27,import com.google.javascript.rhino.jstype.JSTypeRegistry;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,28,import com.google.javascript.rhino.jstype.ObjectType;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,30,import java.util.Collection;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,31,import java.util.Collections;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,32,import java.util.List;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,33,import java.util.Map;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,36,* Helper classes for dealing with coding conventions.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,38,public class CodingConventions {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,40,private CodingConventions() {}
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,42,/** Gets the default coding convention. */
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,43,public static CodingConvention getDefault() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,44,return new DefaultCodingConvention();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,48,* A convention that wraps another.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,50,"* When you want to support a new library, you should subclass this"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,51,"* delegate, and override the methods that you want to customize."
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,53,"* This way, a person using jQuery and Closure Library can create a new"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,54,* coding convention by creating a jQueryCodingConvention that delegates
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,55,* to a ClosureCodingConvention that delegates to a DefaultCodingConvention.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,57,public static class Proxy implements CodingConvention {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,59,protected final CodingConvention nextConvention;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,61,protected Proxy(CodingConvention convention) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,62,this.nextConvention = convention;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,65,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,66,public boolean isConstant(String variableName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,67,return nextConvention.isConstant(variableName);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,70,@Override public boolean isConstantKey(String keyName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,71,return nextConvention.isConstantKey(keyName);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,74,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,75,public boolean isValidEnumKey(String key) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,76,return nextConvention.isValidEnumKey(key);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,79,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,80,public boolean isOptionalParameter(Node parameter) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,81,return nextConvention.isOptionalParameter(parameter);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,84,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,85,public boolean isVarArgsParameter(Node parameter) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,86,return nextConvention.isVarArgsParameter(parameter);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,89,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,90,"public boolean isExported(String name, boolean local) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,91,"return nextConvention.isExported(name, local);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,95,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,96,public final boolean isExported(String name) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,97,"return isExported(name, false) || isExported(name, true);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,100,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,101,public boolean isPrivate(String name) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,102,return nextConvention.isPrivate(name);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,105,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,106,public SubclassRelationship getClassesDefinedByCall(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,107,return nextConvention.getClassesDefinedByCall(callNode);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,110,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,111,public boolean isSuperClassReference(String propertyName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,112,return nextConvention.isSuperClassReference(propertyName);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,115,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,116,"public String extractClassNameIfProvide(Node node, Node parent) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,117,"return nextConvention.extractClassNameIfProvide(node, parent);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,120,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,121,"public String extractClassNameIfRequire(Node node, Node parent) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,122,"return nextConvention.extractClassNameIfRequire(node, parent);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,125,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,126,public String getExportPropertyFunction() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,127,return nextConvention.getExportPropertyFunction();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,130,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,131,public String getExportSymbolFunction() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,132,return nextConvention.getExportSymbolFunction();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,135,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,136,public List<String> identifyTypeDeclarationCall(Node n) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,137,return nextConvention.identifyTypeDeclarationCall(n);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,140,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,141,"public void applySubclassRelationship(FunctionType parentCtor,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,142,"FunctionType childCtor, SubclassType type) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,143,nextConvention.applySubclassRelationship(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,144,"parentCtor, childCtor, type);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,147,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,148,public String getAbstractMethodName() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,149,return nextConvention.getAbstractMethodName();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,152,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,153,public String getSingletonGetterClassName(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,154,return nextConvention.getSingletonGetterClassName(callNode);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,157,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,158,"public void applySingletonGetter(FunctionType functionType,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,159,"FunctionType getterType, ObjectType objectType) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,160,nextConvention.applySingletonGetter(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,161,"functionType, getterType, objectType);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,164,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,165,public DelegateRelationship getDelegateRelationship(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,166,return nextConvention.getDelegateRelationship(callNode);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,170,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,171,public void applyDelegateRelationship(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,172,"ObjectType delegateSuperclass, ObjectType delegateBase,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,173,"ObjectType delegator, FunctionType delegateProxy,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,174,FunctionType findDelegate) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,175,nextConvention.applyDelegateRelationship(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,176,"delegateSuperclass, delegateBase, delegator,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,177,"delegateProxy, findDelegate);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,180,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,181,public String getDelegateSuperclassName() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,182,return nextConvention.getDelegateSuperclassName();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,185,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,186,public void checkForCallingConventionDefiningCalls(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,187,"Node n, Map<String, String> delegateCallingConventions) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,188,nextConvention.checkForCallingConventionDefiningCalls(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,189,"n, delegateCallingConventions);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,192,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,193,public void defineDelegateProxyPrototypeProperties(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,194,"JSTypeRegistry registry, Scope scope,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,195,"List<ObjectType> delegateProxyPrototypes,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,196,"Map<String, String> delegateCallingConventions) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,197,nextConvention.defineDelegateProxyPrototypeProperties(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,198,"registry, scope, delegateProxyPrototypes, delegateCallingConventions);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,201,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,202,public String getGlobalObject() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,203,return nextConvention.getGlobalObject();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,206,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,207,public Collection<AssertionFunctionSpec> getAssertionFunctions() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,208,return nextConvention.getAssertionFunctions();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,211,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,212,public Bind describeFunctionBind(Node n) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,213,return nextConvention.describeFunctionBind(n);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,216,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,217,public boolean isPropertyTestFunction(Node call) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,218,return nextConvention.isPropertyTestFunction(call);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,221,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,222,"public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,223,Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,224,"return nextConvention.getObjectLiteralCast(t, callNode);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,230,* The default coding convention.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,231,* Should be at the bottom of all proxy chains.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,233,private static class DefaultCodingConvention implements CodingConvention {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,235,private static final long serialVersionUID = 1L;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,237,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,238,public boolean isConstant(String variableName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,239,return false;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,242,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,243,public boolean isConstantKey(String variableName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,244,return false;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,247,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,248,public boolean isValidEnumKey(String key) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,249,return key != null && key.length() > 0;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,252,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,253,public boolean isOptionalParameter(Node parameter) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,254,"// be as lax as possible, but this must be mutually exclusive from"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,255,// var_args parameters.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,256,return !isVarArgsParameter(parameter);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,259,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,260,public boolean isVarArgsParameter(Node parameter) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,261,// be as lax as possible
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,262,return parameter.getParent().getLastChild() == parameter;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,265,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,266,"public boolean isExported(String name, boolean local) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,267,"return local && name.startsWith(""$super"");"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,270,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,271,public boolean isExported(String name) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,272,"return isExported(name, false) || isExported(name, true);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,275,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,276,public boolean isPrivate(String name) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,277,return false;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,280,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,281,public SubclassRelationship getClassesDefinedByCall(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,282,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,285,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,286,public boolean isSuperClassReference(String propertyName) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,287,return false;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,290,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,291,"public String extractClassNameIfProvide(Node node, Node parent) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,292,"String message = ""only implemented in GoogleCodingConvention"";"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,293,throw new UnsupportedOperationException(message);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,296,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,297,"public String extractClassNameIfRequire(Node node, Node parent) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,298,"String message = ""only implemented in GoogleCodingConvention"";"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,299,throw new UnsupportedOperationException(message);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,302,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,303,public String getExportPropertyFunction() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,304,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,307,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,308,public String getExportSymbolFunction() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,309,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,312,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,313,public List<String> identifyTypeDeclarationCall(Node n) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,314,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,317,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,318,"public void applySubclassRelationship(FunctionType parentCtor,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,319,"FunctionType childCtor, SubclassType type) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,320,// do nothing
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,323,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,324,public String getAbstractMethodName() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,325,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,328,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,329,public String getSingletonGetterClassName(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,330,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,333,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,334,"public void applySingletonGetter(FunctionType functionType,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,335,"FunctionType getterType, ObjectType objectType) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,336,// do nothing.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,339,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,340,public DelegateRelationship getDelegateRelationship(Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,341,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,344,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,345,public void applyDelegateRelationship(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,346,"ObjectType delegateSuperclass, ObjectType delegateBase,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,347,"ObjectType delegator, FunctionType delegateProxy,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,348,FunctionType findDelegate) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,349,// do nothing.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,352,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,353,public String getDelegateSuperclassName() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,354,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,357,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,358,"public void checkForCallingConventionDefiningCalls(Node n,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,359,"Map<String, String> delegateCallingConventions) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,360,// do nothing.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,363,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,364,public void defineDelegateProxyPrototypeProperties(
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,365,"JSTypeRegistry registry, Scope scope,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,366,"List<ObjectType> delegateProxyPrototypes,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,367,"Map<String, String> delegateCallingConventions) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,368,// do nothing.
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,371,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,372,public String getGlobalObject() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,373,"return ""window"";"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,376,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,377,public boolean isPropertyTestFunction(Node call) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,378,return false;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,381,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,382,"public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,383,Node callNode) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,384,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,387,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,388,public Collection<AssertionFunctionSpec> getAssertionFunctions() {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,389,return Collections.emptySet();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,392,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,393,public Bind describeFunctionBind(Node n) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,394,// It would be nice to be able to identify a fn.bind call
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,395,"// but that requires knowing the type of ""fn""."
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,397,if (n.getType() != Token.CALL) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,398,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,401,Node callTarget = n.getFirstChild();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,402,String name = callTarget.getQualifiedName();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,403,if (name != null) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,404,"if (name.equals(""Function.prototype.bind.call"")) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,405,"// goog.bind(fn, self, args...);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,406,Node fn = callTarget.getNext();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,407,if (fn == null) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,408,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,410,Node thisValue = safeNext(fn);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,411,Node parameters = safeNext(thisValue);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,412,"return new Bind(fn, thisValue, parameters);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,416,if (callTarget.getType() == Token.GETPROP
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,417,"&& callTarget.getLastChild().getString().equals(""bind"")"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,418,&& callTarget.getFirstChild().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,419,"// (function(){}).bind(self, args...);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,420,Node fn = callTarget.getFirstChild();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,421,Node thisValue = callTarget.getNext();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,422,Node parameters = safeNext(thisValue);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,423,"return new Bind(fn, thisValue, parameters);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,426,return null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,429,private Node safeNext(Node n) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,430,if (n != null) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,431,return n.getNext();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,433,return null;
False,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,643,ew DefaultCodingConvention() :
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,643,CodingConventions.getDefault() :
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,2, Copyright 2007 The Closure Compiler Authors.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,16,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,18,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,19,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,20,mport com.google.javascript.rhino.jstype.FunctionType;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,21,mport com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,22,mport com.google.javascript.rhino.jstype.ObjectType;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,24,mport java.util.Collection;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,25,mport java.util.Collections;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,26,mport java.util.List;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,27,mport java.util.Map;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,30, CodingConvention defines a set of hooks to customize the behavior of the
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,31, Compiler for a specific team/company.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,34,ublic class DefaultCodingConvention implements CodingConvention {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,36,rivate static final long serialVersionUID = 1L;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,38,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,39,ublic boolean isConstant(String variableName) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,40,eturn false;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,43,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,44,ublic boolean isConstantKey(String variableName) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,45,eturn false;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,48,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,49,ublic boolean isValidEnumKey(String key) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,50,eturn key != null && key.length() > 0;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,53,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,54,ublic boolean isOptionalParameter(Node parameter) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,55,"/ be as lax as possible, but this must be mutually exclusive from"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,56,/ var_args parameters.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,57,eturn !isVarArgsParameter(parameter);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,60,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,61,ublic boolean isVarArgsParameter(Node parameter) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,62,/ be as lax as possible
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,63,eturn parameter.getParent().getLastChild() == parameter;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,66,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,67,"ublic boolean isExported(String name, boolean local) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,68,"eturn local && name.startsWith(""$super"");"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,71,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,72,ublic boolean isExported(String name) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,73,"eturn isExported(name, false) || isExported(name, true);"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,76,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,77,ublic boolean isPrivate(String name) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,78,eturn false;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,81,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,82,ublic SubclassRelationship getClassesDefinedByCall(Node callNode) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,83,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,86,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,87,ublic boolean isSuperClassReference(String propertyName) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,88,eturn false;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,91,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,92,"ublic String extractClassNameIfProvide(Node node, Node parent) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,93,"tring message = ""only implemented in GoogleCodingConvention"";"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,94,hrow new UnsupportedOperationException(message);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,97,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,98,"ublic String extractClassNameIfRequire(Node node, Node parent) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,99,"tring message = ""only implemented in GoogleCodingConvention"";"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,100,hrow new UnsupportedOperationException(message);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,103,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,104,ublic String getExportPropertyFunction() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,105,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,108,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,109,ublic String getExportSymbolFunction() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,110,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,113,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,114,ublic List<String> identifyTypeDeclarationCall(Node n) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,115,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,118,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,119,"ublic void applySubclassRelationship(FunctionType parentCtor,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,120,"unctionType childCtor, SubclassType type) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,121,/ do nothing
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,124,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,125,ublic String getAbstractMethodName() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,126,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,129,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,130,ublic String getSingletonGetterClassName(Node callNode) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,131,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,134,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,135,"ublic void applySingletonGetter(FunctionType functionType,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,136,"unctionType getterType, ObjectType objectType) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,137,/ do nothing.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,140,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,141,ublic DelegateRelationship getDelegateRelationship(Node callNode) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,142,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,145,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,146,ublic void applyDelegateRelationship(
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,147,"bjectType delegateSuperclass, ObjectType delegateBase,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,148,"bjectType delegator, FunctionType delegateProxy,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,149,unctionType findDelegate) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,150,/ do nothing.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,153,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,154,ublic String getDelegateSuperclassName() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,155,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,158,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,159,"ublic void checkForCallingConventionDefiningCalls(Node n,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,160,"ap<String, String> delegateCallingConventions) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,161,/ do nothing.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,164,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,165,ublic void defineDelegateProxyPrototypeProperties(
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,166,"STypeRegistry registry, Scope scope,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,167,"ist<ObjectType> delegateProxyPrototypes,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,168,"ap<String, String> delegateCallingConventions) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,169,/ do nothing.
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,172,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,173,ublic String getGlobalObject() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,174,"eturn ""window"";"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,177,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,178,ublic boolean isPropertyTestFunction(Node call) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,179,eturn false;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,182,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,183,"ublic ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,184,ode callNode) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,185,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,188,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,189,ublic Collection<AssertionFunctionSpec> getAssertionFunctions() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,190,eturn Collections.emptySet();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,193,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,194,ublic Bind describeFunctionBind(Node n) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,195,/ It would be nice to be able to identify a fn.bind call
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,196,"/ but that requires knowing the type of ""fn""."
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,198,f (n.getType() != Token.CALL) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,199,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,202,ode callTarget = n.getFirstChild();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,203,tring name = callTarget.getQualifiedName();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,204,f (name != null) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,205,"f (name.equals(""Function.prototype.bind.call"")) {"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,206,"/ goog.bind(fn, self, args...);"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,207,ode fn = callTarget.getNext();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,208,f (fn == null) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,209,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,211,ode thisValue = safeNext(fn);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,212,ode parameters = safeNext(thisValue);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,213,"eturn new Bind(fn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,217,f (callTarget.getType() == Token.GETPROP
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,218,"& callTarget.getLastChild().getString().equals(""bind"")"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,219,& callTarget.getFirstChild().getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,220,"/ (function(){}).bind(self, args...);"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,221,ode fn = callTarget.getFirstChild();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,222,ode thisValue = callTarget.getNext();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,223,ode parameters = safeNext(thisValue);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,224,"eturn new Bind(fn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,227,eturn null;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,230,rivate Node safeNext(Node n) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,231,f (n != null) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,232,eturn n.getNext();
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,234,eturn null;
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,31,ublic class GoogleCodingConvention extends ClosureCodingConvention {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,31,public class GoogleCodingConvention extends CodingConventions.Proxy {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,42,"/** By default, decorate the ClosureCodingConvention. */"
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,43,public GoogleCodingConvention() {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,44,this(new ClosureCodingConvention());
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,47,/** Decorates a wrapped CodingConvention. */
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,48,public GoogleCodingConvention(CodingConvention convention) {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,49,super(convention);
False,test/com/google/javascript/jscomp/DefaultCodingConventionTest.java,test/com/google/javascript/jscomp/DefaultCodingConventionTest.java,28,rivate DefaultCodingConvention conv = new DefaultCodingConvention();
True,test/com/google/javascript/jscomp/DefaultCodingConventionTest.java,test/com/google/javascript/jscomp/DefaultCodingConventionTest.java,28,private CodingConvention conv = CodingConventions.getDefault();
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,53,ew DefaultCodingConvention()).createInitialScope(
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,53,CodingConventions.getDefault()).createInitialScope(
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,47,eturn new DefaultCodingConvention();
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,47,return CodingConventions.getDefault();
False,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,151,onvention = new DefaultCodingConvention();
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,151,convention = CodingConventions.getDefault();
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,49,ew DefaultCodingConvention()).createInitialScope(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,49,CodingConventions.getDefault()).createInitialScope(

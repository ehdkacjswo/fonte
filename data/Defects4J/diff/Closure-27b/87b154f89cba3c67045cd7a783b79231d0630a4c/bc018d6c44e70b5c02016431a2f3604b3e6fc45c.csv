is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,103,"ddExpr(first, p, context);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,104,"c.addOp(opstr, true);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,113,"addExpr(first, p, context);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,114,"cc.addOp(opstr, true);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,118,"addExpr(first, p, context);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,119,"cc.addOp(opstr, true);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,120,"ddExpr(last, p + 1, rhsContext);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,122,"unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,222,"/ We could use addList recursively here, but sometimes we produce"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,223,"/ very deeply nested commas and run out of stack space, so we"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,224,/ just unroll the recursion.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,226,/ We assume COMMA nodes are left-recursive.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,227,ode firstNonComma = n.getFirstChild();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,228,hile (firstNonComma.getType() == Token.COMMA) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,229,irstNonComma = firstNonComma.getFirstChild();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,232,"ddExpr(firstNonComma, 0, context);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,234,ode current = firstNonComma;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,235,o {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,236,urrent = current.getParent();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,237,c.listSeparator();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,238,"ddExpr(current.getFirstChild().getNext(), 0, Context.OTHER);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,239, while (current != n);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,223,"unrollBinaryOperator(n, Token.COMMA, "","", context, Context.OTHER, 0, 0);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,733,"* We could use addList recursively here, but sometimes we produce"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,734,"* very deeply nested operators and run out of stack space, so we"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,735,* just unroll the recursion when possible.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,737,* We assume nodes are left-recursive.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,739,private void unrollBinaryOperator(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,740,"Node n, int op, String opStr, Context context,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,741,"Context rhsContext, int leftPrecedence, int rightPrecedence) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,742,Node firstNonOperator = n.getFirstChild();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,743,while (firstNonOperator.getType() == op) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,744,firstNonOperator = firstNonOperator.getFirstChild();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,747,"addExpr(firstNonOperator, leftPrecedence, context);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,749,Node current = firstNonOperator;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,750,do {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,751,current = current.getParent();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,752,"cc.addOp(opStr, true);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,753,"addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,754,} while (current != n);
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,334,f (getLastChar() != ' ') {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,334,"if (getLastChar() != ' ' && op.charAt(0) != ',') {"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1357,public void testCommaSpacing() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1358,"assertPrint(""var a = (b = 5, c = 5);"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1359,"""var a=(b=5,c=5)"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1360,"assertPrettyPrint(""var a = (b = 5, c = 5);"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1361,"""var a = (b = 5, c = 5);\n"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1382,public void testManyAdds() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1383,int numAdds = 10000;
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1384,"List<String> numbers = Lists.newArrayList(""0"", ""1"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1385,"Node current = new Node(Token.ADD, Node.newNumber(0), Node.newNumber(1));"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1386,for (int i = 2; i < numAdds; i++) {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1387,"current = new Node(Token.ADD, current);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1389,"// 1000 is printed as 1E3, and screws up our test."
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1390,int num = i % 1000;
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1391,numbers.add(String.valueOf(num));
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1392,current.addChildToBack(Node.newNumber(num));
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1395,"String expected = Joiner.on(""+"").join(numbers);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1396,"String actual = printNode(current).replace(""\n"", """");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1397,"assertEquals(expected, actual);"

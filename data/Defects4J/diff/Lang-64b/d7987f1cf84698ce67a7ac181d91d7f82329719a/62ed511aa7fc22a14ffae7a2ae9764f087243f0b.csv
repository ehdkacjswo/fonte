is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,67," @version $Id: CharRange.java,v 1.10 2003/08/02 18:18:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,67,"* @version $Id: CharRange.java,v 1.11 2003/08/04 00:46:24 scolebourne Exp $"
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,95,"* <p>Constructs a <code>CharRange</code> over a single character,"
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,96,* optionally negating the range.</p>
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,98,* <p>A negated range includes everything except the specified char.</p>
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,100,* @param ch  only character in this range
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,101,* @param negated  true to express everything except the range
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,103,"public CharRange(char ch, boolean negated) {"
True,src/java/org/apache/commons/lang/CharRange.java,src/java/org/apache/commons/lang/CharRange.java,104,"this(ch, ch, negated);"
False,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,67," @version $Id: CharRangeTest.java,v 1.1 2003/08/02 18:18:33 scolebourne Exp $"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,67,"* @version $Id: CharRangeTest.java,v 1.2 2003/08/04 00:46:47 scolebourne Exp $"
False,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,102,harRange rangeb = new CharRange('b');
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,108,public void testConstructorAccessors_CharBoolean_Normal() {
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,109,CharRange rangea = new CharRange('a');
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,110,"assertEquals('a', rangea.getStart());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,111,"assertEquals('a', rangea.getEnd());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,112,"assertEquals(false, rangea.isNegated());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,113,"assertEquals(""a"", rangea.toString());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,116,public void testConstructorAccessors_CharBoolean_Negated() {
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,117,"CharRange rangea = new CharRange('a', true);"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,118,"assertEquals('a', rangea.getStart());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,119,"assertEquals('a', rangea.getEnd());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,120,"assertEquals(true, rangea.isNegated());"
True,src/test/org/apache/commons/lang/CharRangeTest.java,src/test/org/apache/commons/lang/CharRangeTest.java,121,"assertEquals(""^a"", rangea.toString());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,19,import java.math.BigInteger;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,32,* @author C. Scott Ananian
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,32," @version $Id: Fraction.java,v 1.13 2004/02/18 22:56:13 ggregory Exp $"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,34,"* @version $Id: Fraction.java,v 1.14 2004/07/11 23:20:17 psteitz Exp $"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,142,if (numerator==Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,143,denominator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,144,"throw new ArithmeticException(""overflow: can't negate"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,157, @throws ArithmeticException if the denomiator is negative
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,163,* @throws ArithmeticException if the denominator is negative
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,172,ouble numeratorValue = 0;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,178,long numeratorValue;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,174,umeratorValue = (double) whole * denominator - numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,180,numeratorValue = whole * (long)denominator - numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,176,umeratorValue = (double) whole * denominator + numerator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,182,numeratorValue = whole * (long)denominator + numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,178,f (Math.abs(numeratorValue) > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,184,if (numeratorValue < Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,185,numeratorValue > Integer.MAX_VALUE)  {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,193, @throws ArithmeticException if the denomiator is <code>zero</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,200,* @throws ArithmeticException if the denominator is <code>zero</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,206,if (numerator==0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,207,return ZERO; // normalize zero.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,209,// allow 2^k/-2^31 as a valid fraction (where k>0)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,210,if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,211,numerator/=2; denominator/=2;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,214,if (numerator==Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,215,denominator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,216,"throw new ArithmeticException(""overflow: can't negate"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,203,"nt gcd = greatestCommonDivisor(Math.abs(numerator), denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,204,"eturn new Fraction(numerator / gcd, denominator / gcd);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,221,// simplify fraction.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,222,"int gcd = greatestCommonDivisor(numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,223,numerator /= gcd;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,224,denominator /= gcd;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,225,"return new Fraction(numerator, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,218, @throws ArithmeticException if the calculated denomiator is <code>zero</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,239,* @throws ArithmeticException if the calculated denominator is <code>zero</code>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,278, <p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,303,*  <li>'X' (a simple whole number)</li>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,331,"int numer = Integer.parseInt(str.substring(0, pos));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,311,eturn getFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,312,"nteger.parseInt(str.substring(0, pos)) + whole * denom,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,313,enom
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,333,"return getFraction(whole, numer, denom);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,324,eturn getFraction(
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,325,"nteger.parseInt(str.substring(0, pos)),"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,326,nteger.parseInt(str.substring(pos + 1))
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,343,"int numer = Integer.parseInt(str.substring(0, pos));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,344,int denom = Integer.parseInt(str.substring(pos + 1));
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,345,"return getFraction(numer, denom);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,443, <p>Gets a fraction that is the invert (1/fraction) of this one.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,461,* <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,447, @return a new fraction instance with the numerator and denominator inverted
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,448, @throws ArithmeticException if the numerator is <code>zero</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,465,* @return a new fraction instance with the numerator and denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,466,*         inverted.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,467,* @throws ArithmeticException if the fraction represents zero.
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,452,"hrow new ArithmeticException(""Unable to invert a fraction with a zero numerator"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,471,"throw new ArithmeticException(""Unable to invert zero."");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,473,if (numerator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,474,"throw new ArithmeticException(""overflow: can't negate numerator"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,476,if (numerator<0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,477,"return new Fraction(-denominator, -numerator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,478,} else {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,479,"return new Fraction(denominator, numerator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,454,"eturn getFraction(denominator, numerator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,465,"eturn getFraction(-numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,491,// the positive range is one smaller than the negative range of an int.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,492,if (numerator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,493,"throw new ArithmeticException(""overflow: too large to negate"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,495,"return new Fraction(-numerator, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,470, <p>More precisely: <pre>(fraction >= 0 ? this : -fraction)</pre></p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,500,* <p>More precisely: <code>(fraction >= 0 ? this : -fraction)</code></p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,481,"eturn getFraction(-numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,511,return negate();
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,487, <p>The returned fraction is not reduced.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,517,* <p>The returned fraction is in reduced form.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,501, else {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,502,"ouble denominatorValue = Math.pow(denominator, power);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,503,"ouble numeratorValue = Math.pow(numerator, power);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,504,f (numeratorValue > Integer.MAX_VALUE || denominatorValue > Integer.MAX_VALUE) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,505,"hrow new ArithmeticException(""Integer overflow"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,531,} else if (power < 0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,532,if (power==Integer.MIN_VALUE) { // MIN_VALUE can't be negated.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,533,return this.invert().pow(2).pow(-(power/2));
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,507,f (power < 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,508,"eturn getFraction((int) Math.pow(denominator, -power),"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,509,"int) Math.pow(numerator, -power));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,535,return this.invert().pow(-power);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,536,} else {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,537,Fraction f = this.multiplyBy(this);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,538,if ((power % 2) == 0) { // if even...
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,539,return f.pow(power/2);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,540,} else { // if odd...
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,541,return f.pow(power/2).multiplyBy(this);
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,511,"eturn getFraction((int) Math.pow(numerator, power),"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,512,"int) Math.pow(denominator, power));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,517, <p>Gets the greatest common divisor of two numbers.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,547,* <p>Gets the greatest common divisor of the absolute value of
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,548,"* two numbers, using the ""binary gcd"" method which avoids"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,549,* division and modulo operations.  See Knuth 4.5.2 algorithm B.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,550,* This algorithm is due to Josef Stein (1961).</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,519, @param number1  a positive number
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,520, @param number2  a positive number
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,552,* @param u  a non-zero number
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,553,* @param v  a non-zero number
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,523,"rivate static int greatestCommonDivisor(int number1, int number2) {"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,524,nt remainder = number1 % number2;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,525,hile (remainder != 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,526,umber1 = number2;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,527,umber2 = remainder;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,528,emainder = number1 % number2;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,530,eturn number2;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,556,"private static int greatestCommonDivisor(int u, int v) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,557,"// keep u and v negative, as negative integers range down to"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,558,"// -2^31, while positive numbers can only be as large as 2^31-1"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,559,// (i.e. we can't necessarily negate a negative number without
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,560,// overflow)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,561,/* assert u!=0 && v!=0; */
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,562,if (u>0) { u=-u; } // make u negative
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,563,if (v>0) { v=-v; } // make v negative
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,564,// B1. [Find power of 2]
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,565,int k=0;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,566,while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,567,u/=2; v/=2; k++; // cast out twos.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,569,if (k==31) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,570,"throw new ArithmeticException(""overflow: gcd is 2^31"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,572,// B2. Initialize: u and v have been divided by 2^k and at least
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,573,//     one is odd.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,574,int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,575,"// t negative: u was odd, v may be even (t replaces v)"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,576,"// t positive: u was even, v is odd (t replaces u)"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,577,do {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,578,/* assert u<0 && v<0; */
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,579,// B4/B3: cast out twos from t.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,580,while ((t&1)==0) { // while t is even..
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,581,t/=2; // cast out twos
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,583,"// B5 [reset max(u,v)]"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,584,if (t>0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,585,u = -t;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,586,} else {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,587,v = t;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,589,// B6/B3. at this point both u and v should be odd.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,590,t = (v - u)/2;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,591,// |u| larger: t positive (replace u)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,592,// |v| larger: t negative (replace v)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,593,} while (t!=0);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,594,return -u*(1<<k); // gcd is u*2^k
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,601,"* Multiply two integers, checking for overflow."
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,603,* @param x a factor
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,604,* @param y a factor
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,605,* @return the product <code>x*y</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,606,* @throws ArithmeticException if the result can not be represented as
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,607,*                             an int
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,609,"private static int mulAndCheck(int x, int y) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,610,long m = ((long)x)*((long)y);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,611,if (m < Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,612,m > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,613,"throw new ArithmeticException(""overflow: mul"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,615,return (int)m;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,619,"*  Multiply two non-negative integers, checking for overflow."
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,621,* @param x a non-negative factor
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,622,* @param y a non-negative factor
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,623,* @return the product <code>x*y</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,624,* @throws ArithmeticException if the result can not be represented as
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,625,* an int
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,627,"private static int mulPosAndCheck(int x, int y) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,628,/* assert x>=0 && y>=0; */
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,629,long m = ((long)x)*((long)y);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,630,if (m > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,631,"throw new ArithmeticException(""overflow: mulPos"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,633,return (int)m;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,637,"* Add two integers, checking for overflow."
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,639,* @param x an addend
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,640,* @param y an addend
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,641,* @return the sum <code>x+y</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,642,* @throws ArithmeticException if the result can not be represented as
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,643,* an int
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,645,"private static int addAndCheck(int x, int y) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,646,long s = (long)x+(long)y;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,647,if (s < Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,648,s > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,649,"throw new ArithmeticException(""overflow: add"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,651,return (int)s;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,655,"* Subtract two integers, checking for overflow."
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,657,* @param x the minuend
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,658,* @param y the subtrahend
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,659,* @return the difference <code>x-y</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,660,* @throws ArithmeticException if the result can not be represented as
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,661,* an int
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,663,"private static int subAndCheck(int x, int y) {"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,664,long s = (long)x-(long)y;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,665,if (s < Integer.MIN_VALUE ||
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,666,s > Integer.MAX_VALUE) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,667,"throw new ArithmeticException(""overflow: add"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,669,return (int)s;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,537," <p>Adds the value of this fraction to another, returning the result in"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,538, reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,673,"* <p>Adds the value of this fraction to another, returning the result in reduced form."
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,674,"* The algorithm follows Knuth, 4.5.1.</p>"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,547,f (fraction == null) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,548,"hrow new IllegalArgumentException(""The fraction must not be null"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,550,f (numerator == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,551,eturn fraction;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,553,f (fraction.numerator == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,554,eturn this;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,556,/ Compute lcd explicitly to limit overflow
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,557,"nt gcd = greatestCommonDivisor(Math.abs(fraction.denominator), Math.abs(denominator));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,558,nt thisResidue = denominator/gcd;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,559,nt thatResidue = fraction.denominator/gcd;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,560,ouble denominatorValue = Math.abs((double) gcd * thisResidue * thatResidue);
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,561,ouble numeratorValue = (double) numerator * thatResidue + fraction.numerator * thisResidue;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,562,f (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,563,ath.abs(denominatorValue) > Integer.MAX_VALUE) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,564,"hrow new ArithmeticException(""Integer overflow"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,566,"eturn Fraction.getReducedFraction((int) numeratorValue, (int) denominatorValue);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,683,"return addSub(fraction, true /* add */);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,570," <p>Subtracts the value of another fraction from the value of this one,"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,687,"* <p>Subtracts the value of another fraction from the value of this one,"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,576, @throws ArithmeticException if the resulting numerator or denominator exceeds
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,577,  <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,693,* @throws ArithmeticException if the resulting numerator or denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,694,*   cannot be represented in an <code>int</code>.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,697,"return addSub(fraction, false /* subtract */);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,701,* Implement add and subtract using algorithm described in Knuth 4.5.1.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,703,"* @param fraction the fraction to subtract, must not be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,704,"* @param isAdd true to add, false to subtract"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,705,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,706,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,707,* @throws ArithmeticException if the resulting numerator or denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,708,*   cannot be represented in an <code>int</code>.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,710,"private Fraction addSub(Fraction fraction, boolean isAdd) {"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,583,eturn add(fraction.negate());
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,714,// zero is identity for addition.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,715,if (numerator == 0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,716,return isAdd ? fraction : fraction.negate();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,718,if (fraction.numerator == 0) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,719,return this;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,721,"// if denominators are randomly distributed, d1 will be 1 about 61%"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,722,// of the time.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,723,"int d1 = greatestCommonDivisor(denominator, fraction.denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,724,if (d1==1) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,725,// result is ( (u*v' +/- u'v) / u'v')
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,726,"int uvp = mulAndCheck(numerator, fraction.denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,727,"int upv = mulAndCheck(fraction.numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,728,return new Fraction
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,729,"(isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,730,"mulPosAndCheck(denominator, fraction.denominator));"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,732,// the quantity 't' requires 65 bits of precision; see knuth 4.5.1
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,733,// exercise 7.  we're going to use a BigInteger.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,734,// t = u(v'/d1) +/- v(u'/d1)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,735,BigInteger uvp = BigInteger.valueOf(numerator)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,736,.multiply(BigInteger.valueOf(fraction.denominator/d1));
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,737,BigInteger upv = BigInteger.valueOf(fraction.numerator)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,738,.multiply(BigInteger.valueOf(denominator/d1));
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,739,BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,740,// but d2 doesn't need extra precision because
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,741,"// d2 = gcd(t,d1) = gcd(t mod d1, d1)"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,742,int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,743,"int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,745,// result is (t/d2) / (u'/d1)(v'/d2)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,746,BigInteger w = t.divide(BigInteger.valueOf(d2));
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,747,if (w.bitLength() > 31) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,748,throw new ArithmeticException
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,749,"(""overflow: numerator too large after multiply"");"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,751,return new Fraction
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,752,"(w.intValue(),"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,753,"mulPosAndCheck(denominator/d1, fraction.denominator/d2));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,587," <p>Multiplies the value of this fraction by another, returning the result"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,588, in reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,757,"* <p>Multiplies the value of this fraction by another, returning the"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,758,* result in reduced form.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,603,ouble numeratorValue = (double) numerator * fraction.numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,604,ouble denominatorValue = (double) denominator * fraction.denominator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,605,f (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,606,ath.abs(denominatorValue) > Integer.MAX_VALUE) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,607,"hrow new ArithmeticException(""Integer overflow"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,609,"eturn getReducedFraction((int) numeratorValue, (int) denominatorValue);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,773,// knuth 4.5.1
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,774,// make sure we don't overflow unless the result *must* overflow.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,775,"int d1 = greatestCommonDivisor(numerator, fraction.denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,776,"int d2 = greatestCommonDivisor(fraction.numerator, denominator);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,777,return getReducedFraction
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,778,"(mulAndCheck(numerator/d1, fraction.numerator/d2),"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,779,"mulPosAndCheck(denominator/d2, fraction.denominator/d1));"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,613," <p>Divide the value of this fraction by another, returning the result"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,614, in reduced form.</p>
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,783,* <p>Divide the value of this fraction by another.</p>
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,630,f (numerator == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,631,eturn ZERO;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,633,ouble numeratorValue = (double) numerator * fraction.denominator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,634,ouble denominatorValue = (double) denominator * fraction.numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,635,f (Math.abs(numeratorValue) > Integer.MAX_VALUE ||
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,636,ath.abs(denominatorValue) > Integer.MAX_VALUE) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,637,"hrow new ArithmeticException(""Integer overflow"");"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,639,"eturn getReducedFraction((int) numeratorValue, (int) denominatorValue);"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,799,return multiplyBy(fraction.invert());
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,661,eturn (numerator == other.numerator &&
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,662,enominator == other.denominator);
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,821,return (getNumerator() == other.getNumerator() &&
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,822,getDenominator() == other.getDenominator());
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,672,ashCode = 17;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,673,ashCode = 37 * hashCode + numerator;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,674,ashCode = 37 * hashCode + denominator;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,832,// hashcode update should be atomic.
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,833,hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,848,if (this==other) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,849,return 0;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,715,append(numerator)
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,877,.append(getNumerator())
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,717,append(denominator).toString();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,879,.append(getDenominator()).toString();
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,737, else if (Math.abs(numerator) > denominator) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,899,} else if ((numerator>0?-numerator:numerator) < -denominator) {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,900,// note that we do the magnitude comparison test above with
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,901,"// NEGATIVE (not positive) numbers, since negative numbers"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,902,// have a larger range.  otherwise numerator==Integer.MIN_VALUE
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,903,// is handled incorrectly.
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,745,append(denominator).toString();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,911,.append(getDenominator()).toString();
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,749,append(numerator).append('/')
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,750,append(denominator).toString();
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,915,.append(getNumerator()).append('/')
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,916,.append(getDenominator()).toString();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,22,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,23,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,24,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,25,import java.io.ObjectOutputStream;
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,22, Test cases for the {@link Fraction} classes.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,27,* Test cases for the {@link Fraction} class
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,25," @version $Id: FractionTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,30,* @author C. Scott Ananian
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,31,"* @version $Id: FractionTest.java,v 1.7 2004/07/11 23:20:17 psteitz Exp $"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,29,rivate static final int SKIP = 53;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,35,private static final int SKIP = 500;  //53
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,149,"// very large: can't represent as unsimplified fraction, although"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,150,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,151,"f = Fraction.getFraction(4, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,152,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,153,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,154,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,155,"f = Fraction.getFraction(1, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,156,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,157,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,243,// very large
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,244,"f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,245,"assertEquals(-Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,246,"assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,248,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,249,// negative denominators not allowed in this constructor.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,250,"f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,251,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,252,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,253,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,254,"f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,255,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,256,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,257,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,258,"f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,259,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,260,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,334,// Extreme values
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,335,"// OK, can reduce before negating"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,336,"f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,337,"assertEquals(1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,338,"assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,340,"// Can't reduce, negation will throw"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,341,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,342,"f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,343,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,344,} catch (ArithmeticException ex) {}
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,394,"ail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,440,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,466,"fail(""Expecting NumberFormatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,476,"fail(""Expecting NumberFormatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,499,"f = Fraction.getFraction(""-7 1/2"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,500,"assertEquals(-15, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,501,"assertEquals(2, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,503,"f = Fraction.getFraction(""-1 2/4"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,504,"assertEquals(-6, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,505,"assertEquals(4, f.getDenominator());"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,453,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,509,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,458,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,514,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,463,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,519,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,468,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,524,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,473,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,529,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,478,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,534,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,511,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,567,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,516,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,572,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,521,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,577,"fail(""expecting NumberFormatException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,526,"ail(""expecting NumberFomatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,582,"fail(""expecting NumberFormatException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,601,"f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,602,"assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,603,"assertEquals(Integer.MIN_VALUE, f.getProperWhole());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,604,"assertEquals(0, f.getProperNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,605,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,626,"f = Fraction.getFraction(2, 3);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,627,f = f.reduce();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,628,"assertEquals(2, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,629,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,645,"f = Fraction.getFraction(-15, 47);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,646,f = f.invert();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,647,"assertEquals(-47, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,648,"assertEquals(15, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,653,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,656,// large values
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,657,"f = Fraction.getFraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,658,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,659,f = f.invert();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,660,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,661,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,663,"f = Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,664,f = f.invert();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,665,"assertEquals(1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,666,"assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,682,// large values
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,683,"f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,684,f = f.negate();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,685,"assertEquals(Integer.MIN_VALUE+2, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,686,"assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,688,"f = Fraction.getFraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,689,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,690,f = f.negate();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,691,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,692,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,708,"f = Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,709,f = f.abs();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,710,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,711,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,713,"f = Fraction.getFraction(Integer.MAX_VALUE, -1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,714,f = f.abs();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,715,"assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,716,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,718,"f = Fraction.getFraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,719,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,720,f = f.abs();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,721,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,722,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,733,"assertEquals(f, f.pow(1));"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,641, = Fraction.getFraction(Integer.MAX_VALUE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,755,// check unreduced fractions stay that way.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,756,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,757,"assertEquals(Fraction.ONE, f.pow(0));"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,759,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,760,"assertEquals(f, f.pow(1));"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,761,"assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,763,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,764,f = f.pow(2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,765,"assertEquals(9, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,766,"assertEquals(25, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,768,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,769,f = f.pow(3);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,770,"assertEquals(27, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,771,"assertEquals(125, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,773,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,774,f = f.pow(-1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,775,"assertEquals(10, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,776,"assertEquals(6, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,778,"f = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,779,f = f.pow(-2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,780,"assertEquals(25, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,781,"assertEquals(9, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,783,// zero to any positive power is still zero.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,784,"f = Fraction.getFraction(0, 1231);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,785,f = f.pow(1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,786,assertTrue(0==f.compareTo(Fraction.ZERO));
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,787,"assertEquals(0, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,788,"assertEquals(1231, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,789,f = f.pow(2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,790,assertTrue(0==f.compareTo(Fraction.ZERO));
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,791,"assertEquals(0, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,792,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,794,// zero to negative powers should throw an exception
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,795,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,796,f = f.pow(-1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,797,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,798,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,799,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,800,f = f.pow(Integer.MIN_VALUE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,801,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,802,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,804,// one to any power is still one.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,805,"f = Fraction.getFraction(1, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,806,f = f.pow(0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,807,"assertEquals(f, Fraction.ONE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,808,f = f.pow(1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,809,"assertEquals(f, Fraction.ONE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,810,f = f.pow(-1);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,811,"assertEquals(f, Fraction.ONE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,812,f = f.pow(Integer.MAX_VALUE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,813,"assertEquals(f, Fraction.ONE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,814,f = f.pow(Integer.MIN_VALUE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,815,"assertEquals(f, Fraction.ONE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,817,"f = Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,818,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,819,f = f.pow(2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,820,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,821,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,823,// Numerator growing too negative during the pow operation.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,824,"f = Fraction.getFraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,825,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,826,f = f.pow(3);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,827,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,828,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,830,"f = Fraction.getFraction(65536, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,891,"f1 = Fraction.getFraction(-1, 13*13*2*2);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,892,"f2 = Fraction.getFraction(-2, 13*17*2);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,893,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,894,"assertEquals(13*13*17*2*2, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,895,"assertEquals(-17 - 2*13*2, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,902,"// if this fraction is added naively, it will overflow."
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,903,// check that it doesn't.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,904,"f1 = Fraction.getFraction(1,32768*3);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,905,"f2 = Fraction.getFraction(1,59049);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,906,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,907,"assertEquals(52451, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,908,"assertEquals(1934917632, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,910,"f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,911,f2 = Fraction.ONE_THIRD;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,912,f = f1.add(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,913,"assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,914,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,927,// denominator should not be a multiple of 2 or 3 to trigger overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,928,"f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,929,"f2 = Fraction.getFraction(-1,5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,930,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,931,f = f1.add(f2); // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,932,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,933,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,941,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,942,"f= Fraction.getFraction(-Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,943,f = f.add(f);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,944,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,945,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,947,"f1 = Fraction.getFraction(3,327680);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,948,"f2 = Fraction.getFraction(2,59049);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,949,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,950,f = f1.add(f2); // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,951,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,952,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1012,"// if this fraction is subtracted naively, it will overflow."
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1013,// check that it doesn't.
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1014,"f1 = Fraction.getFraction(1,32768*3);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1015,"f2 = Fraction.getFraction(1,59049);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1016,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1017,"assertEquals(-13085, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1018,"assertEquals(1934917632, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1020,"f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1021,f2 = Fraction.ONE_THIRD.negate();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1022,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1023,"assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1024,"assertEquals(3, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1026,"f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1027,f2 = Fraction.ONE;
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1028,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1029,"assertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1030,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1039,// denominator should not be a multiple of 2 or 3 to trigger overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1040,"f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1041,"f2 = Fraction.getFraction(1,5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1042,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1043,f = f1.subtract(f2); // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1044,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1045,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1047,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1048,"f= Fraction.getFraction(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1049,f = f.subtract(Fraction.ONE);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1050,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1051,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1053,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1054,"f= Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1055,f = f.subtract(Fraction.ONE.negate());
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1056,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1057,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1059,"f1 = Fraction.getFraction(3,327680);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1060,"f2 = Fraction.getFraction(2,59049);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1061,try {
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1062,f = f1.subtract(f2); // should overflow
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1063,"fail(""expecting ArithmeticException but got: "" + f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1064,} catch (ArithmeticException ex) {}
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1078,"f1 = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1079,"f2 = Fraction.getFraction(6, 10);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1080,f = f1.multiplyBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1081,"assertEquals(9, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1082,"assertEquals(25, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1083,f = f.multiplyBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1084,"assertEquals(27, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1085,"assertEquals(125, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1111,"f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1112,"f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1113,f = f1.multiplyBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1114,"assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1115,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1169,"f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1170,"f2 = Fraction.getFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1171,f = f1.divideBy(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1172,"assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1173,"assertEquals(1, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1232,assertTrue(f1.compareTo(f1) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1246,assertTrue(f2.compareTo(f2) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1250,assertTrue(f2.compareTo(f2) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1254,assertTrue(f2.compareTo(f2) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1258,assertTrue(f2.compareTo(f2) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1260,"f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1261,assertTrue(f1.compareTo(f2) > 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1262,assertTrue(f2.compareTo(f2) == 0);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1286,"f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1287,"assertEquals(""-2147483648/1"", f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1289,"f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1290,"assertEquals(""-2147483648/2147483647"", f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1319,"f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1320,"assertEquals(""-2147483648"", f.toProperString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1322,"f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1323,"assertEquals(""-1 1/2147483647"", f.toProperString());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,5,* reserved.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,9,* are met:
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,17,*    distribution.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,56,"* Note: originally released under the GNU LGPL v2.1, but rereleased by the original author under the ASF license (above)."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,58,package org.apache.commons.lang;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,61,* A hash map that uses primitive ints for the key rather than objects.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,62,"* Note that this class is for internal optimization purposes only, and may"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,63,* not be supported in future releases of Jakarta Commons Lang.  Utilities of
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,64,* this sort may be included in future releases of Jakarta Commons Collections.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,66,* @author Justin Couch
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,67,* @author Alex Chaffee (alex@apache.org)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,68,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,69,* @see java.util.HashMap
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,71,public class IntHashMap
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,74,* The hash table data.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,76,private transient Entry table[];
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,79,* The total number of entries in the hash table.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,81,private transient int count;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,84,* The table is rehashed when its size exceeds this threshold.  (The
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,85,* value of this field is (int)(capacity * loadFactor).)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,87,* @serial
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,89,private int threshold;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,92,* The load factor for the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,94,* @serial
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,96,private float loadFactor;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,99,* Innerclass that acts as a datastructure to create a new entry in the
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,100,* table.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,102,private static class Entry
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,104,int hash;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,105,int key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,106,Object value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,107,Entry next;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,110,* Create a new entry with the given values.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,112,* @param hash The code used to hash the object with
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,113,* @param key The key used to enter this in the table
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,114,* @param value The value for this key
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,115,* @param next A reference to the next entry in the table
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,117,"protected Entry(int hash, int key, Object value, Entry next)"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,119,this.hash = hash;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,120,this.key = key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,121,this.value = value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,122,this.next = next;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,127,"* Constructs a new, empty hashtable with a default capacity and load"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,128,"* factor, which is <tt>20</tt> and <tt>0.75</tt> respectively."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,130,public IntHashMap()
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,132,"this(20, 0.75f);"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,136,"* Constructs a new, empty hashtable with the specified initial capacity"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,137,"* and default load factor, which is <tt>0.75</tt>."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,139,* @param  initialCapacity the initial capacity of the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,140,* @throws IllegalArgumentException if the initial capacity is less
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,141,*   than zero.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,143,public IntHashMap(int initialCapacity)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,145,"this(initialCapacity, 0.75f);"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,149,"* Constructs a new, empty hashtable with the specified initial"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,150,* capacity and the specified load factor.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,152,* @param initialCapacity the initial capacity of the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,153,* @param loadFactor the load factor of the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,154,* @throws IllegalArgumentException  if the initial capacity is less
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,155,"*             than zero, or if the load factor is nonpositive."
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,157,"public IntHashMap(int initialCapacity, float loadFactor)"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,159,if (initialCapacity < 0)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,160,"throw new IllegalArgumentException(""Illegal Capacity: "" +"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,161,initialCapacity);
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,162,if (loadFactor <= 0)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,163,"throw new IllegalArgumentException(""Illegal Load: "" + loadFactor);"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,165,if (initialCapacity == 0)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,166,initialCapacity = 1;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,168,this.loadFactor = loadFactor;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,169,table = new Entry[initialCapacity];
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,170,threshold = (int) (initialCapacity * loadFactor);
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,174,* Returns the number of keys in this hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,176,* @return  the number of keys in this hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,178,public int size()
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,180,return count;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,184,* Tests if this hashtable maps no keys to values.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,186,* @return  <code>true</code> if this hashtable maps no keys to values;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,187,*          <code>false</code> otherwise.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,189,public boolean isEmpty()
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,191,return count == 0;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,195,* Tests if some key maps into the specified value in this hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,196,* This operation is more expensive than the <code>containsKey</code>
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,197,* method.<p>
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,199,"* Note that this method is identical in functionality to containsValue,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,200,* (which is part of the Map interface in the collections framework).
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,202,* @param      value   a value to search for.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,203,* @return     <code>true</code> if and only if some key maps to the
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,204,*             <code>value</code> argument in this hashtable as
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,205,*             determined by the <tt>equals</tt> method;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,206,*             <code>false</code> otherwise.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,207,* @throws  NullPointerException  if the value is <code>null</code>.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,208,* @see        #containsKey(int)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,209,* @see        #containsValue(Object)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,210,* @see        java.util.Map
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,212,public boolean contains(Object value)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,214,if (value == null)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,216,throw new NullPointerException();
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,219,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,220,for (int i = tab.length; i-- > 0;)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,222,for (Entry e = tab[i]; e != null; e = e.next)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,224,if (e.value.equals(value))
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,226,return true;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,230,return false;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,234,* Returns true if this HashMap maps one or more keys to this value.<p>
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,236,* Note that this method is identical in functionality to contains
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,237,* (which predates the Map interface).
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,239,* @param value value whose presence in this HashMap is to be tested.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,240,* @see    java.util.Map
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,241,* @since JDK1.2
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,243,public boolean containsValue(Object value)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,245,return contains(value);
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,249,* Tests if the specified object is a key in this hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,251,* @param  key  possible key.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,252,* @return <code>true</code> if and only if the specified object is a
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,253,"*    key in this hashtable, as determined by the <tt>equals</tt>"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,254,*    method; <code>false</code> otherwise.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,255,* @see #contains(Object)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,257,public boolean containsKey(int key)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,259,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,260,int hash = key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,261,int index = (hash & 0x7FFFFFFF) % tab.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,262,for (Entry e = tab[index]; e != null; e = e.next)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,264,if (e.hash == hash)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,266,return true;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,269,return false;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,273,* Returns the value to which the specified key is mapped in this map.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,275,* @param   key   a key in the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,276,* @return  the value to which the key is mapped in this hashtable;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,277,*          <code>null</code> if the key is not mapped to any value in
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,278,*          this hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,279,"* @see     #put(int, Object)"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,281,public Object get(int key)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,283,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,284,int hash = key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,285,int index = (hash & 0x7FFFFFFF) % tab.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,286,for (Entry e = tab[index]; e != null; e = e.next)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,288,if (e.hash == hash)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,290,return e.value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,293,return null;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,297,* Increases the capacity of and internally reorganizes this
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,298,"* hashtable, in order to accommodate and access its entries more"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,299,* efficiently.  This method is called automatically when the
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,300,* number of keys in the hashtable exceeds this hashtable's capacity
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,301,* and load factor.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,303,protected void rehash()
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,305,int oldCapacity = table.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,306,Entry oldMap[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,308,int newCapacity = oldCapacity * 2 + 1;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,309,Entry newMap[] = new Entry[newCapacity];
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,311,threshold = (int) (newCapacity * loadFactor);
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,312,table = newMap;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,314,for (int i = oldCapacity; i-- > 0;)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,316,for (Entry old = oldMap[i]; old != null;)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,318,Entry e = old;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,319,old = old.next;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,321,int index = (e.hash & 0x7FFFFFFF) % newCapacity;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,322,e.next = newMap[index];
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,323,newMap[index] = e;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,329,* Maps the specified <code>key</code> to the specified
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,330,* <code>value</code> in this hashtable. The key cannot be
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,331,* <code>null</code>. <p>
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,333,* The value can be retrieved by calling the <code>get</code> method
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,334,* with a key that is equal to the original key.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,336,* @param key     the hashtable key.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,337,* @param value   the value.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,338,"* @return the previous value of the specified key in this hashtable,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,339,*         or <code>null</code> if it did not have one.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,340,* @throws  NullPointerException  if the key is <code>null</code>.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,341,* @see     #get(int)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,343,"public Object put(int key, Object value)"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,345,// Makes sure the key is not already in the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,346,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,347,int hash = key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,348,int index = (hash & 0x7FFFFFFF) % tab.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,349,for (Entry e = tab[index]; e != null; e = e.next)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,351,if (e.hash == hash)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,353,Object old = e.value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,354,e.value = value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,355,return old;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,359,if (count >= threshold)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,361,// Rehash the table if the threshold is exceeded
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,362,rehash();
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,364,tab = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,365,index = (hash & 0x7FFFFFFF) % tab.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,368,// Creates the new entry.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,369,"Entry e = new Entry(hash, key, value, tab[index]);"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,370,tab[index] = e;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,371,count++;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,372,return null;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,376,* Removes the key (and its corresponding value) from this
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,377,* hashtable. This method does nothing if the key is not in the hashtable.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,379,* @param   key   the key that needs to be removed.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,380,"* @return  the value to which the key had been mapped in this hashtable,"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,381,*          or <code>null</code> if the key did not have a mapping.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,383,public Object remove(int key)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,385,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,386,int hash = key;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,387,int index = (hash & 0x7FFFFFFF) % tab.length;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,388,"for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next)"
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,390,if (e.hash == hash)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,392,if (prev != null)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,394,prev.next = e.next;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,396,else
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,398,tab[index] = e.next;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,400,count--;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,401,Object oldValue = e.value;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,402,e.value = null;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,403,return oldValue;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,406,return null;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,410,* Clears this hashtable so that it contains no keys.
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,412,public synchronized void clear()
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,414,Entry tab[] = table;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,415,for (int index = tab.length; --index >= 0;)
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,416,tab[index] = null;
True,src/java/org/apache/commons/lang/IntHashMap.java,src/java/org/apache/commons/lang/IntHashMap.java,417,count = 0;

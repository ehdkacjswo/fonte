is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,66,* @author Phil Steitz
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,67," @version $Id: RandomStringUtils.java,v 1.12 2003/05/20 21:15:19 ggregory Exp $"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,68,"* @version $Id: RandomStringUtils.java,v 1.13 2003/06/09 21:36:02 scolebourne Exp $"
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,107, ASCII value is between <code>32</code> and <code>127</code>.</p>
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,108,* ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,202, instead of depending on internal source of randomness ({@link
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,203, #RANDOM}) it uses externally supplied instance of {@link
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,204, Random} class.
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,203,"* instead of using an externally supplied source of randomness, it uses"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,204,* the internal static {@link Random} instance ({@link #RANDOM}).
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,259,nd = (int)'z';
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,259,end = (int)'z' + 1;
False,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,65," @version $Id: RandomStringUtilsTest.java,v 1.6 2003/05/14 02:50:43 bayard Exp $"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,66,* @author Phil Steitz
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,67,"* @version $Id: RandomStringUtilsTest.java,v 1.7 2003/06/09 21:36:03 scolebourne Exp $"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,173,* Make sure boundary alphanumeric characters are generated by randomAlphaNumeric
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,174,* This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,176,public void testRandomAlphaNumeric() {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,177,"char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,178,"boolean[] found = {false, false, false, false, false, false};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,179,for (int i = 0; i < 100; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,180,String randString = RandomStringUtils.randomAlphanumeric(10);
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,181,for (int j = 0; j < testChars.length; j++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,182,if (randString.indexOf(testChars[j]) > 0) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,183,found[j] = true;
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,187,for (int i = 0; i < testChars.length; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,188,if (!found[i]) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,189,"fail(""alphanumeric character not generated in 1000 attempts: """
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,190,"+ testChars[i] +"" -- repeated failures indicate a problem "");"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,196,* Make sure '0' and '9' are generated by randomNumeric
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,197,* This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,199,public void testRandomNumeric() {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,200,"char[] testChars = {'0','9'};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,201,"boolean[] found = {false, false};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,202,for (int i = 0; i < 100; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,203,String randString = RandomStringUtils.randomNumeric(10);
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,204,for (int j = 0; j < testChars.length; j++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,205,if (randString.indexOf(testChars[j]) > 0) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,206,found[j] = true;
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,210,for (int i = 0; i < testChars.length; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,211,if (!found[i]) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,212,"fail(""digit not generated in 1000 attempts: """
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,213,"+ testChars[i] +"" -- repeated failures indicate a problem "");"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,219,* Make sure boundary alpha characters are generated by randomAlphabetic
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,220,* This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,222,public void testRandomAlphabetic() {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,223,"char[] testChars = {'a', 'z', 'A', 'Z'};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,224,"boolean[] found = {false, false, false, false};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,225,for (int i = 0; i < 100; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,226,String randString = RandomStringUtils.randomAlphabetic(10);
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,227,for (int j = 0; j < testChars.length; j++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,228,if (randString.indexOf(testChars[j]) > 0) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,229,found[j] = true;
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,233,for (int i = 0; i < testChars.length; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,234,if (!found[i]) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,235,"fail(""alphanumeric character not generated in 1000 attempts: """
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,236,"+ testChars[i] +"" -- repeated failures indicate a problem "");"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,242,* Make sure 32 and 127 are generated by randomNumeric
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,243,* This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,245,public void testRandomAscii() {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,246,"char[] testChars = {(char) 32, (char) 126};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,247,"boolean[] found = {false, false};"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,248,for (int i = 0; i < 100; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,249,String randString = RandomStringUtils.randomAscii(10);
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,250,for (int j = 0; j < testChars.length; j++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,251,if (randString.indexOf(testChars[j]) > 0) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,252,found[j] = true;
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,256,for (int i = 0; i < testChars.length; i++) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,257,if (!found[i]) {
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,258,"fail(""ascii character not generated in 1000 attempts: """
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,259,+ (int) testChars[i] +
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,260,""" -- repeated failures indicate a problem"");"
False,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,198,/FIXME: add similar tests for other functions
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,66, @version $Revision: 1.2 $ $Date: 2003/06/08 14:19:43 $
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,66,* @version $Revision: 1.3 $ $Date: 2003/06/09 21:36:03 $
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,129,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .01"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,130, Change to 16.27 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,129,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,130,* Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,133,"chi-square test -- will fail about 1 in 100 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,134,"hiSquare(expected,observed) < 11.34);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,133,"""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,134,"chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,174,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,175, Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,174,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,175,* Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,178,"chi-square test -- will fail about 1 in 100 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,179,"hiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,178,"""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,179,"chiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,217,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,218, Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,217,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,218,* Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,221,"chi-square test -- will fail about 1 in 100 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,222,"hiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,221,"""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,222,"chiSquare(expected,observed) < 10.83 );"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,259,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,260, Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,259,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,260,* Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,263,"chi-square test -- will fail about 1 in 100 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,264,"hiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,263,"""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,264,"chiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,301,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,302, Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,301,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,302,* Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,305,"chi-square test -- will fail about 1 in 100 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,306,"hiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,305,"""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,306,"chiSquare(expected,observed) < 10.83);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,22,import java.util.Collections;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,23,import java.util.List;
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,121,"eturn reflectionEquals(lhs, rhs, false, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,124,"return reflectionEquals(lhs, rhs, false, null, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,128,* <p>This method uses reflection to determine if the two <code>Object</code>s
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,129,* are equal.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,131,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,132,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,133,"* a security manager, if the permissions are not set up correctly. It is also"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,134,* not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,136,"* <p>Transient members will be not be tested, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,137,"* fields, and not part of the value of the Object.</p>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,139,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,141,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,142,* @param rhs  the other object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,143,* @param excludeFields  array of field names to exclude from testing
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,144,* @return <code>true</code> if the two Objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,146,"public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,147,"return reflectionEquals(lhs, rhs, false, null, excludeFields);"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,145,"eturn reflectionEquals(lhs, rhs, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,171,"return reflectionEquals(lhs, rhs, testTransients, null, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,200,"return reflectionEquals(lhs, rhs, testTransients, reflectUpToClass, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,204,* <p>This method uses reflection to determine if the two <code>Object</code>s
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,205,* are equal.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,207,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,208,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,209,"* a security manager, if the permissions are not set up correctly. It is also"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,210,* not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,212,"* <p>If the testTransients parameter is set to <code>true</code>, transient"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,213,"* members will be tested, otherwise they are ignored, as they are likely"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,214,"* derived fields, and not part of the value of the <code>Object</code>.</p>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,216,* <p>Static fields will not be included. Superclass fields will be appended
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,217,* up to and including the specified superclass. A null superclass is treated
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,218,* as java.lang.Object.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,220,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,221,* @param rhs  the other object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,222,* @param testTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,223,"* @param reflectUpToClass  the superclass to reflect up to (inclusive),"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,224,*  may be <code>null</code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,225,* @param excludeFields  array of field names to exclude from testing
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,226,* @return <code>true</code> if the two Objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,227,* @since 2.0
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,229,"public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,230,String[] excludeFields) {
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,205,"eflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,262,"reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,208,"eflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,265,"reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,287,* @param excludeFields  array of field names to exclude from testing
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,236,oolean useTransients) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,294,"boolean useTransients,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,295,String[] excludeFields) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,297,List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,241,f ((f.getName().indexOf('$') == -1)
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,301,if (!excludedFieldList.contains(f.getName())
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,302,&& (f.getName().indexOf('$') == -1)
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,22,import java.util.Collections;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,23,import java.util.List;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,150,"eturn reflectionHashCode(17, 37, object, false, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,153,"return reflectionHashCode(17, 37, object, false, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,157,* <p>This method uses reflection to build a valid hash code.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,159,* <p>This constructor uses two hard coded choices for the constants
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,160,* needed to build a hash code.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,162,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,163,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,164,"* a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,165,* also not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,167,"* <p>Transient members will be not be used, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,168,"* fields, and not part of the value of the <code>Object</code>.</p>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,170,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,172,* @param object  the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,173,* @param excludeFields  array of field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,174,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,175,* @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,177,"public static int reflectionHashCode(Object object, String[] excludeFields) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,178,"return reflectionHashCode(17, 37, object, false, null, excludeFields);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,176,"eturn reflectionHashCode(17, 37, object, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,204,"return reflectionHashCode(17, 37, object, testTransients, null, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,205,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,233,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,237,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,265,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,294,* @param excludeFields  array of field names to exclude from use in calculation of hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,276,lass reflectUpToClass) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,305,"Class reflectUpToClass,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,306,String[] excludeFields) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,283,"eflectionAppend(object, clazz, builder, testTransients);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,313,"reflectionAppend(object, clazz, builder, testTransients, excludeFields);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,286,"eflectionAppend(object, clazz, builder, testTransients);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,316,"reflectionAppend(object, clazz, builder, testTransients, excludeFields);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,300,"rivate static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,330,private static void reflectionAppend(
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,331,"Object object,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,332,"Class clazz,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,333,"HashCodeBuilder builder,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,334,"boolean useTransients,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,335,String[] excludeFields) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,337,List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,305,f ((f.getName().indexOf('$') == -1)
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,341,if (!excludedFieldList.contains(f.getName())
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,342,&& (f.getName().indexOf('$') == -1)
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,18,import java.lang.reflect.Field;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,961,public void testReflectionEqualsExcludeFields() throws Exception {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,962,"TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,963,"TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,965,// not equal when including all fields
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,966,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,968,"// doesn't barf on null, empty array, or non-existent field, but still tests as not equal"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,969,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, null));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,970,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,971,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {""xxx""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,973,// not equal if only one of the differing fields excluded
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,974,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {""two""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,975,"assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {""three""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,977,// equal if both differing fields excluded
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,978,"assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,980,// still equal as long as both differing fields are among excluded
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,981,"assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {""one"", ""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,982,"assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {""one"", ""two"", ""three"", ""xxx""}));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,985,static class TestObjectWithMultipleFields {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,986,private TestObject one;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,987,private TestObject two;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,988,private TestObject three;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,990,"public TestObjectWithMultipleFields(int one, int two, int three) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,991,this.one = new TestObject(one);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,992,this.two = new TestObject(two);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,993,this.three = new TestObject(three);
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,440,public void testReflectionHashCodeExcludeFields() throws Exception {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,441,"TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,443,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,445,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, null));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,446,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,447,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {""xxx""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,449,"assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {""two""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,450,"assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[] {""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,452,"assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[] {""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,454,"assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] {""one"", ""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,455,"assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] {""one"", ""two"", ""three"", ""xxx""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,458,static class TestObjectWithMultipleFields {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,459,private int one = 0;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,460,private int two = 0;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,461,private int three = 0;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,463,"public TestObjectWithMultipleFields(int one, int two, int three) {"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,464,this.one = one;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,465,this.two = two;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,466,this.three = three;

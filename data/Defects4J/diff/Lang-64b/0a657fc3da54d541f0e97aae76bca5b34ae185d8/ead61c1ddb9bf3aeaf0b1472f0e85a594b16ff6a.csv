is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,16,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,18,import java.util.Map;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,22,* Provides the ability to substitute values from one or more maps into
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,23,* designated places within a string.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,24,* <p>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,25,* For example:
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,26,* <pre>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,27,"*   ""User ${id} has uid ${uid} and path of env{path}"""
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,28,* </pre>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,29,"* can be expanded using values from a map associated with ""$"" and a different"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,30,"* map associated with ""env""."
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,31,* <p>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,32,"* This class is similar to the java.text.MessageFormat class, but allows"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,33,* data to be retrieved from one or maps instead of from a single list.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,34,"* Unlike the MessageFormat class, however, it simply uses the result of"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,35,* applying toString() to the referenced values in the map(s) and does not
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,36,"* support any ""format"" operations applied to the objects before substitution"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,37,* into the target string.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,39,* @since 2.1
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,42,public class MappedMessageFormat {
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,43,private int nEntries = 0;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,44,private ArrayList markers = new ArrayList(2);
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,45,private ArrayList sources = new ArrayList(2);
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,47,public MappedMessageFormat() {
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,51,* Defines a source of data that can later be substituted into
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,52,"* strings passed to the ""format"" methods."
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,54,"public void addSource(String marker, Map source) {"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,55,++nEntries;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,56,markers.add(marker);
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,57,sources.add(source);
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,61,* Expands any variable declarations using any of the known
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,62,* variable marker strings.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,64,* @throws IllegalArgumentException if the input param references
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,65,* a variable which is not known to the specified source.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,67,public String format(String param) {
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,68,for(int i=0; i<nEntries; ++i) {
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,69,param = format(
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,70,"param,"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,71,"(String) markers.get(i),"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,72,(Map) sources.get(i));
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,74,return param;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,78,* Replace any occurrences within the string of the form
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,79,"* ""marker{key}"" with the value from source[key]."
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,80,* <p>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,81,"* Commonly, the variable marker is ""$"", in which case variables"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,82,* are indicated by ${key} in the string.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,83,* <p>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,84,* Returns the string after performing all substitutions.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,85,* <p>
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,86,"* If no substitutions were made, the input string object is"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,87,* returned (not a copy).
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,89,* @throws IllegalArgumentException if the input param references
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,90,* a variable which is not known to the specified source.
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,92,"public static String format(String str, String marker, Map source) {"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,93,"String startMark = marker + ""{"";"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,94,int markLen = startMark.length();
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,96,int index = 0;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,97,for(;;)
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,99,"index = str.indexOf(startMark, index);"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,100,if (index == -1)
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,102,return str;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,105,int startIndex = index + markLen;
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,106,if (startIndex > str.length())
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,108,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,109,"""var expression starts at end of string"");"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,112,"int endIndex = str.indexOf(""}"", index + markLen);"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,113,if (endIndex == -1)
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,115,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,116,"""var expression starts but does not end"");"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,119,"String key = str.substring(index+markLen, endIndex);"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,120,Object value =  source.get(key);
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,121,if (value == null) {
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,122,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,123,"""parameter ["" + key + ""] is not defined."");"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,125,String varValue = value.toString();
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,127,"str = str.substring(0, index) + varValue + str.substring(endIndex+1);"
True,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,src/java/org/apache/commons/lang/text/MappedMessageFormat.java,128,index += varValue.length();

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,23,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,103, @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,104,* @throws MathException if the algorithm fails to converge; unless
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,105,"* x is more than 20 standard deviations from the mean, in which case the"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,106,* convergence exception is caught and 0 or 1 is returned.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,106,eturn 0.5 * (1.0 + Erf.erf((x - mean) /
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107,standardDeviation * Math.sqrt(2.0))));
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,109,try {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110,return 0.5 * (1.0 + Erf.erf((x - mean) /
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111,(standardDeviation * Math.sqrt(2.0))));
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,112,} catch (MaxIterationsExceededException ex) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,113,if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,114,return 0.0d;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,115,} else if (x > (mean + 20 * standardDeviation)) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,116,return 1.0d;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,117,} else {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118,throw ex;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,125,* Check to make sure top-coding of extreme values works correctly.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,126,* Verifies fix for JIRA MATH-167
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,128,public void testExtremeValues() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,129,NormalDistribution distribution = (NormalDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,130,distribution.setMean(0);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,131,distribution.setStandardDeviation(1);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,132,for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,133,double lowerTail = distribution.cumulativeProbability((double)-i);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,134,double upperTail = distribution.cumulativeProbability((double) i);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,135,if (i < 10) { // make sure not top-coded
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,136,assertTrue(lowerTail > 0.0d);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,137,assertTrue(upperTail < 1.0d);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,139,else { // make sure top coding not reversed
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,140,assertTrue(lowerTail < 0.00001);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,141,assertTrue(upperTail > 0.99999);

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,23,mport org.apache.commons.discovery.tools.DiscoverClass;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,59,rivate static final long serialVersionUID = -2734185686570407433L;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,58,private static final long serialVersionUID = 4133067267405273064L;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,116, Create an instance of a <code>DescriptiveStatistics</code>
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,117, @param cls the type of <code>DescriptiveStatistics</code> object to
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,118,        create.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,119, @return a new instance.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,120, @throws InstantiationException is thrown if the object can not be
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,121,            created.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,122, @throws IllegalAccessException is thrown if the type's default
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,123,            constructor is not accessible.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,124, @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,126,"ublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,127,eturn (DescriptiveStatistics)cls.newInstance();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,131, Create an instance of a <code>DescriptiveStatistics</code>
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,132, @return a new DescriptiveStatistics instance.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,133, @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,135,ublic static DescriptiveStatistics newInstance() {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,136,escriptiveStatistics factory = null;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,137,ry {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,138,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,139,actory = (DescriptiveStatistics) dc.newInstance(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,140,"escriptiveStatistics.class,"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,141,"org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl"");"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,142, catch(Throwable t) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,143,eturn new DescriptiveStatisticsImpl();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,145,eturn factory;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,18,mport org.apache.commons.discovery.tools.DiscoverClass;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,58,rivate static final long serialVersionUID = -3346512372447011854L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,61, Create an instance of a <code>SummaryStatistics</code>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,62, @param cls the type of <code>SummaryStatistics</code> object to create.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,63, @return a new instance.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,64, @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,65, @throws InstantiationException is thrown if the object can not be
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,66,         created.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,67, @throws IllegalAccessException is thrown if the type's default
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,68,         constructor is not accessible.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,70,"ublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,71,eturn (SummaryStatistics)cls.newInstance();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,75, Create an instance of a <code>SummaryStatistics</code>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,76, @return a new SummaryStatistics instance.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,77, @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,79,ublic static SummaryStatistics newInstance() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,80,ummaryStatistics instance = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,81,ry {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,82,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,83,"nstance = (SummaryStatistics)dc.newInstance(SummaryStatistics.class, ""org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,84, catch (Throwable t) {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,85,eturn new SummaryStatisticsImpl();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,87,eturn instance;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,57,private static final long serialVersionUID = -2021321786743555871L;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,22,mport org.apache.commons.math.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,332,/---------------------  Protected methods ---------------------------------
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,334, Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,335, @deprecated inject ChiSquaredDistribution instances directly instead of
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,336,             using a factory.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,338,rotected DistributionFactory getDistributionFactory() {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,339,eturn DistributionFactory.newInstance();
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,20,mport org.apache.commons.math.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,923, Gets a DistributionFactory to use in creating TDistribution instances.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,924, @return a distribution factory.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,925, @deprecated inject TDistribution directly instead of using a factory.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,927,rotected DistributionFactory getDistributionFactory() {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,928,eturn DistributionFactory.newInstance();
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,15, limitations under the License.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,17,ackage org.apache.commons.math.stat.inference;
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,18,mport org.apache.commons.discovery.tools.DiscoverClass;
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,21, Abstract factory to create inference test instances.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,23, @since 1.1
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,24, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,25," @deprecated as of 1.2, pluggability of test instances is now provided through"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,26,             constructors and setters.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,28,ublic abstract class TestFactory {
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,30, Default constructor.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,32,rotected TestFactory() {
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,33,uper();
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,37, Create an instance of a <code>TestFactory</code>
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,39, @return a new factory.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,41,ublic static TestFactory newInstance() {
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,42,estFactory factory = null;
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,43,ry {
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,44,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,45,actory = (TestFactory) dc.newInstance(
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,46,"estFactory.class,"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,47,"org.apache.commons.math.stat.inference.TestFactoryImpl"");"
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,48, catch(Throwable t) {
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,49,eturn new TestFactoryImpl();
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,51,eturn factory;
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,55, Create a TTest instance.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,57, @return a new TTest instance
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,59,ublic abstract TTest createTTest();
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,62, Create a ChiSquareTest instance.
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,64, @return a new ChiSquareTest instance
False,src/java/org/apache/commons/math/stat/inference/TestFactory.java,src/java/org/apache/commons/math/stat/inference/TestFactory.java,66,ublic abstract ChiSquareTest createChiSquareTest();
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,17,ackage org.apache.commons.math.stat.inference;
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,20, A concrete inference test factory.  This is the default factory used by
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,21, Commons-Math.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,23," @deprecated as of 1.2, pluggability of test instances is now provided through"
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,24,             constructors and setters.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,25, @since 1.1
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,26, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,28,ublic class TestFactoryImpl extends TestFactory {
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,31, Default constructor.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,33,ublic TestFactoryImpl() {
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,34,uper();
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,38, Create a TTest instance.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,40, @return a new TTest instance
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,42,ublic TTest createTTest() {
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,43,eturn new TTestImpl();
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,47, Create a ChiSquareTest instance.
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,49, @return a new ChiSquareTest instance
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,51,ublic ChiSquareTest createChiSquareTest() {
False,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java,52,eturn new ChiSquareTestImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,17,ackage org.apache.commons.math.stat.descriptive;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,21,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,22,mport org.apache.commons.math.random.RandomData;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,23,mport org.apache.commons.math.random.RandomDataImpl;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,26, Test cases for the DescriptiveStatistics implementations.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,28, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,29, @deprecated should be moved down into DescriptiveStatisticsTest
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,30,   when DescriptiveStatisticsImpl is removed in 2.0
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,32,ublic abstract class DescriptiveStatisticsAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,33,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,34,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,35,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,36,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,37,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,38,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,39,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,40,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,41,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,42,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,43,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,44,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,46,ublic DescriptiveStatisticsAbstractTest(String name) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,47,uper(name);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,50,rotected abstract DescriptiveStatistics createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,52,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,55,ublic void testAddValue() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,56,"ouble[] test1 = {5,4,3,2,1,0};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,57,"ouble[] test2 = {5,2,1,0,4,3};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,59,escriptiveStatistics stats = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,60,tats.setWindowSize(12);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,62,or(int i = 0; i < test1.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,63,tats.addValue(test1[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,66,ouble[] test3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,68,or(int i = 0; i < 6; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,69,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,70,"est3[i], test1[i],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,71,"/System.out.println(test3[i] + "" ""+test1[i]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,74,or(int i = 0; i < test2.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,75,tats.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,78,est3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,80,or(int i = 6; i < 12; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,81,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,82,"est3[i], test2[i-6],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,83,"/System.out.println(test3[i] + "" ""+test2[i-6]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,86,or(int i = 0; i < test2.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,87,tats.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,90,est3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,92,or(int i = 0; i < 6; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,93,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,94,"est3[i], test2[i],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,95,"/System.out.println(test3[i] + "" ""+test2[i]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,98,or(int i = 6; i < 12; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,99,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,100,"est3[i], test2[i-6],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,101,"/System.out.println(test3[i] + "" ""+test2[i-6]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,106,ublic void testGetSortedValues() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,107,"ouble[] test1 = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,108,"ouble[] test2 = {5,2,1,3,4,0};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,109,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,110,nt[] testi = null;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,111,ouble[] test4 = null;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,112,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,113,stGetSortedValues(test1);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,114,stGetSortedValues(test2);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,115,stGetSortedValues(test3);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,116,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,117,"esti = rd.nextPermutation(10,6);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,118,est4 = new double[6];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,119,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,120,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,122,stGetSortedValues(test4);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,124,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,125,"esti = rd.nextPermutation(10,5);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,126,est4 = new double[5];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,127,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,128,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,130,stGetSortedValues(test4);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,134,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,135,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,137,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,138,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,139,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,140,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,141,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,142,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,144,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,146,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,147,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,148,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,149," u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,150,"ssertTrue( ""Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,151,.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,154,ublic void testNewInstanceClassNull() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,155,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,156,escriptiveStatistics.newInstance((Class)null);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,157,"ail(""null is not a valid descriptive statistics class"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,158, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,159,/ success
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,160, catch (Exception ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,161,ail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,166,ublic void testNewInstanceClassValid() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,167,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,168,escriptiveStatistics u = DescriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,169,escriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,170,ssertNotNull(u);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,171,ssertTrue(u instanceof DescriptiveStatisticsImpl);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,172, catch (InstantiationException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,173,ail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,174, catch (IllegalAccessException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,175,ail();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,179,ublic void testPercentiles() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,180,"ouble[] test = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,181,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,182,.setWindowSize(110);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,183,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,184,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,186,"ssertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,187,"ssertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,188,"ssertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,189,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,190,.getPercentile(0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,191,"ail(""expecting IllegalArgumentException for getPercentile(0)"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,192, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,195,ry {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,196,.getPercentile(120);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,197,"ail(""expecting IllegalArgumentException for getPercentile(120)"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,198, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,202,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,203,"ouble[] test2 = {1,2,3,4};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,204,or (int i = 0; i < test2.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,205,.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,207,"ssertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,208,"ssertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,209,"ssertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,211,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,212,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,213,or (int i = 0; i < test3.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,214,.addValue(test3[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,216,"ssertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,217,"ssertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,218,"ssertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,220,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,221,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,222,"nt[] testi = rd.nextPermutation(100,100); // will contain 0-99"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,223,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,224,".addValue((double) testi[j]);  //OK, laugh at me for the cast"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,226,or (int i = 1; i < 100; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,227,"ssertEquals(""percentile "" + i,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,228,"double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,231,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,232,"ouble[] test4 = {1,2,3,4,100};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,233,or (int i = 0; i < test4.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,234,.addValue(test4[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,236,"ssertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,238,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,239,"ssertTrue(""empty value set should return NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,240,ouble.isNaN(u.getPercentile(50)));
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,245,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,246,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,247,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,249,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,250,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,251,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,252,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,254,"/assertEquals( ""Product not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,255,"/    24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,256,"ssertEquals( ""Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,257,".213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,259,/ Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,260,/ of a discarded element
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,261,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,262,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,264,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,266,"/assertEquals( ""Product not expected"", 39916800.0,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,267,"/    u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,268,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,269,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,272,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,273,ublic void testSerialization() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,274,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,275,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,276,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,277,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,279,escriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,281,2.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,282,2.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,284,"ssertEquals(""N"",n,u2.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,285,"ssertEquals(""sum"",sum,u2.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,286,"ssertEquals(""sumsq"",sumSq,u2.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,287,"ssertEquals(""var"",var,u2.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,288,"ssertEquals(""std"",std,u2.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,289,"ssertEquals(""mean"",mean,u2.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,290,"ssertEquals(""min"",min,u2.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,291,"ssertEquals(""max"",max,u2.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,293,2.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,294,"ssertEquals(""total count"",0,u2.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,297,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,298,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,300,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,301," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,302,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,303,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,304,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,307,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,308,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,309,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,310,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,313,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,314,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,315,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,316,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,317,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,318,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,319,.addValue(two);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,320,.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,321,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,322,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,323,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,324,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,325,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,326,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,327,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,328,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,329,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,330,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,333,ublic void testToString() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,334,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,335,"ssertTrue(u.toString().indexOf(""NaN"") > 0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,336,"ssertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,337,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,338," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,339,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,340,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,341,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,343,"ssertTrue(u.toString().indexOf(""NaN"") == -1);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,344,"ssertTrue(u.toString().startsWith(""DescriptiveStatistics""));"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,347,ublic void testWindowing() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,348,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,349,.setWindowSize(2);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,351,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,352,"ssertEquals(1.0, u.getMean(), tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,354,.addValue(2.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,355,"ssertEquals(1.5, u.getMean(), tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,357,.addValue(3.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,358,"ssertEquals(2.5, u.getMean(), tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,360,.setWindowSize(1);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,361,"ssertEquals(3.0, u.getMean(), tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,364,ublic void testWindowSize() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,365,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,366,.setWindowSize(1234);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,367,"ssertEquals(1234, u.getWindowSize());"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,369,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,370,.addValue(2.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,371,.addValue(3.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,372,.addValue(4.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,373,.addValue(5.0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,374,"ssertEquals(5, u.getN());"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,376,.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,377,"ssertEquals(5, u.getN());"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,380,rivate void tstGetSortedValues(double[] test) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,381,escriptiveStatistics u = createDescriptiveStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,382,.setWindowSize(test.length);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,383,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,384,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,386,ouble[] sorted = u.getSortedValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,387,f (sorted.length != test.length) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,388,"ail(""wrong length for sorted values array"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,390,or (int i = 0; i < sorted.length-1; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,391,f (sorted[i] > sorted[i+1]) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,392,"ail(""sorted values out of sequence"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,3, contributor license agreements. See the NOTICE file distributed with this
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,4, work for additional information regarding copyright ownership. The ASF
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,5," licenses this file to You under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,6," ""License""); you may not use this file except in compliance with the License."
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,7, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,8, http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,9," or agreed to in writing, software distributed under the License is"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,10," distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,11," KIND, either express or implied. See the License for the specific language"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,12, governing permissions and limitations under the License.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,14,ackage org.apache.commons.math.stat.descriptive;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,16,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,17,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,20, Test cases for the DescriptiveStatisticsImpl class.
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,21, @deprecated - to be removed in 2.0 with DescriptiveStatisticsImpl
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,22," @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,23,          2007) $
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,25,ublic final class DescriptiveStatisticsImplTest extends DescriptiveStatisticsAbstractTest {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,27,ublic DescriptiveStatisticsImplTest(String name) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,28,uper(name);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,31,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,32,estSuite suite = new TestSuite(DescriptiveStatisticsImplTest.class);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,33,"uite.setName(""DescriptiveStatisticsImpl Tests"");"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,34,eturn suite;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,37,rotected DescriptiveStatistics createDescriptiveStatistics() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,38,eturn new DescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,17,import junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,23," When DescriptiveStatisticsImpl is removed, this class should replace"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,24, DescriptiveStatisticsAbstractTest
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,29,ublic final class DescriptiveStatisticsTest extends DescriptiveStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,28,public class DescriptiveStatisticsTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,17,ackage org.apache.commons.math.stat.descriptive;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,22,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,24, Test cases for the {@link SummaryStatisticsImpl} class.
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,26," @version $Revision: 602305 $ $Date: 2007-12-08 03:51:23 +0100 (sam., 08 déc. 2007) $"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,27, @deprecated should be moved down into SummaryStatisticsTest
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,28,   when SummaryStatisticsImpl is removed in 2.0
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,31,ublic abstract class SummaryStatisticsAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,32,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,33,rivate float twoF = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,34,rivate long twoL = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,35,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,36,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,37,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,38,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,39,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,40,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,41,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,42,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,43,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,44,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,46,ublic SummaryStatisticsAbstractTest(String name) {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,47,uper(name);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,50,rotected abstract SummaryStatistics createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,52,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,53,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,54,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,55,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,56,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,57,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,58,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,59,.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,60,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,61,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,62,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,63,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,64,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,65,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,66,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,67,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,68,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,69,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,72,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,73,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,74,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,75,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,76,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,77,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,78,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,79,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,81,* n=1 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,82,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,83,"ssertTrue(""mean should be one (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,84,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,85,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,86,.getGeometricMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,87,"ssertTrue(""Std should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,88,.getStandardDeviation() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,89,"ssertTrue(""variance should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,90,.getVariance() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,92,* n=2 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,93,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,94,"ssertTrue(""Std should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,95,.getStandardDeviation() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,96,"ssertTrue(""variance should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,97,.getVariance() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,101,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,102,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,103,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,104,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,105,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,106,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,108,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,109,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,112,ublic void testNaNContracts() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,113,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,114,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,115,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,116,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,117,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,118,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,120,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,122,"ssertEquals( ""mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,123,".getMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,124,"ssertEquals( ""variance not expected"", 0.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,125,".getVariance(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,126,"ssertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,127,".getGeometricMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,129,.addValue(-1.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,131,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,133,.addValue(0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,135,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,137,/FiXME: test all other NaN contract specs
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,140,ublic void testGetSummary() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,141,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,142,tatisticalSummary summary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,143,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,144,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,145,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,146,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,147,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,148,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,149,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,150,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,151,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,152,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,155,ublic void testSerialization() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,156,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,157,/ Empty test
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,158,estUtils.checkSerializedEquality(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,159,ummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,160,tatisticalSummary summary = s.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,161,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,163,/ Add some data
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,164,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,165,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,166,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,167,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,168,.addValue(5d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,170,/ Test again
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,171,estUtils.checkSerializedEquality(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,172, = (SummaryStatistics) TestUtils.serializeAndRecover(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,173,ummary = s.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,174,"erifySummary(u, summary);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,178,ublic void testEqualsAndHashCode() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,179,ummaryStatistics u = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,180,ummaryStatistics t = null;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,181,nt emptyHash = u.hashCode();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,182,"ssertTrue(""reflexive"", u.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,183,"ssertFalse(""non-null compared to null"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,184,"ssertFalse(""wrong type"", u.equals(new Double(0)));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,185, = createSummaryStatistics();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,186,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,187,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,188,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,190,/ Add some data to u
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,191,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,192,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,193,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,194,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,195,"ssertFalse(""different n's should make instances not equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,196,"ssertFalse(""different n's should make instances not equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,197,"ssertTrue(""different n's should make hashcodes different"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,198,.hashCode() != t.hashCode());
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,200,/Add data in same order to t
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,201,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,202,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,203,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,204,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,205,"ssertTrue(""summaries based on same data should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,206,"ssertTrue(""summaries based on same data should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,207,"ssertEquals(""summaries based on same data should have same hashcodes"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,208,".hashCode(), t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,210,/ Clear and make sure summaries are indistinguishable from empty summary
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,211,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,212,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,213,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,214,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,215,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,216,"ssertEquals(""empty hash code"", emptyHash, u.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,219,"rivate void verifySummary(SummaryStatistics u, StatisticalSummary s) {"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,220,"ssertEquals(""N"",s.getN(),u.getN());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,221,"estUtils.assertEquals(""sum"",s.getSum(),u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,222,"estUtils.assertEquals(""var"",s.getVariance(),u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,223,"estUtils.assertEquals(""std"",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,224,"estUtils.assertEquals(""mean"",s.getMean(),u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,225,"estUtils.assertEquals(""min"",s.getMin(),u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,226,"estUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,28,ublic final class SummaryStatisticsImplTest extends SummaryStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,28,public final class SummaryStatisticsImplTest extends SummaryStatisticsTest {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,24,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,27," When SummaryStatisticsImpl is removed in math 2.0, test cases from"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,28, SummaryStatisticsImplTest should be merged into this class.
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,33,ublic final class SummaryStatisticsTest extends SummaryStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,33,public class SummaryStatisticsTest extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,35,private double one = 1;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,36,private float twoF = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,37,private long twoL = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,38,private int three = 3;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,39,private double mean = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,40,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,41,private double sum = 8;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,42,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,43,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,44,private double n = 4;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,45,private double min = 1;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,46,private double max = 3;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,47,private double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,35,ublic SummaryStatisticsTest(String name) {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,36,uper(name);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,55,public SummaryStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,56,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,63,/** test stats */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,64,public void testStats() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,65,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,66,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,67,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,68,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,69,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,70,u.addValue(three);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,71,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,72,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,73,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,74,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,75,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,76,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,77,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,78,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,79,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,80,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,83,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,84,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,85,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,86,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,87,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,88,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,89,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,90,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,92,/* n=1 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,93,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,94,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,95,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,96,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,97,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,98,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,99,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,100,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,101,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,103,/* n=2 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,104,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,105,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,106,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,107,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,108,u.getVariance() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,112,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,113,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,114,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,115,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,116,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,117,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,119,"assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,120,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,123,public void testNaNContracts() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,124,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,125,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,126,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,127,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,128,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,129,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,131,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,133,"assertEquals( ""mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,134,"u.getMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,135,"assertEquals( ""variance not expected"", 0.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,136,"u.getVariance(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,137,"assertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,138,"u.getGeometricMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,140,u.addValue(-1.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,142,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,144,u.addValue(0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,146,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,148,//FiXME: test all other NaN contract specs
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,151,public void testGetSummary() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,152,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,153,StatisticalSummary summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,154,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,155,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,156,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,157,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,158,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,159,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,160,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,161,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,162,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,163,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,166,public void testSerialization() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,167,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,168,// Empty test
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,169,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,170,SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,171,StatisticalSummary summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,172,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,174,// Add some data
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,175,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,176,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,177,u.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,178,u.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,179,u.addValue(5d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,181,// Test again
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,182,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,183,s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,184,summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,185,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,189,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,190,SummaryStatistics u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,191,SummaryStatistics t = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,192,int emptyHash = u.hashCode();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,193,"assertTrue(""reflexive"", u.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,194,"assertFalse(""non-null compared to null"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,195,"assertFalse(""wrong type"", u.equals(new Double(0)));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,196,t = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,197,"assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,198,"assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,199,"assertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,201,// Add some data to u
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,202,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,203,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,204,u.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,205,u.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,206,"assertFalse(""different n's should make instances not equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,207,"assertFalse(""different n's should make instances not equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,208,"assertTrue(""different n's should make hashcodes different"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,209,u.hashCode() != t.hashCode());
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,211,//Add data in same order to t
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,212,t.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,213,t.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,214,t.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,215,t.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,216,"assertTrue(""summaries based on same data should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,217,"assertTrue(""summaries based on same data should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,218,"assertEquals(""summaries based on same data should have same hashcodes"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,219,"u.hashCode(), t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,221,// Clear and make sure summaries are indistinguishable from empty summary
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,222,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,223,t.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,224,"assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,225,"assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,226,"assertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,227,"assertEquals(""empty hash code"", emptyHash, u.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,230,"private void verifySummary(SummaryStatistics u, StatisticalSummary s) {"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,231,"assertEquals(""N"",s.getN(),u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,232,"TestUtils.assertEquals(""sum"",s.getSum(),u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,233,"TestUtils.assertEquals(""var"",s.getVariance(),u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,234,"TestUtils.assertEquals(""std"",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,235,"TestUtils.assertEquals(""mean"",s.getMean(),u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,236,"TestUtils.assertEquals(""min"",s.getMin(),u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,237,"TestUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,24,ublic final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,24,public final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsTest {
False,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,24,ublic final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,24,public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsTest {

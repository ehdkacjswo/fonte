is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25, @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25,* @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,93,* <p>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,94,* Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27, @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,* @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,86,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,87,* <p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,88,* Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,90,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,*         computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,*         probability.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,97,public double inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,throws MathException {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,return 0d;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,105,return super.inverseCumulativeProbability(p);
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26, @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26,* @version $Revision: 1.22 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,81,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,83,* <p>
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,84,* Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,86,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,87,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,88,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,89,*         computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,90,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,91,*         probability.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93,public double inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,94,throws MathException {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96,return 0d;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,99,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,return super.inverseCumulativeProbability(p);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28, @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,* @version $Revision: 1.13 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,112,* <p>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,113,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,114,* <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,116,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,117,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119,*         computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,120,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,121,*         probability.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,123,public double inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,124,throws MathException {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,125,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,126,return Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,128,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,129,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,131,return super.inverseCumulativeProbability(p);
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27, @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27,* @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,95,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,96,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,97,* <p>
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,98,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,99,* <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,101,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,102,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,103,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,104,*         computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,105,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,106,*         probability.
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,108,public double inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,throws MathException {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,110,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,return Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,114,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,116,return super.inverseCumulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24, @version $Revision: 1.15 $ $Date: 2004/06/10 18:27:47 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,* @version $Revision: 1.16 $ $Date: 2004/07/24 21:41:37 $
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,72,/TODO: decide what to do about p = 1.  This currently blows up the solver.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,etInverseCumulativeTestPoints(new double[] {0});
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,74,etInverseCumulativeTestValues(new double[] {0});
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,72,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,"setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24, @version $Revision: 1.17 $ $Date: 2004/05/31 00:55:22 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24,* @version $Revision: 1.18 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,115,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,116,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,117,"setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,118,verifyInverseCumulativeProbabilities();
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24, @version $Revision: 1.7 $ $Date: 2004/05/30 05:54:43 $
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24,* @version $Revision: 1.8 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,89,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,90,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,91,setInverseCumulativeTestValues(
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,92,"new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,93,verifyInverseCumulativeProbabilities();
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23, @version $Revision: 1.14 $ $Date: 2004/05/30 22:13:35 $
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23,* @version $Revision: 1.15 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,86,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,87,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,88,setInverseCumulativeTestValues(
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,89,"new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,90,verifyInverseCumulativeProbabilities();

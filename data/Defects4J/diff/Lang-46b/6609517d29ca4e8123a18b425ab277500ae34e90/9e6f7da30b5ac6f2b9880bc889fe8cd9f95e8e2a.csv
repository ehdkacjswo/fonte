is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,18,import java.io.IOException;
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,19,import java.io.Writer;
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,222,"/ <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the same glyph could be used to depict both characters -->"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,224,"// <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,225,//      same glyph could be used to depict both characters -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,231,/ <!-- ISO 10646 does not say that lArr is the same as the 'is implied by' arrowbut also does not have any other character for that function. So ? lArr canbe used for 'is implied by' as ISOtech suggests -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,234,// <!-- ISO 10646 does not say that lArr is the same as the 'is implied by'
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,235,//      arrow but also does not have any other character for that function.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,236,//      So ? lArr canbe used for 'is implied by' as ISOtech suggests -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,234,/ <!-- ISO 10646 does not say this is the 'implies' character but does not have another character with this function so ?rArr can be used for 'implies' as ISOtech suggests -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,239,// <!-- ISO 10646 does not say this is the 'implies' character but does not
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,240,//      have another character with this function so ?rArr can be used for
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,241,//      'implies' as ISOtech suggests -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,248,/ <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' though the same glyph might be used for both -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,255,// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi'
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,256,//      though the same glyph might be used for both -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,250,/ <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma' though the same glyph might be used for both -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,258,// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,259,//      though the same glyph might be used for both -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,264,"/ <!-- tilde operator is NOT the same character as the tilde, U+007E,although the same glyph might be used to represent both  -->"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,273,"// <!-- tilde operator is NOT the same character as the tilde, U+007E,although"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,274,//      the same glyph might be used to represent both  -->
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,273,"/ <!-- note that nsup, 'not a superset of, U+2283' is not covered by the Symbol font encoding and is not included. Should it be, for symmetry?It is in ISOamsn  --> <!ENTITY nsub"", ""8836""},  //not a subset of, U+2284 ISOamsn -->"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,283,"// <!-- note that nsup, 'not a superset of, U+2283' is not covered by the"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,284,"//      Symbol font encoding and is not included. Should it be, for symmetry?"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,285,"//      It is in ISOamsn  --> <!ENTITY nsub"", ""8836""},"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,286,"//      not a subset of, U+2284 ISOamsn -->"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,289,/ <!-- rang is NOT the same character as U+003E 'greater than' or U+203A 'single right-pointing angle quotation mark' -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,302,// <!-- rang is NOT the same character as U+003E 'greater than' or U+203A
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,303,//      'single right-pointing angle quotation mark' -->
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,382,* <p>Fills the specified entities instance with HTML 40 entities.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,384,* @param entities the instance to be filled.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,394,* <p>Add an entry to this entity map.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,396,* @param name the entity name
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,397,* @param value the entity value
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,402,* <p>Returns the name of the entity identified by the specified value.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,404,* @param value the value to locate
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,405,* @return entity name associated with the specified value
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,410,* <p>Returns the value of the entity identified by the specified name.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,412,* @param name the name to locate
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,413,* @return entity value associated with the specified name
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,423,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,431,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,438,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,455,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,463,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,470,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,483,* Constructs a new instance of <code>HashEntityMap</code>.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,493,* Constructs a new instance of <code>TreeEntityMap</code>.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,506,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,516,* <p>Returns the lookup table for this entity map. The lookup table is created if it has not been
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,517,* previously.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,519,* @return the lookup table
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,529,"* <p>Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names.</p>"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,546,* Constructs a new instance of <code>ArrayEntityMap</code>.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,554,* Constructs a new instance of <code>ArrayEntityMap</code>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,555,* specifying the size by which the array should grow.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,557,* @param growBy array will be initialized to and will grow by this amount
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,566,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,576,"* Verifies the capacity of the entity array, adjusting the size if necessary."
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,578,* @param capacity size the array should be
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,593,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,605,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,620,* Constructs a new instance of <code>BinaryEntityMap</code>.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,623,; // empty constructor
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,627,* Constructs a new instance of <code>ArrayEntityMap</code>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,628,* specifying the size by which the underlying array should grow.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,630,* @param growBy array will be initialized to and will grow by this amount
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,530,/ based on code in java.util.Arrays
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,637,* Performs a binary search of the entity array for the specified key.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,638,* This method is based on code in {@link java.util.Arrays}.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,640,* @param key the key to be found
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,641,* @return the index of the entity array matching the specified key
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,663,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,680,* {@inheritDoc}
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,695,* <p>Adds entities to this entity.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,697,* @param entityArray array of entities to be added
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,706,* <p>Add an entity to this entity.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,708,* @param name name of the entity
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,709,* @param value vale of the entity
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,716,* <p>Returns the name of the entity identified by the specified value.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,718,* @param value the value to locate
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,719,* @return entity name associated with the specified value
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,726,* <p>Returns the value of the entity identified by the specified name.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,728,* @param name the name to locate
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,729,* @return entity value associated with the specified name
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,770,* <p>Escapes the characters in the <code>String</code> passed and writes the result
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,771,* to the <code>Writer</code> passed. </p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,773,* @param writer The <code>Writer</code> to write the results of the escaping to.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,774,*                            Assumed to be a non-null value.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,775,* @param str The <code>String</code> to escape. Assumed to be a non-null value.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,776,* @throws IOException when <code>Writer</code> passed throws the exception from
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,777,*                                       calls to the {@link Writer#write(int)} methods.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,779,* @see #escape(String)
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,780,* @see Writer
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,782,"public void escape(Writer writer, String str) throws IOException {"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,783,int len = str.length();
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,784,for (int i = 0; i < len; i++) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,785,char c = str.charAt(i);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,786,String entityName = this.entityName(c);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,787,if (entityName == null) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,788,if (c > 0x7F) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,789,"writer.write(""&#"");"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,790,"writer.write(Integer.toString(c, 10));"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,791,writer.write(';');
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,792,} else {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,793,writer.write(c);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,795,} else {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,796,writer.write('&');
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,797,writer.write(entityName);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,798,writer.write(';');
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,861,* <p>Unescapes the escaped entities in the <code>String</code> passed and
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,862,* writes the result to the <code>Writer</code> passed.</p>
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,864,* @param writer The <code>Writer</code> to write the results to; assumed to be non-null.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,865,* @param string The <code>String</code> to write the results to; assumed to be non-null.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,866,* @throws IOException when <code>Writer</code> passed throws the exception from
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,867,*                                       calls to the {@link Writer#write(int)} methods.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,869,* @see #escape(String)
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,870,* @see Writer
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,872,"public void unescape(Writer writer, String string) throws IOException {"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,873,int len = string.length();
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,874,if (len == 0) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,875,return;
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,877,for (int i = 0; i < len; i++) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,878,char c = string.charAt(i);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,879,if (c == '&') {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,880,int nextIdx = i+1;
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,881,"int semiColonIdx = string.indexOf(';', nextIdx);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,882,if (semiColonIdx == -1) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,883,writer.write(c);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,884,continue;
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,886,"String entityContent = string.substring(nextIdx, semiColonIdx);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,887,int entityValue = -1;
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,888,int entityContentLen = entityContent.length();
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,889,if (entityContentLen > 0) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,890,if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,891,if (entityContentLen > 1) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,892,char isHexChar = entityContent.charAt(1);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,893,try {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,894,switch (isHexChar) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,895,case 'X' :
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,896,case 'x' : {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,897,"entityValue = Integer.parseInt(entityContent.substring(2), 16);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,899,default : {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,900,"entityValue = Integer.parseInt(entityContent.substring(1), 10);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,903,} catch (NumberFormatException e) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,906,} else { //escaped value content is an entity name
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,907,entityValue = this.entityValue(entityContent);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,911,if (entityValue == -1) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,912,writer.write('&');
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,913,writer.write(entityContent);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,914,writer.write(';');
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,915,} else {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,916,writer.write(entityValue);
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,918,i = semiColonIdx; //move index up to the semi-colon
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,919,} else {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,920,writer.write(c);
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,417," @see </br><a href=""http://hotwired.lycos.com/webmonkey/reference/special_characters/"">ISO Entities</a>"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,418," @see </br><a href=""http://www.w3.org/TR/REC-html32#latin1"">HTML 3.2 Character Entities for ISO Latin-1</a>"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,419," @see </br><a href=""http://www.w3.org/TR/REC-html40/sgml/entities.html"">HTML 4.0 Character entity references</a>"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,420," @see </br><a href=""http://www.w3.org/TR/html401/charset.html#h-5.3"">HTML 4.01 Character References</a>"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,421," @see </br><a href=""http://www.w3.org/TR/html401/charset.html#code-position"">HTML 4.01 Code positions</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,417,"* @see <a href=""http://hotwired.lycos.com/webmonkey/reference/special_characters/"">ISO Entities</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,418,"* @see <a href=""http://www.w3.org/TR/REC-html32#latin1"">HTML 3.2 Character Entities for ISO Latin-1</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,419,"* @see <a href=""http://www.w3.org/TR/REC-html40/sgml/entities.html"">HTML 4.0 Character entity references</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,420,"* @see <a href=""http://www.w3.org/TR/html401/charset.html#h-5.3"">HTML 4.01 Character References</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,421,"* @see <a href=""http://www.w3.org/TR/html401/charset.html#code-position"">HTML 4.01 Code positions</a>"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,427,/todo: add a version that takes a Writer
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,428,/todo: rewrite underlying method to use a Writer instead of a StringBuffer
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,429,eturn Entities.HTML40.escape(str);
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,428,try {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,429,StringPrintWriter writer = new StringPrintWriter ((int)(str.length() * 1.5));
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,430,"escapeHtml(writer, str);"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,431,return writer.getString();
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,432,} catch (IOException e) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,433,//assert false;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,434,//should be impossible
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,435,e.printStackTrace();
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,436,return null;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,441,* <p>Escapes the characters in a <code>String</code> using HTML entities and writes
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,442,* them to a <code>Writer</code>.</p>
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,444,* <p>
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,445,* For example:
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,446,* </p>
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,447,"* <code>""bread"" & ""butter""</code>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,448,* <p>becomes:</p>
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,449,* <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,451,"* <p>Supports all known HTML 4.0 entities, including funky accents.</p>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,453,* @param writer The <code>Writer</code> to write the result to. This must not be <code>null</code>.
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,454,* @param string  The <code>String</code> to escape. This may be <code>null</code>.
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,456,* @throws IOException when <code>Writer</code> passed throws the exception from
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,457,*                                       calls to the {@link Writer#write(int)} methods.
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,459,* @see #escapeHtml(String)
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,460,* @see #unescapeHtml(String)
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,461,"* @see <a href=""http://hotwired.lycos.com/webmonkey/reference/special_characters/"">ISO Entities</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,462,"* @see <a href=""http://www.w3.org/TR/REC-html32#latin1"">HTML 3.2 Character Entities for ISO Latin-1</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,463,"* @see <a href=""http://www.w3.org/TR/REC-html40/sgml/entities.html"">HTML 4.0 Character entity references</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,464,"* @see <a href=""http://www.w3.org/TR/html401/charset.html#h-5.3"">HTML 4.01 Character References</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,465,"* @see <a href=""http://www.w3.org/TR/html401/charset.html#code-position"">HTML 4.01 Code positions</a>"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,467,"public static void escapeHtml(Writer writer, String string) throws IOException {"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,468,if (writer == null ) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,469,"throw new IllegalArgumentException (""The Writer must not be null."");"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,472,if (string == null) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,473,return;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,476,"Entities.HTML40.escape(writer, string);"
False,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,452,eturn Entities.HTML40.unescape(str);
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,500,try {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,501,StringPrintWriter writer = new StringPrintWriter ((int)(str.length() * 1.5));
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,502,"unescapeHtml(writer, str);"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,503,return writer.getString();
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,504,} catch (IOException e) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,505,//assert false;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,506,//should be impossible
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,507,e.printStackTrace();
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,508,return null;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,512,"public static void unescapeHtml(Writer writer, String string) throws IOException {"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,513,if (writer == null ) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,514,"throw new IllegalArgumentException (""The Writer must not be null."");"
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,517,if (string == null) {
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,518,return;
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,521,"Entities.HTML40.unescape(writer, string);"
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,213,"/ todo: add test for (and implement) Writer-based version, something like this:"
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,214,/            StringPrintWriter sw = new StringPrintWriter();
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,215,"/            StringEscapeUtils.escapeHtml(sw, original);"
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,216,"/            assertEquals(expected, sw.getString());"
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,213,StringPrintWriter sw = new StringPrintWriter();
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,214,try {
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,215,"StringEscapeUtils.escapeHtml(sw, original);"
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,216,} catch (IOException e) {
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,218,String actual = original == null ? null : sw.getString();
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,219,"assertEquals(message, expected, actual);"
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,222,"ssertEquals(htmlEscapes[i][0], htmlEscapes[i][2], StringEscapeUtils.unescapeHtml(htmlEscapes[i][1]));"
False,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,223,/ todo: add test for (and implement) Writer-based version
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,225,String message = htmlEscapes[i][0];
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,226,String expected = htmlEscapes[i][2];
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,227,String original = htmlEscapes[i][1];
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,228,"assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));"
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,230,StringPrintWriter sw = new StringPrintWriter();
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,231,try {
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,232,"StringEscapeUtils.unescapeHtml(sw, original);"
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,233,} catch (IOException e) {
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,235,String actual = original == null ? null : sw.getString();
True,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,236,"assertEquals(message, expected, actual);"

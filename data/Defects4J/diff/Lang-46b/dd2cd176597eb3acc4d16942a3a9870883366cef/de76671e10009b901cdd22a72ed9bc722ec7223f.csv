is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,5,* reserved.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,9,* are met:
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,17,*    distribution.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,54,package org.apache.commons.lang.builder;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,56,import java.lang.reflect.Field;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,57,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,59,* <code>Equals</code> generation routines.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,60,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,61,* This class provides methods to build a good equals method for any class.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,62,"* It follows rules laid out in Effective Java, by Joshua Bloch. In particular"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,63,"* the rule for comparing <code>doubles </code>, <code>floats</code>, and"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,64,"* arrays can be tricky. Also, making  sure that <code>equals()</code>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,65,* and <code>hashCode()</code> are consistent can be difficult.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,66,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,67,* Two object that compare as equals must generate the same hash code. But two
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,68,* objects with the same hash code do not have to be equal.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,69,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,70,* All relevant fields should be included in the calculation of equals. Derived
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,71,"* fields may be ignored. In particular, any field used in generating a hash"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,72,"* code must be used in the equals method, and vice versa."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,73,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,74,* Typical use for the code is as follows:
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,75,* <code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,76,* public boolean equals(Object o) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,77,*   if (!o instanceof MyClass) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,78,*    return false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,80,*  MyClass rhs = (MyClass) o;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,81,*  return new EqualsBuilder()
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,82,"*                 .test(field1, rhs.field1)"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,83,"*                 .test(field2, rhs.field2)"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,84,"*                 .test(field3, rhs.field3)"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,85,*                 .isEquals();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,87,* </code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,88,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,89,"* Alternatively, there is a method that uses reflection to determine"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,90,"* the fields to test. Because these fields are usually private, the method,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,91,"* <code>reflectionTest</code>, uses <code>Field.setAccessible</code> to change"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,92,"* the visibility of the fields. This will fail under a security manager,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,93,* unless the appropriate permissions are set. It is also slower than testing
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,94,* explicitly.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,95,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,96,* A typical invocation for this method would look like:
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,97,* <code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,98,* public boolean equals(Object o) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,99,"*   return EqualsBuilder.reflectionEquals(this, obj);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,101,* </code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,103,"* @author <a href=""mailto:steve.downey@netfolio.com"">Steve Downey</a>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,104,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,105,"* @version $Id: EqualsBuilder.java,v 1.1 2002/09/12 22:00:00 scolebourne Exp $"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,107,public class EqualsBuilder {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,109,* If the fields tested are equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,111,protected boolean isEquals;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,114,* Constructor for EqualsBuilder.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,115,* Starts off assuming that equals is true.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,116,* @see java.lang.Object#Object()
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,118,public EqualsBuilder() {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,119,super();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,120,isEquals = true;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,126,* This method uses reflection to determine if the two object are equal.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,127,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,128,* It uses Field.setAccessible to gain access to private fields. This means
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,129,"* that it will throw a security exception if run under a security manger, if"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,130,* the permissions are not set up.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,131,* It is also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,132,"* Transient members will be not be tested, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,133,"* fields, and not part of the value of the object."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,135,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,136,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,137,* @return boolean - if the two objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,139,"public static boolean reflectionEquals(Object lhs, Object rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,140,"return reflectionEquals(lhs, rhs, false);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,144,* This method uses reflection to determine if the two object are equal.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,145,* <p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,146,* It uses Field.setAccessible to gain access to private fields. This means
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,147,"* that it will throw a security exception if run under a security manger, if"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,148,* the permissions are not set up.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,149,* It is also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,150,"* If the TestTransients parameter is set to true, transient members will be"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,151,"* tested, otherwise they are ignored, as they are likely derived fields, and"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,152,* not part of the value of the object.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,154,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,155,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,156,* @param testTransients - whether to include transient fields
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,157,* @return boolean - if the two objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,159,"public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,160,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,161,return true;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,163,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,164,return false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,166,Class c1 = lhs.getClass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,167,if (!c1.isInstance(rhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,168,return false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,170,Field[] fields = c1.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,171,"Field.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,172,EqualsBuilder equalsBuilder = new EqualsBuilder();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,173,for (int i = 0; i < fields.length && equalsBuilder.isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,174,Field f = fields[i];
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,175,if (testTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,176,try {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,177,"equalsBuilder.append(f.get(lhs), f.get(rhs));"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,178,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,179,//this can't happen. Would get a Security exception instead
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,180,//throw a runtime exception in case the impossible happens.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,181,"throw new InternalError(""Unexpected IllegalAccessException"");"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,185,return equalsBuilder.isEquals();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,191,* Test if two <code>Object</code>s are equal using their <code>equals</code>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,192,*  method.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,193,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,194,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,195,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,197,"public EqualsBuilder append(Object lhs, Object rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,198,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,199,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,201,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,202,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,204,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,205,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,206,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,208,Class lhsClass = lhs.getClass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,209,if (!lhsClass.isArray()) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,210,"//the simple case, not an array, just test the element"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,211,isEquals = lhs.equals(rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,212,} else {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,213,"//'Switch' on type of array, to dispatch to the correct handler"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,214,// This handles multi dimensional arrays
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,215,if (lhs instanceof long[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,216,"append((long[]) lhs, (long[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,217,} else if (lhs instanceof int[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,218,"append((int[]) lhs, (int[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,219,} else if (lhs instanceof short[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,220,"append((short[]) lhs, (short[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,221,} else if (lhs instanceof char[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,222,"append((char[]) lhs, (char[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,223,} else if (lhs instanceof byte[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,224,"append((byte[]) lhs, (byte[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,225,} else if (lhs instanceof double[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,226,"append((double[]) lhs, (double[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,227,} else if (lhs instanceof float[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,228,"append((float[]) lhs, (float[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,229,} else if (lhs instanceof boolean[]) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,230,"append((boolean[]) lhs, (boolean[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,231,} else {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,232,// Not an array of primitives
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,233,"append((Object[]) lhs, (Object[]) rhs);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,236,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,240,* Test if two <code>long</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,241,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,242,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,243,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,245,"public EqualsBuilder append(long lhs, long rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,246,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,247,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,249,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,250,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,254,* Test if two <code>int</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,255,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,256,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,257,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,259,"public EqualsBuilder append(int lhs, int rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,260,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,261,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,263,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,264,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,268,* Test if two <code>short</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,269,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,270,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,271,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,273,"public EqualsBuilder append(short lhs, short rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,274,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,275,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,277,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,278,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,282,* Test if two <code>char</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,283,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,284,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,285,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,287,"public EqualsBuilder append(char lhs, char rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,288,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,289,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,291,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,292,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,296,* Test if two <code>byte</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,297,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,298,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,299,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,301,"public EqualsBuilder append(byte lhs, byte rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,302,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,303,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,305,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,306,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,310,* Test if two <code>double</code>s are equal by testing that the
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,311,"* pattern of bits returned by doubleToLong are equal. This handles NaNs,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,312,"* Infinties, and -0.0. It is compatible with the hash code generated by"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,313,* <code>HashCodeBuilder</code>.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,314,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,315,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,316,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,318,"public EqualsBuilder append(double lhs, double rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,319,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,320,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,322,"return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,326,* Test if two <code>float</code>s are equal byt testing that the
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,327,"* pattern of bits returned by doubleToLong are equal. This handles NaNs,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,328,"* Infinties, and -0.0. It is compatible with the hash code generated by"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,329,* <code>HashCodeBuilder</code>.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,330,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,331,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,332,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,334,"public EqualsBuilder append(float lhs, float rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,335,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,336,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,338,"return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,342,* Test if two <code>booleans</code>s are equal using ==.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,343,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,344,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,345,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,347,"public EqualsBuilder append(boolean lhs, boolean rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,348,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,349,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,351,isEquals = (lhs == rhs);
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,352,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,356,* Performs a deep comparison of two object arrays. This also will be
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,357,"* called for the top level of multi-dimensional, ragged, and multi-typed"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,358,* arrays.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,359,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,360,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,361,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,363,"public EqualsBuilder append(Object[] lhs, Object[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,364,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,365,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,367,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,368,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,370,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,371,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,372,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,374,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,375,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,376,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,378,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,379,Class lhsClass = lhs[i].getClass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,380,if (!lhsClass.isInstance(rhs[i])) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,381,"isEquals = false; //If the types don't match, not equal"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,382,break;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,384,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,386,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,390,* Deep comparison of array of <code>long</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,391,"*  are compared. The method append(long, long) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,392,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,393,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,394,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,396,"public EqualsBuilder append(long[] lhs, long[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,397,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,398,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,400,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,401,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,403,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,404,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,405,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,407,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,408,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,409,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,411,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,412,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,414,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,418,* Deep comparison of array of <code>int</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,419,"*  are compared. The method append(int, int) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,420,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,421,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,422,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,424,"public EqualsBuilder append(int[] lhs, int[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,425,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,426,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,428,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,429,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,431,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,432,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,433,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,435,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,436,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,437,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,439,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,440,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,442,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,446,* Deep comparison of array of <code>short</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,447,"*  are compared. The method append(short, short) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,448,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,449,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,450,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,452,"public EqualsBuilder append(short[] lhs, short[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,453,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,454,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,456,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,457,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,459,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,460,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,461,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,463,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,464,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,465,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,467,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,468,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,470,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,474,* Deep comparison of array of <code>char</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,475,"*  are compared. The method append(char, char) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,476,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,477,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,478,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,480,"public EqualsBuilder append(char[] lhs, char[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,481,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,482,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,484,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,485,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,487,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,488,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,489,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,491,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,492,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,493,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,495,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,496,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,498,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,502,* Deep comparison of array of <code>byte</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,503,"*  are compared. The method append(byte, byte) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,504,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,505,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,506,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,508,"public EqualsBuilder append(byte[] lhs, byte[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,509,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,510,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,512,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,513,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,515,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,516,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,517,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,519,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,520,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,521,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,523,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,524,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,526,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,530,* Deep comparison of array of <code>double</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,531,"*  are compared. The method append(double, double) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,532,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,533,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,534,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,536,"public EqualsBuilder append(double[] lhs, double[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,537,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,538,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,540,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,541,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,543,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,544,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,545,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,547,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,548,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,549,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,551,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,552,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,554,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,558,* Deep comparison of array of <code>float</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,559,"*  are compared. The method append(float, float) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,560,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,561,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,562,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,564,"public EqualsBuilder append(float[] lhs, float[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,565,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,566,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,568,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,569,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,571,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,572,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,573,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,575,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,576,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,577,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,579,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,580,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,582,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,586,* Deep comparison of array of <code>boolean</code> Length and all values
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,587,"*  are compared. The method append(boolean, boolean) is used."
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,588,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,589,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,590,* @return EqualsBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,592,"public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,593,if (isEquals == false) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,594,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,596,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,597,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,599,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,600,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,601,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,603,if (lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,604,isEquals = false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,605,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,607,for (int i = 0; i < lhs.length && isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,608,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,610,return this;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,614,* Return true if the fields that have been checked are all equal.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,615,* @return boolean
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,617,public boolean isEquals() {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,618,return isEquals;

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,106,* @author Gary Gregory
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,107," @version $Id: CompareToBuilder.java,v 1.9 2002/12/25 22:00:31 scolebourne Exp $"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,108,"* @version $Id: CompareToBuilder.java,v 1.10 2003/01/19 17:35:21 scolebourne Exp $"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,142, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,143,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,154,"eturn reflectionCompare(lhs, rhs, false);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,155,"return reflectionCompare(lhs, rhs, false, null);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,170, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,171,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,184,"return reflectionCompare(lhs, rhs, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,188,* <p>This method uses reflection to determine if the two Objects are
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,189,* equal.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,191,* <p>It uses <code>Field.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,192,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,193,"* a security manger, if  the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,194,* also not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,196,"* <p>If the <code>testTransients</code> is set to <code>true</code>,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,197,"* transient members will be tested, otherwise they are ignored, as they"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,198,"* are likely derived fields, and not part of the value of the object.</p>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,200,* <p>Static fields will not be included. Superclass fields will be appended
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,201,* up to and including the specified superclass. A null superclass is treated
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,202,* as java.lang.Object.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,204,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,205,* @param rhs  the other object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,206,* @param testTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,207,"* @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,208,"* @return a negative integer, zero, or a positive integer as this"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,209,"*  Object is less than, equal to, or greater than the specified Object."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,210,* @throws NullPointerException  if either (but not both) parameter is
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,211,*  <code>null</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,212,* @throws ClassCastException  if the specified Object's type prevents it
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,213,*  from being compared to this Object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,215,"public static int reflectionCompare(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,193,ield[] fields = c1.getDeclaredFields();
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,194,"ield.setAccessible(fields, true);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,196,or (int i = 0; i < fields.length && compareToBuilder.comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,227,"reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,228,while (c1.getSuperclass() != null && c1 != reflectUpToClass) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,229,c1 = c1.getSuperclass();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,230,"reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,232,return compareToBuilder.toComparison();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,236,* Appends the fields and values defined by the given object of the
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,237,* given Class.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,239,* @param lhs  the left hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,240,* @param rhs  the right hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,241,* @param clazz  the class to append details of
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,242,* @param builder  the builder to append to
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,243,* @param useTransients  whether to test transient fields
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,245,"private static void reflectionAppend(Object lhs, Object rhs, Class clazz, CompareToBuilder builder, boolean useTransients) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,246,Field[] fields = clazz.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,247,"Field.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,248,for (int i = 0; i < fields.length && builder.comparison == 0; i++) {
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,198,f (testTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,250,if (useTransients || !Modifier.isTransient(f.getModifiers())) {
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,201,"ompareToBuilder.append(f.get(lhs), f.get(rhs));"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,202, catch (IllegalAccessException ex) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,253,"builder.append(f.get(lhs), f.get(rhs));"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,254,} catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,205,"hrow new InternalError(""Unexpected IllegalAccessException"");"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,210,eturn compareToBuilder.toComparison();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,109,* @author Gary Gregory
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,110," @version $Id: EqualsBuilder.java,v 1.9 2003/01/15 20:54:00 bayard Exp $"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,111,"* @version $Id: EqualsBuilder.java,v 1.10 2003/01/19 17:35:21 scolebourne Exp $"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,142, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,143,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,144, @param lhs  Left Hand Side
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,145, @param rhs  Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,145,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,146,* @param rhs  the other object
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,149,"eturn reflectionEquals(lhs, rhs, false);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,150,"return reflectionEquals(lhs, rhs, false, null);"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,164, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,165,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,166, @param lhs  Left Hand Side
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,167, @param rhs  Right Hand Side
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,167,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,168,* @param rhs  the other object
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,171,"ublic static boolean reflectionEquals(Object lhs, Object rhs,"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,172,oolean testTransients) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,172,"public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,173,"return reflectionEquals(lhs, rhs, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,177,* <p>This method uses reflection to determine if the two Object are equal.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,179,* <p>It uses <code>Field.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,180,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,181,"* a security manger, if the permissions are not set up correctly. It is also"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,182,* not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,184,"* <p>If the testTransients parameter is set to <code>true</code>, transient"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,185,"* members will be tested, otherwise they are ignored, as they are likely"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,186,"* derived fields, and not part of the value of the Object.</p>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,188,* <p>Static fields will not be included. Superclass fields will be appended
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,189,* up to and including the specified superclass. A null superclass is treated
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,190,* as java.lang.Object.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,192,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,193,* @param rhs  the other object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,194,* @param testTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,195,"* @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,196,* @return <code>true</code> if the two Objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,198,"public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,179,lass c1 = lhs.getClass();
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,180,f (!c1.isInstance(rhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,205,// Find the leaf class since there may be transients in the leaf
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,206,// class or in classes between the leaf and root.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,207,"// If we are not testing transients or a subclass has no ivars,"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,208,// then a subclass can test equals to a superclass.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,209,Class lhsClass = lhs.getClass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,210,Class rhsClass = rhs.getClass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,211,Class testClass;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,212,if (lhsClass.isInstance(rhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,213,testClass = lhsClass;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,214,if (!rhsClass.isInstance(lhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,215,// rhsClass is a subclass of lhsClass
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,216,testClass = rhsClass;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,218,} else if (rhsClass.isInstance(lhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,219,testClass = rhsClass;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,220,if (!lhsClass.isInstance(rhs)) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,221,// lhsClass is a subclass of rhsClass
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,222,testClass = lhsClass;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,224,} else {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,225,// The two classes are not related.
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,183,ield[] fields = c1.getDeclaredFields();
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,184,"ield.setAccessible(fields, true);"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,186,or (int i = 0; i < fields.length && equalsBuilder.isEquals; ++i) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,229,try {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,230,"reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,231,while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,232,testClass = testClass.getSuperclass();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,233,"reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,235,} catch (IllegalArgumentException e) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,236,"// In this case, we tried to test a subclass vs. a superclass and"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,237,// the subclass has ivars or the ivars are transient and
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,238,// we are testing transients.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,239,"// If a subclass has ivars that we are trying to test them, we get an"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,240,// exception and we know that the objects are not equal.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,241,return false;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,243,return equalsBuilder.isEquals();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,247,* Appends the fields and values defined by the given object of the
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,248,* given Class.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,250,* @param lhs  the left hand object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,251,* @param rhs  the right hand object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,252,* @param clazz  the class to append details of
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,253,* @param builder  the builder to append to
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,254,* @param useTransients  whether to test transient fields
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,256,"private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,257,Field[] fields = clazz.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,258,"Field.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,259,for (int i = 0; i < fields.length && builder.isEquals; i++) {
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,188,f (testTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,261,if (useTransients || !Modifier.isTransient(f.getModifiers())) {
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,191,"qualsBuilder.append(f.get(lhs), f.get(rhs));"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,264,"builder.append(f.get(lhs), f.get(rhs));"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,195,"hrow new InternalError(""Unexpected IllegalAccessException"");"
False,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,200,eturn equalsBuilder.isEquals();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,109,* @author Gary Gregory
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,110," @version $Id: HashCodeBuilder.java,v 1.8 2003/01/15 20:51:57 bayard Exp $"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,111,"* @version $Id: HashCodeBuilder.java,v 1.9 2003/01/19 17:35:21 scolebourne Exp $"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,182, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,183,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,189,"eturn reflectionHashCode(object, false);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,190,"return reflectionHashCode(17, 37, object, false, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,207, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,208,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,215,"eturn reflectionHashCode(17, 37, object, testTransients);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,216,"return reflectionHashCode(17, 37, object, testTransients, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,229, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,230,* <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,243,"nt initialNonZeroOddNumber, int multiplierNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,244,bject object) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,245,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,244,"int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,245,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,260, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,260,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,277,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,281,* <p>This method uses reflection to build a valid hash code.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,283,* <p>It uses <code>Field.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,284,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,285,"* a security manger, if the permissions are not set up correctly. It is also"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,286,* not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,288,"* <p>If the TestTransients parameter is set to <code>true</code>, transient"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,289,"* members will be tested, otherwise they are ignored, as they are likely"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,290,"* derived fields, and not part of the value of the Object.</p>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,292,* <p>Static fields will not be included. Superclass fields will be included
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,293,* up to and including the specified superclass. A null superclass is treated
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,294,* as java.lang.Object.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,296,"* <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,297,"* these should be different for each class, however this is not vital."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,298,"* Prime numbers are preferred, especially for the multiplier.</p>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,300,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,301,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,302,* @param object  the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,303,* @param testTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,304,"* @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,305,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,306,* @throws IllegalArgumentException if the Object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,307,* @throws IllegalArgumentException if the number is zero or even
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,309,public static int reflectionHashCode(
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,310,"int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,311,"Object object, boolean testTransients, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,281,"ashCodeBuilder hashCodeBuilder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,282,ield[] fields = object.getClass().getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,316,"HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,317,Class clazz = object.getClass();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,318,"reflectionAppend(object, clazz, builder, testTransients);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,319,while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,320,clazz = clazz.getSuperclass();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,321,"reflectionAppend(object, clazz, builder, testTransients);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,323,return builder.toHashCode();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,327,* Appends the fields and values defined by the given object of the
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,328,* given Class.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,330,* @param object  the object to append details of
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,331,* @param clazz  the class to append details of
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,332,* @param builder  the builder to append to
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,333,* @param useTransients  whether to use transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,335,"private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,336,Field[] fields = clazz.getDeclaredFields();
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,284,or (int i = 0; i < fields.length; ++i) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,338,for (int i = 0; i < fields.length; i++) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,286,f (testTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,340,if (useTransients || !Modifier.isTransient(f.getModifiers())) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,289,ashCodeBuilder.append(f.get(object));
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,343,builder.append(f.get(object));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,293,"hrow new InternalError(""Unexpected IllegalAccessException"");"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,298,eturn hashCodeBuilder.toHashCode();
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,116," @version $Id: ToStringBuilder.java,v 1.12 2002/12/31 20:21:34 scolebourne Exp $"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,116,"* @version $Id: ToStringBuilder.java,v 1.13 2003/01/19 17:35:21 scolebourne Exp $"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,334, <p>
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,335," If the style is <code>null</code>, the default"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,334,"* <p>If the style is <code>null</code>, the default"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,370, @param outputTransients  whether to output transient fields
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,369,* @param useTransients  whether to output transient fields
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,372,"rivate static void reflectionAppend(Object object, Class clazz, ToStringBuilder builder, boolean outputTransients) {"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,371,"private static void reflectionAppend(Object object, Class clazz, ToStringBuilder builder, boolean useTransients) {"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,375,or (int i = 0; i < fields.length; ++i) {
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,374,for (int i = 0; i < fields.length; i++) {
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,377,f (outputTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,376,if (useTransients || !Modifier.isTransient(f.getModifiers())) {
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,56,mport org.apache.commons.lang.builder.CompareToBuilder;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,56,import java.math.BigInteger;
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,67," @version $Id: CompareToBuilderTest.java,v 1.3 2002/12/08 21:43:34 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,67,"* @version $Id: CompareToBuilderTest.java,v 1.4 2003/01/19 17:35:20 scolebourne Exp $"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,94,tatic class TestObject implements Comparable{
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,94,static class TestObject implements Comparable {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,123,static class TestSubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,124,private int b;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,125,public TestSubObject() {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,126,super(0);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,128,"public TestSubObject(int a, int b) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,129,super(a);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,130,this.b = b;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,132,public boolean equals(Object o) {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,133,if (o == this) {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,134,return true;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,136,if (!(o instanceof TestSubObject)) {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,137,return false;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,139,TestSubObject rhs = (TestSubObject) o;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,140,return super.equals(o) && (b == rhs.b);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,144,static class TestTransientSubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,145,private transient int t;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,146,"public TestTransientSubObject(int a, int t) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,147,super(a);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,148,this.t = t;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,181,public void testReflectionHierarchyCompare() {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,182,testReflectionHierarchyCompare(false);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,185,public void testReflectionHierarchyCompareTransients() {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,186,testReflectionHierarchyCompare(true);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,188,TestTransientSubObject x;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,189,TestTransientSubObject y;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,190,TestTransientSubObject z;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,192,"x = new TestTransientSubObject(1, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,193,"y = new TestTransientSubObject(2, 2);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,194,"z = new TestTransientSubObject(3, 3);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,195,"assertXYZCompareOrder(x, y, z, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,197,"x = new TestTransientSubObject(1, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,198,"y = new TestTransientSubObject(1, 2);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,199,"z = new TestTransientSubObject(1, 3);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,200,"assertXYZCompareOrder(x, y, z, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,203,"private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,204,"assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,205,"assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,206,"assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,208,"assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,209,"assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,210,"assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,212,"assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,213,"assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,214,"assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,217,public void testReflectionHierarchyCompare(boolean testTransients) {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,218,TestObject to1 = new TestObject(1);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,219,TestObject to2 = new TestObject(2);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,220,TestObject to3 = new TestObject(3);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,221,"TestSubObject tso1 = new TestSubObject(1, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,222,"TestSubObject tso2 = new TestSubObject(2, 2);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,223,"TestSubObject tso3 = new TestSubObject(3, 3);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,225,"assertReflectionCompareContract(to1, to1, to1, false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,226,"assertReflectionCompareContract(to1, to2, to3, false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,227,"assertReflectionCompareContract(tso1, tso1, tso1, false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,228,"assertReflectionCompareContract(tso1, tso2, tso3, false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,229,"assertReflectionCompareContract(""1"", ""2"", ""3"", false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,231,"assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,232,"assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,234,// root class
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,235,"assertXYZCompareOrder(to1, to2, to3, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,236,// subclass
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,237,"assertXYZCompareOrder(tso1, tso2, tso3, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,241,"* See ""Effective Java"" under ""Consider Implementing Comparable""."
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,243,* @param x an object to compare
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,244,* @param y an object to compare
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,245,* @param z an object to compare
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,246,* @param testTransients Whether to include transients in the comparison
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,248,"public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,250,// signum
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,251,"assertTrue(reflectionCompareSignum(x, y, testTransients) == -reflectionCompareSignum(y, x, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,253,// transitive
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,254,"if (CompareToBuilder.reflectionCompare(x, y, testTransients) > 0 && CompareToBuilder.reflectionCompare(y, z, testTransients) > 0){"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,255,"assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients) > 0);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,258,// un-named
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,259,"if (CompareToBuilder.reflectionCompare(x, y, testTransients) == 0) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,260,"assertTrue(reflectionCompareSignum(x, z, testTransients) == -reflectionCompareSignum(y, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,263,// strongly recommended but not strictly required
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,264,"assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,268,* Returns the signum of the result of comparing x and y with
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,269,* <code>CompareToBuilder.reflectionCompare</code>
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,271,"* @param lhs The ""left-hand-side"" of the comparison."
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,272,"* @param rhs The ""right-hand-side"" of the comparison."
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,273,* @param testTransients Whether to include transients in the comparison
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,274,* @return int The signum
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,276,"private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,277,"return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();"
False,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,65," @version $Id: EqualsBuilderTest.java,v 1.2 2002/12/08 21:10:11 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,65,"* @version $Id: EqualsBuilderTest.java,v 1.3 2003/01/19 17:35:20 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,95,public TestObject() {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,120,static class TestSubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,121,private int b;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,122,public TestSubObject() {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,123,super(0);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,125,"public TestSubObject(int a, int b) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,126,super(a);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,127,this.b = b;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,129,public boolean equals(Object o) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,130,if (o == this) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,131,return true;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,133,if (!(o instanceof TestSubObject)) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,134,return false;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,136,TestSubObject rhs = (TestSubObject) o;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,137,return super.equals(o) && (b == rhs.b);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,140,public void setB(int b) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,141,this.b = b;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,144,public int getB() {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,145,return b;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,149,static class TestEmptySubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,150,public TestEmptySubObject(int a) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,151,super(a);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,155,static class TestTSubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,156,private transient int t;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,157,"public TestTSubObject(int a, int t) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,158,super(a);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,159,this.t = t;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,163,static class TestTTSubObject extends TestTSubObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,164,private transient int tt;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,165,"public TestTTSubObject(int a, int t, int tt) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,166,"super(a, t);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,167,this.tt = tt;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,171,static class TestTTLeafObject extends TestTTSubObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,172,private int leafValue;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,173,"public TestTTLeafObject(int a, int t, int tt, int leafValue) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,174,"super(a, t, tt);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,175,this.leafValue = leafValue;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,179,static class TestTSubObject2 extends TestObject {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,180,private transient int t;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,181,"public TestTSubObject2(int a, int t) {"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,182,super(a);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,184,public int getT() {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,185,return t;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,187,public void setT(int t) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,188,this.t = t;
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,207,public void testReflectionHierarchyEquals() {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,208,testReflectionHierarchyEquals(false);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,209,testReflectionHierarchyEquals(true);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,210,// Transients
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,211,"assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,212,"assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,213,"assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,214,"assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,215,"assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,218,public void testReflectionHierarchyEquals(boolean testTransients) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,219,TestObject to1 = new TestObject(4);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,220,TestObject to1Bis = new TestObject(4);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,221,TestObject to1Ter = new TestObject(4);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,222,TestObject to2 = new TestObject(5);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,223,TestEmptySubObject teso = new TestEmptySubObject(4);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,224,"TestTSubObject ttso = new TestTSubObject(4, 1);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,225,"TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,226,"TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,227,"TestSubObject tso1 = new TestSubObject(1, 4);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,228,"TestSubObject tso1bis = new TestSubObject(1, 4);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,229,"TestSubObject tso1ter = new TestSubObject(1, 4);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,230,"TestSubObject tso2 = new TestSubObject(2, 5);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,232,"testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,233,"testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,235,// More sanity checks:
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,237,// same values
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,238,"assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,239,"assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,240,"// same super values, diff sub values"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,241,"assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,242,"assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,243,"// diff super values, same sub values"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,244,"assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,245,"assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,247,// mix super and sub types: equals
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,248,"assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,249,"assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,251,"assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,252,"assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,254,"assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,255,"assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,257,"assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,258,"assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,260,// mix super and sub types: NOT equals
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,261,"assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,262,"assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,264,"assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,265,"assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,267,"assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,268,"assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,270,"assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,271,"assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,275,"* Equivalence relationship tests inspired by ""Effective Java"":"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,276,* <ul>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,277,* <li>reflection</li>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,278,* <li>symetry</li>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,279,* <li>transitive</li>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,280,* <li>consistency</li>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,281,* <li>non-null reference</li>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,282,* </ul>
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,283,* @param to a TestObject
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,284,"* @param toBis a TestObject, equal to to and toTer"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,285,"* @param toTer Left hand side, equal to to and toBis"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,286,* @param to2 a different TestObject
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,287,* @param oToChange a TestObject that will be changed
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,289,public void testReflectionEqualsEquivalenceRelationship(
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,290,"TestObject to,"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,291,"TestObject toBis,"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,292,"TestObject toTer,"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,293,"TestObject to2,"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,294,"TestObject oToChange,"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,295,boolean testTransients) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,297,// reflection test
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,298,"assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,299,"assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,301,// symetry test
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,302,"assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,304,// transitive test
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,305,assertTrue(
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,306,"EqualsBuilder.reflectionEquals(to, toBis, testTransients)"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,307,"&& EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,308,"&& EqualsBuilder.reflectionEquals(to, toTer, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,310,// consistency test
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,311,oToChange.setA(to.getA());
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,312,if (oToChange instanceof TestSubObject) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,313,((TestSubObject) oToChange).setB(((TestSubObject) to).getB());
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,315,"assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,316,"assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,317,oToChange.setA(to.getA() + 1);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,318,if (oToChange instanceof TestSubObject) {
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,319,((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,321,"assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,322,"assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,324,// non-null reference test
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,325,"assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,326,"assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,327,"assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,328,"assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));"
True,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,329,"assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,64," @version $Id: HashCodeBuilderTest.java,v 1.2 2002/12/08 21:22:42 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,64,"* @version $Id: HashCodeBuilderTest.java,v 1.3 2003/01/19 17:35:20 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,137,static class TestSubObject extends TestObject {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,138,private int b;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,139,transient private int t;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,140,public TestSubObject() {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,141,super(0);
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,143,"public TestSubObject(int a, int b, int t) {"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,144,super(a);
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,145,this.b = b;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,146,this.t = t;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,148,public boolean equals(Object o) {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,149,if (o == this) {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,150,return true;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,152,if (!(o instanceof TestSubObject)) {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,153,return false;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,155,TestSubObject rhs = (TestSubObject) o;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,156,return super.equals(o) && (b == rhs.b);
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,165,public void testReflectionHierarchyHashCode() {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,166,"assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,167,"assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,168,"assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0)));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,169,"assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,172,public void testReflectionHierarchyHashCodeEx1() {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,173,try {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,174,"HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,175,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,176,return;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,178,fail();
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,181,public void testReflectionHierarchyHashCodeEx2() {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,182,try {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,183,"HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,184,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,185,return;
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,187,fail();

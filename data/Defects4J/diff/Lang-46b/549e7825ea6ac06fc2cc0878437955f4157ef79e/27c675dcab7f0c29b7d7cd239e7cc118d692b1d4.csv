is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,27, <p>This class handles invalid <code>null</code> inputs as best it can.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,28, Each method documents its behaviour in more detail.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,26,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,27,* <p>This class handles invalid <code>null</code> inputs as best it can. Each method documents its behaviour in more
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,28,* detail.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,34, @since 2.0
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,35,* @since 2.0
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,37,ublic class ClassUtils {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,37,public class ClassUtils
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,47,ublic static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,46,public static final String PACKAGE_SEPARATOR = String.valueOf( PACKAGE_SEPARATOR_CHAR );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,57,ublic static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,60, Maps primitive <code>Class</code>es to their corresponding wrapper <code>Class</code>.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,54,public static final String INNER_CLASS_SEPARATOR = String.valueOf( INNER_CLASS_SEPARATOR_CHAR );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,56,* Maps primitive <code>Class</code>es to their corresponding wrapper <code>Class</code>.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,62,rivate static Map  primitiveWrapperMap = new HashMap();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,63,tatic {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,64,"rimitiveWrapperMap.put(Boolean.TYPE, Boolean.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,65,"rimitiveWrapperMap.put(Byte.TYPE, Byte.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,66,"rimitiveWrapperMap.put(Character.TYPE, Character.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,67,"rimitiveWrapperMap.put(Short.TYPE, Short.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,68,"rimitiveWrapperMap.put(Integer.TYPE, Integer.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,69,"rimitiveWrapperMap.put(Long.TYPE, Long.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,70,"rimitiveWrapperMap.put(Double.TYPE, Double.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,71,"rimitiveWrapperMap.put(Float.TYPE, Float.class);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,72,"rimitiveWrapperMap.put(Void.TYPE, Void.TYPE);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,58,private static Map primitiveWrapperMap = new HashMap();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,60,static
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,62,"primitiveWrapperMap.put( Boolean.TYPE, Boolean.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,63,"primitiveWrapperMap.put( Byte.TYPE, Byte.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,64,"primitiveWrapperMap.put( Character.TYPE, Character.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,65,"primitiveWrapperMap.put( Short.TYPE, Short.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,66,"primitiveWrapperMap.put( Integer.TYPE, Integer.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,67,"primitiveWrapperMap.put( Long.TYPE, Long.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,68,"primitiveWrapperMap.put( Double.TYPE, Double.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,69,"primitiveWrapperMap.put( Float.TYPE, Float.class );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,70,"primitiveWrapperMap.put( Void.TYPE, Void.TYPE );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,76, <p>ClassUtils instances should NOT be constructed in standard programming.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,77," Instead, the class should be used as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,74,* Maps a primitive class name to its corresponding abbreviation used in array class names.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,76,private static Map abbreviationMap = new HashMap();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,78,static
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,80,"abbreviationMap.put( ""int"", ""I"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,81,"abbreviationMap.put( ""boolean"", ""Z"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,82,"abbreviationMap.put( ""float"", ""F"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,83,"abbreviationMap.put( ""long"", ""J"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,84,"abbreviationMap.put( ""short"", ""S"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,85,"abbreviationMap.put( ""byte"", ""B"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,86,"abbreviationMap.put( ""double"", ""D"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,87,"abbreviationMap.put( ""char"", ""C"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,91,"* <p>ClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,80, <p>This constructor is public to permit tools that require a JavaBean
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,81, instance to operate.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,93,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,94,* <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,83,ublic ClassUtils() {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,84,uper();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,96,public ClassUtils()
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,98,super();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,92," @param object  the class to get the short name for, may be null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,93, @param valueIfNull  the value to return if null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,107,"* @param object      the class to get the short name for, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,108,* @param valueIfNull the value to return if null
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,96,"ublic static String getShortClassName(Object object, String valueIfNull) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,97,f (object == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,111,"public static String getShortClassName( Object object, String valueIfNull )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,113,if( object == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,100,eturn getShortClassName(object.getClass().getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,117,return getShortClassName( object.getClass().getName() );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,106, @param cls  the class to get the short name for.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,123,* @param cls the class to get the short name for.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,109,ublic static String getShortClassName(Class cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,110,f (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,126,public static String getShortClassName( Class cls )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,128,if( cls == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,113,eturn getShortClassName(cls.getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,132,return getShortClassName( cls.getName() );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,137,* <p/>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,121, @param className  the className to get the short name for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,140,* @param className the className to get the short name for
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,124,ublic static String getShortClassName(String className) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,125,f (className == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,143,public static String getShortClassName( String className )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,145,if( className == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,128,f (className.length() == 0) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,149,if( className.length() == 0 )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,133,or (int i = 0; i < chars.length; i++) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,134,f (chars[i] == PACKAGE_SEPARATOR_CHAR) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,155,for( int i = 0; i < chars.length; i++ )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,157,if( chars[i] == PACKAGE_SEPARATOR_CHAR )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,136, else if (chars[i] == INNER_CLASS_SEPARATOR_CHAR) {  // handle inner classes
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,161,else if( chars[i] == INNER_CLASS_SEPARATOR_CHAR )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,162,{  // handle inner classes
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,140,"eturn new String(chars, lastDot, chars.length - lastDot);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,166,"return new String( chars, lastDot, chars.length - lastDot );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,148," @param object  the class to get the package name for, may be null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,149, @param valueIfNull  the value to return if null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,175,"* @param object      the class to get the package name for, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,176,* @param valueIfNull the value to return if null
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,152,"ublic static String getPackageName(Object object, String valueIfNull) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,153,f (object == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,179,"public static String getPackageName( Object object, String valueIfNull )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,181,if( object == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,156,eturn getPackageName(object.getClass().getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,185,return getPackageName( object.getClass().getName() );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,162," @param cls  the class to get the package name for, may be <code>null</code>."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,191,"* @param cls the class to get the package name for, may be <code>null</code>."
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,165,ublic static String getPackageName(Class cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,166,f (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,194,public static String getPackageName( Class cls )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,196,if( cls == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,169,eturn getPackageName(cls.getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,200,return getPackageName( cls.getName() );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,205,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,206,"* <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>If the class is unpackaged,"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,207,* return an empty string.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,175, <p>The string passed in is assumed to be a class name - it is not checked.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,176," <p>If the class is unpackaged, return an empty string.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,178," @param className  the className to get the package name for, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,209,"* @param className the className to get the package name for, may be <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,181,ublic static String getPackageName(String className) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,182,f (className == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,212,public static String getPackageName( String className )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,214,if( className == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,185,nt i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,186,f (i == -1) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,218,int i = className.lastIndexOf( PACKAGE_SEPARATOR_CHAR );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,219,if( i == -1 )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,189,"eturn className.substring(0, i);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,223,"return className.substring( 0, i );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,197," @param cls  the class to look up, may be <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,198, @return the <code>List</code> of superclasses in order going up from this one
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,199,  <code>null</code> if null input
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,232,"* @param cls the class to look up, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,233,* @return the <code>List</code> of superclasses in order going up from this one <code>null</code> if null input
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,201,ublic static List getAllSuperclasses(Class cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,202,f (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,235,public static List getAllSuperclasses( Class cls )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,237,if( cls == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,207,hile (superclass != null) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,208,lasses.add(superclass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,243,while( superclass != null )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,245,classes.add( superclass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,215, <p>Gets a <code>List</code> of all interfaces implemented by the given
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,216, class and its superclasses.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,252,* <p>Gets a <code>List</code> of all interfaces implemented by the given class and its superclasses.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,253,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,254,* <p>The order is determined by looking through each interface in turn as declared in the source file and following
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,255,"* its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,256,* is maintained.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,218, <p>The order is determined by looking through each interface in turn as
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,219, declared in the source file and following its hierarchy up. Then each
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,220," superclass is considered in the same way. Later duplicates are ignored,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,221, so the order is maintained.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,223," @param cls  the class to look up, may be <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,224," @return the <code>List</code> of interfaces in order,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,225,  <code>null</code> if null input
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,258,"* @param cls the class to look up, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,259,"* @return the <code>List</code> of interfaces in order, <code>null</code> if null input"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,227,ublic static List getAllInterfaces(Class cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,228,f (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,261,public static List getAllInterfaces( Class cls )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,263,if( cls == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,232,hile (cls != null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,268,while( cls != null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,234,or (int i = 0; i < interfaces.length; i++) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,235,f (list.contains(interfaces[i]) == false) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,236,ist.add(interfaces[i]);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,271,for( int i = 0; i < interfaces.length; i++ )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,273,if( list.contains( interfaces[i] ) == false )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,275,list.add( interfaces[i] );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,238,ist superInterfaces = getAllInterfaces(interfaces[i]);
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,239,or (Iterator it = superInterfaces.iterator(); it.hasNext();) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,240,lass intface = (Class) it.next();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,241,f (list.contains(intface) == false) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,242,ist.add(intface);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,277,List superInterfaces = getAllInterfaces( interfaces[i] );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,278,for( Iterator it = superInterfaces.iterator(); it.hasNext(); )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,280,Class intface = ( Class ) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,281,if( list.contains( intface ) == false )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,283,list.add( intface );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,297,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,298,"* <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code> is stored in the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,299,"* <code>List</code>. If the class name in the <code>List</code> is <code>null</code>, <code>null</code> is stored"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,300,* in the output <code>List</code>.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,256," <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,257, is stored in the <code>List</code>. If the class name in the <code>List</code> is
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,258," <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,260, @param classNames  the classNames to change
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,261," @return a <code>List</code> of Class objects corresponding to the class names,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,262,  <code>null</code> if null input
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,302,* @param classNames the classNames to change
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,303,"* @return a <code>List</code> of Class objects corresponding to the class names, <code>null</code> if null input"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,265,ublic static List convertClassNamesToClasses(List classNames) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,266,f (classNames == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,306,public static List convertClassNamesToClasses( List classNames )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,308,if( classNames == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,269,ist classes = new ArrayList(classNames.size());
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,270,or (Iterator it = classNames.iterator(); it.hasNext();) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,271,tring className = (String) it.next();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,272,ry {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,273,lasses.add(Class.forName(className));
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,274, catch (Exception ex) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,275,lasses.add(null);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,312,List classes = new ArrayList( classNames.size() );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,313,for( Iterator it = classNames.iterator(); it.hasNext(); )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,315,String className = ( String ) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,316,try
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,318,classes.add( Class.forName( className ) );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,320,catch( Exception ex )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,322,classes.add( null );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,282," <p>Given a <code>List</code> of <code>Class</code> objects, this method converts"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,283, them into class names.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,329,"* <p>Given a <code>List</code> of <code>Class</code> objects, this method converts them into class names.</p>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,330,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,331,* <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into the returned list as
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,332,* <code>null</code>.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,285, <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,286, the returned list as <code>null</code>.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,288, @param classes  the classes to change
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,289," @return a <code>List</code> of class names corresponding to the Class objects,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,290,  <code>null</code> if null input
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,334,* @param classes the classes to change
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,335,"* @return a <code>List</code> of class names corresponding to the Class objects, <code>null</code> if null input"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,293,ublic static List convertClassesToClassNames(List classes) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,294,f (classes == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,338,public static List convertClassesToClassNames( List classes )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,340,if( classes == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,297,ist classNames = new ArrayList(classes.size());
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,298,or (Iterator it = classes.iterator(); it.hasNext();) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,299,lass cls = (Class) it.next();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,300,f (cls == null) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,301,lassNames.add(null);
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,302, else {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,303,lassNames.add(cls.getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,344,List classNames = new ArrayList( classes.size() );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,345,for( Iterator it = classes.iterator(); it.hasNext(); )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,347,Class cls = ( Class ) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,348,if( cls == null )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,350,classNames.add( null );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,352,else
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,354,classNames.add( cls.getName() );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,365,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,366,"* <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in the input arrays. It"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,367,* can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,368,* parameter types (the second parameter).</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,369,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,370,"* <p>Unlike the {@link Class#isAssignableFrom(Class)} method, this method takes into account widenings of primitive"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,371,* classes and <code>null</code>s.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,372,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,373,"* <p>Primitive widenings allow an int to be assigned to a <code>long</code>, <code>float</code> or"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,374,* <code>double</code>. This method returns the correct result for these cases.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,375,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,376,* <p><code>Null</code> may be assigned to any reference type. This method will return <code>true</code> if
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,377,* <code>null</code> is passed in and the toClass is non-primitive.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,378,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,379,"* <p>Specifically, this method tests whether the type represented by the specified <code>Class</code> parameter can"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,380,* be converted to the type represented by this <code>Class</code> object via an identity conversion widening
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,381,"* primitive or widening reference conversion. See <em><a href=""http://java.sun.com/docs/books/jls/"">The Java"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,382,"* Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,314," <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,315, Class pair in the input arrays. It can be used to check if a set of arguments
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,316, (the first parameter) are suitably compatible with a set of method parameter types
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,317, (the second parameter).</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,319," <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,320, method takes into account widenings of primitive classes and
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,321, <code>null</code>s.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,323," <p>Primitive widenings allow an int to be assigned to a <code>long</code>,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,324, <code>float</code> or <code>double</code>. This method returns the correct
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,325, result for these cases.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,327, <p><code>Null</code> may be assigned to any reference type. This method will
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,328, return <code>true</code> if <code>null</code> is passed in and the toClass is
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,329, non-primitive.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,331," <p>Specifically, this method tests whether the type represented by the"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,332, specified <code>Class</code> parameter can be converted to the type
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,333, represented by this <code>Class</code> object via an identity conversion
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,334, widening primitive or widening reference conversion. See
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,335," <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,336," sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,338," @param classArray  the array of Classes to check, may be <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,339," @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,384,"* @param classArray   the array of Classes to check, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,385,"* @param toClassArray the array of Classes to try to assign into, may be <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,342,"ublic static boolean isAssignable(Class[] classArray, Class[] toClassArray) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,343,"f (ArrayUtils.isSameLength(classArray, toClassArray) == false) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,388,"public static boolean isAssignable( Class[] classArray, Class[] toClassArray )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,390,"if( ArrayUtils.isSameLength( classArray, toClassArray ) == false )"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,346,f (classArray == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,394,if( classArray == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,349,f (toClassArray == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,398,if( toClassArray == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,352,or (int i = 0; i < classArray.length; i++) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,353,"f (isAssignable(classArray[i], toClassArray[i]) == false) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,402,for( int i = 0; i < classArray.length; i++ )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,404,"if( isAssignable( classArray[i], toClassArray[i] ) == false )"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,361, <p>Checks if one <code>Class</code> can be assigned to a variable of
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,362, another <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,364," <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,365, this method takes into account widenings of primitive classes and
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,366, <code>null</code>s.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,368," <p>Primitive widenings allow an int to be assigned to a long, float or"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,369, double. This method returns the correct result for these cases.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,371, <p><code>Null</code> may be assigned to any reference type. This method
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,372, will return <code>true</code> if <code>null</code> is passed in and the
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,373, toClass is non-primitive.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,375," <p>Specifically, this method tests whether the type represented by the"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,376, specified <code>Class</code> parameter can be converted to the type
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,377, represented by this <code>Class</code> object via an identity conversion
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,378, widening primitive or widening reference conversion. See
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,379," <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,380," sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,413,* <p>Checks if one <code>Class</code> can be assigned to a variable of another <code>Class</code>.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,414,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,415,"* <p>Unlike the {@link Class#isAssignableFrom(Class)} method, this method takes into account widenings of primitive"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,416,* classes and <code>null</code>s.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,417,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,418,"* <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,419,* result for these cases.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,420,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,421,* <p><code>Null</code> may be assigned to any reference type. This method will return <code>true</code> if
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,422,* <code>null</code> is passed in and the toClass is non-primitive.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,423,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,424,"* <p>Specifically, this method tests whether the type represented by the specified <code>Class</code> parameter can"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,425,* be converted to the type represented by this <code>Class</code> object via an identity conversion widening
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,426,"* primitive or widening reference conversion. See <em><a href=""http://java.sun.com/docs/books/jls/"">The Java"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,427,"* Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,382," @param cls  the Class to check, may be null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,383," @param toClass  the Class to try to assign into, returns false if null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,429,"* @param cls     the Class to check, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,430,"* @param toClass the Class to try to assign into, returns false if null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,386,"ublic static boolean isAssignable(Class cls, Class toClass) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,387,f (toClass == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,433,"public static boolean isAssignable( Class cls, Class toClass )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,435,if( toClass == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,391,f (cls == null) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,392,eturn !(toClass.isPrimitive());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,440,if( cls == null )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,442,return !( toClass.isPrimitive() );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,394,f (cls.equals(toClass)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,444,if( cls.equals( toClass ) )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,397,f (cls.isPrimitive()) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,398,f (toClass.isPrimitive() == false) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,448,if( cls.isPrimitive() )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,450,if( toClass.isPrimitive() == false )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,401,f (Integer.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,402,eturn Long.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,403,| Float.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,404,| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,454,if( Integer.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,456,return Long.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,457,|| Float.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,458,|| Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,406,f (Long.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,407,eturn Float.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,408,| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,460,if( Long.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,462,return Float.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,463,|| Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,410,f (Boolean.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,465,if( Boolean.TYPE.equals( cls ) )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,413,f (Double.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,469,if( Double.TYPE.equals( cls ) )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,416,f (Float.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,417,eturn Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,473,if( Float.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,475,return Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,419,f (Character.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,420,eturn Integer.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,421,| Long.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,422,| Float.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,423,| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,477,if( Character.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,479,return Integer.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,480,|| Long.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,481,|| Float.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,482,|| Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,425,f (Short.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,426,eturn Integer.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,427,| Long.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,428,| Float.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,429,| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,484,if( Short.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,486,return Integer.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,487,|| Long.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,488,|| Float.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,489,|| Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,431,f (Byte.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,432,eturn Short.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,433,| Integer.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,434,| Long.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,435,| Float.TYPE.equals(toClass)
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,436,| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,491,if( Byte.TYPE.equals( cls ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,493,return Short.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,494,|| Integer.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,495,|| Long.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,496,|| Float.TYPE.equals( toClass )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,497,|| Double.TYPE.equals( toClass );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,441,eturn toClass.isAssignableFrom(cls);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,502,return toClass.isAssignableFrom( cls );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,445, <p>Converts the specified primitive Class object to its corresponding
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,446, wrapper Class object.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,448," <p>NOTE: From v2.2, this method handles <code>Void.TYPE</code>,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,449, returning <code>Void.TYPE</code>.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,506,* <p>Converts the specified primitive Class object to its corresponding wrapper Class object.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,507,* <p/>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,508,"* <p>NOTE: From v2.2, this method handles <code>Void.TYPE</code>, returning <code>Void.TYPE</code>.</p>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,451," @param cls  the class to convert, may be null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,452, @return the wrapper class for <code>cls</code> or <code>cls</code> if
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,453, <code>cls</code> is not a primitive. <code>null</code> if null input.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,510,"* @param cls the class to convert, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,511,* @return the wrapper class for <code>cls</code> or <code>cls</code> if <code>cls</code> is not a primitive.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,512,*         <code>null</code> if null input.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,456,ublic static Class primitiveToWrapper(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,515,public static Class primitiveToWrapper( Class cls )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,458,f (cls != null && cls.isPrimitive()) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,459,onvertedClass = (Class) primitiveWrapperMap.get(cls);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,518,if( cls != null && cls.isPrimitive() )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,520,convertedClass = ( Class ) primitiveWrapperMap.get( cls );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,465, <p>Converts the specified array of primitive Class objects to an array of
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,466, its corresponding wrapper Class objects.</p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,526,* <p>Converts the specified array of primitive Class objects to an array of its corresponding wrapper Class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,527,* objects.</p>
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,468," @param classes  the class array to convert, may be null or empty"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,469," @return an array which contains for each given class, the wrapper class or"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,470, the original class if class is not a primitive. <code>null</code> if null input.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,471, Empty array if an empty array passed in.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,529,"* @param classes the class array to convert, may be null or empty"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,530,"* @return an array which contains for each given class, the wrapper class or the original class if class is not a"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,531,*         primitive. <code>null</code> if null input. Empty array if an empty array passed in.
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,474,ublic static Class[] primitivesToWrappers(Class[] classes) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,475,f (classes == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,534,public static Class[] primitivesToWrappers( Class[] classes )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,536,if( classes == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,479,f (classes.length == 0) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,540,if( classes.length == 0 )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,484,or (int i=0; i < classes.length; i++) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,545,for( int i = 0; i < classes.length; i++ )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,495," @param cls  the class to check, may be null"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,496," @return <code>true</code> if the class is an inner or static nested class,"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,497,  false if not or <code>null</code>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,558,"* @param cls the class to check, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,559,"* @return <code>true</code> if the class is an inner or static nested class, false if not or <code>null</code>"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,499,ublic static boolean isInnerClass(Class cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,500,f (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,561,public static boolean isInnerClass( Class cls )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,563,if( cls == null )
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,503,eturn cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,567,return cls.getName().indexOf( INNER_CLASS_SEPARATOR_CHAR ) >= 0;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,571,* Returns the class represented by <code>className</code> using the <code>classLoader</code>.  This implementation
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,572,"* supports names like ""<code>java.lang.String[]</code>"" as well as ""<code>[Ljava.lang.String;</code>""."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,574,* @param classLoader the class loader to use to load the class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,575,* @param className   the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,576,* @param initialize  whether the class must be initialized
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,577,* @return the class represented by <code>className</code> using the <code>classLoader</code>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,578,* @throws ClassNotFoundException if the class is not found
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,580,"public static Class getClass( ClassLoader classLoader, String className, boolean initialize )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,581,throws ClassNotFoundException
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,583,Class clazz;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,584,if( abbreviationMap.containsKey( className ) )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,586,"clazz = Class.forName( ""["" + abbreviationMap.get( className ), initialize, classLoader ).getComponentType();"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,588,else
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,590,"clazz = Class.forName( toProperClassName( className ), initialize, classLoader );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,592,return clazz;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,596,* Returns the (initialized) class represented by <code>className</code> using the <code>classLoader</code>.  This
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,597,"* implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,598,"* ""<code>[Ljava.lang.String;</code>""."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,600,* @param classLoader the class loader to use to load the class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,601,* @param className   the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,602,* @return the class represented by <code>className</code> using the <code>classLoader</code>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,603,* @throws ClassNotFoundException if the class is not found
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,605,"public static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,607,"return getClass( classLoader, className, true );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,611,* Returns the (initialized )class represented by <code>className</code> using the current thread's context class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,612,"* loader.  This implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,613,"* ""<code>[Ljava.lang.String;</code>""."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,615,* @param className the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,616,* @return the class represented by <code>className</code> using the current thread's context class loader
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,617,* @throws ClassNotFoundException if the class is not found
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,619,public static Class getClass( String className ) throws ClassNotFoundException
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,621,return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,622,"Thread.currentThread().getContextClassLoader(), className, true );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,626,* Returns the class represented by <code>className</code> using the current thread's context class loader. This
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,627,"* implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,628,"* ""<code>[Ljava.lang.String;</code>""."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,630,* @param className  the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,631,* @param initialize whether the class must be initialized
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,632,* @return the class represented by <code>className</code> using the current thread's context class loader
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,633,* @throws ClassNotFoundException if the class is not found
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,635,"public static Class getClass( String className, boolean initialize ) throws ClassNotFoundException"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,637,return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,638,"Thread.currentThread().getContextClassLoader(), className, initialize );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,641,private static String toProperClassName( String className )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,643,className = StringUtils.deleteWhitespace( className );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,644,if( className == null )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,646,"throw new NullArgumentException( ""className"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,648,"else if( className.endsWith( ""[]"" ) )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,650,final StringBuffer classNameBuffer = new StringBuffer();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,651,"while( className.endsWith( ""[]"" ) )"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,653,"className = className.substring( 0, className.length() - 2 );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,654,"classNameBuffer.append( ""["" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,656,final String abbreviation = ( String ) abbreviationMap.get( className );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,657,if( abbreviation != null )
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,659,classNameBuffer.append( abbreviation );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,661,else
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,663,"classNameBuffer.append( ""L"" ).append( className ).append( "";"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,665,className = classNameBuffer.toString();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,668,return className;
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,395,public void testGetClassClassNotFound() throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,396,"assertGetClassThrowsClassNotFound( ""bool"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,397,"assertGetClassThrowsClassNotFound( ""bool[]"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,398,"assertGetClassThrowsClassNotFound( ""integer[]"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,401,public void testGetClassInvalidArguments() throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,402,assertGetClassThrowsIllegalArgument( null );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,403,"assertGetClassThrowsClassNotFound( ""[][][]"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,404,"assertGetClassThrowsClassNotFound( ""[[]"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,405,"assertGetClassThrowsClassNotFound( ""["" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,406,"assertGetClassThrowsClassNotFound( ""java.lang.String]["" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,407,"assertGetClassThrowsClassNotFound( "".hello.world"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,408,"assertGetClassThrowsClassNotFound( ""hello..world"" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,411,public void testWithInterleavingWhitespace() throws ClassNotFoundException {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,412,"assertEquals( int[].class, ClassUtils.getClass( "" int [ ] "" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,413,"assertEquals( long[].class, ClassUtils.getClass( ""\rlong\t[\n]\r"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,414,"assertEquals( short[].class, ClassUtils.getClass( ""\tshort                \t\t[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,415,"assertEquals( byte[].class, ClassUtils.getClass( ""byte[\t\t\n\r]   "" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,418,public void testGetClassByNormalNameArrays() throws ClassNotFoundException {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,419,"assertEquals( int[].class, ClassUtils.getClass( ""int[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,420,"assertEquals( long[].class, ClassUtils.getClass( ""long[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,421,"assertEquals( short[].class, ClassUtils.getClass( ""short[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,422,"assertEquals( byte[].class, ClassUtils.getClass( ""byte[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,423,"assertEquals( char[].class, ClassUtils.getClass( ""char[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,424,"assertEquals( float[].class, ClassUtils.getClass( ""float[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,425,"assertEquals( double[].class, ClassUtils.getClass( ""double[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,426,"assertEquals( boolean[].class, ClassUtils.getClass( ""boolean[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,427,"assertEquals( String[].class, ClassUtils.getClass( ""java.lang.String[]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,430,public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,431,"assertEquals( int[][].class, ClassUtils.getClass( ""int[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,432,"assertEquals( long[][].class, ClassUtils.getClass( ""long[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,433,"assertEquals( short[][].class, ClassUtils.getClass( ""short[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,434,"assertEquals( byte[][].class, ClassUtils.getClass( ""byte[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,435,"assertEquals( char[][].class, ClassUtils.getClass( ""char[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,436,"assertEquals( float[][].class, ClassUtils.getClass( ""float[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,437,"assertEquals( double[][].class, ClassUtils.getClass( ""double[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,438,"assertEquals( boolean[][].class, ClassUtils.getClass( ""boolean[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,439,"assertEquals( String[][].class, ClassUtils.getClass( ""java.lang.String[][]"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,442,public void testGetClassWithArrayClasses2D() throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,443,assertGetClassReturnsClass( String[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,444,assertGetClassReturnsClass( int[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,445,assertGetClassReturnsClass( long[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,446,assertGetClassReturnsClass( short[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,447,assertGetClassReturnsClass( byte[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,448,assertGetClassReturnsClass( char[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,449,assertGetClassReturnsClass( float[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,450,assertGetClassReturnsClass( double[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,451,assertGetClassReturnsClass( boolean[][].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,454,public void testGetClassWithArrayClasses() throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,455,assertGetClassReturnsClass( String[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,456,assertGetClassReturnsClass( int[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,457,assertGetClassReturnsClass( long[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,458,assertGetClassReturnsClass( short[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,459,assertGetClassReturnsClass( byte[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,460,assertGetClassReturnsClass( char[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,461,assertGetClassReturnsClass( float[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,462,assertGetClassReturnsClass( double[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,463,assertGetClassReturnsClass( boolean[].class );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,466,public void testGetClassRawPrimitives() throws ClassNotFoundException {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,467,"assertEquals( int.class, ClassUtils.getClass( ""int"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,468,"assertEquals( long.class, ClassUtils.getClass( ""long"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,469,"assertEquals( short.class, ClassUtils.getClass( ""short"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,470,"assertEquals( byte.class, ClassUtils.getClass( ""byte"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,471,"assertEquals( char.class, ClassUtils.getClass( ""char"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,472,"assertEquals( float.class, ClassUtils.getClass( ""float"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,473,"assertEquals( double.class, ClassUtils.getClass( ""double"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,474,"assertEquals( boolean.class, ClassUtils.getClass( ""boolean"" ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,477,private void assertGetClassReturnsClass( Class c ) throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,478,"assertEquals( c, ClassUtils.getClass( c.getName() ) );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,481,"private void assertGetClassThrowsException( String className, Class exceptionType ) throws Exception {"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,482,try {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,483,ClassUtils.getClass( className );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,484,"fail( ""ClassUtils.getClass() should fail with an exception of type "" + exceptionType.getName() + "" when given class name \"""" + className + ""\""."" );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,486,catch( Exception e ) {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,487,assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,491,private void assertGetClassThrowsIllegalArgument( String className ) throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,492,"assertGetClassThrowsException( className, IllegalArgumentException.class );"
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,495,private void assertGetClassThrowsClassNotFound( String className ) throws Exception {
True,src/test/org/apache/commons/lang/ClassUtilsTest.java,src/test/org/apache/commons/lang/ClassUtilsTest.java,496,"assertGetClassThrowsException( className, ClassNotFoundException.class );"

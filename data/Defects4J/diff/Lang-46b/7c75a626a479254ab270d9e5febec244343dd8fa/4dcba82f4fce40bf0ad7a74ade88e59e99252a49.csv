is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,57,import java.io.PrintStream;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,58,import java.io.PrintWriter;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,59,import java.io.StringWriter;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,60,mport java.io.PrintWriter;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,61,mport java.io.StringWriter;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,377,* Prints a compact stack trace for the root cause of a throwable.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,378,* The compact stack trace starts with the root cause and prints
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,379,* stack frames up to the place where it was caught and wrapped.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,380,* Then it prints the wrapped exception and continues with stack frames
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,381,"* until the wrapper exception is caught and wrapped again, etc."
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,382,* <p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,383,* The method is equivalent to t.printStackTrace() for throwables
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,384,* that don't have nested causes.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,386,"public static void printRootCauseStackTrace(Throwable t, PrintStream stream)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,388,String trace[] = getRootCauseStackTrace(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,389,for (int i = 0; i < trace.length; i++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,390,stream.println(trace[i]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,392,stream.flush();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,396,"* Equivalent to printRootCauseStackTrace(t, System.err)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,398,public static void printRootCauseStackTrace(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,400,"printRootCauseStackTrace(t, System.err);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,404,"* Same as printRootCauseStackTrace(t, stream), except it takes"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,405,* a PrintWriter as an argument.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,407,"public static void printRootCauseStackTrace(Throwable t, PrintWriter writer)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,409,String trace[] = getRootCauseStackTrace(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,410,for (int i = 0; i < trace.length; i++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,411,writer.println(trace[i]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,413,writer.flush();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,418,* Creates a compact stack trace for the root cause of the supplied
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,419,* throwable.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,421,"* See <code>printRootCauseStackTrace(Throwable t, PrintStream s)</code>"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,423,public static String[] getRootCauseStackTrace(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,425,Throwable throwables[] = getThrowables(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,426,int count = throwables.length;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,427,ArrayList frames = new ArrayList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,428,List nextTrace = getStackFrameList(throwables[count-1]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,429,for (int i = count; --i >= 0;){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,430,List trace = nextTrace;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,431,if (i != 0){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,432,nextTrace = getStackFrameList(throwables[i-1]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,433,"removeCommonFrames(trace, nextTrace);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,435,if (i == count - 1){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,436,frames.add(throwables[i].toString());
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,438,else {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,439,"frames.add("" [wrapped] "" + throwables[i].toString());"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,441,for (int j = 0; j < trace.size(); j++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,442,frames.add(trace.get(j));
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,445,return (String[]) frames.toArray(new String[0]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,449,"* Given two stack traces, removes common frames from the cause trace."
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,454,"private static void removeCommonFrames(List causeFrames, List wrapperFrames)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,456,int causeFrameIndex = causeFrames.size() - 1;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,457,int wrapperFrameIndex = wrapperFrames.size() - 1;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,458,while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,460,// Remove the frame from the cause trace if it is the same
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,461,// as in the wrapper trace
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,462,String causeFrame = (String)causeFrames.get(causeFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,463,String wrapperFrame = (String)wrapperFrames.get(wrapperFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,464,if (causeFrame.equals(wrapperFrame)){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,465,causeFrames.remove(causeFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,467,causeFrameIndex--;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,468,wrapperFrameIndex--;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,516,* Produces a List of stack frames - the message is not included.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,517,* This works in most cases - it will only fail if the exception message
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,518,"* contains a line that starts with:  ""   at""."
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,523,static List getStackFrameList(Throwable t){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,524,String stackTrace = getStackTrace(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,525,String linebreak = SystemUtils.LINE_SEPARATOR;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,526,"StringTokenizer frames = new StringTokenizer(stackTrace, linebreak);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,527,List list = new LinkedList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,528,boolean traceStarted = false;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,529,while (frames.hasMoreTokens())
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,531,String token = frames.nextToken();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,532,// Determine if the line starts with <whitespace>at
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,533,"int at = token.indexOf(""at"");"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,534,"if (at != -1 && token.substring(0, at).trim().length() == 0){"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,535,traceStarted = true;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,536,list.add(token);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,538,else if (traceStarted){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,539,break;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,542,return list;
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,57,import java.io.PrintWriter;
False,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,86,ithoutCause = new ExceptionWithoutCause();
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,87,withoutCause = createExceptionWithoutCause();
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,92,private Throwable createExceptionWithoutCause(){
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,93,try {
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,94,throw new ExceptionWithoutCause();
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,96,catch (Throwable t){
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,97,return t;
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,101,private Throwable createExceptionWithCause(){
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,102,try {
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,103,try {
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,104,throw new ExceptionWithCause(createExceptionWithoutCause());
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,106,catch (Throwable t){
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,107,throw new ExceptionWithCause(t);
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,110,catch (Throwable t){
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,111,return t;
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,134,public void testPrintThrowables()
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,136,Throwable withCause = createExceptionWithCause();
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,137,"ExceptionUtils.printRootCauseStackTrace(withCause,"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,138,new PrintWriter(System.out));
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,139,"ExceptionUtils.printRootCauseStackTrace(withoutCause,"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,140,System.out);

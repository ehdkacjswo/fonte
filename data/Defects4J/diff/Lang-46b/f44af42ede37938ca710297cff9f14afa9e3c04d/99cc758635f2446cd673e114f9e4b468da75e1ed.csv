is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,546,ry {
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,547,"ethod mth = other.getClass().getMethod(""getName"", null);"
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,548,"tring name = (String) mth.invoke(other, null);"
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,549,eturn iName.equals(name);
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,550, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,551,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,552, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,553,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,554, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,555,/ ignore - should never happen
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,546,if (other.getClass().getName().equals(this.getClass().getName()) == false) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,547,return false;
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,557,eturn false;
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,549,return iName.equals( getNameInOtherClassLoader(other) );
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,568,"* <p>If the parameter is in a different class loader than this instance,"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,569,* reflection is used to compare the names.</p>
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,582,if (other.getClass() != this.getClass()) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,583,if (other.getClass().getName().equals(this.getClass().getName())) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,584,return iName.compareTo( getNameInOtherClassLoader(other) );
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,590,private String getNameInOtherClassLoader(Object other) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,591,try {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,592,"Method mth = other.getClass().getMethod(""getName"", null);"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,593,"String name = (String) mth.invoke(other, null);"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,594,return name;
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,595,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,596,// ignore - should never happen
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,597,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,598,// ignore - should never happen
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,599,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,600,// ignore - should never happen
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,602,"throw new IllegalStateException(""This should not happen"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,546,ry {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,547,"ethod mth = other.getClass().getMethod(""getName"", null);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,548,"tring name = (String) mth.invoke(other, null);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,549,eturn iName.equals(name);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,550, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,551,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,552, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,553,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,554, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,555,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,557,eturn false;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,546,return iName.equals( getNameInOtherClassLoader(other) );
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,565,"* <p>If the parameter is in a different class loader than this instance,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,566,* reflection is used to compare the names.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,579,if (other.getClass() != this.getClass()) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,580,if (other.getClass().getName().equals(this.getClass().getName())) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,581,return iName.compareTo( getNameInOtherClassLoader(other) );
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,587,private String getNameInOtherClassLoader(Object other) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,588,try {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,589,"Method mth = other.getClass().getMethod(""getName"", null);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,590,"String name = (String) mth.invoke(other, null);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,591,return name;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,592,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,593,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,594,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,595,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,596,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,597,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,599,"throw new IllegalStateException(""This should not happen"");"
False,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,447,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);
False,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,448,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);
False,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,449,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,447,this.testWithDifferentClassLoaders(ColorEnum.BLUE);
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,448,this.testWithDifferentClassLoaders(ColorEnum.GREEN);
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,449,this.testWithDifferentClassLoaders(ColorEnum.RED);
False,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,452,"oid testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,"
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,452,"void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,"
False,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,470,"/ the real test, part 3."
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,473,"// the real test, part 3 - testing equals(Object)"
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,484,"// the real test, part 4 - testing compareTo(Object) == 0"
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,485,falseCount = 0;
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,486,for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,487,ColorEnum element = (ColorEnum) iter.next();
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,488,if (!colorEnum.equals(element)) {
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,489,falseCount++;
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,490,assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);
True,src/test/org/apache/commons/lang/enum/EnumTest.java,src/test/org/apache/commons/lang/enum/EnumTest.java,493,"assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);"
False,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,445,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);
False,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,446,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);
False,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,447,his.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,445,this.testWithDifferentClassLoaders(ColorEnum.BLUE);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,446,this.testWithDifferentClassLoaders(ColorEnum.GREEN);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,447,this.testWithDifferentClassLoaders(ColorEnum.RED);
False,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,450,"oid testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,450,"void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,"
False,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,468,"/ the real test, part 3."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,471,"// the real test, part 3 - testing equals(Object)"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,482,"// the real test, part 4 - testing compareTo(Object) == 0"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,483,falseCount = 0;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,484,for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,485,ColorEnum element = (ColorEnum) iter.next();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,486,if (!colorEnum.equals(element)) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,487,falseCount++;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,488,assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,491,"assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);"

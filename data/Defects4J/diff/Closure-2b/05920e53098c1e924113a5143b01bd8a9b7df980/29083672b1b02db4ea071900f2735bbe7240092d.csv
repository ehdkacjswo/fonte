is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,136, subtrees of the node that is also represented by another control flow graph
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,137, node.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,136,* subtrees of the node that are also represented by other
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,137,* control flow graph nodes.
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,139," <p>For example, traversing an IF node as root will visit the two subtree"
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,139,"* <p>For example, traversing an IF node as root will visit the two subtrees"
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,141, {@link ControlFlowGraph.Branch#ON_FALSE} edge.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,141,* {@link ControlFlowGraph.Branch#ON_FALSE} edges.
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,168,/ is bleed into the local scope and parameters has been assigned
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,168,// bleeds into the local scope and parameters are assigned
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,172,/ control is going into the function's body represent by the second
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,172,"// control is going into the function's body, represented by the second"
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,178,/ Theses control structure is represented by its node that holds the
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,178,// These control structures are represented by a node that holds the
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,183,/ The FOR(;;) node differs from other control structure in that
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,184,/ it has a initialization and a increment statement. Those
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,185,/ two statements have its corresponding CFG nodes to represent them.
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,186,/ The FOR node represents the condition check for each iteration.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,183,// The FOR(;;) node differs from other control structures in that
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,184,// it has an initialization and an increment statement. Those
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,185,// two statements have corresponding CFG nodes to represent them.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,186,// The FOR node only represents the condition check for each iteration.
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,113," Tries to remove n if an unconditional branch node (break, continue or"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,114," return) if the target of n is the same as the the follow of n. That is, if"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,115," we remove n, the control flow remains the same. Also if n targets to"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,113,"* Tries to remove n if it is an unconditional branch node (break, continue,"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,114,* or return) and the target of n is the same as the the follow of n.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,115,"* That is, if removing n preserves the control flow. Also if n targets"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,122, where all 3 break's are useless. The order of removal matters. When we
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,122,"* where all 3 breaks are useless, then the order of removal matters. When we"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,133," For each of the unconditional branching control flow node, check to see"
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,133,"* For each unconditional branching control flow node, check to see"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,139, much nicer.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,139,* much more nicely.
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,162,/ branches to the same node. If removing it the control flow still
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,163,/ branches to that same node. It is safe to remove it.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,162,// branches to the same node. If after removing it control still
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,163,"// branches to the same node, it is safe to remove."
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,201,/ TODO(user): This is a problem with removeNoOpStatements. Everything
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,202,/ every expression in a FOR-IN header looks like side effect free on it's
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,203,/ own.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,201,// TODO(user): This is a problem with removeNoOpStatements.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,202,// Every expression in a FOR-IN header looks side effect free on its own.
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,211,/ can get even more trickier and code size might actually increase.
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,210,// can get even more tricky and code size might actually increase.
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,239,/ which resulted in zero change in the AST but triggered
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,238,// which resulted in zero changes to the AST but triggered

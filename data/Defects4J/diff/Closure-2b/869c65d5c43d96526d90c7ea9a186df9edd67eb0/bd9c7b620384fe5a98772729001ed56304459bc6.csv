is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,131,"// If the function references ""arguments"" directly in the function"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,132,boolean referencesArguments = NodeUtil.isNameReferenced(
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,133,"block, ""arguments"", NodeUtil.MATCH_NOT_FUNCTION);"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,135,"// or it references ""eval"" or one of its names anywhere."
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,135,"eturn n.getString().equals(""arguments"")"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,136,"| n.getString().equals(""eval"")"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,137,| n.getString().equals(fnName)
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,140,"return n.getString().equals(""eval"")"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,141,|| (!fnName.isEmpty()
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,142,&& n.getString().equals(fnName))
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,145,"eturn !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,150,return !referencesArguments
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,151,"&& !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,565,"odeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias) {"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,571,"NodeTraversal t, Node callNode, final Node fnNode,"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,572,Set<String> namesToAlias) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,580,oolean callerContainsFunction = false;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,587,boolean forbidTemps = false;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,585,allerContainsFunction = NodeUtil.containsFunction(fnCallerBody);
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,592,// Don't allow any new vars into a scope that contains eval or one
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,593,// that contains functions (excluding the function being inlined).
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,594,Predicate<Node> match = new Predicate<Node>(){
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,595,@Override
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,596,public boolean apply(Node n) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,597,if (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,598,"return n.getString().equals(""eval"");"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,600,if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,601,return n != fnNode;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,603,return false;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,606,"forbidTemps = NodeUtil.has(fnCallerBody,"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,607,"match, NodeUtil.MATCH_NOT_FUNCTION);"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,588,f (fnContainsVars && callerContainsFunction) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,610,if (fnContainsVars && forbidTemps) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,592,"/ If the caller contains functions, verify we aren't adding any"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,614,"// If the caller contains functions or evals, verify we aren't adding any"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,594,f (callerContainsFunction) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,616,if (forbidTemps) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,71,// Function declarations must be rewritten as function expressions as
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,72,// they will be within a block and normalization prevents function
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,73,// declarations within block as browser implementations vary.
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,74,rewriteFunctionDeclarations(newFnNode.getLastChild());
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,118,* @param n The node to inspect
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,120,private void rewriteFunctionDeclarations(Node n) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,121,if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,122,if (NodeUtil.isFunctionDeclaration(n)) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,123,// Rewrite: function f() {} ==> var f = function() {}
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,124,Node fnNameNode = n.getFirstChild();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,126,Node var = new Node(Token.VAR).copyInformationFrom(n);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,127,"Node name = Node.newString(Token.NAME, fnNameNode.getString())"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,128,.copyInformationFrom(fnNameNode);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,130,"fnNameNode.setString("""");"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,131,"// Add the VAR, remove the FUNCTION"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,132,"n.getParent().replaceChild(n, var);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,133,var.addChildToFront(name);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,134,// readd the function as a function expression
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,135,name.addChildToFront(n);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,137,return;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,140,"for (Node c = n.getFirstChild(), next; c != null; c = next) {"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,141,"next = c.getNext(); // We may rewrite ""c"""
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,142,rewriteFunctionDeclarations(c);
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1006,"{function x$$inline_1(){var a$$inline_2;return true}x$$inline_1}"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1006,"""{var x$$inline_1 = function(){"" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1007,"""var a$$inline_2;return true};x$$inline_1}"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1541,"ssertEquals(0, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1542,"String message = ""Unexpected errors: "";"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1543,JSError[] errs = compiler.getErrors();
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1544,for (int i = 0; i < errs.length; i++){
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1545,"message += ""\n"" + errs[i].toString();"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1547,"assertEquals(message, 0, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,164,public void testMutateFunctionDefinition() {
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,165,// function declarations are rewritten as function
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,166,// expressions
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,167,helperMutate(
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,168,"""function foo(a){function g(){}}; foo(1);"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,169,"""{var g$$inline_3=function(){};}"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,170,"""foo"", null);"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,231,/ closure factories: don't inline closure with locals.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,231,// closure factories: don't inline closure with locals in global scope.
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,250,ublic void testInlineFunctions16() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,251,/ watch out for closures that are deeper in the function
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,250,public void testInlineFunctions15d() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,251,// closure factories: don't inline functions with vars.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,252,"test(""function foo(){var x; return function(a){return a+1}}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,253,"""var b=function(){return c};"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,254,"""function _x(){ var d=b()+foo() }"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,256,"""function foo(){var x; return function(a){return a+1}}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,257,"""function _x(){ var d=c+foo() }"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,260,public void testInlineFunctions16a() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,253,"var d=foo(e)"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,262,"""var d=foo(e)"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,265,public void testInlineFunctions16b() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,266,"test(""function foo(){return window.bar(function(){c()})}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,267,"""var d=foo(e)"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,268,"""var d=window.bar(function(){c()})"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1407,/ Don't inline if local names might need to be captured.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1422,// Don't inline if local names might be captured.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1426,public void testComplexFunctionWithFunctionDefinition2a() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1427,// Don't inline if local names might be captured.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1428,"testSame(""(function(){"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1429,"""var f = function(a){call(function(){return})};f()})()"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1555,/ Can't inline functions that return inner functions into non-global scope.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1576,"// TODO(johnlenz): Can inline, not temps needed."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1577,"testSame(""function _x() {"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1578,"""  ((function(){return function(){foo()}})())();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1582,public void testFunctionExpressionCallInlining11d() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1583,"// TODO(johnlenz): Can inline into a function containing eval, if"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1584,// no names are introduced.
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1557,"((function(){return function(){foo()}})())();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1586,"""  eval();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1587,"""  ((function(){return function(){foo()}})())();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1591,public void testFunctionExpressionCallInlining11e() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1592,"// No, don't inline into a function containing eval,"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1593,// if no temps are introduced.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1594,"testSame(""function _x() {"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1595,"""  eval();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1596,"""  ((function(a){return function(){foo()}})())();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1944,public void testAnonymous1() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1945,"test(""(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1946,"""{var a$$inline_2=10;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1947,"""{var b$$inline_3=a$$inline_2;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1948,"""a$$inline_2++;alert(b$$inline_3)}}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1951,public void testAnonymous2() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1952,"testSame(""(function(){eval();(function(){var b=a;a++;alert(b)})()})();"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1955,public void testAnonymous3() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1956,// Introducing a new value into is tricky
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1957,"testSame(""(function(){var a=10;(function(){arguments;})()})();"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1958,"test(""(function(){(function(){arguments;})()})();"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1959,"""{(function(){arguments;})()}"");"

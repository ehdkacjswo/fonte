is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,289,* Runs a given compiler-pass by calling its {@code process()} method.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,290,* @param pass The pass to be run.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,292,abstract void process(CompilerPass pass);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,755,@Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,825,inal PassFactory closurePrimitives =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,826,"ew PassFactory(""processProvidesAndRequires"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,825,final HotSwapPassFactory closurePrimitives =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,826,"new HotSwapPassFactory(""processProvidesAndRequires"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,828,rotected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,828,protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,834,eturn new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,834,return new HotSwapCompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,840,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,841,"public void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,842,"pass.hotSwapScript(scriptRoot, globalScope);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,952,rivate final PassFactory checkVars =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,953,"ew PassFactory(""checkVars"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,956,private final HotSwapPassFactory checkVars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,957,"new HotSwapPassFactory(""checkVars"", true) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,955,rotected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,959,protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1016,** Run type inference. */
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1017,inal PassFactory inferTypes =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1018,"ew PassFactory(""inferTypes"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1020,/** Runs type inference. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1021,final HotSwapPassFactory inferTypes =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1022,"new HotSwapPassFactory(""inferTypes"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1020,rotected CompilerPass createInternal(final AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1021,eturn new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1024,protected HotSwapCompilerPass createInternal(final AbstractCompiler
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1025,compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1026,return new HotSwapCompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1034,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1035,"public void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1036,// TODO(bashir): Extra warnings about undefined types are reported
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1037,// when doing inferTypes from scriptRoot. One solution is to do
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1038,// inferTypes from the AST root instead of scriptRoot but that
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1039,// approach is very slow!
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1040,makeTypeInference(compiler).inferTypes(scriptRoot);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1050,rivate final PassFactory checkTypes =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1051,"ew PassFactory(""checkTypes"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1063,private final HotSwapPassFactory checkTypes =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1064,"new HotSwapPassFactory(""checkTypes"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1053,rotected CompilerPass createInternal(final AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1054,eturn new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1066,protected HotSwapCompilerPass createInternal(final AbstractCompiler
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1067,compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1068,return new HotSwapCompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1078,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1079,"public void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1080,"makeTypeCheck(compiler).check(scriptRoot, false);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2156,* A pass-factory that is good for {@code HotSwapCompilerPass} passes.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2158,abstract static class HotSwapPassFactory extends PassFactory {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2160,"HotSwapPassFactory(String name, boolean isOneTimePass) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2161,"super(name, isOneTimePass);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2164,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2165,protected abstract HotSwapCompilerPass createInternal(AbstractCompiler
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2166,compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2168,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2169,HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2170,return this.createInternal(compiler);
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,24, <p>The only method is {@code hotSwapScript} which runs this pass on
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,24,* <p>The additional method is {@code hotSwapScript} which runs this pass on
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,35,ublic interface HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,35,public interface HotSwapCompilerPass extends CompilerPass {
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,40," @param root Root node corresponding to the file that is modified, should be"
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,41,     of type {@code Token.SCRIPT}.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,40,"* @param scriptRoot Root node corresponding to the file that is modified,"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,41,*     should be of type {@code Token.SCRIPT}.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,44,"oid hotSwapScript(Node root, Scope globalScope);"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,44,"void hotSwapScript(Node scriptRoot, Scope globalScope);"
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,75,@Override
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,76,HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,77,return self.getHotSwapPass(compiler);
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,98,* Any factory whose CompilerPass has a corresponding hot-swap version should
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,99,* override this.
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,101,* @param compiler The compiler that can has been used to do the full compile.
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,103,HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,104,// TODO(bashir): If in future most of PassFactory's in DefaultPassConfig
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,105,"// turns out to be DefaultPassConfig.HotSwapPassFactory, we should probably"
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,106,// change the implementaion here by the one in HotSwapPassFactory.
True,src/com/google/javascript/jscomp/PassFactory.java,src/com/google/javascript/jscomp/PassFactory.java,107,return null;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,39,mplements CompilerPass {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,39,implements HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,161,@Override
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,162,"public void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,163,// TODO(bashir): Implement a real hot-swap version instead and make it fully
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,164,// consistent with the full version.
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,165,this.compiler.process(this);
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,34,"lass VarCheck extends AbstractPostOrderCallback implements CompilerPass,"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,34,class VarCheck extends AbstractPostOrderCallback implements
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,"ublic void hotSwapScript(Node root, Scope globalScope) {"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,118,reconditions.checkState(root.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,"public void hotSwapScript(Node scriptRoot, Scope globalScope) {"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,Preconditions.checkState(scriptRoot.getType() == Token.SCRIPT);
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,".traverseWithScope(root, globalScope);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,"t.traverseWithScope(scriptRoot, globalScope);"

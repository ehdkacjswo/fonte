is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,27,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,75,private FunctionContents contents = UnknownFunctionContents.get();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,83,rivate Node sourceNode = null;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,222, Sets the FUNCTION node of this function.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,224,* Sets the contents of this function.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,224,unctionTypeBuilder setSourceNode(@Nullable Node sourceNode) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,225,his.sourceNode = sourceNode;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,226,FunctionTypeBuilder setContents(@Nullable FunctionContents contents) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,227,if (contents != null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,228,this.contents = contents;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,309," If we haven't found a return value yet, try to look at the ""return"""
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,310, statements in the function.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,312,unctionTypeBuilder inferReturnStatementsAsLastResort(
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,313,Nullable Node functionBlock) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,314,f (functionBlock == null || functionBlock.isFromExterns()) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,315,eturn this;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,317,reconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,318,f (returnType == null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,319,oolean hasNonEmptyReturns = false;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,320,ist<Node> worklist = Lists.newArrayList(functionBlock);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,321,hile (!worklist.isEmpty()) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,322,ode current = worklist.remove(worklist.size() - 1);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,323,nt cType = current.getType();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,324,f (cType == Token.RETURN && current.getFirstChild() != null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,325,asNonEmptyReturns = true;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,326,reak;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,327, else if (NodeUtil.isStatementBlock(current) ||
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,328,odeUtil.isControlStructure(current)) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,329,or (Node child = current.getFirstChild();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,330,hild != null; child = child.getNext()) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,331,orklist.add(child);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,336,f (!hasNonEmptyReturns) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,337,eturnType = typeRegistry.getNativeType(VOID_TYPE);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,338,eturnTypeInferred = true;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,341,eturn this;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,575,if (returnType == null &&
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,576,!contents.mayHaveNonEmptyReturns() && !contents.mayBeFromExterns()) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,577,returnType = typeRegistry.getNativeType(VOID_TYPE);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,578,returnTypeInferred = true;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,620,"nType = typeRegistry.createInterfaceType(fnName, sourceNode);"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,594,fnType = typeRegistry.createInterfaceType(
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,595,"fnName, contents.getSourceNode());"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,628,withSourceNode(sourceNode)
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,603,.withSourceNode(contents.getSourceNode())
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,671,"nName, sourceNode, parametersNode, returnType);"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,646,"fnName, contents.getSourceNode(), parametersNode, returnType);"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,683,xistingFn.setSource(sourceNode);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,658,existingFn.setSource(contents.getSourceNode());
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,748,/** Holds data dynamically inferred about functions. */
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,749,static interface FunctionContents {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,750,/** Returns the source node of this function. May be null. */
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,751,Node getSourceNode();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,753,/** Returns if the function may be in externs. */
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,754,boolean mayBeFromExterns();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,756,/** Returns if a return of a real value (not undefined) appears. */
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,757,boolean mayHaveNonEmptyReturns();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,759,/** Gets a list of variables in this scope that are escaped. */
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,760,Iterable<String> getEscapedVarNames();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,763,static class UnknownFunctionContents implements FunctionContents {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,764,private static UnknownFunctionContents singleton =
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,765,new UnknownFunctionContents();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,767,static FunctionContents get() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,768,return singleton;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,771,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,772,public Node getSourceNode() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,773,return null;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,776,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,777,public boolean mayBeFromExterns() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,778,return true;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,781,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,782,public boolean mayHaveNonEmptyReturns() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,783,return true;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,786,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,787,public Iterable<String> getEscapedVarNames() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,788,return ImmutableList.of();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,792,static class AstFunctionContents implements FunctionContents {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,793,private final Node n;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,794,private boolean hasNonEmptyReturns = false;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,795,private Set<String> escapedVarNames;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,797,AstFunctionContents(Node n) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,798,this.n = n;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,801,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,802,public Node getSourceNode() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,803,return n;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,806,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,807,public boolean mayBeFromExterns() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,808,return n.isFromExterns();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,811,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,812,public boolean mayHaveNonEmptyReturns() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,813,return hasNonEmptyReturns;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,816,void recordNonEmptyReturn() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,817,hasNonEmptyReturns = true;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,820,@Override
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,821,public Iterable<String> getEscapedVarNames() {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,822,return escapedVarNames == null
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,823,? ImmutableList.<String>of() : escapedVarNames;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,826,void recordEscapedVarName(String name) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,827,if (escapedVarNames == null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,828,escapedVarNames = Sets.newHashSet();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,830,escapedVarNames.add(name);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,138,* Abstract scoped callback to visit all nodes in post order.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,140,public abstract static class AbstractScopedCallback
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,141,implements ScopedCallback {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,142,@Override
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,143,"public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,144,Node parent) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,145,return true;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,148,@Override
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,149,public void enterScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,151,@Override
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,152,public void exitScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,123,private boolean markedEscaped = false;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,335,/** Record that this is escaped by an inner scope. */
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,336,void markEscaped() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,337,markedEscaped = true;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,341,* Whether this is escaped by an inner scope.
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,342,* Notice that not all scope creators record this information.
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,344,boolean isMarkedEscaped() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,345,return markedEscaped;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,31,mport com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,32,mport com.google.common.collect.ImmutableSet;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,34,mport com.google.common.collect.Multimap;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,35,mport com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,51,mport java.util.Collection;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,55,mport java.util.Set;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,89," Local variables that do not belong to this scope, but are assigned"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,90, in this scope.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,92,"rivate final Multimap<Scope, Var> assignedOuterLocalVars ="
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,93,ashMultimap.create();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,96, Vars that we should not map out type flow for.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,98,rivate final Set<String> unflowableVarNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,104,"his(compiler, cfg, reverseInterpreter, functionScope,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,105,"ssertionFunctionsMap, ImmutableSet.<Var>of());"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,109, @param unflowableVars Do not do infer flow on the types of these vars.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,110, @param assertionFunctionsMap
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,112,/ TODO(nicksantos): Create a builder for this class.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,113,"ypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,114,"everseAbstractInterpreter reverseInterpreter,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,115,"cope functionScope,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,116,"ap<String, AssertionFunctionSpec> assertionFunctionsMap,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,117,ollection<Var> unflowableVars) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,126,or (Var unflowableVar : unflowableVars) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,127,tring name = unflowableVar.getName();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,128,f (functionScope.getVar(name) == unflowableVar) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,129,his.unflowableVarNames.add(name);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,139,f (this.unflowableVarNames.contains(var.getName())) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,100,if (isUnflowable(var)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,162," @return Local variables assigned in this scope, but which are declared in"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,163,     a scope outside of it. Hashed by the scope they're declared in.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,165,"ultimap<Scope, Var> getAssignedOuterLocalVars() {"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,166,eturn assignedOuterLocalVars;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,495,f (var != null && var.isLocal() && var.getScope() != syntacticScope) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,496,"ssignedOuterLocalVars.put(var.getScope(), var);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,644,oolean unflowable =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,645,sInferred && unflowableVarNames.contains(varName);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,594,boolean unflowable = isInferred &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,595,isUnflowable(syntacticScope.getVar(varName));
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1330,f (unflowableVarNames.contains(varName)) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1280,if (isUnflowable(syntacticScope.getVar(varName))) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1286,private static boolean isUnflowable(Var v) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1287,return v != null && v.isLocal() && v.isMarkedEscaped();
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,107,"ssertionFunctionsMap, getUnflowableVars(scope));"
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,107,assertionFunctionsMap);
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,110,scapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,52,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,59,import com.google.javascript.jscomp.FunctionTypeBuilder.AstFunctionContents;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,60,import com.google.javascript.jscomp.NodeTraversal.AbstractScopedCallback;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,146,// Simple properties inferred about functions.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,147,"private final Map<Node, AstFunctionContents> functionAnalysisResults ="
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,148,Maps.newHashMap();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,199,// Run a first-order analysis over the syntax tree.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,200,"(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,201,".process(root.getFirstChild(), root.getLastChild());"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,256,(new FirstOrderFunctionAnalyzer(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,257,"compiler, functionAnalysisResults)).process(null, scriptRoot);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,868,setSourceNode(fnRoot)
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,882,.setContents(getFunctionAnalysisResults(fnRoot))
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,892,inferReturnStatementsAsLastResort(fnBlock)
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1738,AstFunctionContents contents =
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1739,getFunctionAnalysisResults(scope.getRootNode());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1740,if (contents != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1741,for (String varName : contents.getEscapedVarNames()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1742,Var v = scope.getVar(varName);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1743,Preconditions.checkState(v.getScope() == scope);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1744,v.markEscaped();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1817,* Does a first-order function analysis that just looks at simple things
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1818,"* like what variables are escaped, and whether 'this' is used."
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1820,private static class FirstOrderFunctionAnalyzer
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1821,extends AbstractScopedCallback implements CompilerPass {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1822,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1823,"private final Map<Node, AstFunctionContents> data;"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1825,FirstOrderFunctionAnalyzer(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1826,"AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1827,this.compiler = compiler;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1828,this.data = outParam;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1831,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1832,if (externs == null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1833,"NodeTraversal.traverse(compiler, root, this);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1834,} else {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1835,NodeTraversal.traverseRoots(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1836,"compiler, ImmutableList.of(externs, root), this);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1840,@Override public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1841,if (!t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1842,Node n = t.getScopeRoot();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1843,"data.put(n, new AstFunctionContents(n));"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1847,"@Override public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1848,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1849,return;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1852,if (n.getType() == Token.RETURN && n.getFirstChild() != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1853,data.get(t.getScopeRoot()).recordNonEmptyReturn();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1854,} else if (n.getType() == Token.NAME && NodeUtil.isLValue(n)) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1855,String name = n.getString();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1856,Scope scope = t.getScope();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1857,Var var = scope.getVar(name);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1858,if (var != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1859,Scope ownerScope = var.getScope();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1860,if (scope != ownerScope && ownerScope.isLocal()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1861,data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1868,private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1869,if (n == null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1870,return null;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1873,// Sometimes this will return null in things like
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1874,// NameReferenceGraphConstruction that build partial scopes.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1875,return functionAnalysisResults.get(n);
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,621,"function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,621,"""function f(x) { "" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,630,"function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,630,"""function f(x) { "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,621,"function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,621,"""function f(x) { "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,630,"function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,630,"""function f(x) { "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9225,"ssertEquals(0, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9225,assertEquals(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9226,"""unexpected error(s) : "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9227,"Joiner.on("", "").join(compiler.getErrors()),"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9228,"0, compiler.getErrorCount());"

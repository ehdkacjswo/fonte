is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,19,import com.google.common.base.Join;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,21,import com.google.common.collect.BiMap;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,22,import com.google.common.collect.HashBiMap;
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,27,mport com.google.javascript.jscomp.graph.GraphNode;
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,28,mport com.google.javascript.jscomp.graph.SubGraph;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,32,import com.google.javascript.jscomp.graph.GraphNode;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,33,import com.google.javascript.jscomp.graph.SubGraph;
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,117,"rivate Map<JSType, Integer> intForType = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,119,"private BiMap<JSType, Integer> intForType = HashBiMap.create();"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,119,** A map from JSType to BitSet representing the types related to the type. */
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,120,"rivate Map<JSType, BitSet> relatedBitsets = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,122,* A map from JSType to JSTypeBitSet representing the types related
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,123,* to the type.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,125,"private Map<JSType, JSTypeBitSet> relatedBitsets = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,246,** Add supertypes of the type to its BitSet of related types. */
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,251,/** Add supertypes of the type to its JSTypeBitSet of related types. */
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,258,itSet related = relatedBitsets.get(type);
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,259,f (related == null) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,260,elated = new BitSet(intForType.size());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,261,"elatedBitsets.put(type, related);"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,263,if (relatedBitsets.containsKey(type)) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,264,// We only need to generate the bit set once.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,265,return;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,268,JSTypeBitSet related = new JSTypeBitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,269,"relatedBitsets.put(type, related);"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,323,itSet typesInSet = new BitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,330,JSTypeBitSet typesInSet = new JSTypeBitSet(intForType.size());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,326,itSet typesRelatedToSet = new BitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,333,JSTypeBitSet typesRelatedToSet = new JSTypeBitSet(intForType.size());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,355,rivate BitSet getRelated(JSType type) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,356,itSet relatedTypes = new BitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,362,private JSTypeBitSet getRelated(JSType type) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,363,JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,371,"rivate void getRelatedTypesOnNonUnion(JSType type, BitSet relatedTypes) {"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,378,private void getRelatedTypesOnNonUnion(
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,379,"JSType type, JSTypeBitSet relatedTypes) {"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,545,itSet typesSet = new BitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,553,JSTypeBitSet typesSet = new JSTypeBitSet(intForType.size());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,593,// TODO(nicksantos): This line doesn't make sense. It only works if
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,594,// we assume that the type hierarchy is a tree (and thus has a
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,595,// single root). It doesn't work with an arbitrary lattice.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,597,// Consider a class Chimay that extends Beer and implements Expensive.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,598,"// supremum(Chimay, Expensive) == Expensive"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,599,// according to the lattice's supremum op (getLeastSupertype).
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,601,"// And since related types are computed from this result, this"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,602,"// means that we will treat Beer as unrelated to Chimay, which is"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,603,// clearly not correct.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,611,// A BitSet that stores type info. Adds pretty-print routines.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,612,private class JSTypeBitSet extends BitSet {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,614,private JSTypeBitSet(int size) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,615,super(size);
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,618,private JSTypeBitSet() {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,619,super();
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,623,"* Pretty-printing, for diagnostic purposes."
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,625,@Override
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,626,public String toString() {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,627,int from = 0;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,628,int current = 0;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,629,List<String> types = Lists.newArrayList();
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,630,while (-1 != (current = nextSetBit(from))) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,631,types.add(intForType.inverse().get(current).toString());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,632,from = current + 1;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,634,"return Join.join("" && "", types);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,21,mport com.google.common.base.StringUtil;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,25,import java.io.IOException;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,38,private static final char[] HEX_CHARS
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,39,"= { '0', '1', '2', '3', '4', '5', '6', '7',"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,40,"'8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,847,"tringUtil.appendHexJavaScriptRepresentation(sb, c);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,851,"appendHexJavaScriptRepresentation(sb, c);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,859,"tringUtil.appendHexJavaScriptRepresentation(sb, c);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,863,"appendHexJavaScriptRepresentation(sb, c);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,884,"tringUtil.appendHexJavaScriptRepresentation(sb, c);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,888,"appendHexJavaScriptRepresentation(sb, c);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,956,"* @see #appendHexJavaScriptRepresentation(int, Appendable)"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,958,private static void appendHexJavaScriptRepresentation(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,959,"StringBuilder sb, char c) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,960,try {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,961,"appendHexJavaScriptRepresentation(c, sb);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,962,} catch (IOException ex) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,963,// StringBuilder does not throw IOException.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,964,throw new RuntimeException(ex);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,969,* Returns a javascript representation of the character in a hex escaped
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,970,* format.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,972,* @param codePoint The codepoint to append.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,973,* @param out The buffer to which the hex representation should be appended.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,975,private static void appendHexJavaScriptRepresentation(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,976,"int codePoint, Appendable out)"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,977,throws IOException {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,978,if (Character.isSupplementaryCodePoint(codePoint)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,979,// Handle supplementary unicode values which are not representable in
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,980,// javascript.  We deal with these by escaping them as two 4B sequences
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,981,// so that they will round-trip properly when sent from java to javascript
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,982,// and back.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,983,char[] surrogates = Character.toChars(codePoint);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,984,"appendHexJavaScriptRepresentation(surrogates[0], out);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,985,"appendHexJavaScriptRepresentation(surrogates[1], out);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,986,return;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,988,"out.append(""\\u"")"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,989,.append(HEX_CHARS[(codePoint >>> 12) & 0xf])
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,990,.append(HEX_CHARS[(codePoint >>> 8) & 0xf])
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,991,.append(HEX_CHARS[(codePoint >>> 4) & 0xf])
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,992,.append(HEX_CHARS[codePoint & 0xf]);

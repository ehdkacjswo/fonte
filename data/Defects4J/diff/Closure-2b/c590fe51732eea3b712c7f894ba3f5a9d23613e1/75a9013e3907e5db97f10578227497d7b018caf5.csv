is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1070,or (String prop : constraintObj.getOwnPropertyNames()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1071,SType propType = constraintObj.getPropertyType(prop);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1072,f (objType != null && !objType.isPropertyTypeDeclared(prop)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1073,SType typeToInfer = propType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1074,f (!objType.hasProperty(prop)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1075,ypeToInfer = registry.createUnionType(
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1076,"etNativeType(VOID_TYPE), propType);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1070,if (objType != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1071,for (String prop : constraintObj.getOwnPropertyNames()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1072,JSType propType = constraintObj.getPropertyType(prop);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1073,if (!objType.isPropertyTypeDeclared(prop)) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1074,JSType typeToInfer = propType;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1075,if (!objType.hasProperty(prop)) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1076,typeToInfer =
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1077,getNativeType(VOID_TYPE).getLeastSupertype(propType);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1079,"objType.defineInferredProperty(prop, typeToInfer, false, null);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1078,"bjType.defineInferredProperty(prop, typeToInfer, false, null);"

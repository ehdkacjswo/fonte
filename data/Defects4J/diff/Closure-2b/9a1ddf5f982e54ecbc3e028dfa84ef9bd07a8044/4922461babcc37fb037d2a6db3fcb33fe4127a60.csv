is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,194, Normalizes the types of AST nodes in the given tree.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,196,bstract void normalizeNodeTypes(Node root);
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,199, Annotates any nodes to which the coding convention applies so that passes
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,194,"* Normalizes the types of AST nodes in the given tree, and"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,195,* annotates any nodes to which the coding convention applies so that passes
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,202,bstract void annotateCodingConvention(Node root);
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,198,abstract void prepareAst(Node root);
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,2, Copyright 2009 Google Inc.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,17,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,19,mport com.google.javascript.rhino.JSDocInfo;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,20,mport com.google.javascript.rhino.JSTypeExpression;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,21,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,22,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,25, Annotates any nodes to which the coding convention applies so that the
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,26," annotations on the nodes, instead of the coding convention, can be used"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,27, by optimization passes.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,31,/ TODO(nicksantos): This pass should really be merged together with
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,32,/ NodeTypeNormalizer. They really do one task: they fill in information
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,33,/ on the AST that we expect to be there.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,34,lass CodingConventionAnnotator extends NodeTraversal.AbstractPostOrderCallback
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,35,mplements CompilerPass {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,37,rivate CodingConvention convention;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,38,rivate AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,40,ublic CodingConventionAnnotator(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,41,his.compiler = compiler;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,42,his.convention = compiler.getCodingConvention();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,45,Override
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,46,"ublic void process(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,47,f (externs != null) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,48,"odeTraversal.traverse(compiler, externs, this);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,50,f (root != null) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,51,"odeTraversal.traverse(compiler, root, this);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,55,Override
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,56,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,57,nt nType = n.getType();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,58,witch (nType) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,59,ase Token.NAME:
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,60,ase Token.STRING:
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,61,tring nString = n.getString();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,62,f (nType == Token.NAME &&
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,63,.getParent().getType() == Token.CALL &&
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,64,"eval"".equals(nString)) {"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,65,".putBooleanProp(Node.DIRECT_EVAL, true);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,67,f (convention.isConstant(nString)) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,68,".putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,70,reak;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,72,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,73,SDocInfo fnInfo = n.getJSDocInfo();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,74,f (fnInfo == null) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,75,/ Look for the info on other nodes.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,76,f (parent.getType() == Token.ASSIGN) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,77,/ on ASSIGNs
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,78,nInfo = parent.getJSDocInfo();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,79, else if (parent.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,80,/ on var NAME = function() { ... };
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,81,nInfo = parent.getParent().getJSDocInfo();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,85,/ Compute which function parameters are optional and
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,86,/ which are var_args.
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,87,ode args = n.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,88,or (Node arg = args.getFirstChild();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,89,rg != null;
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,90,rg = arg.getNext()) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,91,tring argName = arg.getString();
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,92,STypeExpression typeExpr = fnInfo == null ?
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,93,ull : fnInfo.getParameterType(argName);
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,95,f (convention.isOptionalParameter(arg) ||
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,96,ypeExpr != null && typeExpr.isOptionalArg()) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,97,"rg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,99,f (convention.isVarArgsParameter(arg) ||
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,100,ypeExpr != null && typeExpr.isVarArgs()) {
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,101,"rg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);"
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,104,reak;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1352,oid normalizeNodeTypes(Node root) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1353,"racer tracer = newTracer(""normalizeNodeTypes"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1355,/ TODO(johnlenz): Merge the NodeTypeNormalizer into the AST creator
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1356,/ it doesn't need to be done separately.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1357,ompilerPass pass = new NodeTypeNormalizer();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1358,"ass.process(null, root);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1360,"topTracer(tracer, ""normalizeNodeTypes"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1363,Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1364,oid annotateCodingConvention(Node root) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1365,"racer tracer = newTracer(""annotateCodingConvention"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1366,ompilerPass pass = new CodingConventionAnnotator(this);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1352,void prepareAst(Node root) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1353,"Tracer tracer = newTracer(""prepareAst"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1354,CompilerPass pass = new PrepareAst(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1368,"topTracer(tracer, ""annotateCodingConvention"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1356,"stopTracer(tracer, ""prepareAst"");"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,142,"ompiler, node, new CodingConventionAnnotator(compiler));"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,142,"compiler, node, new PrepareAst.PrepareAnnotations(compiler));"
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,101,ompiler.normalizeNodeTypes(root);
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,102,ompiler.annotateCodingConvention(root);
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,101,compiler.prepareAst(root);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,2, Copyright 2008 Google Inc.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,17,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,19,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,20,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,21,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,27,lass NodeTypeNormalizer implements CompilerPass {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,29,rivate final boolean assertOnChange;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,31,odeTypeNormalizer() {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,32,his(false);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,35,odeTypeNormalizer(boolean forbidChanges) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,36,his.assertOnChange = forbidChanges;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,39,rivate void reportChange() {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,40,f (assertOnChange) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,41,"reconditions.checkState(false, ""normalizeNodeType constraints violated"");"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,45,Override
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,46,"ublic void process(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,47,ormalizeNodeTypes(root);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,48,ormalizeJsDocAnnotations(root);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,52, Normalize where JSDoc annotations appear on the AST.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,54," In the AST that Rhino gives us, it needs to make a distinction"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,55, between jsdoc on the object literal node and jsdoc on the object literal
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,56," value. For example,"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,57, <pre>
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,58, var x = {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,59,   / JSDOC /
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,60,"   a: 'b',"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,61,   c: / JSDOC / 'd'
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,63, </pre>
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,65," But in few narrow cases (in particular, function literals), it's"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,66, a lot easier for us if the doc is attached to the value.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,68,rivate void normalizeJsDocAnnotations(Node n) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,69,f (n.getType() == Token.OBJECTLIT) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,70,or (Node key = n.getFirstChild();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,71,ey != null; key = key.getNext().getNext()) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,72,ode value = key.getNext();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,73,f (key.getJSDocInfo() != null &&
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,74,ey.getNext().getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,75,alue.setJSDocInfo(key.getJSDocInfo());
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,80,/ TODO(johnlenz): Determine if it is possible to simply use the javadoc
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,81,/ everywhere rather than use IS_DISPATCHER.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,83, Translate dispatcher info into the property expected node.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,85,f (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,86,f (n.getType() == Token.ASSIGN) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,87,ode fnNode = n.getLastChild();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,88,reconditions.checkState(fnNode.getType() == Token.FUNCTION);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,89,"nNode.putBooleanProp(Node.IS_DISPATCHER, true);"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,93,or (Node child = n.getFirstChild();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,94,hild != null; child = child.getNext()) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,95,ormalizeJsDocAnnotations(child);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,100, Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,102,rivate void normalizeNodeTypes(Node n) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,103,f (n.getType() == Token.EXPR_VOID) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,104,.setType(Token.EXPR_RESULT);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,105,eportChange();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,108,/ Remove unused properties to minimize differences between ASTs
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,109,/ produced by the two parsers.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,110,f (n.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,111,reconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,114,ormalizeBlocks(n);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,116,or (Node child = n.getFirstChild();
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,117,hild != null; child = child.getNext()) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,118,"/ This pass is run during the CompilerTestCase validation, so this"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,119,/ parent pointer check serves as a more general check.
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,120,reconditions.checkState(child.getParent() == n);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,122,ormalizeNodeTypes(child);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,127," Add blocks to IF, WHILE, DO, etc."
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,129,rivate void normalizeBlocks(Node n) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,130,f (NodeUtil.isControlStructure(n)
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,131,& n.getType() != Token.LABEL
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,132,& n.getType() != Token.SWITCH) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,133,or (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,134,"f (NodeUtil.isControlStructureCodeBlock(n,c) &&"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,135,.getType() != Token.BLOCK) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,136,ode newBlock = new Node(Token.BLOCK);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,137,".replaceChild(c, newBlock);"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,138,f (c.getType() != Token.EMPTY) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,139,ewBlock.addChildrenToFront(c);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,140, else {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,141,ewBlock.setWasEmptyNode(true);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,143, = newBlock;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,144,eportChange();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,2,* Copyright 2008 Google Inc.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,20,import com.google.javascript.rhino.JSDocInfo;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,21,import com.google.javascript.rhino.JSTypeExpression;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,22,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,23,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,26,* Prepare the AST before we do any checks or optimizations on it.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,28,"* This pass must run. It should bring the AST into a consistent state,"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,29,* and add annotations where necessary. It should not make any transformations
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,30,"* on the tree that would lose source information, since we need that source"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,31,* information for checks.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,35,class PrepareAst implements CompilerPass {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,37,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,38,private final boolean assertOnChange;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,40,PrepareAst(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,41,"this(compiler, false);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,44,"PrepareAst(AbstractCompiler compiler, boolean forbidChanges) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,45,this.compiler = compiler;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,46,this.assertOnChange = forbidChanges;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,49,private void reportChange() {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,50,if (assertOnChange) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,51,"Preconditions.checkState(false, ""normalizeNodeType constraints violated"");"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,55,@Override
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,56,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,57,normalizeNodeTypes(root);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,58,if (externs != null) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,59,NodeTraversal.traverse(
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,60,"compiler, externs, new PrepareAnnotations(compiler));"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,62,if (root != null) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,63,NodeTraversal.traverse(
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,64,"compiler, root, new PrepareAnnotations(compiler));"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,69,* Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,71,private void normalizeNodeTypes(Node n) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,72,if (n.getType() == Token.EXPR_VOID) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,73,n.setType(Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,74,reportChange();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,77,// Remove unused properties to minimize differences between ASTs
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,78,// produced by the two parsers.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,79,if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,80,Preconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,83,normalizeBlocks(n);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,85,for (Node child = n.getFirstChild();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,86,child != null; child = child.getNext()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,87,"// This pass is run during the CompilerTestCase validation, so this"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,88,// parent pointer check serves as a more general check.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,89,Preconditions.checkState(child.getParent() == n);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,91,normalizeNodeTypes(child);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,96,"* Add blocks to IF, WHILE, DO, etc."
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,98,private void normalizeBlocks(Node n) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,99,if (NodeUtil.isControlStructure(n)
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,100,&& n.getType() != Token.LABEL
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,101,&& n.getType() != Token.SWITCH) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,102,for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,103,"if (NodeUtil.isControlStructureCodeBlock(n,c) &&"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,104,c.getType() != Token.BLOCK) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,105,Node newBlock = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,106,"n.replaceChild(c, newBlock);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,107,if (c.getType() != Token.EMPTY) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,108,newBlock.addChildrenToFront(c);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,109,} else {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,110,newBlock.setWasEmptyNode(true);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,112,c = newBlock;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,113,reportChange();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,120,* Normalize where annotations appear on the AST. Copies
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,121,* around existing JSDoc annotations as well as internal annotations.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,123,static class PrepareAnnotations
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,124,extends NodeTraversal.AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,126,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,127,private final CodingConvention convention;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,129,PrepareAnnotations(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,130,this.compiler = compiler;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,131,this.convention = compiler.getCodingConvention();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,136,"* In the AST that Rhino gives us, it needs to make a distinction"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,137,* between jsdoc on the object literal node and jsdoc on the object literal
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,138,"* value. For example,"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,139,* <pre>
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,140,* var x = {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,141,*   / JSDOC /
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,142,"*   a: 'b',"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,143,*   c: / JSDOC / 'd'
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,145,* </pre>
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,147,"* But in few narrow cases (in particular, function literals), it's"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,148,* a lot easier for us if the doc is attached to the value.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,150,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,151,int nType = n.getType();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,152,switch (nType) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,153,case Token.NAME:
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,154,case Token.STRING:
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,155,String nString = n.getString();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,156,if (nType == Token.NAME &&
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,157,n.getParent().getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,158,"""eval"".equals(nString)) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,159,"n.putBooleanProp(Node.DIRECT_EVAL, true);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,161,if (convention.isConstant(nString)) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,162,"n.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,164,break;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,166,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,167,JSDocInfo fnInfo = n.getJSDocInfo();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,168,if (fnInfo == null) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,169,// Look for the info on other nodes.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,170,if (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,171,// on ASSIGNs
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,172,fnInfo = parent.getJSDocInfo();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,173,} else if (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,174,// on var NAME = function() { ... };
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,175,fnInfo = parent.getParent().getJSDocInfo();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,179,// Compute which function parameters are optional and
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,180,// which are var_args.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,181,Node args = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,182,for (Node arg = args.getFirstChild();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,183,arg != null;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,184,arg = arg.getNext()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,185,String argName = arg.getString();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,186,JSTypeExpression typeExpr = fnInfo == null ?
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,187,null : fnInfo.getParameterType(argName);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,189,if (convention.isOptionalParameter(arg) ||
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,190,typeExpr != null && typeExpr.isOptionalArg()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,191,"arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,193,if (convention.isVarArgsParameter(arg) ||
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,194,typeExpr != null && typeExpr.isVarArgs()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,195,"arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,198,break;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,200,case Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,201,if (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,202,for (Node key = n.getFirstChild();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,203,key != null; key = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,204,Node value = key.getNext();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,205,if (key.getJSDocInfo() != null &&
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,206,key.getNext().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,207,value.setJSDocInfo(key.getJSDocInfo());
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,211,break;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,214,// TODO(johnlenz): Determine if it is possible to simply use the javadoc
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,215,// everywhere rather than use IS_DISPATCHER.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,217,* Translate dispatcher info into the property expected node.
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,219,if (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,220,if (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,221,Node fnNode = n.getLastChild();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,222,Preconditions.checkState(fnNode.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,223,"fnNode.putBooleanProp(Node.IS_DISPATCHER, true);"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,118,"ew NodeTypeNormalizer(true).process(null, root);"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,118,"new PrepareAst(compiler, true).process(null, root);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,770,ew NodeTypeNormalizer().process(
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,770,new PrepareAst(compiler).process(

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,172,"hrow new IllegalArgumentException(""Node cannot be refined."");"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,172,"throw new IllegalArgumentException(""Node cannot be refined. \n"" +"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,173,node.toStringTree());
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,488,JSType result = topType;
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,488,"f (value.equals(""number"")) {"
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,489,eturn getNativeType(NUMBER_TYPE);
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,490," else if (value.equals(""boolean"")) {"
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,491,eturn getNativeType(BOOLEAN_TYPE);
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,492," else if (value.equals(""string"")) {"
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,493,eturn getNativeType(STRING_TYPE);
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,494," else if (value.equals(""undefined"")) {"
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,495,eturn getNativeType(VOID_TYPE);
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,496," else if (value.equals(""function"")) {"
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,497,eturn getNativeType(U2U_CONSTRUCTOR_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,490,JSType typeByName = getNativeTypeForTypeOf(value);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,491,if (typeByName != null) {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,492,result = typeByName;
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,500,eturn topType;
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,495,return result;
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,557, about the result of the {@code typeof} operation..
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,552,* about the result of the {@code typeof} operation.
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,584,eturn type == null ? null :
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,585,ype.visit(new RestrictByOneTypeOfResultVisitor(
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,586,"alue, resultEqualsValue));"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,579,if (type == null) {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,580,if (resultEqualsValue) {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,581,JSType result = getNativeTypeForTypeOf(value);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,582,return result == null ? getNativeType(UNKNOWN_TYPE) : result;
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,583,} else {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,584,return null;
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,587,return type.visit(
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,588,"new RestrictByOneTypeOfResultVisitor(value, resultEqualsValue));"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,596,"* If we definitely know what a type is based on the typeof result,"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,597,"* return it.  Otherwise, return null."
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,599,"* The typeof operation in JS is poorly defined, and this function works"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,600,"* for both the native typeof and goog.typeOf. It should not be made public,"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,601,"* because its semantics are informally defined, and would be wrong in"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,602,* the general case.
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,604,private JSType getNativeTypeForTypeOf(String value) {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,605,"if (value.equals(""number"")) {"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,606,return getNativeType(NUMBER_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,607,"} else if (value.equals(""boolean"")) {"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,608,return getNativeType(BOOLEAN_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,609,"} else if (value.equals(""string"")) {"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,610,return getNativeType(STRING_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,611,"} else if (value.equals(""undefined"")) {"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,612,return getNativeType(VOID_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,613,"} else if (value.equals(""function"")) {"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,614,return getNativeType(U2U_CONSTRUCTOR_TYPE);
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,615,} else {
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,616,return null;
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,26,import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,177,if (p.type == null) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,178,return p.outcome ? getNativeType(ARRAY_TYPE) : null;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,178,eturn p.type == null ? null : p.type.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,183,return p.type.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,188,if (p.type == null) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,189,return p.outcome ? getNativeType(OBJECT_TYPE) : null;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,185,eturn p.type == null ? null : p.type.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,194,return p.type.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,200,@Override
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,196,f (callee.getType() == GETPROP) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,206,if (callee.getType() == GETPROP && param.isQualifiedName()) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,198,f (paramType != null) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,199,ode left = callee.getFirstChild();
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,200,ode right = callee.getLastChild();
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,201,"f (left.getType() == NAME && ""goog"".equals(left.getString()) &&"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,202,ight.getType() == STRING) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,203,"unction<TypeRestriction, JSType> restricter ="
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,204,estricters.get(right.getString());
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,205,f (restricter != null) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,206,"eturn restrictParameter(param, paramType, blindScope, restricter,"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,207,utcome);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,208,Node left = callee.getFirstChild();
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,209,Node right = callee.getLastChild();
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,210,"if (left.getType() == NAME && ""goog"".equals(left.getString()) &&"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,211,right.getType() == STRING) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,212,"Function<TypeRestriction, JSType> restricter ="
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,213,restricters.get(right.getString());
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,214,if (restricter != null) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,215,"return restrictParameter(param, paramType, blindScope, restricter,"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,216,outcome);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,628,etJSType(value));
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,628,getJSType(value));
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,632,f (var != null &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,633,(var.isTypeInferred() && unflowableVarNames.contains(varName))) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,634,ype = var.getType();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,635,f (type == null) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,636,ype = getNativeType(UNKNOWN_TYPE);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,632,if (var != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,633,// There are two situations where we don't want to use type information
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,634,"// from the scope, even if we have it."
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,636,"// 1) The var is escaped in a weird way, e.g.,"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,637,// function f() { var x = 3; function g() { x = null } (x); }
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,638,boolean isInferred = var.isTypeInferred();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,639,boolean unflowable =
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,640,isInferred && unflowableVarNames.contains(varName);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,642,// 2) We're reading type information from another scope for an
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,643,// inferred variable.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,644,// var t = null; function f() { (t); }
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,645,boolean nonLocalInferredSlot =
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,646,isInferred &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,647,syntacticScope.getParent() != null &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,648,var == syntacticScope.getParent().getSlot(varName);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,650,if (!unflowable && !nonLocalInferredSlot) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,651,type = var.getType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,652,if (type == null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,653,type = getNativeType(UNKNOWN_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,124,public void testGoogIsArrayOnNull() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,125,"testClosureFunction(""goog.isArray"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,126,"null,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,127,"ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,128,null);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,131,public void testGoogIsFunctionOnNull() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,132,"testClosureFunction(""goog.isFunction"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,133,"null,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,134,"U2U_CONSTRUCTOR_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,135,null);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,138,public void testGoogIsObjectOnNull() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,139,"testClosureFunction(""goog.isObject"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,140,"null,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,141,"OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,142,null);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,600,public void testTypeOfReduction14() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,601,// Don't do type inference on GETELEMs.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,602,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,603,CLOSURE_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,604,"""function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,605,"""  return goog.isString(arguments[0]) ? arguments[0] : 0;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,606,"""}"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,609,public void testTypeOfReduction15() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,610,// Don't do type inference on GETELEMs.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,611,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,612,CLOSURE_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,613,"""function f(arguments) { "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,614,"""  return typeof arguments[0] == 'string' ? arguments[0] : 0;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,615,"""}"", null);"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3476,"var FooAlias = Foo;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3494,"""/** @constructor */ var FooAlias = Foo;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4145,public void testIssue124() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4146,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4147,"""var t = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4148,"""function test() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4149,"""  if (t != null) { t = null; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4150,"""  t = 1;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4154,public void testIssue124b() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4155,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4156,"""var t = null;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4157,"""function test() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4158,"""  if (t != null) { t = null; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4159,"""  t = undefined;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4161,"""condition always evaluates to false\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4162,"""left : (null|undefined)\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4163,"""right: null"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,204,eturn Double.NaN;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,204,if (mayHaveSideEffects(n.getFirstChild())) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,205,return null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,206,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,207,return Double.NaN;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,211,// Check for known constants
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,227,/ TODO(johnlenz): handle less common string conversion cases:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,228,"/ '-infinity', etc."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,229,tring s = n.getString();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,232,String s = trimJsWhiteSpace(n.getString());
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,233,// return ScriptRuntime.toNumber(s);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,238,/ Attempt to convert hex numbers.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,241,// Attempt to convert hex numbers.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,242,eturn null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,245,return Double.NaN;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,249,if (s.length() > 3
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,250,&& (s.charAt(0) == '-' || s.charAt(0) == '+')
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,251,&& s.charAt(1) == '0'
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,252,&& (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,253,// hex numbers with explicit signs vary between browsers.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,254,return null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,257,"// FireFox and IE treat the ""Infinity"" differently. FireFox is case"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,258,"// insensitive, but IE treats ""infinity"" as NaN.  So leave it alone."
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,259,"if (s.equals(""infinity"")"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,260,"|| s.equals(""-infinity"")"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,261,"|| s.equals(""+infinity"")) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,262,return null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,249,eturn null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,268,return Double.NaN;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,275,static String trimJsWhiteSpace(String s) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,276,int start = 0;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,277,int end = s.length();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,278,while (end > 0 && isStrWhiteSpaceChar(s.charAt(end-1))) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,279,end--;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,281,while (start < end && isStrWhiteSpaceChar(s.charAt(start))) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,282,start++;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,284,"return s.substring(start, end);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,288,* Copied from Rhino's ScriptRuntime
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,290,static boolean isStrWhiteSpaceChar(int c) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,291,switch (c) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,292,case ' ': // <SP>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,293,case '\n': // <LF>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,294,case '\r': // <CR>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,295,case '\t': // <TAB>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,296,case '\u00A0': // <NBSP>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,297,case '\u000C': // <FF>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,298,case '\u000B': // <VT>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,299,case '\u2028': // <LS>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,300,case '\u2029': // <PS>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,301,case '\uFEFF': // <BOM>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,302,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,303,default:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,304,return Character.getType(c) == Character.SPACE_SEPARATOR;
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1297,ublic void testNumberValue() {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1297,public void testGetNumberValue() {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1298,// Strings
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1299,"assertEquals(1.0, NodeUtil.getNumberValue(getNode(""'\\uFEFF1'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1301,"assertEquals(0.0, NodeUtil.getNumberValue(getNode(""' '"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1302,"assertEquals(0.0, NodeUtil.getNumberValue(getNode(""' \\t'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1303,"assertEquals(0.0, NodeUtil.getNumberValue(getNode(""'+0'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1304,"assertEquals(-0.0, NodeUtil.getNumberValue(getNode(""'-0'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1308,"assertEquals(16.0, NodeUtil.getNumberValue(getNode(""' 16 '"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1309,"assertEquals(16.0, NodeUtil.getNumberValue(getNode(""' 16 '"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1314,"assertEquals(-1.23, NodeUtil.getNumberValue(getNode(""'-123e-2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1315,"assertEquals(-1.23, NodeUtil.getNumberValue(getNode(""'-123E-2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1316,"assertEquals(1.23, NodeUtil.getNumberValue(getNode(""'+123e-2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1317,"assertEquals(1.23, NodeUtil.getNumberValue(getNode(""'+123E-2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1318,"assertEquals(12300.0, NodeUtil.getNumberValue(getNode(""'+123e+2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1319,"assertEquals(12300.0, NodeUtil.getNumberValue(getNode(""'+123E+2'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1321,"assertEquals(15.0, NodeUtil.getNumberValue(getNode(""'0xf'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1322,"assertEquals(15.0, NodeUtil.getNumberValue(getNode(""'0xF'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1324,// Chrome and rhino behavior differently from FF and IE. FF and IE
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1325,// consider a negative hex number to be invalid
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1326,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'-0xf'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1327,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'-0xF'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1328,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'+0xf'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1329,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'+0xF'"")));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1307,"ssertEquals(16.0, NodeUtil.getNumberValue(getNode(""'0x10'"")), 16.0);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1332,"assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(""'0X10.8'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1334,"assertEquals(-77.0, NodeUtil.getNumberValue(getNode(""'-077'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1335,"assertEquals(-77.5, NodeUtil.getNumberValue(getNode(""'-077.5'"")));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1317,"ull,"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1318,"odeUtil.getNumberValue(getNode(""'-infinity'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1343,"Double.POSITIVE_INFINITY,"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1344,"NodeUtil.getNumberValue(getNode(""'+Infinity'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1345,"// FireFox treats ""infinity"" as ""Infinity"", IE treats it as NaN"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1346,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'-infinity'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1348,"assertEquals(null, NodeUtil.getNumberValue(getNode(""'+infinity'"")));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1322,"ull, NodeUtil.getNumberValue(getNode(""'some unknown string'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1352,"Double.NaN, NodeUtil.getNumberValue(getNode(""'some unknown string'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1353,"assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(""'123 blah'"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1355,// Literals
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1356,"assertEquals(1.0, NodeUtil.getNumberValue(getNode(""1"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1357,"// ""-1"" is parsed as a literal"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1358,"assertEquals(-1.0, NodeUtil.getNumberValue(getNode(""-1"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1359,"// ""+1"" is parse as an op + literal"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1360,"assertEquals(null, NodeUtil.getNumberValue(getNode(""+1"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1361,"assertEquals(22.0, NodeUtil.getNumberValue(getNode(""22"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1362,"assertEquals(18.0, NodeUtil.getNumberValue(getNode(""022"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1363,"assertEquals(34.0, NodeUtil.getNumberValue(getNode(""0x22"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1373,assertEquals(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1374,"Double.NaN, NodeUtil.getNumberValue(getNode(""void f"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1375,// values with side-effects are ignored.
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1376,assertEquals(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1377,"null, NodeUtil.getNumberValue(getNode(""void f()"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1387,"// ""infinity"" is not a known name."
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1391,// getNumberValue only converts literals
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1392,"assertEquals(null, NodeUtil.getNumberValue(getNode(""x"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1393,"assertEquals(null, NodeUtil.getNumberValue(getNode(""x.y"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1394,"assertEquals(null, NodeUtil.getNumberValue(getNode(""1/2"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1395,"assertEquals(null, NodeUtil.getNumberValue(getNode(""1-2"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1396,"assertEquals(null, NodeUtil.getNumberValue(getNode(""+1"")));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1384,"ssertFalse(NodeUtil.isNumericResult(getNode(""({a:1})"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1439,"assertFalse(NodeUtil.isNumericResult(getNode(""({a:1})"")));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1434,"ssertFalse(NodeUtil.isBooleanResult(getNode(""({a:true})"")));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1489,"assertFalse(NodeUtil.isBooleanResult(getNode(""({a:true})"")));"

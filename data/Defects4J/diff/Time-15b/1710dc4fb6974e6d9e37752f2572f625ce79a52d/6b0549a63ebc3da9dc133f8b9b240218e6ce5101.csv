is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,261,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,282,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,308,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,255,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,276,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,302,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,290,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,311,* The default String converter ignores the zone and only parses the field values.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,337,* The default String converter ignores the zone and only parses the field values.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,70," The chrono parameter is a hint to the converter, should it require a"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71, chronology to aid in conversion.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,70,"* This method checks if the parser has a zone, and uses it if present."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71,* This is most useful for parsing local times with UTC.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,77,"* @param parser the parser to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,84,if (parser.getZone() != null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,85,chrono = chrono.withZone(parser.getZone());
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,21,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,132,"ldp, // local date parser"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,563,* This parser is initialised with the local (UTC) time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,564,* <p>
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,571,eturn dateElementParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,575,if (ldp == null) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,576,ldp = dateElementParser().withZone(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,578,return ldp;
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,643,* This parser is initialised with the local (UTC) time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,644,* <p>
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,651,toFormatter();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,660,.toFormatter().withZone(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,797,* This parser is initialised with the local (UTC) time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,798,* <p>
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,811,toFormatter();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,822,.toFormatter().withZone(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,42,private static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,450,public void testConstructor_Object_DateTimeZoneMoscow() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,451,"LocalDateTime test = new LocalDateTime(""1970-04-06T12:24:00"", MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,452,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,453,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,454,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,455,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,456,"assertEquals(12, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,457,"assertEquals(24, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,458,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,459,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,462,public void testConstructor_Object_DateTimeZoneMoscowBadDateTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,463,// 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,464,// 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,466,"// when a DST non-existing time is passed in, it should still work (ie. zone ignored)"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,467,"LocalDateTime test = new LocalDateTime(""1981-04-01T00:30:00"", MOSCOW);  // doesnt exist"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,468,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,469,"assertEquals(1981, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,470,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,471,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,472,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,473,"assertEquals(30, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,474,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,475,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,529,public void testConstructor_Object_ChronologyMoscow() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,530,"LocalDateTime test = new LocalDateTime(""1970-04-06T12:24:00"", GREGORIAN_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,531,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,532,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,533,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,534,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,535,"assertEquals(12, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,536,"assertEquals(24, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,537,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,538,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,541,public void testConstructor_Object_ChronologyMoscowBadDateTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,542,// 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,543,// 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,545,"// when a DST non-existing time is passed in, it should still work (ie. zone ignored)"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,546,"LocalDateTime test = new LocalDateTime(""1981-04-01T00:30:00"", GREGORIAN_MOSCOW);  // doesnt exist"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,547,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,548,"assertEquals(1981, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,549,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,550,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,551,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,552,"assertEquals(30, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,553,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,554,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,40,"private static final DateTimeZone NEW_YORK = DateTimeZone.forID(""America/New_York"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,331,public void testConstructor_ObjectString1Tokyo() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,DateTimeZone.setDefault(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,333,"LocalTime test = new LocalTime(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,334,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,335,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,336,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,337,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,338,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,341,public void testConstructor_ObjectString1NewYork() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,342,DateTimeZone.setDefault(NEW_YORK);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"LocalTime test = new LocalTime(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,345,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,346,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,347,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"assertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,447,ublic void testConstructor_Object2_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,448,"ocalTime test = new LocalTime(""T10:20"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,449,"ssertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,469,public void testConstructor_ObjectString_DateTimeZoneLondon() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,470,"LocalTime test = new LocalTime(""04:20"", LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,471,"assertEquals(4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,472,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,475,public void testConstructor_ObjectString_DateTimeZoneTokyo() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,476,"LocalTime test = new LocalTime(""04:20"", TOKYO);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,477,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,478,"assertEquals(4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,479,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,482,public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,483,"LocalTime test = new LocalTime(""04:20"", NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,484,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,485,"assertEquals(4, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,451,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,452,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,454,ry {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,455,"ew LocalTime(""T1020"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,456,ail();
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,457, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,24,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,25,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,26,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,28,mport org.joda.time.Period;
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,29,mport org.joda.time.PeriodType;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,98,"assertEquals(DateTimeZone.UTC, parser.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,183,"assertEquals(DateTimeZone.UTC, parser.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,208,"assertParse(parser, true, ""00:00:10.512345678"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,209,"assertEquals(10512, parser.parseMillis(""00:00:10.512345678""));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,239,"assertParse(parser, true, ""00:00:10.512345678"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,240,// result is offset by London DST in 1970-01-01
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,241,"assertEquals(10512, parser.parseMillis(""00:00:10.512345678"") + DateTimeZone.getDefault().getOffset(0L));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,303,"assertEquals(DateTimeZone.UTC, parser.getZone());"

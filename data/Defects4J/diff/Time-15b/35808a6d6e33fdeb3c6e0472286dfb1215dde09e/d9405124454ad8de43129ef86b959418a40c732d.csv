is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,377,ong unitMillis = getAverageMillisPerYear();
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,378,ong i2 = instant + getApproxMillisAtEpoch();
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,377,// Initial estimate uses values divided by two to avoid overflow.
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,378,long unitMillis = getAverageMillisPerYearDividedByTwo();
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,379,long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,384,ong yearStart;
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,385,ry {
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,386,earStart = getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,387, catch (ArithmeticException e) {
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,388,f (instant > 0) {
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,389,"hrow new ArithmeticException(""Instant too large: "" + instant);"
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,390, else {
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,391,"hrow new ArithmeticException(""Instant too small: "" + instant);"
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,385,long yearStart = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,681,"* Gets an average value for the milliseconds per year, divided by two."
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,683,* @return the millis per year divided by two
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,685,abstract long getAverageMillisPerYearDividedByTwo();
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,698, elapsed from year 0 of this chronology. This constant <em>must</em> be
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,699, defined as:
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,696,"* elapsed from year 0 of this chronology, divided by two. This constant"
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,697,* <em>must</em> be defined as:
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,701,    yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,699,*    (yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch) / 2
False,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,705,bstract long getApproxMillisAtEpoch();
True,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,703,abstract long getApproxMillisAtEpochDividedByTwo();
True,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,152,long getAverageMillisPerYearDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,153,return MILLIS_PER_YEAR / 2;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,69, The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,70, Although calculateFirstDayOfYearMillis can go higher without
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,71," overflowing, the getYear method overflows when it adds the"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,72, approximate millis at the epoch.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,74,rivate static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,68,/** The highest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,69,private static final int MAX_YEAR = 292272708;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,210,f (year > MAX_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,211,"hrow new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,213,f (year < MIN_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,214,"hrow new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,254,ong getApproxMillisAtEpoch() {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,255,eturn 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,242,long getApproxMillisAtEpochDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,243,return (1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,69, The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,70, Although calculateFirstDayOfYearMillis can go higher without
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,71," overflowing, the getYear method overflows when it adds the"
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,72, approximate millis at the epoch.
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,74,rivate static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,68,/** The highest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,69,private static final int MAX_YEAR = 292272984;
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,208,f (year > MAX_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,209,"hrow new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,211,f (year < MIN_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,212,"hrow new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,252,ong getApproxMillisAtEpoch() {
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,253,eturn 1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,240,long getApproxMillisAtEpochDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,241,return (1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,58,/ The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,58,/** The lowest year that can be fully supported. */
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,61,/ The highest year that can be fully supported. Although
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,62,/ calculateFirstDayOfYearMillis can operate on years up to 292278994
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,63,"/ without overflowing, the getYear method overflows when it adds the"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,64,/ approximate millis at the epoch.
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,65,rivate static final int MAX_YEAR = 292277023;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,61,/** The highest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,62,private static final int MAX_YEAR = 292278993;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,204,f (year > MAX_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,205,"hrow new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,207,f (year < MIN_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,208,"hrow new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,232,long getAverageMillisPerYearDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,233,return MILLIS_PER_YEAR / 2;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,246,ong getApproxMillisAtEpoch() {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,247,eturn 1970L * MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,240,long getApproxMillisAtEpochDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,241,return (1970L * MILLIS_PER_YEAR) / 2;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,406,long getAverageMillisPerYearDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,407,return MILLIS_PER_YEAR / 2;
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,446,ong getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,451,long getApproxMillisAtEpochDividedByTwo() {
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,448,eturn -MILLIS_YEAR_1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,453,return (-MILLIS_YEAR_1) / 2;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,61,/ The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,61,/** The lowest year that can be fully supported. */
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,64,/ The highest year that can be fully supported. Although
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,65,"/ calculateFirstDayOfYearMillis can go higher without overflowing, the"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,66,/ getYear method overflows when it adds the approximate millis at the
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,67,/ epoch.
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,68,rivate static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,64,/** The highest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,65,private static final int MAX_YEAR = 292272992;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,218,f (year > MAX_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,219,"hrow new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,221,f (year < MIN_YEAR) {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,222,"hrow new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,252,long getAverageMillisPerYearDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,253,return MILLIS_PER_YEAR / 2;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,266,ong getApproxMillisAtEpoch() {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,267,eturn 1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,260,long getApproxMillisAtEpochDividedByTwo() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,261,return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,208,"ssertEquals(292277023, test.year().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,209,"ssertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,208,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,209,"assertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,220,"ssertEquals(292277023, test.year().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,221,"ssertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,220,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,221,"assertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,248,est.year().addToCopy(292277023 - 2004 + 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,248,test.year().addToCopy(292278993 - 2004 + 1);
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,273,opy = test.year().addWrapFieldToCopy(292277023 - 2004 + 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,273,copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1);
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,277,"ssertEquals(292277023, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,277,"assertEquals(292278993, copy.getYear());"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,94,"ssertEquals(292277023, test.year().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,95,"ssertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,94,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,95,"assertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,107,opy = test.year().plus(292277023 - 1972);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,108,"heck(copy, 292277023, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,107,copy = test.year().plus(292278993 - 1972);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,108,"check(copy, 292278993, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,111,est.year().plus(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,111,test.year().plus(292278993 - 1972 + 1);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,138,opy = test.year().plusWrapField(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,138,copy = test.year().plusWrapField(292278993 - 1972 + 1);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,142,"heck(copy, 292277023, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,142,"check(copy, 292278993, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,203,"ssertEquals(292277023, test.year().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,204,"ssertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,203,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,204,"assertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,95,"ssertEquals(292277023, test.year().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,96,"ssertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,95,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,96,"assertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,112,est.year().addToCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,112,test.year().addToCopy(292278993 - 1972 + 1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,139,opy = test.year().addWrapFieldToCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,139,copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,143,"heck(copy, 292277023, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,143,"check(copy, 292278993, 6, 9);"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,279,ry {
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,280,hrono.year().get(Long.MAX_VALUE);
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,281,ail();
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,282, catch (ArithmeticException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,279,"assertEquals(maxYear + 1, chrono.year().get(Long.MAX_VALUE));"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,316,ry {
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,317,hrono.year().get(Long.MIN_VALUE);
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,318,ail();
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,319, catch (ArithmeticException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,312,"assertEquals(minYear - 1, chrono.year().get(Long.MIN_VALUE));"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,95, Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,96,* Constructs an interval from a start and end instant with the ISO default chronology.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,102,"uper(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,103,"super(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,107,* Constructs an interval from a start and end instant with a chronology.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,109,"* @param chronology  the chronology to use, null is ISO default"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,110,"* @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,111,"* @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,112,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,114,"public Interval(long startInstant, long endInstant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,115,"super(startInstant, endInstant, chronology);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,120,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,121,* The chronology used is that of the start instant.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,171, Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,186,* Constructs a time interval by converting or copying from another object.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,174, @throws IllegalArgumentException if the interval is null or invalid
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,189,* @throws IllegalArgumentException if the interval is invalid
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,177,uper(interval);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,192,"super(interval, null);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,196,"* Constructs a time interval by converting or copying from another object,"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,197,* overriding the chronology.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,199,* @param interval  the time interval to copy
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,200,"* @param chronology  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,201,* @throws IllegalArgumentException if the interval is invalid
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,203,"public Interval(Object interval, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,204,"super(interval, chronology);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,220,"* Creates a new interval with the same start and end, but a different chronology."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,222,"* @param chronology  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,223,* @return an interval with a different chronology
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,225,public Interval withChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,226,if (getChronology() == chronology) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,227,return this;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,229,"return new Interval(getStartMillis(), getEndMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,213,ublic Interval withStartInstant(ReadableInstant start) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,253,public Interval withStart(ReadableInstant start) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,233, Creates a new interval with the specified start instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,273,* Creates a new interval with the specified end instant.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,239,ublic Interval withEndInstant(ReadableInstant end) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,279,public Interval withEnd(ReadableInstant end) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,99,"uper(0L, 0L);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,100,"super(0L, 0L, null);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,103, Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,104,* Constructs an interval from a start and end instant with the ISO default chronology.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,110,"uper(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,111,"super(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,115,* Constructs an interval from a start and end instant with a chronology.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,117,"* @param chronology  the chronology to use, null is ISO default"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,118,"* @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,119,"* @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,120,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,122,"public MutableInterval(long startInstant, long endInstant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,123,"super(startInstant, endInstant, chronology);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,128,* <p>
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,129,* The chronology used is that of the start instant.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,179, Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,194,* Constructs a time interval by converting or copying from another object.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,182, @throws IllegalArgumentException if the interval is null or invalid
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,197,* @throws IllegalArgumentException if the interval is invalid
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,185,uper(interval);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,200,"super(interval, null);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,204,"* Constructs a time interval by converting or copying from another object,"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,205,* overriding the chronology.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,207,* @param interval  the time interval to copy
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,208,"* @param chronology  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,209,* @throws IllegalArgumentException if the interval is invalid
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,211,"public MutableInterval(Object interval, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,212,"super(interval, chronology);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,189,"/ NOTE: All updates go via setInterval(long,long), setStartMillis(long)"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,190,/ or setEndMillis(long) on this class
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,193, Sets this interval from two millisecond instants.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,217,* Sets this interval from two millisecond instants retaining the chronology.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,200,"uper.setInterval(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,224,"super.setInterval(startInstant, endInstant, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,215,"etInterval(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,239,Chronology chrono = interval.getChronology();
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,240,"super.setInterval(startMillis, endMillis, chrono);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,219, Sets this interval from two instants.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,244,"* Sets this interval from two instants, replacing the chronology with"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,245,* that from the start instant.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,232,"etInterval(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,258,Chronology chrono = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,259,"super.setInterval(startMillis, endMillis, chrono);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,265,* Sets the chronology of this time interval.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,267,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,269,public void setChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,270,"super.setInterval(getStartMillis(), getEndMillis(), chrono);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,245,uper.setStartMillis(startInstant);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,281,"super.setInterval(startInstant, getEndMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,254,ublic void setStartInstant(ReadableInstant start) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,290,public void setStart(ReadableInstant start) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,256,etStartMillis(startMillis);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,292,"super.setInterval(startMillis, getEndMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,268,uper.setEndMillis(endInstant);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,303,"super.setInterval(getStartMillis(), endInstant, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,277,ublic void setEndInstant(ReadableInstant end) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,312,public void setEnd(ReadableInstant end) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,279,etEndMillis(endMillis);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,314,"super.setInterval(getStartMillis(), endMillis, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,340,"etPeriodAfterStart(period, null);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,344," Sets the period of this time interval, preserving the start instant."
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,346," @param period  new period for interval, null means zero length"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,347," @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,348, @throws IllegalArgumentException if the end is before the start
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,349, @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,351,"ublic void setPeriodAfterStart(ReadablePeriod period, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,355,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,356,"etEndMillis(chrono.add(getStartMillis(), period, 1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,378,"setEndMillis(getChronology().add(getStartMillis(), period, 1));"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,369,"etPeriodBeforeEnd(period, null);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,373," Sets the period of this time interval, preserving the end instant."
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,375," @param period  new period for interval, null means zero length"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,376," @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,377, @throws IllegalArgumentException if the end is before the start
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,378, @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,380,"ublic void setPeriodBeforeEnd(ReadablePeriod period, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,384,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,385,"etStartMillis(chrono.add(getEndMillis(), period, -1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,394,"setStartMillis(getChronology().add(getEndMillis(), period, -1));"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,93,* Sets the chronology of this time interval.
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,95,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,97,void setChronology(Chronology chrono);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,107,oid setStartInstant(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,115,void setStart(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,125,oid setEndInstant(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,129," Sets the duration of this time interval, preserving the start instant."
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,131, @param millisDuration  new duration for interval
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,132, @throws IllegalArgumentException if the end is before the start
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,133, @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,135,oid setDurationAfterStart(long millisDuration);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,138," Sets the duration of this time interval, preserving the end instant."
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,140, @param millisDuration  new duration for interval
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,141, @throws IllegalArgumentException if the end is before the start
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,142, @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,144,oid setDurationBeforeEnd(long millisDuration);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,133,void setEnd(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,170," @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,174,"oid setPeriodAfterStart(ReadablePeriod period, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,162,void setPeriodAfterStart(ReadablePeriod period);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,180," @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,184,"oid setPeriodBeforeEnd(ReadablePeriod period, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,171,void setPeriodBeforeEnd(ReadablePeriod period);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,84,"* Gets the chronology of the interval, which is the chronology of the first datetime."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,86,* @return the chronology of the interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,88,Chronology getChronology();
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,92," Gets the start of this time interval, which is inclusive, as an Instant."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,99,"* Gets the start of this time interval, which is inclusive, as a DateTime."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,96,nstant getStartInstant();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,103,DateTime getStart();
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,107," Gets the end of this time interval, which is exclusive, as an Instant."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114,"* Gets the end of this time interval, which is exclusive, as a DateTime."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,111,nstant getEndInstant();
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115, Gets the duration of this time interval in milliseconds.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,116, <p>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,117, The duration is equal to the end millis minus the start millis.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,119, @return the duration of the time interval in milliseconds
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,120, @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,122,ong getDurationMillis();
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,125, Gets the millisecond duration of this time interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,126, <p>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,127, If this interval was constructed using a Duration then that object will
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,128, be returned. Otherwise a new Duration instance is returned.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,130, @return the millisecond duration of the time interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,131, @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,133,uration getDuration();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,118,DateTime getEnd();
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,229, Converts the duration of the interval to a <code>Period</code> using the
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,230, All period type.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,214,* Gets the millisecond duration of this time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,216,* @return the millisecond duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,217,* @throws ArithmeticException if the duration exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,219,Duration toDuration();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,222,* Gets the millisecond duration of this time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,224,* @return the millisecond duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,225,* @throws ArithmeticException if the duration exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,227,long toDurationMillis();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,230,* Converts the duration of the interval to a period using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,231,* standard period type.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,234, The time period may not be precise - if you want the millisecond duration
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,235, then you should use {@link #getDuration()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,242, Converts the duration of the interval to a <code>Period</code> using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,241,* Converts the duration of the interval to a period using the
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,247, The time period may not be precise - if you want the millisecond duration
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,248, then you should use {@link #getDuration()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,250," @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,247,"* @param type  the requested type of the duration, null means standard"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,258, on start and end millis. All ReadableInterval instances are accepted.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,255,* on start and end millis plus the chronology.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,256,* All ReadableInterval instances are accepted.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,274,* result = 31 * result + getChronology().hashCode();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,56,import org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,58,mport org.joda.time.Instant;
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,108," Gets the start of this time interval, which is inclusive, as an Instant."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,108,"* Gets the start of this time interval, which is inclusive, as a DateTime."
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,112,ublic Instant getStartInstant() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,113,eturn new Instant(getStartMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,112,public DateTime getStart() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,113,"return new DateTime(getStartMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,117," Gets the end of this time interval, which is exclusive, as an Instant."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,117,"* Gets the end of this time interval, which is exclusive, as a DateTime."
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,121,ublic Instant getEndInstant() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,122,eturn new Instant(getEndMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,127, Gets the duration of this time interval in milliseconds.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,128, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,129, The duration is equal to the end millis minus the start millis.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,131, @return the duration of the time interval in milliseconds
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,132, @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,134,ublic long getDurationMillis() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,135,"eturn FieldUtils.safeAdd(getEndMillis(), -getStartMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,139, Gets a <code>Duration</code> holding the millisecond duration of this time interval.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,141, @return the duration of the time interval
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,142, @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144,ublic Duration getDuration() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,145,ong durMillis = getDurationMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,146,f (durMillis == 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,147,eturn Duration.ZERO;
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,148, else {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,149,eturn new Duration(durMillis);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,121,public DateTime getEnd() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,122,"return new DateTime(getEndMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,339,* Gets the duration of this time interval in milliseconds.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,340,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,341,* The duration is equal to the end millis minus the start millis.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,343,* @return the duration of the time interval in milliseconds
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,344,* @throws ArithmeticException if the duration exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,346,public long toDurationMillis() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,347,"return FieldUtils.safeAdd(getEndMillis(), -getStartMillis());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,351,* Gets the duration of this time interval.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,352,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,353,* The duration is equal to the end millis minus the start millis.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,355,* @return the duration of the time interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,356,* @throws ArithmeticException if the duration exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,358,public Duration toDuration() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,359,long durMillis = toDurationMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,360,if (durMillis == 0) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,361,return Duration.ZERO;
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,362,} else {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,363,return new Duration(durMillis);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,372, The time period may not be precise - if you want the millisecond duration
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,373, then you should use {@link #getDuration()}.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,387, The time period may not be precise - if you want the millisecond duration
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,388, then you should use {@link #getDuration()}.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,400, on start and end millis. All ReadableInterval instances are accepted.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,398,* on start and end millis plus the chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,399,* All ReadableInterval instances are accepted.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,417,etEndMillis() == other.getEndMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,416,getEndMillis() == other.getEndMillis() &&
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,417,getChronology() == other.getChronology());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,431,result = 31 * result + getChronology().hashCode();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,60,import org.joda.time.MutableInterval;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,92,/** The chronology of the interval */
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,93,private Chronology iChronology;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,104,"* @param chrono  the chronology to use, null is ISO default"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,103,"rotected BaseInterval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,107,"protected BaseInterval(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,109,iChronology = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,126,iChronology = Chronology.getISO();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,128,iChronology = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,145,iChronology = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,162,iChronology = DateTimeUtils.getInstantChronology(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,182,Chronology chrono = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,183,iChronology = chrono;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,177,hronology chrono = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,206,Chronology chrono = DateTimeUtils.getInstantChronology(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,207,iChronology = chrono;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,200,hronology chrono = DateTimeUtils.getInstantChronology(end);
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,207, Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,218,* Constructs a time interval converting or copying from another object
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,219,* that describes an interval.
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,210, @throws IllegalArgumentException if the interval is null or invalid
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,222,"* @param chrono  the chronology to use, null means let converter decide"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,223,* @throws IllegalArgumentException if the interval is invalid
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,212,rotected BaseInterval(Object interval) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,225,"protected BaseInterval(Object interval, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,215,f (this instanceof ReadWritableInterval) {
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,216,"onverter.setInto((ReadWritableInterval) this, interval);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,228,"if (converter.isReadableInterval(interval, chrono)) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,229,ReadableInterval input = (ReadableInterval) interval;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,230,iChronology = (chrono != null ? chrono : input.getChronology());
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,231,iStartMillis = input.getStartMillis();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,232,iEndMillis = input.getEndMillis();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,233,} else if (this instanceof ReadWritableInterval) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,234,"converter.setInto((ReadWritableInterval) this, interval, chrono);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,218,ong[] millis = converter.getIntervalMillis(interval);
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,219,StartMillis = millis[0];
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,220,EndMillis = millis[1];
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,236,MutableInterval mi = new MutableInterval();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,237,"converter.setInto(mi, interval, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,238,iChronology = mi.getChronology();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,239,iStartMillis = mi.getStartMillis();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,240,iEndMillis = mi.getEndMillis();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,247,* Gets the chronology of this interval.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,249,* @return the chronology
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,251,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,252,return iChronology;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,248, Sets the start of this time interval which is inclusive.
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,250," @param startInstant  the new start of the time interval,"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,251,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,253,rotected void setStartMillis(long startInstant) {
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,254,"heckInterval(startInstant, iEndMillis);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,255,StartMillis = startInstant;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,259, Sets the end of this time interval which is exclusive.
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,261," @param endInstant  the new end of the time interval,"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,262,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,264,rotected void setEndMillis(long endInstant) {
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,265,"heckInterval(iStartMillis, endInstant);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,266,EndMillis = endInstant;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,270, Sets this interval from two millisecond instants.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,277,* Sets this interval from two millisecond instants and a chronology.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,281,"* @param chrono  the chronology, not null"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,276,"rotected void setInterval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,284,"protected void setInterval(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,288,iChronology = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,180,* Checks if the input is a ReadableInterval.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,181,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,182,"* If it is, then the calling code should cast and copy the fields directly."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,184,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,185,"* @param chrono  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,186,* @return true if the input is a ReadableInterval
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,187,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,189,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,190,return false;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,101,* <li>null (zero-length from now to now)
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,161,"NullConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,56,import org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,68, Extracts the start and end millisecond instants from the object.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,69,* Checks if the input is a ReadableInterval.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,70,* <p>
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,71,"* If it is, then the calling code should cast and copy the fields directly."
False,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,71, @return the start millis and end millis in an array of size two
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,74,"* @param chrono  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,75,* @return true if the input is a ReadableInterval
False,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,74,ong[] getIntervalMillis(Object object);
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,78,"boolean isReadableInterval(Object object, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,80, @param interval interval to get modified
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,84,"* @param writableInterval  interval to get modified, not null"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,86,"* @param chrono  the chronology to use, may be null"
False,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,84,"oid setInto(ReadWritableInterval interval, Object object);"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,89,"void setInto(ReadWritableInterval writableInterval, Object object, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,59,import org.joda.time.ReadWritableInterval;
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,69,"mplements InstantConverter, DurationConverter, PeriodConverter {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,70,"implements InstantConverter, DurationConverter, PeriodConverter, IntervalConverter {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,121,* Extracts interval endpoint values from an object of this converter's
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,122,"* type, and sets them into the given ReadWritableInterval."
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,124,"* @param writableInterval interval to get modified, not null"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,125,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,126,"* @param chrono  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,127,* @throws NullPointerException if the interval is null
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,129,"public void setInto(ReadWritableInterval writableInterval, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,130,writableInterval.setChronology(chrono);
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,131,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,132,"writableInterval.setInterval(now, now);"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,89,eturn (((ReadableInterval) object)).getDurationMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,89,return (((ReadableInterval) object)).toDurationMillis();
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,101,"ritablePeriod.setPeriod((ReadableInterval) object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,101,ReadableInterval interval = (ReadableInterval) object;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,102,"writablePeriod.setPeriod(interval, chrono);"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,106, Extracts the start and end millisecond instants from the object.
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,107,* Checks if the input is a ReadableInterval.
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,108,* <p>
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,109,"* If it is, then the calling code should cast and copy the fields directly."
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,109, @return the start millis and end millis in an array of size two
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,112,"* @param chrono  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,113,* @return true if the input is a ReadableInterval
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,112,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,113,eadableInterval interval = (ReadableInterval) object;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,114,"eturn new long[] {interval.getStartMillis(), interval.getEndMillis()};"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,116,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,117,return true;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,118, Sets the values of the mutable interval from the specified interval.
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,120, @param writableInterval  the interval to set
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,121, @param object  the interval to set from
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,121,* Extracts interval endpoint values from an object of this converter's
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,122,"* type, and sets them into the given ReadWritableInterval."
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,124,"* @param writableInterval interval to get modified, not null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,125,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,126,"* @param chrono  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,127,* @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,123,"ublic void setInto(ReadWritableInterval writableInterval, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,124,eadableInterval interval = (ReadableInterval) object;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,125,ritableInterval.setInterval(interval);
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,129,"public void setInto(ReadWritableInterval writableInterval, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,130,ReadableInterval input = (ReadableInterval) object;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,131,writableInterval.setInterval(input);
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,132,if (chrono != null) {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,133,writableInterval.setChronology(chrono);
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,134,} else {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,135,writableInterval.setChronology(input.getChronology());
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,57,import org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,201, Extracts the start and end millisecond instants from the object.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,203," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,204, @return the start millis and end millis in an array
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,205, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,207,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,208,"eturn parseInterval(null, object);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,206,"* @param chrono  the chronology to use, may be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,217,"ublic void setInto(ReadWritableInterval writableInterval, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,218,"arseInterval(writableInterval, object);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,222, Sets the value of the mutable interval from the string.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,224," @param writableInterval  the interval to populate, may be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,225, @param object  the string to set from
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,226," @return an array of size two, containing the start and end millis if interval input is null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,228,"rivate long[] parseInterval(ReadWritableInterval writableInterval, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,208,"public void setInto(ReadWritableInterval writableInterval, Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,247,"ong startInstant, endInstant;"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,248,eriod period;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,227,"long startInstant = 0, endInstant = 0;"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,228,Period period = null;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,229,Chronology parsedChrono = null;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,253,tartInstant = 0;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,256,tartInstant = dateTimeParser.parseMillis(leftStr);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,257,eriod = null;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,236,DateTime start = dateTimeParser.parseDateTime(leftStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,237,startInstant = start.getMillis();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,238,parsedChrono = start.getChronology();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,267,"ndInstant = ISOChronology.getInstance().add(startInstant, period, 1); // TODO"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,248,chrono = (chrono != null ? chrono : parsedChrono);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,249,"endInstant = chrono.add(startInstant, period, 1);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,269,ndInstant = dateTimeParser.parseMillis(rightStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,251,DateTime end = dateTimeParser.parseDateTime(rightStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,252,endInstant = end.getMillis();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,253,parsedChrono = (parsedChrono != null ? parsedChrono : end.getChronology());
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,254,chrono = (chrono != null ? chrono : parsedChrono);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,271,"tartInstant = ISOChronology.getInstance().add(endInstant, period, -1); // TODO"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,256,"startInstant = chrono.add(endInstant, period, -1);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,275,/ return data avoiding object creation and code duplication
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,276,f (writableInterval == null) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,277,"eturn new long[] {startInstant, endInstant};"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,278, else {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,279,"ritableInterval.setInterval(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,280,eturn null;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,260,"writableInterval.setInterval(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,261,writableInterval.setChronology(chrono);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,152,"ssertEquals(TEST_TIME1, test.getStartInstant().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,152,"assertEquals(TEST_TIME1, test.getStart().getMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,154,"ssertEquals(TEST_TIME2, test.getEndInstant().getMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,155,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,156,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,154,"assertEquals(TEST_TIME2, test.getEnd().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,155,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,156,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,161,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,162,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,161,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,162,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,167,"ssertSame(Duration.ZERO, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,167,"assertSame(Duration.ZERO, test.toDuration());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,189,"utableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,190,"ssertEquals(true, test1.equals(test4));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,191,"ssertEquals(true, test2.equals(test4));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,192,"ssertEquals(false, test3.equals(test4));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,193,"ssertEquals(true, test4.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,194,"ssertEquals(true, test4.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,195,"ssertEquals(false, test4.equals(test3));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,196,"ssertEquals(true, test1.hashCode() == test4.hashCode());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,197,"ssertEquals(true, test2.hashCode() == test4.hashCode());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,198,"ssertEquals(false, test3.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,189,"Interval test4 = new Interval(TEST_TIME1, TEST_TIME1, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,190,"assertEquals(true, test4.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,191,"assertEquals(false, test1.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,192,"assertEquals(false, test2.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,193,"assertEquals(false, test4.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,194,"assertEquals(false, test4.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,195,"assertEquals(false, test1.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,196,"assertEquals(false, test2.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,198,"MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,199,"assertEquals(true, test1.equals(test5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,200,"assertEquals(true, test2.equals(test5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,201,"assertEquals(false, test3.equals(test5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,202,"assertEquals(true, test5.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,203,"assertEquals(true, test5.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,204,"assertEquals(false, test5.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,205,"assertEquals(true, test1.hashCode() == test5.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,206,"assertEquals(true, test2.hashCode() == test5.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,207,"assertEquals(false, test3.hashCode() == test5.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,218,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,219,return Chronology.getISO();
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,546,nterval result = test.withStartInstant(new Instant(TEST_TIME1 - 1));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,558,Interval result = test.withStart(new Instant(TEST_TIME1 - 1));
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,554,est.withStartInstant(new Instant(TEST_TIME2 + 1));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,566,test.withStart(new Instant(TEST_TIME2 + 1));
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,561,nterval result = test.withStartInstant(null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,573,Interval result = test.withStart(null);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,591,nterval result = test.withEndInstant(new Instant(TEST_TIME2 - 1));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,603,Interval result = test.withEnd(new Instant(TEST_TIME2 - 1));
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,599,est.withEndInstant(new Instant(TEST_TIME1 - 1));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,611,test.withEnd(new Instant(TEST_TIME1 - 1));
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,606,nterval result = test.withEndInstant(null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,618,Interval result = test.withEnd(null);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,146,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,154,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,167,public void testConstructor_long_long_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,168,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,169,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,170,"Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,171,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,172,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,173,"assertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,176,public void testConstructor_long_long_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,177,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,178,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,179,"Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), null);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,180,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,181,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,182,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,238,public void testConstructor_RI_RI8() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,239,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,240,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,241,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,242,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,243,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,244,"assertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,247,public void testConstructor_RI_RI9() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,248,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,249,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,250,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,251,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,252,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,253,"assertEquals(Chronology.getISO(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,244,nstant dt = new Instant(new DateTime(TEST_TIME_NOW));
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,283,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,247,"esult = ISOChronology.getInstanceUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,248,"esult = ISOChronology.getInstanceUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,249,"esult = ISOChronology.getInstanceUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,286,"result = Chronology.getISOUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,287,"result = Chronology.getISOUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,288,"result = Chronology.getISOUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,328,nstant dt = new Instant(new DateTime(TEST_TIME_NOW));
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,367,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,331,"esult = ISOChronology.getInstanceUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,332,"esult = ISOChronology.getInstanceUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,333,"esult = ISOChronology.getInstanceUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,370,"result = Chronology.getISOUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,371,"result = Chronology.getISOUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,372,"result = Chronology.getISOUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,494,uration dur = base.getDuration();
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,499,"ssertNotSame(dur, test.getDuration());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,506,uration dur = base.getDuration();
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,511,"ssertNotSame(dur, test.getDuration());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,524,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,525,"eturn new long[] {1234L, 5678L};"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,559,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,560,return false;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,527,"ublic void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,562,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,563,interval.setChronology(chrono);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,564,"interval.setInterval(1234L, 5678L);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,548,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,549,"eturn new long[] {1234L, 5678L};"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,585,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,586,return false;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,551,"ublic void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,588,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,589,interval.setChronology(chrono);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,590,"interval.setInterval(1234L, 5678L);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,560,uration dur = base.getDuration();
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,564,"ssertNotSame(dur, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,608,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,609,return Chronology.getISO();
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,574,ublic Instant getStartInstant() {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,575,eturn new Instant(1234L);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,614,public DateTime getStart() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,615,return new DateTime(1234L);
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,580,ublic Instant getEndInstant() {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,581,eturn new Instant(5678L);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,620,public DateTime getEnd() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,621,return new DateTime(5678L);
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,583,ublic long getDurationMillis() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,623,public long toDurationMillis() {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,586,ublic Duration getDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,626,public Duration toDuration() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,152,"ssertEquals(TEST_TIME1, test.getStartInstant().getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,152,"assertEquals(TEST_TIME1, test.getStart().getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,154,"ssertEquals(TEST_TIME2, test.getEndInstant().getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,155,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,156,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,154,"assertEquals(TEST_TIME2, test.getEnd().getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,155,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,156,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,161,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,162,"ssertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,161,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,162,"assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,167,"ssertSame(Duration.ZERO, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,167,"assertSame(Duration.ZERO, test.toDuration());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,209,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,210,return Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,160,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,168,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,181,public void testConstructor_long_long_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,182,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,183,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,184,"MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,185,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,186,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,187,"assertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,190,public void testConstructor_long_long_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,191,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,192,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,193,"MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), null);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,194,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,195,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,196,"assertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,252,public void testConstructor_RI_RI8() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,253,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,254,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,255,"MutableInterval test = new MutableInterval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,256,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,257,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,258,"assertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,261,public void testConstructor_RI_RI9() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,262,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,263,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,264,"MutableInterval test = new MutableInterval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,265,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,266,"assertEquals(dt2.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,267,"assertEquals(Chronology.getISO(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,258,nstant dt = new Instant(new DateTime(TEST_TIME_NOW));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,297,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,261,"esult = ISOChronology.getInstanceUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,262,"esult = ISOChronology.getInstanceUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,263,"esult = ISOChronology.getInstanceUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,300,"result = Chronology.getISOUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,301,"result = Chronology.getISOUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,302,"result = Chronology.getISOUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,342,nstant dt = new Instant(new DateTime(TEST_TIME_NOW));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,381,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,345,"esult = ISOChronology.getInstanceUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,346,"esult = ISOChronology.getInstanceUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,347,"esult = ISOChronology.getInstanceUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,384,"result = Chronology.getISOUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,385,"result = Chronology.getISOUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,386,"result = Chronology.getISOUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,534,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,535,eturn null;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,573,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,574,return false;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,537,"ublic void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,576,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,577,interval.setChronology(chrono);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,559,ublic long[] getIntervalMillis(Object object) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,560,eturn null;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,599,"public boolean isReadableInterval(Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,600,return false;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,562,"ublic void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,602,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,603,interval.setChronology(chrono);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,622,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,623,return Chronology.getISO();
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,584,ublic Instant getStartInstant() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,585,eturn new Instant(1234L);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,628,public DateTime getStart() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,629,return new DateTime(1234L);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,590,ublic Instant getEndInstant() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,591,eturn new Instant(5678L);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,634,public DateTime getEnd() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,635,return new DateTime(5678L);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,593,ublic long getDurationMillis() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,637,public long toDurationMillis() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,596,ublic Duration getDuration() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,640,public Duration toDuration() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,214,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,215,return Chronology.getISO();
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,247,ublic void testSetStartInstant_RI1() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,250,public void testSetStart_RI1() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,249,est.setStartInstant(new Instant(TEST_TIME1 - 1));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,252,test.setStart(new Instant(TEST_TIME1 - 1));
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,254,ublic void testSetStartInstant_RI2() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,257,public void testSetStart_RI2() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,257,est.setStartInstant(new Instant(TEST_TIME2 + 1));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,260,test.setStart(new Instant(TEST_TIME2 + 1));
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,262,ublic void testSetStartInstant_RI3() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,265,public void testSetStart_RI3() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,264,est.setStartInstant(null);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,267,test.setStart(null);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,286,ublic void testSetEndInstant_RI1() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,289,public void testSetEnd_RI1() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,288,est.setEndInstant(new Instant(TEST_TIME2 + 1));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,291,test.setEnd(new Instant(TEST_TIME2 + 1));
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,293,ublic void testSetEndInstant_RI2() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,296,public void testSetEnd_RI2() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,296,est.setEndInstant(new Instant(TEST_TIME1 - 1));
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,299,test.setEnd(new Instant(TEST_TIME1 - 1));
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,301,ublic void testSetEndInstant_RI3() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,304,public void testSetEnd_RI3() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,303,est.setEndInstant(null);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,306,test.setEnd(null);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,730,"uration dur = new Interval(dt1, dt2).getDuration();"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,730,"Duration dur = new Interval(dt1, dt2).toDuration();"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,762,"uration dur = new Interval(dt1, dt2).getDuration();"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,762,"Duration dur = new Interval(dt1, dt2).toDuration();"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,713,"uration dur = new Interval(dt1, dt2).getDuration();"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,713,"Duration dur = new Interval(dt1, dt2).toDuration();"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,745,"uration dur = new Interval(dt1, dt2).getDuration();"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,745,"Duration dur = new Interval(dt1, dt2).toDuration();"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,649,private static int INTERVAL_SIZE = 3;
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,658,c = ConverterManager.getInstance().getIntervalConverter(null);
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,659,"assertEquals(null, c.getSupportedType());"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,661,onverterManager.getInstance().getIntervalConverter(null);
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,666,ConverterManager.getInstance().getIntervalConverter(new Long(0));
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,669,"ssertEquals(2, array.length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,674,"assertEquals(INTERVAL_SIZE, array.length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,675,ublic long[] getIntervalMillis(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,676,"ublic void setInto(ReadWritableInterval interval, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,680,"public boolean isReadableInterval(Object object, Chronology chrono) {return false;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,681,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,683,"ssertEquals(3, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,688,"assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,687,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,692,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,692,ublic long[] getIntervalMillis(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,693,"ublic void setInto(ReadWritableInterval interval, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,697,"public boolean isReadableInterval(Object object, Chronology chrono) {return false;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,698,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,700,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,705,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,704,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,709,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,710,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,715,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,725,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,730,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,733,"ssertEquals(1, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,738,"assertEquals(INTERVAL_SIZE - 1, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,737,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,742,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,742,ublic long[] getIntervalMillis(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,743,"ublic void setInto(ReadWritableInterval interval, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,747,"public boolean isReadableInterval(Object object, Chronology chrono) {return false;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,748,"public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,748,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,753,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,754,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,759,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,769,"ssertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,774,"assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,774,"ssertEquals(""ConverterManager[6 instant,5 duration,5 period,2 interval]"", ConverterManager.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,779,"assertEquals(""ConverterManager[6 instant,5 duration,5 period,3 interval]"", ConverterManager.getInstance().toString());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,67,mport org.joda.time.PeriodType;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,68,import org.joda.time.PeriodType;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,184,public void testIsReadableInterval_Object_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,185,"assertEquals(false, NullConverter.INSTANCE.isReadableInterval(null, null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,150,ublic void testGetIntervalMillis_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,150,public void testIsReadableInterval_Object_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,152,ong[] data = ReadableIntervalConverter.INSTANCE.getIntervalMillis(i);
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,153,"ssertEquals(1234L, data[0]);"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,154,"ssertEquals(5678L, data[1]);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,152,"assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,157,ublic void testSetIntoInterval_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,155,public void testSetIntoInterval_Object1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,156,"Interval i = new Interval(0L, 123L);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,157,"MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,158,"ReadableIntervalConverter.INSTANCE.setInto(m, i, null);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,159,"assertEquals(0L, m.getStartMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,160,"assertEquals(123L, m.getEndMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,161,"assertEquals(Chronology.getCoptic(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,164,public void testSetIntoInterval_Object2() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,160,"eadableIntervalConverter.INSTANCE.setInto(m, i);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,167,"ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,170,"assertEquals(Chronology.getGJ(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,432,ublic void testGetIntervalMillis_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,432,public void testIsReadableInterval_Object_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,433,"assertEquals(false, StringConverter.INSTANCE.isReadableInterval("""", null));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,436,public void testSetIntoInterval_Object_Chronology1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,437,"MutableInterval m = new MutableInterval(-1000L, 1000L);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,438,"StringConverter.INSTANCE.setInto(m, ""2004-06-09/P1Y2M"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,439,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,440,"assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,441,"assertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,444,public void testSetIntoInterval_Object_Chronology2() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,434,"ong[] data = StringConverter.INSTANCE.getIntervalMillis(""2004-06-09/P1Y2M"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,435,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).getMillis(), data[0]);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,436,"ssertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0).getMillis(), data[1]);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,446,"StringConverter.INSTANCE.setInto(m, ""P1Y2M/2004-06-09"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,447,"assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,448,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,449,"assertEquals(Chronology.getISO(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,439,ublic void testSetIntoInterval_Object1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,452,public void testSetIntoInterval_Object_Chronology3() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,441,"tringConverter.INSTANCE.setInto(m, ""2004-06-09/P1Y2M"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,442,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).toInstant(), m.getStartInstant());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,443,"ssertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0).toInstant(), m.getEndInstant());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,454,"StringConverter.INSTANCE.setInto(m, ""2003-08-09/2004-06-09"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,455,"assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,456,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,457,"assertEquals(Chronology.getISO(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,446,ublic void testSetIntoInterval_Object2() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,460,public void testSetIntoInterval_Object_Chronology4() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,448,"tringConverter.INSTANCE.setInto(m, ""P1Y2M/2004-06-09"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,449,"ssertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0).toInstant(), m.getStartInstant());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,450,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).toInstant(), m.getEndInstant());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,462,"StringConverter.INSTANCE.setInto(m, ""2004-06-09T+06:00/P1Y2M"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,463,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,464,"assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,465,"assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,453,ublic void testSetIntoInterval_Object3() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,468,public void testSetIntoInterval_Object_Chronology5() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,455,"tringConverter.INSTANCE.setInto(m, ""2003-08-09/2004-06-09"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,456,"ssertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0).toInstant(), m.getStartInstant());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,457,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).toInstant(), m.getEndInstant());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,470,"StringConverter.INSTANCE.setInto(m, ""P1Y2M/2004-06-09T+06:00"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,471,"assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,472,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,473,"assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,460,ublic void testSetIntoIntervalEx_Object1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,476,public void testSetIntoInterval_Object_Chronology6() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,477,"MutableInterval m = new MutableInterval(-1000L, 1000L);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,478,"StringConverter.INSTANCE.setInto(m, ""2003-08-09T+06:00/2004-06-09T+07:00"", null);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,479,"assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,480,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,481,"assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,484,public void testSetIntoIntervalEx_Object_Chronology1() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,463,"tringConverter.INSTANCE.setInto(m, """");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,487,"StringConverter.INSTANCE.setInto(m, """", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,468,ublic void testSetIntoIntervalEx_Object2() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,492,public void testSetIntoIntervalEx_Object_Chronology2() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,471,"tringConverter.INSTANCE.setInto(m, ""/"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,495,"StringConverter.INSTANCE.setInto(m, ""/"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,476,ublic void testSetIntoIntervalEx_Object3() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,500,public void testSetIntoIntervalEx_Object_Chronology3() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,479,"tringConverter.INSTANCE.setInto(m, ""P1Y/"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,503,"StringConverter.INSTANCE.setInto(m, ""P1Y/"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,484,ublic void testSetIntoIntervalEx_Object4() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,508,public void testSetIntoIntervalEx_Object_Chronology4() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,487,"tringConverter.INSTANCE.setInto(m, ""/P1Y"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,511,"StringConverter.INSTANCE.setInto(m, ""/P1Y"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,492,ublic void testSetIntoIntervalEx_Object5() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,516,public void testSetIntoIntervalEx_Object_Chronology5() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,495,"tringConverter.INSTANCE.setInto(m, ""P1Y/P2Y"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,519,"StringConverter.INSTANCE.setInto(m, ""P1Y/P2Y"", null);"

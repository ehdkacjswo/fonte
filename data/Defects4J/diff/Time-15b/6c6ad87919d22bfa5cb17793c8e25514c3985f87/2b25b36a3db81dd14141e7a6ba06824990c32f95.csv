is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,19,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,20,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,21,import java.util.Date;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,22,import java.util.List;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,23,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,25,import org.joda.time.base.BasePartial;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,27,import org.joda.time.field.AbstractPartialFieldProperty;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,28,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,29,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,30,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,33,* MonthDay is an immutable partial supporting the monthOfYear and dayOfMonth fields.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,34,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,35,* NOTE: This class only supports the two fields listed above.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,36,"* It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,37,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,38,* Calculations on MonthDay are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,39,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,40,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,41,* One use case for this class is to store a birthday without the year (to avoid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,42,* storing the age of the person).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,43,* This class can be used as the gMonthDay type in XML Schema.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,44,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,45,* Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,46,* <ul>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,47,* <li><code>getMonthOfYear()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,48,* <li><code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,49,* </ul>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,50,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,51,* field:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,52,* <ul>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,53,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,54,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,55,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,56,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,57,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,58,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,59,* </ul>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,60,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,61,"* MonthDay is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,62,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,64,* @author Chris Pheby
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,65,* @since 2.0
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,67,public final class MonthDay
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,68,extends BasePartial
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,69,"implements ReadablePartial, Serializable {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,71,/** Serialization version */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,72,private static final long serialVersionUID = 2954560699050434609L;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,74,/** The singleton set of field types */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,75,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,76,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,77,"DateTimeFieldType.dayOfMonth(), };"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,79,/** The index of the monthOfYear field in the field array */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,80,public static final int MONTH_OF_YEAR = 0;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,81,/** The index of the day field in the field array */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,82,public static final int DAY_OF_MONTH = 1;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,86,* Constructs a MonthDay from a <code>java.util.Calendar</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,87,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,88,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,89,* Each field is queried from the Calendar and assigned to the MonthDay.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,90,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,91,* This factory method ignores the type of the calendar and always
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,92,* creates a MonthDay with ISO chronology. It is expected that you
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,93,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,94,* this is not validated.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,96,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,97,"* @return the created MonthDay, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,98,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,99,* @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,101,public static MonthDay fromCalendarFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,102,if (calendar == null) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,103,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,105,"return new MonthDay(calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,109,* Constructs a MonthDay from a <code>java.util.Date</code>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,110,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,111,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,112,* Each field is queried from the Date and assigned to the MonthDay.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,113,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,114,* This factory method always creates a MonthDay with ISO chronology.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,116,* @param date  the Date to extract fields from
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,117,"* @return the created MonthDay, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,118,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,119,* @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,121,"@SuppressWarnings(""deprecation"")"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,122,public static MonthDay fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,123,if (date == null) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,124,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,126,"return new MonthDay(date.getMonth() + 1, date.getDate());"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,131,"* Constructs a MonthDay with the current monthOfYear, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,132,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,133,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,134,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,135,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,136,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,138,public MonthDay() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,139,super();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,143,"* Constructs a MonthDay with the current month-day, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,144,* the specified zone to extract the fields.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,145,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,146,* The constructor uses the specified time zone to obtain the current month-day.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,147,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,148,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,150,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,152,public MonthDay(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,153,super(ISOChronology.getInstance(zone));
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,157,"* Constructs a MonthDay with the current month-day, using the specified chronology"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,158,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,159,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,160,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,161,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,162,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,164,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,166,public MonthDay(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,167,super(chronology);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,171,* Constructs a MonthDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,172,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,173,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,174,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,175,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,176,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,178,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,180,public MonthDay(long instant) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,181,super(instant);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,185,* Constructs a MonthDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,186,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,187,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,188,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,189,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,190,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,192,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,193,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,195,"public MonthDay(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,196,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,200,* Constructs a MonthDay from an Object that represents some form of time.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,201,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,202,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,203,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,204,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,205,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,206,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,207,"* The chronology used will be derived from the object, defaulting to ISO."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,209,"* @param instant  the date-time object, null means now"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,210,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,212,public MonthDay(Object instant) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,213,"super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,217,"* Constructs a MonthDay from an Object that represents some form of time,"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,218,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,219,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,220,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,221,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,222,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,223,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,224,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,225,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,226,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,227,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,228,* The specified chronology overrides that of the object.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,230,"* @param instant  the date-time object, null means now"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,231,"* @param chronology  the chronology, null means ISO default"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,232,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,234,"public MonthDay(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,235,"super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,239,* Constructs a MonthDay with specified year and month
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,240,* using <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,241,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,242,* The constructor uses the no time zone initialising the fields as provided.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,243,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,244,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,246,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,247,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,249,"public MonthDay(int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,250,"this(monthOfYear, dayOfMonth, null);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,254,* Constructs an instance set to the specified monthOfYear and dayOfMonth
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,255,"* using the specified chronology, whose zone is ignored."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,256,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,257,"* If the chronology is null, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,258,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,259,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,260,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,261,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,263,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,264,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,265,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,267,"public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,268,"super(new int[] {monthOfYear, dayOfMonth}, chronology);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,272,* Constructs a MonthDay with chronology from this instance and new values.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,274,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,275,* @param values  the new set of values
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,277,"MonthDay(MonthDay partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,278,"super(partial, values);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,282,* Constructs a MonthDay with values from this instance and a new chronology.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,284,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,285,* @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,287,"MonthDay(MonthDay partial, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,288,"super(partial, chrono);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,293,"* Gets the number of fields in this partial, which is two."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,294,* The supported fields are MonthOfYear and DayOfMonth.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,295,* Note that only these fields may be queried.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,297,"* @return the field count, two"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,299,public int size() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,300,return 2;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,304,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,305,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,306,* This method must not use any instance variables.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,308,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,309,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,310,"* @return the field, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,312,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,313,switch (index) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,314,case MONTH_OF_YEAR:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,315,return chrono.monthOfYear();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,316,case DAY_OF_MONTH:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,317,return chrono.dayOfMonth();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,318,default:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,319,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,324,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,326,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,327,"* @return the field at the specified index, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,328,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,330,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,331,return FIELD_TYPES[index];
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,335,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,336,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,337,"* The fields are returned largest to smallest, Month, Day."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,339,"* @return the array of field types (cloned), largest to smallest, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,341,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,342,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,347,* Returns a copy of this month-day with the specified chronology.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,348,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,349,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,350,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,351,* typically refer to a different instant.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,352,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,353,"* The time zone of the specified chronology is ignored, as MonthDay"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,354,* operates without a time zone.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,356,"* @param newChronology  the new chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,357,"* @return a copy of this month-day with a different chronology, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,358,* @throws IllegalArgumentException if the values are invalid for the new chronology
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,360,public MonthDay withChronologyRetainFields(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,361,newChronology = DateTimeUtils.getChronology(newChronology);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,362,newChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,363,if (newChronology == getChronology()) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,364,return this;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,365,} else {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,366,"MonthDay newMonthDay = new MonthDay(this, newChronology);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,367,"newChronology.validate(newMonthDay, getValues());"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,368,return newMonthDay;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,373,* Returns a copy of this month-day with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,374,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,375,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,376,* would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,377,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,378,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,379,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,380,"* MonthDay updated = md.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,381,* MonthDay updated = md.dayOfMonth().setCopy(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,382,* MonthDay updated = md.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,383,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,385,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,386,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,387,"* @return a copy of this instance with the field set, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,388,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,390,"public MonthDay withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,391,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,392,if (value == getValue(index)) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,393,return this;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,395,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,396,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,397,"return new MonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,401,* Returns a copy of this month-day with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,402,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,403,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,404,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,405,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,406,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,407,"* MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,408,* MonthDay added = md.plusDays(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,409,* MonthDay added = md.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,410,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,412,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,413,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,414,"* @return a copy of this instance with the field updated, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,415,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,416,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,418,"public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,419,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,420,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,421,return this;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,423,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,424,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,425,"return new MonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,429,* Returns a copy of this month-day with the specified period added.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,430,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,431,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,432,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,433,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,434,* This method is typically used to add multiple copies of complex
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,435,* period instances. Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,436,"* like {@link #withFieldAdded(DurationFieldType, int)}"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,437,* or {@link #plusYears(int)}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,439,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,440,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,441,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,442,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,444,"public MonthDay withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,445,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,446,return this;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,448,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,449,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,450,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,451,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,452,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,453,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,454,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,457,"return new MonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,462,* Returns a copy of this month-day with the specified period added.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,463,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,464,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,465,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,466,* This method is typically used to add complex period instances.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,467,* Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,468,* like {@link #plusMonths(int)}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,470,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,471,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,472,* @throws ArithmeticException if the new month-day exceeds the capacity
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,474,public MonthDay plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,475,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,480,* Returns a copy of this month-day plus the specified number of months.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,481,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,482,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,483,* The month will wrap at the end of the year from December to January.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,484,* The day will be adjusted to the last valid value if necessary.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,485,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,486,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,487,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,488,* MonthDay added = md.plusMonths(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,489,* MonthDay added = md.plus(Period.months(6));
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,490,"* MonthDay added = md.withFieldAdded(DurationFieldType.months(), 6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,491,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,493,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,494,"* @return the new month-day plus the increased months, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,496,public MonthDay plusMonths(int months) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,497,"return withFieldAdded(DurationFieldType.months(), months);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,501,* Returns a copy of this month-day plus the specified number of days.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,502,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,503,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,504,* The month will wrap at the end of the year from December to January.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,505,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,506,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,507,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,508,* MonthDay added = md.plusDays(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,509,* MonthDay added = md.plus(Period.days(6));
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,510,"* MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,511,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,513,"* @param days  the amount of days to add, may be negative"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,514,"* @return the new month-day plus the increased days, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,516,public MonthDay plusDays(int days) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,517,"return withFieldAdded(DurationFieldType.days(), days);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,522,* Returns a copy of this month-day with the specified period taken away.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,523,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,524,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,525,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,526,* This method is typically used to subtract complex period instances.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,527,* Subtracting one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,528,* like {@link #minusMonths(int)}.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,530,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,531,"* @return a copy of this instance with the period taken away, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,532,* @throws ArithmeticException if the new month-day exceeds the capacity
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,534,public MonthDay minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,535,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,540,* Returns a copy of this month-day minus the specified number of months.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,541,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,542,* This MonthDay instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,543,* The month will wrap at the end of the year from January to December.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,544,* The day will be adjusted to the last valid value if necessary.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,545,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,546,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,547,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,548,* MonthDay subtracted = md.minusMonths(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,549,* MonthDay subtracted = md.minus(Period.months(6));
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,550,"* MonthDay subtracted = md.withFieldAdded(DurationFieldType.months(), -6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,551,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,553,"* @param months  the amount of months to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,554,"* @return the new month-day minus the increased months, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,556,public MonthDay minusMonths(int months) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,557,"return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,561,* Returns a copy of this month-day minus the specified number of months.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,562,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,563,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,564,* The month will wrap at the end of the year from January to December.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,565,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,566,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,567,* <pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,568,* MonthDay subtracted = md.minusDays(6);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,569,* MonthDay subtracted = md.minus(Period.days(6));
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,570,"* MonthDay subtracted = md.withFieldAdded(DurationFieldType.days(), -6);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,571,* </pre>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,573,"* @param days  the amount of days to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,574,"* @return the new month-day minus the increased days, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,576,public MonthDay minusDays(int days) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,577,"return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,582,* Converts this object to a LocalDate with the same month-day and chronology.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,584,"* @param year  the year to use, valid for chronology"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,585,"* @return a LocalDate with the same month-day and chronology, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,587,public LocalDate toLocalDate(int year) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,588,"return new LocalDate(year, getMonthOfYear(), getDayOfMonth(), getChronology());"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,593,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,595,* @return the month of year
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,597,public int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,598,return getValue(MONTH_OF_YEAR);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,602,* Get the day of month field value.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,604,* @return the day of month
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,606,public int getDayOfMonth() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,607,return getValue(DAY_OF_MONTH);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,612,* Returns a copy of this month-day with the month of year field updated.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,613,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,614,"* MonthDay is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,615,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,616,* month of year changed.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,618,* @param monthOfYear  the month of year to set
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,619,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,620,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,622,public MonthDay withMonthOfYear(int monthOfYear) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,623,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,624,"newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,625,"return new MonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,629,* Returns a copy of this month-day with the day of month field updated.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,630,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,631,"* MonthDay is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,632,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,633,* day of month changed.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,635,* @param dayOMonth  the day of month to set
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,636,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,637,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,639,public MonthDay withDayOfMonth(int dayOfMonth) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,640,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,641,"newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,642,"return new MonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,647,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,648,* many useful methods.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,650,* @param type  the field type to get the property for
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,651,* @return the property object
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,652,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,654,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,655,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,660,* Get the month of year field property which provides access to advanced functionality.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,662,* @return the month of year property
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,664,public Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,665,"return new Property(this, MONTH_OF_YEAR);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,669,* Get the day of month field property which provides access to advanced functionality.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,671,* @return the day of month property
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,673,public Property dayOfMonth() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,674,"return new Property(this, DAY_OF_MONTH);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,679,* Output the month-day in ISO8601 format (--MM-dd).
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,681,* @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,683,public String toString() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,684,List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,685,fields.add(DateTimeFieldType.monthOfYear());
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,686,fields.add(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,687,"return ISODateTimeFormat.forFields(fields, true, true).print(this);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,691,* Output the month-day using the specified format pattern.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,693,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,694,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,696,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,697,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,698,return toString();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,700,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,704,* Output the month-day using the specified format pattern.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,706,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,707,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,708,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,710,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,711,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,712,return toString();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,714,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,719,* The property class for <code>MonthDay</code>.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,720,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,721,* This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,723,* @author Chris Pheby
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,724,* @since 2.0
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,726,public static class Property extends AbstractPartialFieldProperty implements Serializable {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,728,/** Serialization version */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,729,private static final long serialVersionUID = 5727734012190224363L;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,731,/** The partial */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,732,private final MonthDay iBase;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,733,/** The field index */
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,734,private final int iFieldIndex;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,737,* Constructs a property.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,739,* @param partial  the partial instance
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,740,* @param fieldIndex  the index in the partial
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,742,"Property(MonthDay partial, int fieldIndex) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,743,super();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,744,iBase = partial;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,745,iFieldIndex = fieldIndex;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,749,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,751,* @return the field
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,753,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,754,return iBase.getField(iFieldIndex);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,758,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,760,* @return the partial
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,762,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,763,return iBase;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,767,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,769,* @return the partial
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,771,public MonthDay getMonthDay() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,772,return iBase;
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,776,* Gets the value of this field.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,778,* @return the field value
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,780,public int get() {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,781,return iBase.getValue(iFieldIndex);
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,786,* Adds to the value of this field in a copy of this MonthDay.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,787,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,788,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,789,* added solely to this field then it will affect larger fields.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,790,* Smaller fields are unaffected.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,791,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,792,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,793,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,795,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,796,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,797,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,799,public MonthDay addToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,800,int[] newValues = iBase.getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,801,"newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,802,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,806,* Adds to the value of this field in a copy of this MonthDay wrapping
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,807,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,808,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,809,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,810,* added solely to this field then it wraps within this field.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,811,* Other fields are unaffected.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,812,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,813,"* For example,"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,814,* <code>--12-30</code> addWrapField one month returns <code>--01-30</code>.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,815,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,816,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,817,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,819,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,820,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,821,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,823,public MonthDay addWrapFieldToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,824,int[] newValues = iBase.getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,825,"newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,826,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,831,* Sets this field in a copy of the MonthDay.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,832,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,833,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,834,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,836,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,837,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,838,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,840,public MonthDay setCopy(int value) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,841,int[] newValues = iBase.getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,842,"newValues = getField().set(iBase, iFieldIndex, newValues, value);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,843,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,847,* Sets this field in a copy of the MonthDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,848,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,849,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,850,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,852,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,853,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,854,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,855,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,857,"public MonthDay setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,858,int[] newValues = iBase.getValues();
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,859,"newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,860,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,864,* Sets this field in a copy of the MonthDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,865,* <p>
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,866,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,867,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,869,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,870,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,871,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,873,public MonthDay setCopy(String text) {
True,JodaTime/src/java/org/joda/time/MonthDay.java,JodaTime/src/java/org/joda/time/MonthDay.java,874,"return setCopy(text, null);"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,108,suite.addTest(TestMonthDay_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,109,suite.addTest(TestMonthDay_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,110,suite.addTest(TestMonthDay_Properties.suite());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,23,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,25,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,26,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,28,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,30,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,31,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,32,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,33,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,36,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Basics}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,38,public class TestMonthDay_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,42,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,43,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,44,//    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,45,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,46,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,47,//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,48,//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,49,//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,50,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,51,//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,52,//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,53,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,54,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,56,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,57,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,59,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,61,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,62,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,65,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,66,return new TestSuite(TestMonthDay_Basics.class);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,69,public TestMonthDay_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,70,super(name);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,73,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,74,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,75,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,76,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,79,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,80,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,81,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,82,zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,86,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,87,MonthDay test = new MonthDay();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,88,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,89,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,90,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,91,test.get(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,92,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,93,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,94,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,95,test.get(DateTimeFieldType.year());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,96,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,97,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,100,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,101,MonthDay test = new MonthDay();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,102,"assertEquals(2, test.size());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,105,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,106,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,107,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,108,"assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,110,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,111,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,112,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,113,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,114,test.getFieldType(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,115,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,118,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,119,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,120,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,121,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,122,"assertSame(DateTimeFieldType.monthOfYear(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,123,"assertSame(DateTimeFieldType.dayOfMonth(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,124,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,127,public void testGetField() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,128,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,129,"assertSame(COPTIC_UTC.monthOfYear(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,130,"assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,131,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,132,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,133,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,134,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,135,test.getField(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,136,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,139,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,140,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,141,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,142,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,143,"assertSame(COPTIC_UTC.monthOfYear(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,144,"assertSame(COPTIC_UTC.dayOfMonth(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,145,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,148,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,149,MonthDay test = new MonthDay();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,150,"assertEquals(6, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,151,"assertEquals(9, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,152,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,153,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,154,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,155,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,156,test.getValue(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,157,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,160,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,161,MonthDay test = new MonthDay();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,162,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,163,"assertEquals(2, values.length);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,164,"assertEquals(6, values[0]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,165,"assertEquals(9, values[1]);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,166,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,169,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,170,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,171,"assertEquals(false, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,172,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,173,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,174,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,177,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,178,"MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,179,"MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,180,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,181,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,182,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,183,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,184,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,185,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,186,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,188,"MonthDay test3 = new MonthDay(10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,189,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,190,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,191,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,192,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,193,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,194,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,196,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,197,"assertEquals(true, test1.equals(new MockMD()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,198,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,201,class MockMD extends MockPartial {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,203,@Override
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,204,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,205,return COPTIC_UTC;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,208,@Override
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,209,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,210,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,211,"COPTIC_UTC.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,212,COPTIC_UTC.dayOfMonth()
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,216,@Override
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,217,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,218,"return new int[] {10, 6};"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,223,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,224,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,225,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,226,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,227,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,228,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,229,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,231,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,232,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,233,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,235,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,236,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,237,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,238,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,240,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,241,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,242,DateTimeFieldType.dayOfMonth()
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,244,"int[] values = new int[] {6, 6};"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,245,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,246,"assertEquals(0, test1.compareTo(p));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,247,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,248,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,249,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,250,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,251,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,252,test1.compareTo(new LocalTime());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,253,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,254,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,255,Partial partial = new Partial()
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,256,".with(DateTimeFieldType.centuryOfEra(), 1)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,257,".with(DateTimeFieldType.halfdayOfDay(), 0)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,258,".with(DateTimeFieldType.dayOfMonth(), 9);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,259,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,260,"new MonthDay(10, 6).compareTo(partial);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,261,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,262,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,266,public void testIsEqual_MD() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,267,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,268,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,269,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,270,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,271,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,272,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,274,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,275,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,276,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,278,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,279,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,280,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,281,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,283,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,284,"new MonthDay(6, 7).isEqual(null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,285,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,286,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,290,public void testIsBefore_MD() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,291,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,292,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,293,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,294,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,295,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,296,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,298,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,299,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,300,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,302,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,303,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,304,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,305,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,307,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,308,"new MonthDay(6, 7).isBefore(null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,309,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,310,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,314,public void testIsAfter_MD() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,315,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,316,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,317,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,318,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,319,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,320,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,322,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,323,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,324,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,326,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,327,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,328,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,329,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,331,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,332,"new MonthDay(6, 7).isAfter(null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,333,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,334,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,338,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,339,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,340,MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,341,"check(base, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,342,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,343,"check(test, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,344,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,347,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,348,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,349,MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,350,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,353,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,354,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,355,MonthDay test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,356,"check(base, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,357,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,358,"check(test, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,359,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,363,public void testWithField() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,364,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,365,"MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,367,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,368,"assertEquals(new MonthDay(10, 6), result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,371,public void testWithField_nullField() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,372,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,373,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,374,"test.withField(null, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,375,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,376,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,379,public void testWithField_unknownField() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,380,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,381,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,382,"test.withField(DateTimeFieldType.hourOfDay(), 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,383,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,384,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,387,public void testWithField_same() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,388,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,389,"MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,390,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,391,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,395,public void testWithFieldAdded() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,396,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,397,"MonthDay result = test.withFieldAdded(DurationFieldType.months(), 1);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,399,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,400,"assertEquals(new MonthDay(10, 6), result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,403,public void testWithFieldAdded_nullField_zero() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,404,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,405,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,406,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,407,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,408,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,411,public void testWithFieldAdded_nullField_nonZero() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,412,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,413,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,414,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,415,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,416,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,419,public void testWithFieldAdded_zero() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,420,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,421,"MonthDay result = test.withFieldAdded(DurationFieldType.months(), 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,422,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,425,public void testWithFieldAdded_unknownField() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,426,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,427,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,428,"test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,429,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,430,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,434,public void testPlus_RP() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,435,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,436,"MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,437,"MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,438,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,440,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,441,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,444,public void testPlusMonths_int() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,445,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,446,MonthDay result = test.plusMonths(1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,447,"MonthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,448,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,451,public void testPlusMonths_int_same() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,452,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,453,MonthDay result = test.plusMonths(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,454,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,457,public void testPlusMonths_int_wrap() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,458,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,459,MonthDay result = test.plusMonths(10);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,460,"MonthDay expected = new MonthDay(4, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,461,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,464,public void testPlusMonths_int_adjust() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,465,"MonthDay test = new MonthDay(7, 31, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,466,MonthDay result = test.plusMonths(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,467,"MonthDay expected = new MonthDay(9, 30, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,468,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,471,public void testPlusDays_int() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,472,"MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,473,MonthDay result = test.plusDays(1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,474,"MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,475,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,478,public void testPlusDays_same() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,479,"MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,480,MonthDay result = test.plusDays(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,481,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,485,public void testMinus_RP() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,486,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,487,"MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,488,"MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,489,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,491,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,492,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,495,public void testMinusMonths_int() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,496,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,497,MonthDay result = test.minusMonths(1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,498,"MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,499,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,502,public void testMinusMonths_int_same() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,503,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,504,MonthDay result = test.minusMonths(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,505,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,508,public void testMinusMonths_int_wrap() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,509,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,510,MonthDay result = test.minusMonths(10);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,511,"MonthDay expected = new MonthDay(8, 5, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,512,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,515,public void testMinusMonths_int_adjust() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,516,"MonthDay test = new MonthDay(7, 31, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,517,MonthDay result = test.minusMonths(3);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,518,"MonthDay expected = new MonthDay(4, 30, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,519,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,522,public void testMinusDays_int() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,523,"MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,524,MonthDay result = test.minusDays(1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,525,"MonthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,526,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,529,public void testMinusDays_same() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,530,"MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,531,MonthDay result = test.minusDays(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,532,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,536,public void testToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,537,"MonthDay base = new MonthDay(6, 6, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,538,LocalDate test = base.toLocalDate(2009);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,539,"assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,540,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,541,base.toLocalDate(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,542,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,543,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,547,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,548,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,549,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,551,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,552,"check(base, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,553,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,554,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,555,expected = expected.dayOfMonth().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,556,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,559,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,560,"MonthDay base = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,561,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,562,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,564,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,565,"check(base, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,566,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,567,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,568,expected = expected.dayOfMonth().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,569,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,573,public void testWithers() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,574,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,575,"check(test.withMonthOfYear(5), 5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,576,"check(test.withDayOfMonth(2), 10, 2);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,577,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,578,test.withMonthOfYear(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,579,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,580,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,581,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,582,test.withMonthOfYear(13);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,583,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,584,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,588,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,589,"MonthDay test = new MonthDay(6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,590,"assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,591,"assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,592,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,593,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,594,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,595,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,596,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,597,test.property(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,598,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,599,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,603,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,604,"MonthDay test = new MonthDay(5, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,606,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,607,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,608,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,609,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,610,oos.close();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,612,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,613,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,614,MonthDay result = (MonthDay) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,615,ois.close();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,617,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,618,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,619,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,620,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,624,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,625,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,626,"assertEquals(""--05-06"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,630,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,631,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,632,"assertEquals(""05 \ufffd\ufffd"", test.toString(""MM HH""));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,633,"assertEquals(""--05-06"", test.toString((String) null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,637,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,638,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,639,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,640,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,641,"assertEquals(""--05-06"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,642,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,643,"assertEquals(""--05-06"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,647,public void testToString_DTFormatter() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,648,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,649,"assertEquals(""05 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""MM HH"")));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,650,"assertEquals(""--05-06"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,654,"private void check(MonthDay test, int month, int day) {"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,655,"assertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestMonthDay_Basics.java,656,"assertEquals(day, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,25,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,29,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Constuctors}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,31,public class TestMonthDay_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,33,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,34,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,35,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,36,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,37,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,39,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,40,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,42,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,43,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,44,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,45,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,47,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,48,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,49,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,50,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,52,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,54,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,55,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,58,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,59,return new TestSuite(TestMonthDay_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,62,public TestMonthDay_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,63,super(name);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,66,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,67,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,68,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,69,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,72,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,73,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,74,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,75,zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,79,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,80,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,81,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,82,"MonthDay expected = new MonthDay(2, 3);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,83,"assertEquals(expected, MonthDay.fromCalendarFields(cal));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,84,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,85,MonthDay.fromCalendarFields(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,86,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,87,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,91,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,92,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,93,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,94,"MonthDay expected = new MonthDay(2, 3);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,95,"assertEquals(expected, MonthDay.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,96,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,97,MonthDay.fromDateFields(null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,98,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,99,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,104,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,106,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,107,MonthDay test = new MonthDay();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,108,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,109,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,110,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,114,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,116,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,117,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,118,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,119,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,121,MonthDay test = new MonthDay(LONDON);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,122,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,123,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,124,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,126,test = new MonthDay(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,127,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,128,"assertEquals(7, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,129,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,133,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,135,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,136,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,137,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,138,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,140,MonthDay test = new MonthDay((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,141,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,142,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,143,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,147,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,149,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,150,MonthDay test = new MonthDay(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,151,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,152,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,153,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,157,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,159,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,160,MonthDay test = new MonthDay((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,161,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,162,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,163,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,168,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,170,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,171,MonthDay test = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,172,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,173,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,174,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,178,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,180,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,181,MonthDay test = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,182,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,183,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,184,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,188,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,190,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,191,"MonthDay test = new MonthDay(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,192,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,193,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,194,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,198,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,200,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,201,"MonthDay test = new MonthDay(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,202,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,203,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,204,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,208,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,210,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,211,"MonthDay test = new MonthDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,212,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,213,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,214,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,218,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,219,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,220,MonthDay test = new MonthDay(date);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,221,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,222,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,223,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,226,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,227,MonthDay test = new MonthDay((Object) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,228,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,229,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,230,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,233,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,234,"MonthDay test = new MonthDay(""1972-12"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,235,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,236,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,237,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,240,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,241,"MonthDay test = new MonthDay(""1972-12-01T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,242,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,243,"assertEquals(11, test.getMonthOfYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,244,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,247,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,248,"MonthDay test = new MonthDay(""1972-12-03T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,249,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,250,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,251,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,254,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,255,"MonthDay test = new MonthDay(""1972-12-01T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,256,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,257,"assertEquals(11, test.getMonthOfYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,258,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,261,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,262,"MonthDay test = new MonthDay(""10"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,263,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,264,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,265,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,268,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,269,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,270,"new MonthDay(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,271,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,272,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,273,// expected
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,277,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,278,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,279,"new MonthDay(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,280,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,281,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,282,// expected
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,286,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,287,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,288,"new MonthDay(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,289,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,290,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,291,// expected
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,295,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,296,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,297,"new MonthDay(""10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,298,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,299,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,300,// expected
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,306,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,308,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,309,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,310,"MonthDay test = new MonthDay(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,311,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,312,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,313,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,317,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,319,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,320,"MonthDay test = new MonthDay((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,321,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,322,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,323,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,327,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,329,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,330,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,331,"MonthDay test = new MonthDay(date, null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,332,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,333,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,334,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,338,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,340,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,341,"MonthDay test = new MonthDay((Object) null, null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,342,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,343,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,344,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,349,"* Test constructor (int, int)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,351,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,352,"MonthDay test = new MonthDay(6, 30);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,353,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,354,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,355,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,356,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,357,"new MonthDay(Integer.MIN_VALUE, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,358,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,359,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,360,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,361,"new MonthDay(Integer.MAX_VALUE, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,362,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,363,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,364,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,365,"new MonthDay(1970, 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,366,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,367,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,368,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,369,"new MonthDay(1970, 13);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,370,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,371,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,375,"* Test constructor (int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,377,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,378,"MonthDay test = new MonthDay(6, 30, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,379,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,380,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,381,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,382,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,383,"new MonthDay(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,384,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,385,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,386,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,387,"new MonthDay(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,388,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,389,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,390,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,391,"new MonthDay(1970, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,392,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,393,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,394,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,395,"new MonthDay(1970, 13, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,396,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,397,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,401,"* Test constructor (int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,403,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,404,"MonthDay test = new MonthDay(6, 30, null);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,405,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,406,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestMonthDay_Constructors.java,407,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,23,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,28,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Propeties}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,30,public class TestMonthDay_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,32,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,33,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,35,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,36,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,38,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,39,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,40,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,41,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,43,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,44,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,45,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,46,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,48,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,50,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,51,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,54,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,55,return new TestSuite(TestMonthDay_Properties.class);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,58,public TestMonthDay_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,59,super(name);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,62,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,63,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,64,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,65,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,68,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,69,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,70,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,71,zone = null;
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,75,public void testPropertyGetMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,76,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,77,"assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,78,"assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,79,"assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,80,"assertSame(test, test.monthOfYear().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,81,"assertSame(test, test.monthOfYear().getMonthDay());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,82,"assertEquals(9, test.monthOfYear().get());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,83,"assertEquals(""9"", test.monthOfYear().getAsString());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,84,"assertEquals(""September"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,85,"assertEquals(""septembre"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,86,"assertEquals(""Sep"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,87,"assertEquals(""sept."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,88,"assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,89,"// assertEquals(test.getChronology().days(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,90,"assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,91,"assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,94,public void testPropertyGetMaxMinValuesMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,95,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,96,"assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,97,"assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,98,"assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,99,"assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,102,public void testPropertyAddMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,103,"MonthDay test = new MonthDay(3, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,104,MonthDay copy = test.monthOfYear().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,105,"check(test, 3, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,106,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,108,copy = test.monthOfYear().addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,109,"check(copy, 3, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,111,"check(test, 3, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,113,copy = test.monthOfYear().addToCopy(-3);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,114,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,115,"check(test, 3, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,118,public void testPropertyAddWrapFieldMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,119,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,120,MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,121,"check(test, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,122,"check(copy, 7, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,124,copy = test.monthOfYear().addWrapFieldToCopy(2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,125,"check(copy, 7, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,127,copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,128,"check(copy, 11, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,130,copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,131,"check(copy, 6, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,134,public void testPropertySetMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,135,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,136,MonthDay copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,137,"check(test, 10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,138,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,141,public void testPropertySetTextMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,142,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,143,"MonthDay copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,144,"check(test, 10, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,145,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,148,public void testPropertyCompareToMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,149,MonthDay test1 = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,150,MonthDay test2 = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,151,"assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,152,"assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,153,"assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,154,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,155,test1.monthOfYear().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,156,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,157,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,159,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,160,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,161,"assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,162,"assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,163,"assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,164,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,165,test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,166,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,167,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,171,public void testPropertyGetDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,172,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,173,"assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,174,"assertEquals(""dayOfMonth"", test.dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,175,"assertEquals(""Property[dayOfMonth]"", test.dayOfMonth().toString());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,176,"assertSame(test, test.dayOfMonth().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,177,"assertSame(test, test.dayOfMonth().getMonthDay());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,178,"assertEquals(6, test.dayOfMonth().get());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,179,"assertEquals(""6"", test.dayOfMonth().getAsString());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,180,"assertEquals(""6"", test.dayOfMonth().getAsText());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,181,"assertEquals(""6"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,182,"assertEquals(""6"", test.dayOfMonth().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,183,"assertEquals(""6"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,184,"assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,185,"assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,186,"assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,187,"assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,188,"test = new MonthDay(4, 7);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,189,"assertEquals(""7"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,190,"assertEquals(""7"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,193,public void testPropertyGetMaxMinValuesDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,194,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,195,"assertEquals(1, test.dayOfMonth().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,196,"assertEquals(1, test.dayOfMonth().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,197,"assertEquals(30, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,198,"assertEquals(31, test.dayOfMonth().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,201,public void testPropertyAddDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,202,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,203,MonthDay copy = test.dayOfMonth().addToCopy(6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,204,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,205,"check(copy, 4, 12);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,207,copy = test.dayOfMonth().addToCopy(7);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,208,"check(copy, 4, 13);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,210,copy = test.dayOfMonth().addToCopy(-5);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,211,"check(copy, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,213,copy = test.dayOfMonth().addToCopy(-6);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,214,"check(copy, 3, 31);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,217,public void testPropertyAddWrapFieldDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,218,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,219,MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,220,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,221,"check(copy, 4, 10);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,223,copy = test.dayOfMonth().addWrapFieldToCopy(8);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,224,"check(copy, 4, 14);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,226,copy = test.dayOfMonth().addWrapFieldToCopy(-8);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,227,"check(copy, 4, 28);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,230,public void testPropertySetDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,231,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,232,MonthDay copy = test.dayOfMonth().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,233,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,234,"check(copy, 4, 12);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,236,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,237,test.dayOfMonth().setCopy(33);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,238,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,239,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,240,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,241,test.dayOfMonth().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,242,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,243,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,246,public void testPropertySetTextDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,247,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,248,"MonthDay copy = test.dayOfMonth().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,249,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,250,"check(copy, 4, 12);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,252,"copy = test.dayOfMonth().setCopy(""2"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,253,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,254,"check(copy, 4, 2);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,256,"copy = test.dayOfMonth().setCopy(""4"");"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,257,"check(test, 4, 6);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,258,"check(copy, 4, 4);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,261,public void testPropertyCompareToDayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,262,MonthDay test1 = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,263,MonthDay test2 = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,264,"assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,265,"assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,266,"assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,267,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,268,test1.dayOfMonth().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,269,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,270,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,272,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,273,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,274,"assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,275,"assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,276,"assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,277,try {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,278,test1.dayOfMonth().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,279,fail();
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,280,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,284,public void testPropertyEquals() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,285,"MonthDay test1 = new MonthDay(11, 11);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,286,"MonthDay test2 = new MonthDay(11, 12);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,287,"MonthDay test3 = new MonthDay(11, 11, CopticChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,288,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,289,"assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,290,"assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,291,"assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,293,"assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,294,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,295,"assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,296,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,298,"assertEquals(false, test1.dayOfMonth().equals(null));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,299,"assertEquals(false, test1.dayOfMonth().equals(""any""));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,301,// chrono
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,302,"assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,305,public void testPropertyHashCode() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,306,"MonthDay test1 = new MonthDay(5, 11);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,307,"MonthDay test2 = new MonthDay(5, 12);"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,308,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,309,"assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,310,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,311,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,314,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,315,"MonthDay test1 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,316,"MonthDay test2 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,317,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,318,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,319,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,320,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,321,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,322,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,323,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,326,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,327,"MonthDay test1 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,328,"MonthDay test2 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,329,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,330,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,331,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,332,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,333,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,334,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,335,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,339,"private void check(MonthDay test, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,340,"assertEquals(monthOfYear, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestMonthDay_Properties.java,341,"assertEquals(dayOfMonth, test.getDayOfMonth());"

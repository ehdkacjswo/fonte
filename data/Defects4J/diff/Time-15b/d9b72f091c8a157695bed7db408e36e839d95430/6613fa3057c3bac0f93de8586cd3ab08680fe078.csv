is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,98,eriod duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,98,IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,99,if (this instanceof ReadWritableInterval) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,100,"converter.setInto((ReadWritableInterval) this, interval);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,101,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,102,long[] millis = converter.getIntervalMillis(interval);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,103,iStartMillis = millis[0];
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,104,iEndMillis = millis[1];
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,101,StartMillis = ri.iStartMillis;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,102,StartInstant = ri.iStartInstant;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,103,EndMillis = ri.iEndMillis;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,104,EndInstant = ri.iEndInstant;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,105,Duration = ri.iDuration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,107, else if (interval instanceof ReadableInterval) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,108,eadableInterval ri = (ReadableInterval) interval;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,109,StartMillis = ri.getStartMillis();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,110,EndMillis = ri.getEndMillis();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,112, else {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,113,ntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,114,f (this instanceof ReadWritableInterval) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,115,"onverter.setInto((ReadWritableInterval) this, interval);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,116, else {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,117,utableInterval mi = new MutableInterval();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,118,"onverter.setInto(mi, interval);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,119,StartMillis = mi.getStartMillis();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,120,EndMillis = mi.getEndMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,108,if (iStartMillis == ri.iStartMillis && iEndMillis == ri.iEndMillis) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,109,// this double checks against weird converters
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,110,iStartInstant = ri.iStartInstant;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,111,iEndInstant = ri.iEndInstant;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,112,iDuration = ri.iDuration;
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,62,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,68,* Extracts the start and end millisecond instants from the object.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,70,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,71,* @return the start millis and end millis in an array of size two
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,72,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,74,long[] getIntervalMillis(Object object);
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,105,* Extracts the start and end millisecond instants from the object.
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,107,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,108,* @return the start millis and end millis in an array of size two
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,109,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,111,public long[] getIntervalMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,112,ReadableInterval interval = (ReadableInterval) object;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,113,"return new long[] {interval.getStartMillis(), interval.getEndMillis()};"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,171,* Extracts the start and end millisecond instants from the object.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,173,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,174,* @return the start millis and end millis in an array
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,175,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,177,public long[] getIntervalMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,178,"return parseInterval(null, object);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,188,"parseInterval(writableInterval, object);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,192,* Sets the value of the mutable interval from the string.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,194,"* @param writableInterval  the interval to populate, may be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,195,* @param object  the string to set from
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,196,"* @return an array of size two, containing the start and end millis if interval input is null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,198,"private long[] parseInterval(ReadWritableInterval writableInterval, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,194,eriodFormatter durationParser = ISOPeriodFormat.getInstance().standard();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,195,ong startInstant;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,216,PeriodFormatter periodParser = ISOPeriodFormat.getInstance().standard();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,217,"long startInstant, endInstant;"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,220,// before slash
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,201,"eriod = durationParser.parsePeriod(getPeriodType(leftStr, false), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,224,"period = periodParser.parsePeriod(getPeriodType(leftStr, false), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,230,// after slash
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,212,"eriod = durationParser.parsePeriod(getPeriodType(rightStr, false), rightStr);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,213,ritableInterval.setStartMillis(startInstant);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,214,ritableInterval.setPeriodAfterStart(period);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,236,"period = periodParser.parsePeriod(getPeriodType(rightStr, false), rightStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,237,"endInstant = period.addTo(startInstant, 1);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,216,ong endInstant = dateTimeParser.parseMillis(rightStr);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,217,ritableInterval.setEndMillis(endInstant);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,218,f (period == null) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,219,ritableInterval.setStartMillis(startInstant);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,220, else {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,221,ritableInterval.setPeriodBeforeEnd(period);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,239,endInstant = dateTimeParser.parseMillis(rightStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,240,if (period != null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,241,"startInstant = period.addTo(endInstant, -1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,245,// return data avoiding object creation and code duplication
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,246,if (writableInterval == null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,247,"return new long[] {startInstant, endInstant};"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,248,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,249,writableInterval.setStartMillis(startInstant);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,250,writableInterval.setEndMillis(endInstant);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,251,return null;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,60,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,61,import org.joda.time.convert.IntervalConverter;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,467,public void testConstructor_Object5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,468,"IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter("""");"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,469,IntervalConverter conv = new IntervalConverter() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,470,public long[] getIntervalMillis(Object object) {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,471,"return new long[] {1234L, 5678L};"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,473,"public void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,475,public Class getSupportedType() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,476,return String.class;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,479,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,480,ConverterManager.getInstance().addIntervalConverter(conv);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,481,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,482,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,483,Interval test = new Interval(dt1.toString() + '/' + dt2.toString());
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,484,"assertEquals(1234L, test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,485,"assertEquals(5678L, test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,486,} finally {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,487,ConverterManager.getInstance().addIntervalConverter(oldConv);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,491,public void testConstructor_Object6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,492,"IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 0L));"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,493,IntervalConverter conv = new IntervalConverter() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,494,public long[] getIntervalMillis(Object object) {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,495,"return new long[] {1234L, 5678L};"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,497,"public void setInto(ReadWritableInterval interval, Object object) {"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,499,public Class getSupportedType() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,500,return ReadableInterval.class;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,503,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,504,ConverterManager.getInstance().addIntervalConverter(conv);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,505,"Interval base = new Interval(-1000L, 1000L);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,506,Duration dur = base.getDuration();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,507,Instant start = base.getStartInstant();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,508,Instant end = base.getEndInstant();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,509,Interval test = new Interval(base);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,510,"assertEquals(1234L, test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,511,"assertEquals(5678L, test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,512,"assertNotSame(dur, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,513,"assertNotSame(start, test.getStartInstant());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,514,"assertNotSame(end, test.getEndInstant());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,515,} finally {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,516,ConverterManager.getInstance().addIntervalConverter(oldConv);
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,678,public long[] getIntervalMillis(Object object) {return null;}
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,695,public long[] getIntervalMillis(Object object) {return null;}
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,745,public long[] getIntervalMillis(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,137,ublic void testSetInto_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,137,public void testSetIntoPeriod_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,152,public void testGetIntervalMillis_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,153,"Interval i = new Interval(1234L, 5678L);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,154,long[] data = ReadableIntervalConverter.INSTANCE.getIntervalMillis(i);
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,155,"assertEquals(1234L, data[0]);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,156,"assertEquals(5678L, data[1]);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,331,ublic void testSetInto_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,331,public void testSetIntoPeriod_Object1() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,342, = new MutablePeriod(PeriodType.getYearWeekType());
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,343,public void testSetIntoPeriod_Object2() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,344,MutablePeriod m = new MutablePeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,352," = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.getYearWeekType());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,355,public void testSetIntoPeriod_Object3() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,356,"MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.getYearWeekType());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,367,public void testSetIntoPeriod_Object4() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,368,MutablePeriod m = new MutablePeriod();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,381,public void testGetIntervalMillis_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,382,"MutableInterval m = new MutableInterval(-1000L, 1000L);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,383,"long[] data = StringConverter.INSTANCE.getIntervalMillis(""2004-06-09/P1Y2M"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,384,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).getMillis(), data[0]);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,385,"assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0).getMillis(), data[1]);"

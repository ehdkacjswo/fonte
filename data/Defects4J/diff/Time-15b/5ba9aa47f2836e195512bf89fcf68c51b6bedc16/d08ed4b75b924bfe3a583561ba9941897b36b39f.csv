is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,321,"* Gets a copy of this instant with a different chronology, potentially"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,322,* changing the day in unexpected ways.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,323,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,324,* This method creates a new DateMidnight using the midnight millisecond value
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,325,"* and the new chronology. If the same or similar chronology is specified, but"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,326,"* with a different time zone, the day may change. This occurs because the new"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,327,"* DateMidnight rounds down the millisecond value to get to midnight, and the"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,328,* time zone change may result in a rounding down to a different day.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,329,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,330,"* For example, changing time zone from London (+00:00) to Paris (+01:00) will"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,331,"* retain the same day, but changing from Paris to London will change the day."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,332,"* (When its midnight in London its the same day in Paris, but when its midnight"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,333,* in Paris its still the previous day in London)
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,334,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,335,"* To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,336,* to change time zones.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,338,"* @param newChronologyType  the new chronology type, null means ISO"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,339,* @return a copy of this datetime with a different chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,341,public DateMidnight withChronologyType(ChronologyType newChronologyType) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,342,newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,343,return (newChronologyType == getChronologyType() ? this :
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,344,"new DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,342, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,343," Only the millis will change, the chronology and time zone are kept."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,343,"* Only the millis will change, the chronology and time zone are kept."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,356, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,357," Only the chronology will change, the millis are kept."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,356,"* Only the chronology will change, the millis are kept."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,367,* Gets a copy of this datetime with a different chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,368,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,369,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,370,"* Only the chronology will change, the millis and time zone are kept."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,372,"* @param newChronologyType  the new chronology type, null means ISO"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,373,* @return a copy of this datetime with a different chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,375,public DateTime withChronologyType(ChronologyType newChronologyType) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376,newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,377,return (newChronologyType == getChronologyType() ? this :
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,378,"new DateTime(getMillis(), newChronologyType.getChronology(getZone())));"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,239,* Gets the chronology type handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,240,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,241,"* If the chronology type is <code>null</code>, {@link ChronologyType#iso()}"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,242,"* will be returned. Otherwise, the chronology type is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,244,"* @param type  the chronology type to use, null means ISO"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,245,"* @return the chronology type, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,247,public static final ChronologyType getChronologyType(ChronologyType type) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,248,if (type == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,249,return ChronologyType.iso();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,251,return type;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,494,* Set the chronology of the datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,495,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,496,* This method does not affect the millis or the zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,497,* The chronology is only changed if the type is different.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,499,"* @param type  the type to use, null means ISO"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,public void setChronologyType(ChronologyType type) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,502,type = DateTimeUtils.getChronologyType(type);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,if (type != getChronologyType()) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,504,setChronology(type.getChronology(getZone()));
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,24,import org.joda.time.ChronologyType;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,60,* Gets the type of the chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,62,* @return the type of the chronology
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,64,public ChronologyType getChronologyType() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,65,return getChronology().getType();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,68,rivate long TEST_TIME_NOW_PARIS =
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,69,EST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,68,//    private long TEST_TIME_NOW_PARIS =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,69,//            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,203,"assertEquals(ChronologyType.iso(), test.getChronologyType());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,657,public void testWithChronologyType_ChronologyType() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,658,DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,659,DateMidnight result = test.withChronologyType(ChronologyType.gregorian());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,660,"assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,662,"test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,663,result = test.withChronologyType(null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,664,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,666,test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,667,result = test.withChronologyType(ChronologyType.iso());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,668,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,355,public void testGetChronologyType_ChronologyType() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,356,"assertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,357,"assertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,214,"assertEquals(ChronologyType.iso(), test.getChronologyType());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,721,public void testWithChronologyType_ChronologyType() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,722,"DateTime test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,723,DateTime result = test.withChronologyType(ChronologyType.gregorian());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,724,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,725,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,727,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,728,result = test.withChronologyType(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,729,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,730,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,732,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,733,result = test.withChronologyType(ChronologyType.iso());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,734,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,185,"assertEquals(ChronologyType.iso(), test.getChronologyType());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,132,public void testSetChronologyType_ChronologyType1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,133,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,134,test.setChronologyType(ChronologyType.gregorian());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,135,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,136,"assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,139,public void testSetChronologyType_ChronologyType2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,140,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,141,test.setChronologyType(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,142,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,143,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"

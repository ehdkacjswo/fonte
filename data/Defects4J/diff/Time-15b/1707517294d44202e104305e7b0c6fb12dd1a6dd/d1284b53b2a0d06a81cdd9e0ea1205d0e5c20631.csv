is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,58,mport java.util.Arrays;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,59,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,63,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,64,mport org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,91,"// Since this class does not implement any interfaces, perform manual"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,92,"// virtual binding on all delegating calls. That is, if printTo calls"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,93,"// printTo with different arguments, it will bind to this class instead of"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,94,"// a virtual method on the DateTimePrinter interface. To accomplish this,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,95,// cast this to proper interface class first.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,98,"rintTo(buf, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,100,"((DateTimePrinter) this).printTo(buf, millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,104,"rintTo(out, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,106,"((DateTimePrinter) this).printTo(out, millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,108,"rintTo(buf, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,110,"((DateTimePrinter) this).printTo(buf, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,112,"rintTo(out, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,114,"((DateTimePrinter) this).printTo(out, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,117,"rintTo(buf, instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,119,"((DateTimePrinter) this).printTo(buf, instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,122,"rintTo(out, instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,124,"((DateTimePrinter) this).printTo(out, instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,127,"rintTo(buf,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,128,"nstant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,129,"nstant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,129,// Shift instant into local time (UTC) to avoid excessive offset
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,130,// calculations when printing multiple fields in a composite printer.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,131,DateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,132,int offset = zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,133,"((DateTimePrinter) this).printTo(buf, instant + offset, chrono.withUTC(), offset, zone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,134,"rintTo(out,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,135,"nstant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,136,"nstant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,138,// Shift instant into local time (UTC) to avoid excessive offset
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,139,// calculations when printing multiple fields in a composite printer.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,140,DateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,141,int offset = zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,142,"((DateTimePrinter) this).printTo(out, instant + offset, chrono.withUTC(), offset, zone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,143,"eturn print(millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,148,"return ((DateTimePrinter) this).print(millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,147,"eturn print(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,152,"return ((DateTimePrinter) this).print(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,152,"eturn print(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,157,"return ((DateTimePrinter) this).print(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,157,"eturn print(instant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,158,"nstant, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,161,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,162,tringBuffer buf = new StringBuffer(estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,163,"rintTo(buf, partial);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,162,// Shift instant into local time (UTC) to avoid excessive offset
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,163,// calculations when printing multiple fields in a composite printer.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,164,DateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,165,int offset = zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,166,"return ((DateTimePrinter) this).print(instant + offset, chrono.withUTC(), offset, zone);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,169,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,170,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,171,DateTimePrinter printer = (DateTimePrinter) this;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,172,StringBuffer buf = new StringBuffer(printer.estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,173,"printer.printTo(buf, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,168,rotected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,169,"hrow new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,172,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,173,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,174,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,175,"hrow new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,178,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,179,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,180,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,181,"hrow new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,184,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,185,"hrow new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,188,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,189,"hrow new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,192,"rotected String print(long instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,193,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,194,tringBuffer buf = new StringBuffer(estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,195,"rintTo(buf, instantLocal, chronoLocal, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,177,public String print(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,178,DateTimePrinter printer = (DateTimePrinter) this;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,179,StringBuffer buf = new StringBuffer(printer.estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,180,"printer.printTo(buf, partial);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,209,"arseBucket bucket = new ParseBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,210,"nt resultPos = parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,194,"DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,195,"int resultPos = ((DateTimeParser) this).parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,220,"arseBucket bucket = new ParseBucket(0, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,205,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,222,"nt newPos = parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,207,"int newPos = ((DateTimeParser) this).parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,235,"eturn parseMillis(text, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,220,"return ((DateTimeParser) this).parseMillis(text, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,241,"arseBucket bucket = new ParseBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,226,"DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,243,"nt newPos = parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,228,"int newPos = ((DateTimeParser) this).parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,256,"eturn parseDateTime(text, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,241,"return ((DateTimeParser) this).parseDateTime(text, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,260,"eturn new DateTime(parseMillis(text, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,245,"return new DateTime(((DateTimeParser) this).parseMillis(text, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,266,"eturn new DateTime(parseMillis(text, millis, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,251,"return new DateTime(((DateTimeParser) this).parseMillis(text, millis, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,270,"eturn parseMutableDateTime(text, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,255,"return ((DateTimeParser) this).parseMutableDateTime(text, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,274,"eturn new MutableDateTime(parseMillis(text, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,259,"return new MutableDateTime(((DateTimeParser) this).parseMillis(text, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,280,"eturn new MutableDateTime(parseMillis(text, millis, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,284,rotected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,285,"hrow new UnsupportedOperationException(""Parsing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,288,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,289,"hrow new UnsupportedOperationException(""Parsing not supported"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,294, Internal class used to build the state during parsing.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,295, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,296," Allows fields to be saved in any order, but be physically set in a"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,297, consistent order. This is useful for parsing against formats that allow
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,298, field values to contradict each other.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,299, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,300," Field values are applied in an order where the ""larger"" fields are set"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,301," first, making their value less likely to stick.  A field is larger than"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,302," another when it's range duration is longer. If both ranges are the same,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,303, then the larger field has the longer duration. If it cannot be determined
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,304," which field is larger, then the fields are set in the order they were saved."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,305, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,306," For example, these fields were saved in this order: dayOfWeek, monthOfYear,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,307," dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,308," this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,309, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,310, ParseBucket is mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,312, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,313, @since 1.0
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,315,ublic static class ParseBucket {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,317,rivate final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,318,rivate final long iMillis;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,320,"/ TimeZone to switch to in computeMillis. If null, use offset."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,321,ateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,322,nt iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,324,avedField[] iSavedFields = new SavedField[8];
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,325,nt iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,326,oolean iSavedFieldsShared;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,328,rivate Object iSavedState;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,331, Constucts a bucket.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,333," @param instantLocal the initial millis from 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,334, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,336,"ublic ParseBucket(long instantLocal, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,337,uper();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,338,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,339,Millis = instantLocal;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,340,Chrono = chrono.withUTC();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,341,etZone(chrono.getZone());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,346," Gets the chronology of the bucket, which will be a local (UTC) chronology."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,348,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,349,eturn iChrono;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,354," Returns the time zone used by computeMillis, or null if an offset is"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,355, used instead.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,357,ublic DateTimeZone getZone() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,358,eturn iZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,362," Set a time zone to be used when computeMillis is called, which"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,363, overrides any set time zone offset.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,365," @param zone the date time zone to operate in, or null if UTC"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,367,ublic void setZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,368,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,369,Zone = zone == DateTimeZone.UTC ? null : zone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,370,Offset = 0;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,375," Returns the time zone offset used by computeMillis, unless"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,376, getZone doesn't return null.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,378,ublic int getOffset() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,379,eturn iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,383," Set a time zone offset to be used when computeMillis is called, which"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,384, overrides the time zone.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,386,ublic void setOffset(int offset) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,387,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,388,Offset = offset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,389,Zone = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,394, Saves a datetime field value.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,396," @param field  the field, whose chronology must match that of this bucket"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,397, @param value  the value
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,399,"ublic void saveField(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,400,"aveField(new SavedField(field, value));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,404, Saves a datetime field value.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,406, @param fieldType  the field type
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,407, @param value  the value
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,409,"ublic void saveField(DateTimeFieldType fieldType, int value) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,410,"aveField(new SavedField(fieldType.getField(iChrono), value));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,414, Saves a datetime field text value.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,416, @param fieldType  the field type
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,417, @param text  the text value
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,418, @param locale  the locale to use
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,420,"ublic void saveField(DateTimeFieldType fieldType, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,421,"aveField(new SavedField(fieldType.getField(iChrono), text, locale));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,424,rivate void saveField(SavedField field) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,425,avedField[] savedFields = iSavedFields;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,426,nt savedFieldsCount = iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,428,f (savedFieldsCount == savedFields.length || iSavedFieldsShared) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,429,/ Expand capacity or merely copy if saved fields are shared.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,430,avedField[] newArray = new SavedField
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,431,savedFieldsCount == savedFields.length ? savedFieldsCount * 2 : savedFields.length];
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,432,"ystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,433,SavedFields = savedFields = newArray;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,434,SavedFieldsShared = false;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,437,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,438,avedFields[savedFieldsCount] = field;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,439,SavedFieldsCount = savedFieldsCount + 1;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,443," Saves the state of this bucket, returning it in an opaque object. Call"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,444, restoreState to undo any changes that were made since the state was
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,445, saved. Calls to saveState may be nested.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,447," @return opaque saved state, which may be passed to restoreState"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,449,ublic Object saveState() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,450,f (iSavedState == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,451,SavedState = new SavedState();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,453,eturn iSavedState;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,457, Restores the state of this bucket from a previously saved state. The
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,458," state object passed into this method is not consumed, and it can be used"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,459, later to restore to that state again.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,461," @param savedState opaque saved state, returned from saveState"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,462, @return true state object is valid and state restored
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,464,ublic boolean restoreState(Object savedState) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,465,f (savedState instanceof SavedState) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,466,f (((SavedState) savedState).restoreState(this)) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,467,SavedState = savedState;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,468,eturn true;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,471,eturn false;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,475, Computes the parsed datetime by setting the saved fields.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,476," This method is idempotent, but it is not thread-safe."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,478, @return milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,479, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,481,ublic long computeMillis() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,482,eturn computeMillis(false);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,486, Computes the parsed datetime by setting the saved fields.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,487," This method is idempotent, but it is not thread-safe."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,489," @param resetFields false by default, but when true, unsaved field values are cleared"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,490, @return milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,491, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,493,ublic long computeMillis(boolean resetFields) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,494,avedField[] savedFields = iSavedFields;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,495,nt count = iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,496,f (iSavedFieldsShared) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,497,SavedFields = savedFields = (SavedField[])iSavedFields.clone();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,498,SavedFieldsShared = false;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,500,"ort(savedFields, count);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,502,ong millis = iMillis;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,503,or (int i=0; i<count; i++) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,504,"illis = savedFields[i].set(millis, resetFields);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,507,f (iZone == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,508,illis -= iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,509, else {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,510,nt offset = iZone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,511,illis -= offset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,512,f (offset != iZone.getOffset(millis)) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,513,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,514,"""Illegal instant due to time zone offset transition"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,518,eturn millis;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,522," Sorts elements [0,high). Calling java.util.Arrays isn't always the right"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,523," choice since it always creates an internal copy of the array, even if it"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,524," doesn't need to. If the array slice is small enough, an insertion sort"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,525," is chosen instead, but it doesn't need a copy!"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,526, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,527," This method has a modified version of that insertion sort, except it"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,528," doesn't create an unnecessary array copy. If high is over 10, then"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,529," java.util.Arrays is called, which will perform a merge sort, which is"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,530, faster than insertion sort on large lists.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,531, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,532, The end result is much greater performace when computeMillis is called.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,533," Since the amount of saved fields is small, the insertion sort is a"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,534, better choice. Additional performance is gained since there is no extra
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,535," array allocation and copying. Also, the insertion sort here does not"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,536, perform any casting operations. The version in java.util.Arrays performs
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,537, casts within the insertion sort loop.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,539,"rivate static void sort(Comparable[] array, int high) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,540,f (high > 10) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,541,"rrays.sort(array, 0, high);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,542, else {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,543,or (int i=0; i<high; i++) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,544,or (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,545,omparable t = array[j];
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,546,rray[j] = array[j-1];
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,547,rray[j-1] = t;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,553,lass SavedState {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,554,inal DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,555,inal int iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,556,inal SavedField[] iSavedFields;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,557,inal int iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,559,avedState() {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,560,his.iZone = ParseBucket.this.iZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,561,his.iOffset = ParseBucket.this.iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,562,his.iSavedFields = ParseBucket.this.iSavedFields;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,563,his.iSavedFieldsCount = ParseBucket.this.iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,566,oolean restoreState(ParseBucket enclosing) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,567,f (enclosing != ParseBucket.this) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,568,eturn false;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,570,nclosing.iZone = this.iZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,571,nclosing.iOffset = this.iOffset;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,572,nclosing.iSavedFields = this.iSavedFields;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,573,f (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,574,"/ Since count is being restored to a lower count, the"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,575,/ potential exists for new saved fields to destroy data being
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,576,/ shared by another state. Set this flag such that the array
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,577,/ of saved fields is cloned prior to modification.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,578,nclosing.iSavedFieldsShared = true;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,580,nclosing.iSavedFieldsCount = this.iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,581,eturn true;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,585,tatic class SavedField implements Comparable {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,586,inal DateTimeField iField;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,587,inal int iValue;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,588,inal String iText;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,589,inal Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,591,"avedField(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,592,Field = field;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,593,Value = value;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,594,Text = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,595,Locale = null;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,598,"avedField(DateTimeField field, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,599,Field = field;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,600,Value = 0;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,601,Text = text;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,602,Locale = locale;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,605,"ong set(long millis, boolean reset) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,606,f (iText == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,607,"illis = iField.set(millis, iValue);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,608, else {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,609,"illis = iField.set(millis, iText, iLocale);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,611,f (reset) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,612,illis = iField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,614,eturn millis;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,618," The field with the longer range duration is ordered first, where"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,619," null is considered infinite. If the ranges match, then the field"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,620, with the longer duration is ordered first.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,622,ublic int compareTo(Object obj) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,623,ateTimeField other = ((SavedField)obj).iField;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,624,nt result = compareReverse
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,625,"iField.getRangeDurationField(), other.getRangeDurationField());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,626,f (result != 0) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,627,eturn result;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,629,eturn compareReverse
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,630,"iField.getDurationField(), other.getDurationField());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,633,"rivate int compareReverse(Comparable a, Comparable b) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,634,f (a == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,635,f (b == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,636,eturn 0;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,638,eturn -1;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,640,f (b == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,641,eturn 1;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,643,eturn -a.compareTo(b);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,265,return new MutableDateTime
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,266,"(((DateTimeParser) this).parseMillis(text, millis, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,637,rivate final DateTimePrinter mPrinter;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,637,private final DateTimePrinter iPrinter;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,641,Printer = printer;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,641,iPrinter = printer;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,644,public int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,645,return iPrinter.estimatePrintedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,645,"Printer.printTo(buf, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,649,"iPrinter.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,649,"Printer.printTo(out, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,653,"iPrinter.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,653,"Printer.printTo(buf, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,657,"iPrinter.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,657,"Printer.printTo(out, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,661,"iPrinter.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,661,"Printer.printTo(buf, instant, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,665,"iPrinter.printTo(buf, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,666,"Printer.printTo(out, instant, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,670,"iPrinter.printTo(out, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,670,"Printer.printTo(buf, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,674,"iPrinter.printTo(buf, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,674,"Printer.printTo(out, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,678,"iPrinter.printTo(out, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,681,"public void printTo(StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,682,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,683,"iPrinter.printTo(buf, instant, chrono, displayOffset, displayZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,686,"public void printTo(Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,687,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,688,"iPrinter.printTo(out, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,678,"Printer.printTo(buf, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,692,"iPrinter.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,682,"Printer.printTo(out, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,696,"iPrinter.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,686,eturn mPrinter.print(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,700,return iPrinter.print(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,690,eturn mPrinter.print(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,704,return iPrinter.print(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,694,"eturn mPrinter.print(instant, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,708,"return iPrinter.print(instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,698,"eturn mPrinter.print(instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,712,"return iPrinter.print(instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,715,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,716,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,717,"return iPrinter.print(instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,eturn mPrinter.print(partial);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,721,return iPrinter.print(partial);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,728,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,729,throw unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,764,rivate final DateTimeParser mParser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,787,private final DateTimeParser iParser;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,768,Parser = parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,791,iParser = parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,794,public int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,795,return 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,830,"public void printTo(StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,831,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,832,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,835,"public void printTo(Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,836,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,837,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,864,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,865,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,866,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,873,public int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,874,return iParser.estimateParsedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,877,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,878,"return iParser.parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,832,"eturn mParser.parseInto(instant, text, position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,882,"return iParser.parseInto(instant, text, position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,836,eturn mParser.parseMillis(text);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,886,return iParser.parseMillis(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,840,"eturn mParser.parseMillis(text, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,890,"return iParser.parseMillis(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,844,"eturn mParser.parseMillis(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,894,"return iParser.parseMillis(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,848,"eturn mParser.parseMillis(text, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,898,"return iParser.parseMillis(text, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,852,eturn mParser.parseDateTime(text);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,902,return iParser.parseDateTime(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,856,"eturn mParser.parseDateTime(text, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,906,"return iParser.parseDateTime(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,860,"eturn mParser.parseDateTime(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,910,"return iParser.parseDateTime(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,864,eturn mParser.parseMutableDateTime(text);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,914,return iParser.parseMutableDateTime(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,868,"eturn mParser.parseMutableDateTime(text, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,918,"return iParser.parseMutableDateTime(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,872,"eturn mParser.parseMutableDateTime(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,922,"return iParser.parseMutableDateTime(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,60, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,61, Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,62, All implementations must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,74, formatters. All formatters must extend {@link BaseDateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,74,* formatters.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,222, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,223, The formatter must extend <code>DateTimeFormatterProvider</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,224," This is an internal class, which all supplied format classes extend."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,234,f (formatter instanceof BaseDateTimeFormatter == false) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,235,"hrow new IllegalArgumentException(""Formatter must extend BaseDateTimeFormatter"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,243, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,244, The printer added must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,245," This is an internal class, which all supplied format classes extend."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,259, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,260, The parser added must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,261," This is an internal class, which all supplied format classes extend."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,274, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,275, The printer and parser must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,276," This is an internal class, which all supplied format classes extend."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,299, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,300, The printer and parsers must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,301," This is an internal class, which all supplied format classes extend."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,317,aseDateTimeFormatter[] copyOfParsers = new BaseDateTimeFormatter[length];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,318,or (int i = 0; i < length; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,319,ateTimeParser parser = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,320,f (i == length - 1 && parser == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,321,/ ok
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,322, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,323,f (parser == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,324,"hrow new IllegalArgumentException(""Incomplete parser array"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,325, else if (parser instanceof BaseDateTimeFormatter == false) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,326,"hrow new IllegalArgumentException(""Parser must extend BaseDateTimeFormatter"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,328,opyOfParsers[i] = (BaseDateTimeFormatter) parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,299,if (length == 1) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,300,if (parsers[0] == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,301,"throw new IllegalArgumentException(""No parser supplied"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,303,"return append0(printer, parsers[0]);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,306,DateTimeParser[] copyOfParsers = new DateTimeParser[length];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,307,int i;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,308,for (i = 0; i < length - 1; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,309,if ((copyOfParsers[i] = parsers[i]) == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,310,"throw new IllegalArgumentException(""Incomplete parser array"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,313,copyOfParsers[i] = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,338, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,339, The parser must implement <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,340," This is an internal interface, which all supplied format classes implement."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,347,aseDateTimeFormatter[] parsers = new BaseDateTimeFormatter[] {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,348,"BaseDateTimeFormatter) parser, null};"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,327,DateTimeFormatter[] parsers = new DateTimeFormatter[] {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,328,"(DateTimeFormatter) parser, null"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,362,f (parser instanceof BaseDateTimeFormatter == false) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,363,"hrow new IllegalArgumentException(""Parser must extend BaseDateTimeFormatter"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,376,f (printer instanceof BaseDateTimeFormatter == false) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,377,"hrow new IllegalArgumentException(""Printer must extend BaseDateTimeFormatter"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1017,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,991,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,992,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,993,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1022,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1023,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1024,"ong instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,997,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,998,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,999,"int displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1036,"rotected String print(long instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1037,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1011,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1012,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1045,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1020,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1049,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1024,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1089,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1090,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1091,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1064,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1065,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1066,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1095,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1096,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1097,"ong instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1070,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1071,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1072,"int displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1109,"rotected String print(long instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1110,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1084,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1085,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1122,"ublic int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1097,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1146,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1121,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1150,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1125,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1214,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1189,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1218,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1219,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1220,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1193,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1194,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1195,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1222,ateTimeField field = iFieldType.getField(chronoLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1223,"ormatUtils.appendUnpaddedInteger(buf, field.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1197,DateTimeField field = iFieldType.getField(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1198,"FormatUtils.appendUnpaddedInteger(buf, field.get(instant));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1229,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1230,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1231,"ong instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1204,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1205,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1206,"int displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1233,ateTimeField field = iFieldType.getField(chronoLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1234,"ormatUtils.writeUnpaddedInteger(out, field.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1208,DateTimeField field = iFieldType.getField(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1209,"FormatUtils.writeUnpaddedInteger(out, field.get(instant));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1277,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1252,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1281,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1282,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1283,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1256,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1257,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1258,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1285,ateTimeField field = iFieldType.getField(chronoLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1286,"ormatUtils.appendPaddedInteger(buf, field.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1260,DateTimeField field = iFieldType.getField(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1261,"FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1292,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1293,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1294,"ong instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1267,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1268,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1269,"int displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1296,ateTimeField field = iFieldType.getField(chronoLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1297,"ormatUtils.writePaddedInteger(out, field.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1271,DateTimeField field = iFieldType.getField(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1272,"FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1340,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1315,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1344,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1319,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1377,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1352,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1381,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1382,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1383,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1384,"nt year = getTwoDigitYear(instantLocal, chronoLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1356,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1357,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1358,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1359,"int year = getTwoDigitYear(instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1393,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1394,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1395,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1396,"nt year = getTwoDigitYear(instantLocal, chronoLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1368,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1369,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1370,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1371,"int year = getTwoDigitYear(instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1405,"rivate int getTwoDigitYear(long instantLocal, Chronology chronoLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1380,"private int getTwoDigitYear(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1407,nt year = chronoLocal.year().get(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1382,int year = chrono.year().get(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1467,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1442,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1471,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1472,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1473,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1446,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1447,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1448,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1475,"uf.append(print(instantLocal, chronoLocal, instant, chrono));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1450,"buf.append(print(instant, chrono, displayOffset, displayZone));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1481,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1482,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1483,"ong instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1456,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1457,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1458,"int displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1485,"ut.write(print(instantLocal, chronoLocal, instant, chrono));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1460,"out.write(print(instant, chrono, displayOffset, displayZone));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1507,"rotected String print(long instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1508,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1509,ateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1482,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1483,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1484,DateTimeField field = iFieldType.getField(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1511,"eturn field.getAsShortText(instantLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1486,"return field.getAsShortText(instant, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1513,"eturn field.getAsText(instantLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1488,"return field.getAsText(instant, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1530,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1505,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1534,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1509,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1578,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1553,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1582,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1583,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1584,"ong instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1557,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1558,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1559,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1586,"rintTo(buf, null, instantLocal, chronoLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1561,"printTo(buf, null, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1592,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1593,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1594,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1595,"rintTo(null, out, instantLocal, chronoLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1567,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1568,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1569,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1570,"printTo(null, out, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1620,"rotected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1595,"protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1623,ateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1598,DateTimeField field = iFieldType.getField(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1628,raction = field.remainder(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1603,fraction = field.remainder(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1740,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1715,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1744,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1719,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1812,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1787,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1823,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1824,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1825,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1826,nt offset = (int)(instantLocal - instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1828,f (offset == 0 && iZeroOffsetText != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1798,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1799,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1800,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1801,if (displayOffset == 0 && iZeroOffsetText != null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1832,f (offset >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1805,if (displayOffset >= 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1836,ffset = -offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1809,displayOffset = -displayOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1839,nt hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1812,int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1844,ffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1845,f (offset == 0 && iMinFields <= 1) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1817,displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1818,if (displayOffset == 0 && iMinFields <= 1) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1849,nt minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1822,int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1857,ffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1858,f (offset == 0 && iMinFields <= 2) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1830,displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1831,if (displayOffset == 0 && iMinFields <= 2) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1862,nt seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1835,int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1870,ffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1871,f (offset == 0 && iMinFields <= 3) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1843,displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1844,if (displayOffset == 0 && iMinFields <= 3) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1878,"ormatUtils.appendPaddedInteger(buf, offset, 3);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1851,"FormatUtils.appendPaddedInteger(buf, displayOffset, 3);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1881,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1882,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1883,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1884,nt offset = (int)(instantLocal - instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1886,f (offset == 0 && iZeroOffsetText != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1854,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1855,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1856,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1857,if (displayOffset == 0 && iZeroOffsetText != null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1890,f (offset >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1861,if (displayOffset >= 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1894,ffset = -offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1865,displayOffset = -displayOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1897,nt hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1868,int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1902,ffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1903,f (offset == 0 && iMinFields == 1) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1873,displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1874,if (displayOffset == 0 && iMinFields == 1) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1907,nt minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1878,int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1915,ffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1916,f (offset == 0 && iMinFields == 2) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1886,displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1887,if (displayOffset == 0 && iMinFields == 2) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1920,nt seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1891,int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1928,ffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1929,f (offset == 0 && iMinFields == 3) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1899,displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1900,if (displayOffset == 0 && iMinFields == 3) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1936,"ormatUtils.writePaddedInteger(out, offset, 3);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1907,"FormatUtils.writePaddedInteger(out, displayOffset, 3);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1947,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1918,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1951,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1922,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2155,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2126,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2159,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2160,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2161,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2162,"uf.append(print(instantLocal, chronoLocal, instant, chrono));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2130,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2131,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2132,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2133,"buf.append(print(instant, chrono, displayOffset, displayZone));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2165,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2166,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2167,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2168,"ut.write(print(instantLocal, chronoLocal, instant, chrono));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2136,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2137,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2138,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2139,"out.write(print(instant, chrono, displayOffset, displayZone));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2171,"rotected String print(long instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2172,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2173,ateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2142,"public String print(long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2143,"int displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2175,"eturn zone.getShortName(instant, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2145,"return displayZone.getShortName(instant, this.iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2177,"eturn zone.getName(instant, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2147,"return displayZone.getName(instant, this.iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2195,rivate final BaseDateTimeFormatter[] iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2196,rivate final BaseDateTimeFormatter[] iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2165,private final DateTimePrinter[] iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2166,private final DateTimeParser[] iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2214,Printers = new BaseDateTimeFormatter[size];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2184,iPrinters = new DateTimePrinter[size];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2217,aseDateTimeFormatter printer = (BaseDateTimeFormatter) printerList.get(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2187,DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2229,Parsers = new BaseDateTimeFormatter[size];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2199,iParsers = new DateTimeParser[size];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2232,aseDateTimeFormatter parser = (BaseDateTimeFormatter) parserList.get(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2202,DateTimeParser parser = (DateTimeParser) parserList.get(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2240,"rivate Composite(Composite base, BaseDateTimeFormatter[] printers) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2210,"private Composite(Composite base, DateTimeFormatter[] printers) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2247,rotected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2217,public int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2251,"rotected void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2252,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2253,"ong instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2254,aseDateTimeFormatter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2221,"public void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2222,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2223,"int displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2224,DateTimePrinter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2261,"lements[i].printTo(buf, instantLocal, chronoLocal, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2231,"elements[i].printTo(buf, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2265,"rotected void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2266,"ong instantLocal, Chronology chronoLocal,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2267,"ong instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2268,aseDateTimeFormatter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2235,"public void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2236,"long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2237,"int displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2238,DateTimePrinter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2275,"lements[i].printTo(out, instantLocal, chronoLocal, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2245,"elements[i].printTo(out, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2280,aseDateTimeFormatter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2250,DateTimePrinter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2292,aseDateTimeFormatter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2262,DateTimePrinter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2303,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2273,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2307,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2308,aseDateTimeFormatter[] elements = iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2277,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2278,DateTimeParser[] elements = iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2369,rivate final BaseDateTimeFormatter[] iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2339,private final DateTimeParser[] iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2372,atchingParser(BaseDateTimeFormatter[] parsers) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2342,MatchingParser(DateTimeParser[] parsers) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2377,aseDateTimeFormatter parser = parsers[i];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2347,DateTimeParser parser = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2388,rotected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2358,public int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2392,"rotected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2393,aseDateTimeFormatter[] parsers = iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2362,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2363,DateTimeParser[] parsers = iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2405,aseDateTimeFormatter parser = parsers[i];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2375,DateTimeParser parser = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,64, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,65, Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,66, All implementations must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,74,* Returns the expected maximum number of characters consumed. The actual
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,75,* amount should rarely exceed this estimate.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,77,* @return the estimated length
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,79,int estimateParsedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,82,"* Parse an element from the given text, saving any fields into the given"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,83,"* DateTimeParserBucket. If the parse succeeds, the return value is the new"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,84,* text position. Note that the parse may succeed without fully reading the
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,85,* text.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,86,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,87,"* If it fails, the return value is negative. To determine the position"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,88,"* where the parse failed, apply the one's complement operator (~) on the"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,89,* return value.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,91,* @param bucket  field are saved into this
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,92,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,93,* @param position  position to start parsing from
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,94,"* @return new position, negative value means parse failed -"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,95,*  apply complement operator (~) to get position of failure
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,96,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,98,"int parseInto(DateTimeParserBucket bucket, String text, int position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,56,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,60,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,61,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,62,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,63,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,66,"* DateTimeParserBucket is an advanced class, intended mainly for parser"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,67,* implementations. It can also be used during normal parsing operations to
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,68,* capture more information about the parse.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,69,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,70,"* This class allows fields to be saved in any order, but be physically set in"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,71,* a consistent order. This is useful for parsing against formats that allow
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,72,* field values to contradict each other.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,73,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,74,"* Field values are applied in an order where the ""larger"" fields are set"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,75,"* first, making their value less likely to stick.  A field is larger than"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,76,"* another when it's range duration is longer. If both ranges are the same,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,77,* then the larger field has the longer duration. If it cannot be determined
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,78,"* which field is larger, then the fields are set in the order they were saved."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,79,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,80,"* For example, these fields were saved in this order: dayOfWeek, monthOfYear,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,81,"* dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,82,"* this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,83,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,84,* DateTimeParserBucket is mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,86,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,87,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,89,public class DateTimeParserBucket {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,91,private final Chronology iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,92,private final long iMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,94,"// TimeZone to switch to in computeMillis. If null, use offset."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,95,DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,96,int iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,98,SavedField[] iSavedFields = new SavedField[8];
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,99,int iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,100,boolean iSavedFieldsShared;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,102,private Object iSavedState;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,105,* Constucts a bucket.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,107,"* @param instantLocal the initial millis from 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,108,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,110,"public DateTimeParserBucket(long instantLocal, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,111,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,112,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,113,iMillis = instantLocal;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,114,iChrono = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,115,setZone(chrono.getZone());
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,120,"* Gets the chronology of the bucket, which will be a local (UTC) chronology."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,122,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,123,return iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,128,"* Returns the time zone used by computeMillis, or null if an offset is"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,129,* used instead.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,131,public DateTimeZone getZone() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,132,return iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,136,"* Set a time zone to be used when computeMillis is called, which"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,137,* overrides any set time zone offset.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,139,"* @param zone the date time zone to operate in, or null if UTC"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,141,public void setZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,142,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,143,iZone = zone == DateTimeZone.UTC ? null : zone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,144,iOffset = 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,149,"* Returns the time zone offset used by computeMillis, unless"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,150,* getZone doesn't return null.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,152,public int getOffset() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,153,return iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,157,"* Set a time zone offset to be used when computeMillis is called, which"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,158,* overrides the time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,160,public void setOffset(int offset) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,161,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,162,iOffset = offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,163,iZone = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,168,* Saves a datetime field value.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,170,"* @param field  the field, whose chronology must match that of this bucket"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,171,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,173,"public void saveField(DateTimeField field, int value) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,174,"saveField(new SavedField(field, value));"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,178,* Saves a datetime field value.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,180,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,181,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,183,"public void saveField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,184,"saveField(new SavedField(fieldType.getField(iChrono), value));"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,188,* Saves a datetime field text value.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,190,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,191,* @param text  the text value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,192,* @param locale  the locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,194,"public void saveField(DateTimeFieldType fieldType, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,195,"saveField(new SavedField(fieldType.getField(iChrono), text, locale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,198,private void saveField(SavedField field) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,199,SavedField[] savedFields = iSavedFields;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,200,int savedFieldsCount = iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,202,if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,203,// Expand capacity or merely copy if saved fields are shared.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,204,SavedField[] newArray = new SavedField
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,205,[savedFieldsCount == savedFields.length ? savedFieldsCount * 2 : savedFields.length];
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,206,"System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,207,iSavedFields = savedFields = newArray;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,208,iSavedFieldsShared = false;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,211,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,212,savedFields[savedFieldsCount] = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,213,iSavedFieldsCount = savedFieldsCount + 1;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,217,"* Saves the state of this bucket, returning it in an opaque object. Call"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,218,* restoreState to undo any changes that were made since the state was
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,219,* saved. Calls to saveState may be nested.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,221,"* @return opaque saved state, which may be passed to restoreState"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,223,public Object saveState() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,224,if (iSavedState == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,225,iSavedState = new SavedState();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,227,return iSavedState;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,231,* Restores the state of this bucket from a previously saved state. The
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,232,"* state object passed into this method is not consumed, and it can be used"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,233,* later to restore to that state again.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,235,"* @param savedState opaque saved state, returned from saveState"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,236,* @return true state object is valid and state restored
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,238,public boolean restoreState(Object savedState) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,239,if (savedState instanceof SavedState) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,240,if (((SavedState) savedState).restoreState(this)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,241,iSavedState = savedState;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,242,return true;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,245,return false;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,249,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,250,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,252,* @return milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,253,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,255,public long computeMillis() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,256,return computeMillis(false);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,260,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,261,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,263,"* @param resetFields false by default, but when true, unsaved field values are cleared"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,264,* @return milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,265,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,267,public long computeMillis(boolean resetFields) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,268,SavedField[] savedFields = iSavedFields;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,269,int count = iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,270,if (iSavedFieldsShared) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,271,iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,272,iSavedFieldsShared = false;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,274,"sort(savedFields, count);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,276,long millis = iMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,277,for (int i=0; i<count; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,278,"millis = savedFields[i].set(millis, resetFields);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,281,if (iZone == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,282,millis -= iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,283,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,284,int offset = iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,285,millis -= offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,286,if (offset != iZone.getOffset(millis)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,287,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,288,"(""Illegal instant due to time zone offset transition"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,292,return millis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,296,"* Sorts elements [0,high). Calling java.util.Arrays isn't always the right"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,297,"* choice since it always creates an internal copy of the array, even if it"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,298,"* doesn't need to. If the array slice is small enough, an insertion sort"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,299,"* is chosen instead, but it doesn't need a copy!"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,300,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,301,"* This method has a modified version of that insertion sort, except it"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,302,"* doesn't create an unnecessary array copy. If high is over 10, then"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,303,"* java.util.Arrays is called, which will perform a merge sort, which is"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,304,* faster than insertion sort on large lists.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,305,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,306,* The end result is much greater performace when computeMillis is called.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,307,"* Since the amount of saved fields is small, the insertion sort is a"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,308,* better choice. Additional performance is gained since there is no extra
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,309,"* array allocation and copying. Also, the insertion sort here does not"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,310,* perform any casting operations. The version in java.util.Arrays performs
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,311,* casts within the insertion sort loop.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,313,"private static void sort(Comparable[] array, int high) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,314,if (high > 10) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,315,"Arrays.sort(array, 0, high);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,316,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,317,for (int i=0; i<high; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,318,for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,319,Comparable t = array[j];
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,320,array[j] = array[j-1];
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,321,array[j-1] = t;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,327,class SavedState {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,328,final DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,329,final int iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,330,final SavedField[] iSavedFields;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,331,final int iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,333,SavedState() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,334,this.iZone = DateTimeParserBucket.this.iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,335,this.iOffset = DateTimeParserBucket.this.iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,336,this.iSavedFields = DateTimeParserBucket.this.iSavedFields;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,337,this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,340,boolean restoreState(DateTimeParserBucket enclosing) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,341,if (enclosing != DateTimeParserBucket.this) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,342,return false;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,344,enclosing.iZone = this.iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,345,enclosing.iOffset = this.iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,346,enclosing.iSavedFields = this.iSavedFields;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,347,if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,348,"// Since count is being restored to a lower count, the"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,349,// potential exists for new saved fields to destroy data being
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,350,// shared by another state. Set this flag such that the array
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,351,// of saved fields is cloned prior to modification.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,352,enclosing.iSavedFieldsShared = true;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,354,enclosing.iSavedFieldsCount = this.iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,355,return true;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,359,static class SavedField implements Comparable {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,360,final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,361,final int iValue;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,362,final String iText;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,363,final Locale iLocale;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,365,"SavedField(DateTimeField field, int value) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,366,iField = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,367,iValue = value;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,368,iText = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,369,iLocale = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,372,"SavedField(DateTimeField field, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,373,iField = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,374,iValue = 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,375,iText = text;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,376,iLocale = locale;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,379,"long set(long millis, boolean reset) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,380,if (iText == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,381,"millis = iField.set(millis, iValue);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,382,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,383,"millis = iField.set(millis, iText, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,385,if (reset) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,386,millis = iField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,388,return millis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,392,"* The field with the longer range duration is ordered first, where"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,393,"* null is considered infinite. If the ranges match, then the field"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,394,* with the longer duration is ordered first.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,396,public int compareTo(Object obj) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,397,DateTimeField other = ((SavedField)obj).iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,398,int result = compareReverse
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,399,"(iField.getRangeDurationField(), other.getRangeDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,400,if (result != 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,401,return result;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,403,return compareReverse
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,404,"(iField.getDurationField(), other.getDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,407,"private int compareReverse(Comparable a, Comparable b) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,408,if (a == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,409,if (b == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,410,return 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,412,return -1;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,414,if (b == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,415,return 1;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,417,return -a.compareTo(b);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,68, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,69, Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,70, All implementations must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,79,* Returns the expected maximum number of characters produced. The actual
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,80,* amount should rarely exceed this estimate.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,82,* @return the estimated length
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,84,int estimatePrintedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,165,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,166,* using the given Chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,168,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,169,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,170,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,171,"* @param displayOffset  if a time zone offset is printed, force it to use"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,172,* this millisecond value
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,173,"* @param displayZone  if a time zone is printed, force it to use this one"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,175,"void printTo(StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,176,"int displayOffset, DateTimeZone displayZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,179,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,180,* using the given Chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,182,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,183,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,184,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,185,"* @param displayOffset  if a time zone offset is printed, force it to use"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,186,* this millisecond value
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,187,"* @param displayZone  if a time zone is printed, force it to use this one"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,189,"void printTo(Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,190,"int displayOffset, DateTimeZone displayZone) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,248,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,249,* using the given chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,251,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,252,* @param chrono  the chronoogy to use
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,253,"* @param displayOffset  if a time zone offset is printed, force it to use"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,254,* this millisecond value
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,255,"* @param displayZone  if a time zone is printed, force it to use this one"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,256,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,258,"String print(long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone);"

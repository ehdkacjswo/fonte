is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,92,"ystem.out.println(""No chronology:        in.getChronology():       "" + in.getChronology());"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,93,"ystem.out.println(""No time zone:         in.getDateTimeZone():     "" + in.getZone());"
True,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,92,"System.out.println(""ISO chronology:       in.getChronology():       "" + in.getChronology());"
True,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,93,"System.out.println(""UTC time zone:        in.getDateTimeZone():     "" + in.getZone());"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,100,"ystem.out.println(""Convert to Calendar:  in.toCalendar(Locale.UK): "" + in.toCalendar(Locale.UK).toString().substring(0, 46));"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,101,"ystem.out.println(""Convert to GregCal:   in.toGregorianCalendar(): "" + in.toGregorianCalendar().toString().substring(0, 46));"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,570,"* Adds the duration to the instant, specifying the number of times to add."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,572,* @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,573,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,574,* @param scalar  the number of times to add
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,575,* @return the updated instant
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,577,"public abstract long add(long instant, long duration, int scalar);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,370,* Gets a copy of this datetime with the partial set of fields replacing those
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,371,* from this instance.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,372,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,373,"* For example, if the partial is a <code>YearMonthDay</code> then the date fields"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,374,* would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,375,"* If the partial is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,377,"* @param partial  the partial set of fields to apply to this datetime, null ignored"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,378,* @return a copy of this datetime with a different set of fields
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,379,* @throws IllegalArgumentException if any value is invalid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,381,public DateMidnight withFields(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,382,if (partial == null) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,383,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,385,"return withMillis(getChronology().set(partial, getMillis()));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,389,* Gets a copy of this datetime with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,390,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,391,"* For example, if the field type is <code>dayOfMonth</code> then the day of month"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,392,* field would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,393,"* If the field type is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,394,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,395,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,396,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,397,"* DateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,398,* DateTime updated = dt.dayOfMonth().setCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,399,* DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,400,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,402,"* @param fieldType  the field type to set, null ignored"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,403,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,404,* @return a copy of this datetime with the field set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,405,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,407,"public DateMidnight withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,408,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,409,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,411,"long instant = fieldType.getField(getChronology()).set(getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,412,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,416,* Gets a copy of this datetime with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,417,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,418,"* If the addition is zero or the field is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,419,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,420,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,421,"* DateTime added = dt.withFieldAdded(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,422,* DateTime added = dt.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,423,* DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,424,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,426,"* @param fieldType  the field type to add to, null ignored"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,427,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,428,* @return a copy of this datetime with the field updated
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,429,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,431,"public DateMidnight withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,432,if (fieldType == null || amount == 0) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,433,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,435,"long instant = fieldType.getField(getChronology()).add(getMillis(), amount);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,436,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,441,* Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,442,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,443,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,445,* @param durationToAdd  the duration to add to this one
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,446,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,447,* @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,448,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,450,"public DateMidnight withDurationAdded(long durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,451,if (durationToAdd == 0 || scalar == 0) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,452,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,454,"long instant = getChronology().add(getMillis(), durationToAdd, scalar);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,455,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,459,* Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,460,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,461,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,463,"* @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,464,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,465,* @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,466,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,468,"public DateMidnight withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,469,if (durationToAdd == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,470,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,472,"return withDurationAdded(durationToAdd.getMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,476,* Gets a copy of this datetime with the specified period added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,477,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,478,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,479,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,480,"* To add or subtract on a single field use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,481,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,482,* DateTime added = dt.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,483,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,485,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,486,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,487,* @return a copy of this datetime with the period added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,488,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,490,"public DateMidnight withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,491,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,492,return this;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,494,"long instant = getChronology().add(period, getMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,495,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,500,* Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,501,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,502,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,504,* @param duration  the duration to add to this one
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,505,* @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,506,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,508,public DateMidnight plus(long duration) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,509,"return withDurationAdded(duration, 1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,513,* Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,514,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,515,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,517,"* @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,518,* @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,519,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,521,public DateMidnight plus(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,522,"return withDurationAdded(duration, 1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,526,* Gets a copy of this datetime with the specified period added.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,527,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,528,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,529,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,530,* The following two lines are identical in effect:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,531,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,532,* DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,533,* DateTime added = dt.plus(Period.hours(6));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,534,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,536,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,537,* @return a copy of this datetime with the period added
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,538,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,540,public DateMidnight plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,541,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,546,* Gets a copy of this datetime with the specified duration take away.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,547,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,548,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,550,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,551,* @return a copy of this datetime with the duration taken away
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,552,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,554,public DateMidnight minus(long duration) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,555,"return withDurationAdded(duration, -1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,559,* Gets a copy of this datetime with the specified duration take away.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,560,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,561,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,563,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,564,* @return a copy of this datetime with the duration taken away
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,565,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,567,public DateMidnight minus(ReadableDuration durationToAdd) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,568,"return withDurationAdded(durationToAdd, -1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,572,* Gets a copy of this datetime with the specified period take away.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,573,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,574,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,575,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,576,* The following two lines are identical in effect:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,577,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,578,* DateTime added = dt.hourOfDay().addToCopy(-6);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,579,* DateTime added = dt.minus(Period.hours(6));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,580,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,582,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,583,* @return a copy of this datetime with the period taken away
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,584,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,586,public DateMidnight minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,587,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,592,"* Gets the property object for the specified type, which contains many useful methods."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,594,* @param type  the field type to get the chronology for
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,595,* @return the property object
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,596,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,598,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,599,DateTimeField field = type.getField(getChronology());
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,600,if (field.isSupported() == false) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,601,"throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,603,"return new Property(this, field);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,62,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388, @param newChronology  the new chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,387,"* @param newChronology  the new chronology, null means ISO default"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,391,newChronology = DateTimeUtils.getChronology(newChronology);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,515,eturn partial.resolveDateTime(this);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,515,"return withMillis(getChronology().set(partial, getMillis()));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,525," An alternative to this method is to use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,525,* These three lines are equivalent:
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,527, DateTime added = dt.hourOfDay().setCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,527,"* DateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,528,* DateTime updated = dt.dayOfMonth().setCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,529,* DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,548," An alternative to this method is to use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,550,* These three lines are equivalent:
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,550, DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,552,"* DateTime added = dt.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,553,* DateTime added = dt.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,554,* DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,581,"ong add = FieldUtils.safeMultiply(durationToAdd, scalar);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,582,"ong instant = FieldUtils.safeAdd(getMillis(), add);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,585,"long instant = getChronology().add(getMillis(), durationToAdd, scalar);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,723,"* Gets the property object for the specified type, which contains many useful methods."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,725,* @param type  the field type to get the chronology for
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,726,* @return the property object
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,727,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,729,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,730,DateTimeField field = type.getField(getChronology());
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,731,if (field.isSupported() == false) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,732,"throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,734,"return new Property(this, field);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,739,* Get this object as a DateMidnight using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,741,* @return a DateMidnight using the same millis and chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,743,public DateMidnight toDateMidnight() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,744,"return new DateMidnight(getMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,61,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,67," There is no concept of a calendar system, chronology or time zone."
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,68," In a fully internationalized program, you may want to ensure methods accept the"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,69, ReadableInstant interface as input and return Instant objects.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,66,* The chronology used is always ISO in the UTC time zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,67,* This corresponds to the definition of the Java Epoch.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,68,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,69,* An Instant can be used to compare two <code>DateTime</code> objects:
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,70,* <pre>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,71,* boolean sameInstant = dt1.toInstant().equals(dt2.toInstant());
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,72,* </pre>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,73,* This code will return true if the two <code>DateTime</code> objects represent
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,74,* the same instant regardless of chronology or time zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,75,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,76,* Note that the following code will also perform the same check:
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,77,* <pre>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,78,* boolean sameInstant = dt1.isEqual(dt2);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,79,* </pre>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,154,* Gets a copy of this instant with the specified duration added.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,155,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,156,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,158,* @param durationToAdd  the duration to add to this one
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,159,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,* @return a copy of this instant with the duration added
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,161,* @throws ArithmeticException if the new instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,163,"public Instant withDurationAdded(long durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,164,if (durationToAdd == 0 || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,165,return this;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,167,"long instant = getChronology().add(getMillis(), durationToAdd, scalar);"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,168,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172,* Gets a copy of this instant with the specified duration added.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,173,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,174,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,176,"* @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,177,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,178,* @return a copy of this instant with the duration added
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,179,* @throws ArithmeticException if the new instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,181,"public Instant withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,182,if (durationToAdd == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,183,return this;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,185,"return withDurationAdded(durationToAdd.getMillis(), scalar);"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,145, Gets the milliseconds of the instant.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,190,* Gets a copy of this instant with the specified duration added.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,191,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,192,"* If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,147, @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,194,* @param duration  the duration to add to this one
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,195,* @return a copy of this instant with the duration added
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,196,* @throws ArithmeticException if the new instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,149,ublic long getMillis() {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,150,eturn iMillis;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,198,public Instant plus(long duration) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,199,"return withDurationAdded(duration, 1);"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,154," Gets the chronology of the instant, which is null."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,203,* Gets a copy of this instant with the specified duration added.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,156, The {@link Chronology} provides conversion from the millisecond
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,157, value to meaningful fields in a particular calendar system. This
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,158," class represents a chronology free view of time, so this method"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,159, returns null.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,205,"* If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,161, @return null
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,207,"* @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,208,* @return a copy of this instant with the duration added
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,209,* @throws ArithmeticException if the new instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,163,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,164,eturn null;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,211,public Instant plus(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,212,"return withDurationAdded(duration, 1);"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,169, Output the date time in ISO8601 format using the UTC time zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,217,* Gets a copy of this instant with the specified duration taken away.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,218,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,219,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,221,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,222,* @return a copy of this instant with the duration taken away
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,223,* @throws ArithmeticException if the new instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,225,public Instant minus(long duration) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,226,"return withDurationAdded(duration, -1);"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,230,* Gets a copy of this instant with the specified duration taken away.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,171, ISO8601 is deliberately used here so that the resulting string can be
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172, re-parsed by the constructor.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,232,"* If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,174, @return ISO8601 date formatted string
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,234,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,235,* @return a copy of this instant with the duration taken away
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,236,* @throws ArithmeticException if the new instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,176,ublic String toString() {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,177,eturn ISODateTimeFormat.getInstanceUTC().dateTime().print(this);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,238,public Instant minus(ReadableDuration durationToAdd) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,239,"return withDurationAdded(durationToAdd, -1);"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,244,* Gets the milliseconds of the instant.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,246,* @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,248,public long getMillis() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,249,return iMillis;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,253,"* Gets the chronology of the instant, which is ISO in the UTC zone."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,255,* @return ISO in the UTC zone
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,257,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,258,return Chronology.getISOUTC();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,286,* Creates a new interval with the specified duration after the start instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,288,"* @param duration  the duration to add to the start to get the new end instant, null means zero"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,289,* @return an interval with the start from this interval and a calculated end
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,290,* @throws IllegalArgumentException if the duration is negative
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,292,public Interval withDurationAfterStart(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,293,long durationMillis = DateTimeUtils.getDurationMillis(duration);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,294,if (durationMillis == toDurationMillis()) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,295,return this;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,297,long startMillis = getStartMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,298,"long endMillis = getChronology().add(startMillis, durationMillis, 1);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,299,"return new Interval(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,303,* Creates a new interval with the specified duration before the end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,305,"* @param duration  the duration to add to the start to get the new end instant, null means zero"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,306,* @return an interval with the start from this interval and a calculated end
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,307,* @throws IllegalArgumentException if the duration is negative
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,309,public Interval withDurationBeforeEnd(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,310,long durationMillis = DateTimeUtils.getDurationMillis(duration);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,311,if (durationMillis == toDurationMillis()) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,312,return this;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,314,long endMillis = getEndMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,315,"long startMillis = getChronology().add(endMillis, durationMillis, -1);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,316,"return new Interval(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,321,* Creates a new interval with the specified period after the start instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,323,"* @param period  the period to add to the start to get the new end instant, null means zero"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,324,* @return an interval with the start from this interval and a calculated end
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,325,* @throws IllegalArgumentException if the period is negative
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,327,public Interval withPeriodAfterStart(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,328,if (period == null) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,329,return this;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,331,long startMillis = getStartMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,332,"long endMillis = getChronology().add(period, startMillis, 1);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,333,"return new Interval(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,337,* Creates a new interval with the specified period before the end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,339,"* @param period  the period to add to the start to get the new end instant, null means zero"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,340,* @return an interval with the start from this interval and a calculated end
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,341,* @throws IllegalArgumentException if the period is negative
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,343,public Interval withPeriodBeforeEnd(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,344,if (period == null) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,345,return this;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,347,long endMillis = getEndMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,348,"long startMillis = getChronology().add(period, endMillis, -1);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,349,"return new Interval(startMillis, endMillis);"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,137, Resolves this partial against another complete millisecond instant to
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,138, create a new full instant specifying the time zone to resolve with.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,139, <p>
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,140," For example, if this partial represents a time, then the result of this"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,141, method will be the datetime from the specified base instant plus the
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,142, time from this partial set using the time zone specified.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,144, @param baseInstant  source of missing fields
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,145," @param zone  the time zone to use, null means default"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,146, @return the combined instant in milliseconds
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,148,"ong resolve(long baseInstant, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,162,ateTime resolveDateTime(ReadableInstant baseInstant);
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,165, Resolves this partial into another complete instant setting the relevant
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,166, fields on the writable instant. The combination is performed using the
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,167, chronology of the specified instant.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,168, <p>
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,169," For example, if this partial represents a time, then the input writable"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,170, instant will be updated with the time from this partial.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,172," @param baseInstant  the instant to set into, must not be null"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,173, @throws IllegalArgumentException if the base instant is null
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,175,oid resolveInto(ReadWritableInstant baseInstant);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,148,DateTime toDateTimeUsing(ReadableInstant baseInstant);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,422,"* Gets the property object for the specified type, which contains many useful methods."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,424,* @param type  the field type to get the chronology for
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,425,* @return the property object
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,426,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,428,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,429,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,319,"* Gets the property object for the specified type, which contains many useful methods."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,321,* @param type  the field type to get the chronology for
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,322,* @return the property object
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,323,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,325,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,326,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,331,* Converts this object to a DateMidnight in the default time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,333,* @return the DateMidnight instance in the default zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,335,public DateMidnight toDateMidnight() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,336,return toDateMidnight(null);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,340,* Converts this object to a DateMidnight.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,342,"* @param zone  the zone to get the DateMidnight in, null means default"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,343,* @return the DateMidnight instance
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,345,public DateMidnight toDateMidnight(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,346,"return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), zone);"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,56,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,57,import java.util.GregorianCalendar;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,61,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,281,* Get the date time as a <code>java.util.Calendar</code>.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,282,"* The locale is passed in, enabling Calendar to select the correct"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,283,* localized subclass.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,285,"* @param locale  the locale to get the Calendar for, or default if null"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,286,* @return a localized Calendar initialised with this datetime
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,288,public Calendar toCalendar(Locale locale) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,289,if (locale == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,290,locale = Locale.getDefault();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,292,DateTimeZone zone = getZone();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,293,Calendar cal;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,294,if (zone == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,295,cal = Calendar.getInstance(locale);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,296,} else {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,297,"cal = Calendar.getInstance(zone.toTimeZone(), locale);"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,299,cal.setTime(toDate());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,300,return cal;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,304,* Get the date time as a <code>java.util.GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,306,* @return a GregorianCalendar initialised with this datetime
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,308,public GregorianCalendar toGregorianCalendar() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,309,DateTimeZone zone = getZone();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,310,GregorianCalendar cal;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,311,if (zone == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,312,cal = new GregorianCalendar();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,313,} else {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,314,cal = new GregorianCalendar(zone.toTimeZone());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,316,cal.setTime(toDate());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,317,return cal;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,56,mport java.util.Calendar;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,58,mport java.util.GregorianCalendar;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,59,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,240, Get the date time as a <code>java.util.Calendar</code>.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,241," The locale is passed in, enabling Calendar to select the correct"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,242, localized subclass.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,244," @param locale  the locale to get the Calendar for, or default if null"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,245, @return a localized Calendar initialised with this datetime
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,247,ublic Calendar toCalendar(Locale locale) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,248,f (locale == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,249,ocale = Locale.getDefault();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,251,ateTimeZone zone = getZone();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,252,alendar cal;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,253,f (zone == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,254,al = Calendar.getInstance(locale);
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,255, else {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,256,"al = Calendar.getInstance(zone.toTimeZone(), locale);"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,258,al.setTime(toDate());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,259,eturn cal;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,263, Get the date time as a <code>java.util.GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,265, @return a GregorianCalendar initialised with this datetime
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,267,ublic GregorianCalendar toGregorianCalendar() {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,268,ateTimeZone zone = getZone();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,269,regorianCalendar cal;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,270,f (zone == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,271,al = new GregorianCalendar();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,272, else {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,273,al = new GregorianCalendar(zone.toTimeZone());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,275,al.setTime(toDate());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,276,eturn cal;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,61,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,62,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,185,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,186,f (getFieldType(i) == type) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,187,eturn getValue(i);
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,190,"hrow new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,183,return getValue(indexOfSupported(type));
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,193,return (indexOf(type) != -1);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,197,"* Gets the index of the specified field, or -1 if the field is unsupported."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,199,"* @param type  the type to check, may be null which returns -1"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,200,"* @return the index of the field, -1 if unsupported"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,202,public int indexOf(DateTimeFieldType type) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,202,eturn true;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,205,return i;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,205,eturn false;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,208,return -1;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,210, Resolves this partial against another complete millisecond instant to
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,211, create a new full instant specifying the time zone to resolve with.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,212, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,213," For example, if this partial represents a time, then the result of this"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,214, method will be the datetime from the specified base instant plus the
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,215, time from this partial set using the time zone specified.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,212,"* Gets the index of the specified field, throwing an exception if the"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,213,* field is unsupported.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,217, @param baseInstant  source of missing fields
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,218," @param zone  the time zone to use, null means default"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,219, @return the combined instant in milliseconds
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,215,"* @param type  the type to check, may be null which returns -1"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,216,"* @return the index of the field, -1 if unsupported"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,217,* @throws IllegalArgumentException if the field is null or not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,221,"ublic long resolve(long baseInstant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,222,hronology chrono = getChronology().withZone(zone);
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,223,"eturn chrono.set(this, baseInstant);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,219,protected int indexOfSupported(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,220,int index = indexOf(type);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,221,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,222,"throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,224,return index;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,238,ublic DateTime resolveDateTime(ReadableInstant baseInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,240,public DateTime toDateTimeUsing(ReadableInstant baseInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,246, Resolves this partial into another complete instant setting the relevant
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,247, fields on the writable instant. The combination is performed using the
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,248, chronology of the specified instant.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,249, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,250," For example, if this partial represents a time, then the input writable"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,251, instant will be updated with the time from this partial.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,253," @param baseInstant  the instant to set into, must not be null"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,254, @throws IllegalArgumentException if the base instant is null
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,256,ublic void resolveInto(ReadWritableInstant baseInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,257,f (baseInstant == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,258,"hrow new IllegalArgumentException(""The instant must not be null"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,260,hronology chrono = DateTimeUtils.getInstantChronology(baseInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,261,"ong resolved = chrono.set(this, baseInstant.getMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,262,aseInstant.setMillis(resolved);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,62,import org.joda.time.TimeOfDay;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,63,import org.joda.time.YearMonthDay;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,393,* Get this object as a YearMonthDay and chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,395,* @return a YearMonthDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,397,public YearMonthDay toYearMonthDay() {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,398,"return new YearMonthDay(getMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,402,* Get this object as a TimeOfDay and chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,404,* @return a TimeOfDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,406,public TimeOfDay toTimeOfDay() {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,407,"return new TimeOfDay(getMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,66,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,347,"* Adds the duration to the instant, specifying the number of times to add."
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,349,* @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,350,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,351,* @param scalar  the number of times to add
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,352,* @return the updated instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,354,"public long add(long instant, long duration, int scalar) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,355,if (duration == 0 || scalar == 0) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,356,return instant;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,358,"long add = FieldUtils.safeMultiply(duration, scalar);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,359,"return FieldUtils.safeAdd(instant, add);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1609,"ong millis = partial.resolve(0L, DateTimeZone.UTC);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1609,"long millis = this.iChrono.withUTC().set(partial, 0L);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1622,"ong millis = partial.resolve(0L, DateTimeZone.UTC);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1622,"long millis = this.iChrono.withUTC().set(partial, 0L);"
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,57,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,58,mport org.joda.time.DateTimeField;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,59,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,60,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,61,mport org.joda.time.ReadableInstant;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,94,"ublic long resolve(long baseMillis, DateTimeZone tz) {"
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,95,eturn 0L;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,97,ublic DateTime resolveDateTime(ReadableInstant base) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,88,public DateTime toDateTimeUsing(ReadableInstant base) {
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,100,ublic void resolveInto(ReadWritableInstant base) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,68,import org.joda.time.base.AbstractInstant;
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,294,"ssertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(i));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,295,"assertEquals(ISOChronology.getInstanceUTC(), DateTimeUtils.getInstantChronology(i));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,297,AbstractInstant ai = new AbstractInstant() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,298,public long getMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,299,return 0L;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,301,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,302,return null; // testing for this
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,305,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(ai));"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,61,mport java.util.Calendar;
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,63,mport java.util.GregorianCalendar;
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,188,"ssertEquals(null, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,189,"ssertEquals(null, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,186,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,187,"assertEquals(DateTimeZone.UTC, test.getZone());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,225,eturn null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,223,return Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,508,ublic void testToCalendar_Locale() {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,509,nstant test = new Instant(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,510,alendar result = test.toCalendar(null);
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,511,"ssertEquals(test.getMillis(), result.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,512,"ssertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,514,est = new Instant(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,515,esult = test.toCalendar(Locale.UK);
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,516,"ssertEquals(test.getMillis(), result.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,517,"ssertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,520,ublic void testToGregorianCalendar() {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,521,nstant test = new Instant(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,522,regorianCalendar result = test.toGregorianCalendar();
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,523,"ssertEquals(test.getMillis(), result.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,524,"ssertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,127,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,127,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,137,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,137,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,146,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,146,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,157,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,157,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,176,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,176,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,187,"ssertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,187,"assertEquals(Chronology.getISOUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,273,"esult = ISOChronology.getInstance().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,274,"esult = ISOChronology.getInstance().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,275,"esult = ISOChronology.getInstance().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,273,"result = ISOChronology.getInstanceUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,274,"result = ISOChronology.getInstanceUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,275,"result = ISOChronology.getInstanceUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,283,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,283,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,286,"esult = Chronology.getISOUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,287,"esult = Chronology.getISOUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,288,"esult = Chronology.getISOUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,286,"result = Chronology.getCopticUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,287,"result = Chronology.getCopticUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,288,"result = Chronology.getCopticUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,357,"esult = ISOChronology.getInstance().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,358,"esult = ISOChronology.getInstance().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,359,"esult = ISOChronology.getInstance().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,357,"result = Chronology.getISOUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,358,"result = Chronology.getISOUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,359,"result = Chronology.getISOUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,367,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,367,"DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,370,"esult = Chronology.getISOUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,371,"esult = Chronology.getISOUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,372,"esult = Chronology.getISOUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,370,"result = Chronology.getCopticUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,371,"result = Chronology.getCopticUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,372,"result = Chronology.getCopticUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,275,"esult = ISOChronology.getInstance().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,276,"esult = ISOChronology.getInstance().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,275,"result = Chronology.getISO().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,276,"result = Chronology.getISO().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,287,"esult = ISOChronology.getInstance().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,288,"esult = ISOChronology.getInstance().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,289,"esult = ISOChronology.getInstance().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,287,"result = Chronology.getISOUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,288,"result = Chronology.getISOUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,289,"result = Chronology.getISOUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,359,"esult = ISOChronology.getInstance().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,360,"esult = ISOChronology.getInstance().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,359,"result = Chronology.getISO().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,360,"result = Chronology.getISO().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,371,"esult = ISOChronology.getInstance().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,372,"esult = ISOChronology.getInstance().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,373,"esult = ISOChronology.getInstance().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,371,"result = Chronology.getISOUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,372,"result = Chronology.getISOUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,373,"result = Chronology.getISOUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,67,mport org.joda.time.Chronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,68,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,69,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,70,mport org.joda.time.DateTimeField;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,71,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,72,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,73,mport org.joda.time.MutableDateTime;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,74,mport org.joda.time.ReadableInstant;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,737,ublic void testResolve_long() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,738,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,739,ateTime dt = new DateTime(0L);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,740,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,742,"ateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,743,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,744,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,745,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,746,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,747,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,748,"ssertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,756,ateTime result = test.resolveDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,734,DateTime result = test.toDateTimeUsing(dt);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,769,ateTime result = test.resolveDateTime(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,747,DateTime result = test.toDateTimeUsing(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,777,ublic void testResolveInto_RWI() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,778,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,779,utableDateTime mdt = new MutableDateTime(0L);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,780,"ssertEquals(""1970-01-01T00:00:00.000Z"", mdt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,782,est.resolveInto(mdt);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,783,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,784,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,785,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,786,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,787,"ssertEquals(""1970-01-01T10:20:30.040Z"", mdt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,790,ublic void testResolveInto_nullRWI() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,791,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,793,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,794,est.resolveInto(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,795,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,796, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,67,mport org.joda.time.Chronology;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,68,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,69,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,70,mport org.joda.time.DateTimeField;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,71,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,72,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,73,mport org.joda.time.MutableDateTime;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,74,mport org.joda.time.ReadableInstant;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,545,ublic void testResolve_long() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,546,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,547,ateTime dt = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,548,"ssertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,550,"ateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,551,"heck(test, 1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,552,"ssertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,553,"ssertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,561,ateTime result = test.resolveDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,542,DateTime result = test.toDateTimeUsing(dt);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,571,ateTime result = test.resolveDateTime(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,552,DateTime result = test.toDateTimeUsing(null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,576,ublic void testResolveInto_RWI() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,577,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,578,utableDateTime mdt = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,579,"ssertEquals(""1970-04-06T12:24:00.000Z"", mdt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,581,est.resolveInto(mdt);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,582,"heck(test, 1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,583,"ssertEquals(""1972-06-09T12:24:00.000Z"", mdt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,586,ublic void testResolveInto_nullRWI() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,587,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,589,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,590,est.resolveInto(null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,591,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,592, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,142,"ssertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,142,"assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L)));"

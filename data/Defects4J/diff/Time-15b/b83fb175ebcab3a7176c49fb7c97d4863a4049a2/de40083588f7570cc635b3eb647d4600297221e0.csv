is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,32, Partial is an immutable partial datetime where the fields supported
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,33, are defined by the constructor.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,32,* Partial is an immutable partial datetime supporting any set of datetime fields.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,33,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,34,* A Partial instance can be used to hold any combination of fields.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,35,"* The instance does not contain a time zone, so any datetime is local."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,36,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,37,* A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,38,* This method compares each field on this partial with those of the instant
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,39,* and determines if the partial matches the instant.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,40,"* Given this definition, an empty Partial instance represents any datetime"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,41,* and always matches.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,684, @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,692,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,693,* @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,686,ublic boolean isAfter(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,695,public boolean isAfter(ReadablePartial date) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,701, @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,710,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,711,* @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,703,ublic boolean isBefore(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,713,public boolean isBefore(ReadablePartial date) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,718, @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,728,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,729,* @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,720,ublic boolean isEqual(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,731,public boolean isEqual(ReadablePartial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,740,* Does this partial match the specified instant.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,741,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,742,* A match occurs when all the fields of this partial are the same as the
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,743,* corresponding fields on the specified instant.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,745,"* @param instant  an instant to check against, null means now in default zone"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,746,* @return true if this partial matches the specified instant
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,748,public boolean isMatch(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,749,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,750,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,751,for (int i = 0; i < iTypes.length; i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,752,int value = iTypes[i].getField(chrono).get(millis);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,753,if (value != iValues[i]) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,754,return false;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,757,return true;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,86,suite.addTest(TestPartial_Match.suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,22,* This class is a Junit unit test for Partial.
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,24,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,26,public class TestPartial_Match extends TestCase {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,28,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,29,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,30,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,31,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,32,private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,33,private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,34,private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,35,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,36,private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,37,private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,38,private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,39,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,40,private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,41,private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,42,private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,43,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,45,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,46,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,47,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,48,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,49,+ 40L;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,51,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,52,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,53,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,54,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,55,+ 4L;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,57,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,58,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,59,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,60,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,61,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,62,+ 8L;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,64,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,66,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,67,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,70,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,71,return new TestSuite(TestPartial_Match.class);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,74,public TestPartial_Match(String name) {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,75,super(name);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,78,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,79,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,80,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,81,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,84,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,85,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,86,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,87,zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,91,public void testIsMatch() {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,92,"// Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,93,"Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,94,"DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,95,"assertEquals(true, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,97,"instant = new DateTime(2005, 7, 4, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,98,"assertEquals(false, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,100,"instant = new DateTime(2005, 7, 6, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,101,"assertEquals(false, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,103,"instant = new DateTime(2005, 7, 12, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,104,"assertEquals(true, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,106,"instant = new DateTime(2005, 7, 19, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,107,"assertEquals(true, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,109,"instant = new DateTime(2005, 7, 26, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,110,"assertEquals(true, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,112,"instant = new DateTime(2005, 8, 2, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,113,"assertEquals(false, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,115,"instant = new DateTime(2006, 7, 5, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,116,"assertEquals(false, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,118,"instant = new DateTime(2005, 6, 5, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,119,"assertEquals(false, test.isMatch(instant));"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,123,"private Partial createYMDwPartial(Chronology chrono, int year, int month, int dow) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,124,return new Partial(
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,125,new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,126,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,127,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,128,"DateTimeFieldType.dayOfWeek()},"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,129,"new int[] {year, month, dow},"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,130,chrono);

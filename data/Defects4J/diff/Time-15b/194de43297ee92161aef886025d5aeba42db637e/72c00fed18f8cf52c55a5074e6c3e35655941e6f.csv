is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,108," Returns a date-only millisecond instant, by clearing the time fields"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,109, from the given instant.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,110, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,111, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,112, <code>dayOfYear().roundFloor(instant)</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,114, @param instant the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,115, @return millisecond instant from 1970-01-01T00:00:00Z with the time part
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,116, cleared
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,118,ong getDateOnlyMillis(long instant);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,121," Returns a date-only millisecond instant, formed from the given year,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,122," month, and day values. The set of given values must refer to a valid"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123," date, or else an IllegalArgumentException is thrown."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,125, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,126," <code>getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)</code>."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,128, @param year year to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129, @param monthOfYear month to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130, @param dayOfMonth day of month to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131, @return millisecond instant from 1970-01-01T00:00:00Z without any time
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,132, part
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,134,"ong getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135,hrows IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,138," Returns a time-only millisecond instant, by clearing the date fields"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139, from the given instant.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,140, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,141, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,142, <code>dayOfYear().remainder(instant)</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,144, @param instant the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,145, @return millisecond instant from 1970-01-01T00:00:00Z with the date part
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,146, cleared
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148,ong getTimeOnlyMillis(long instant);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151," Returns a time-only millisecond instant, formed from the given hour,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152," minute, second, and millisecond values. The set of given values must"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,153," refer to a valid time, or else an IllegalArgumentException is thrown."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,154, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,155, The default implementation calls upon separate DateTimeFields to
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,156, determine the result. Subclasses are encouraged to provide a more
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,157, efficient implementation.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159, @param hourOfDay hour to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,160, @param minuteOfHour minute to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,161, @param secondOfMinute second to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,162, @param millisOfSecond millisecond to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,163, @return millisecond instant from 1970-01-01T00:00:00Z without any date
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,164, part
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,"ong getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,167,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,168,hrows IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,189," Returns a datetime millisecond instant, from from the given instant,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,190," hour, minute, second, and millisecond values. The set of given values"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,191," must refer to a valid datetime, or else an IllegalArgumentException is"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,192, thrown.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,126,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,127,"* month, day, hour, minute, second, and millisecond values. The set of"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,128,"* given values must refer to a valid datetime, or else an"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129,* IllegalArgumentException is thrown.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,198, @param instant instant to start from
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135,* @param year year to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137,* @param dayOfMonth day of month to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205,"ong getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,144,"long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,211," Returns a datetime millisecond instant, formed from the given year,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,212," month, day, hour, minute, second, and millisecond values. The set of"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,213," given values must refer to a valid datetime, or else an"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,214, IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,150,"* Returns a datetime millisecond instant, from from the given instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151,"* hour, minute, second, and millisecond values. The set of given values"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152,"* must refer to a valid datetime, or else an IllegalArgumentException is"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,153,* thrown.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,220, @param year year to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,221, @param monthOfYear month to use
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,222, @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159,* @param instant instant to start from
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,229,"ong getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,"long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,195, @throws IllegalArgumentException if the instant is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,196,* @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,213, @throws IllegalArgumentException if the instant is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,214,* @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,230, @throws IllegalArgumentException if the instant is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,231,* @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,386, @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,387,* @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,832,hronology c = getChronology();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,833,etMillis(c.getDateOnlyMillis(instant) + c.getTimeOnlyMillis(getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,833,"setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,844, @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,844,* @throws IllegalArgumentException if the object is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,847,// TODO: Does time zone need to be considered? See setTime(Object)
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,865,ong instant = c.getDateTimeMillis(
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,866,"ear, monthOfYear, dayOfMonth, 0, 0, 0, 0);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,867,etDate(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,866,"long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,867,setDate(instantMidnight);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,879,hronology c = getChronology();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,880,etMillis(c.getDateOnlyMillis(getMillis()) + c.getTimeOnlyMillis(millis));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,879,int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,880,"setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,891, @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,891,* @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,895,etTime(converter.getInstantMillis(instant));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,895,long millis = converter.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,896,DateTimeZone zone = converter.getChronology(instant).getZone();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,897,if (zone != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,898,"millis = zone.getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,900,setTime(millis);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,915,etTime(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,920,setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,938, @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,943,* @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,114," Returns a date-only millisecond instant, by clearing the time fields"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,115, from the given instant.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,116, <p>
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,117, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,118, <code>dayOfYear().roundFloor(instant)</code>.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,120, @param instant the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,121, @return millisecond instant from 1970-01-01T00:00:00Z with the time part
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,122, cleared
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,124,ublic long getDateOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,125,eturn dayOfYear().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,129," Returns a date-only millisecond instant, formed from the given year,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,130," month, and day values. The set of given values must refer to a valid"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,131," date, or else an IllegalArgumentException is thrown."
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,132, <p>
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,133, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,134," <code>getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)</code>."
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,136, @param year year to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,137, @param monthOfYear month to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,138, @param dayOfMonth day of month to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,139, @return millisecond instant from 1970-01-01T00:00:00Z without any time
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,140, part
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,142,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,143,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,145,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,149," Returns a time-only millisecond instant, by clearing the date fields"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,150, from the given instant.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,151, <p>
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,152, The default implementation simply returns
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,153, <code>dayOfYear().remainder(instant)</code>.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,155, @param instant the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,156, @return millisecond instant from 1970-01-01T00:00:00Z with the date part
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,157, cleared
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,159,ublic long getTimeOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,160,eturn dayOfYear().remainder(instant);
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,164," Returns a time-only millisecond instant, formed from the given hour,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,165," minute, second, and millisecond values. The set of given values must"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,166," refer to a valid time, or else an IllegalArgumentException is thrown."
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,167, <p>
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,168, The default implementation calls upon separate DateTimeFields to
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,169, determine the result. Subclasses are encouraged to provide a more
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,170, efficient implementation.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,172, @param hourOfDay hour to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,173, @param minuteOfHour minute to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,174, @param secondOfMinute second to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,175, @param millisOfSecond millisecond to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,176, @return millisecond instant from 1970-01-01T00:00:00Z without any date
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,177, part
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,179,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,180,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,181,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,183,"ong instant = hourOfDay().set(0, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,184,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,185,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,186,"eturn millisOfSecond().set(instant, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,215," Returns a datetime millisecond instant, from from the given instant,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,216," hour, minute, second, and millisecond values. The set of given values"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,217," must refer to a valid datetime, or else an IllegalArgumentException is"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,218, thrown.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,139,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,140,"* month, day, hour, minute, second, and millisecond values. The set of"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,141,"* given values must refer to a valid datetime, or else an"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,142,* IllegalArgumentException is thrown.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,224, @param instant instant to start from
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,148,* @param year year to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,149,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,150,* @param dayOfMonth day of month to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,231,"ublic long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,157,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,162,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,163,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,164,"instant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,243," Returns a datetime millisecond instant, formed from the given year,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,244," month, day, hour, minute, second, and millisecond values. The set of"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,245," given values must refer to a valid datetime, or else an"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,246, IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,172,"* Returns a datetime millisecond instant, from from the given instant,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,173,"* hour, minute, second, and millisecond values. The set of given values"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,174,"* must refer to a valid datetime, or else an IllegalArgumentException is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,175,* thrown.
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,252, @param year year to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,253, @param monthOfYear month to use
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,254, @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,181,* @param instant instant to start from
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,261,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,188,"public long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,266,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,267,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,268,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,241,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,241,"public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,242,int millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,246,"eturn base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,249,"ieldUtils.verifyValueBounds(""year"", year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,250,"ieldUtils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,252,oolean isLeap = isLeapYear(year);
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,254,"ieldUtils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,255,isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,256,monthOfYear - 1]);
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,258,ong instant = getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,260,f (monthOfYear > 1) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,261,nstant +=
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,262,isLeap ? MAX_TOTAL_MILLIS_BY_MONTH_ARRAY : MIN_TOTAL_MILLIS_BY_MONTH_ARRAY)
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,263,monthOfYear - 2];
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,266,f (dayOfMonth != 1) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,267,nstant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,247,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,270,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,250,"FieldUtils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,251,"return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,273,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,274,"nt secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,254,"public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,255,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,256,"int secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,279,"eturn base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,261,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,262,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,287,eturn hourOfDay * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,270,"return getDateMidnightMillis(year, monthOfYear, dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,271,+ hourOfDay * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,293,"ublic final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,294,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,295,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,297,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,298,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,299,"eturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,301,"ieldUtils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,302,"eturn getDateOnlyMillis(year, monthOfYear, dayOfMonth) + millisOfDay;"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,305,"ublic final long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,306,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,307,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,308,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,310,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,311,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,312,eturn base.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,313,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,315,eturn getDateOnlyMillis(instant)
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,316," getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,319,"ublic final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,320,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,321,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,322,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,324,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,325,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,326,"eturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,327,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,329,"eturn getDateOnlyMillis(year, monthOfYear, dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,330," getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,755,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,756,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,758,"FieldUtils.verifyValueBounds(""year"", year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,759,"FieldUtils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,761,boolean isLeap = isLeapYear(year);
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,763,"FieldUtils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,764,(isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,765,[monthOfYear - 1]);
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,767,long instant = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,769,if (monthOfYear > 1) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,770,instant +=
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,771,(isLeap ? MAX_TOTAL_MILLIS_BY_MONTH_ARRAY : MIN_TOTAL_MILLIS_BY_MONTH_ARRAY)
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,772,[monthOfYear - 2];
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,775,if (dayOfMonth != 1) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,776,instant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,779,return instant;
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,149,ublic long getDateOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,150,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,151,f ((base = iBase) != null) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,152,eturn base.getDateOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,154,eturn super.getDateOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,157,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,158,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,160,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,161,f ((base = iBase) != null && (iBaseFlags & 4) == 4) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,162,/ Only call specialized implementation if applicable fields are the same.
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,163,"eturn base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,165,"eturn super.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,168,ublic long getTimeOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,169,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,170,f ((base = iBase) != null) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,171,eturn base.getTimeOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,173,eturn super.getTimeOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,176,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,177,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,178,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,180,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,181,f ((base = iBase) != null && (iBaseFlags & 1) == 1) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,182,/ Only call specialized implementation if applicable fields are the same.
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,183,"eturn base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,185,"eturn super.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,200,"ublic long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,161,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,206,f ((base = iBase) != null && (iBaseFlags & 1) == 1) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,167,if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,208,eturn base.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,209,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,169,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,170,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,211,eturn super.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,212,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,172,"return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,173,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,215,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,176,"public long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,221,f ((base = iBase) != null && (iBaseFlags & 5) == 5) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,182,if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,223,"eturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,224,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,184,return base.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,185,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,226,"eturn super.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,227,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,187,return super.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,188,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,233,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,233,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,236,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,237,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,238,"eturn base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,361,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,362,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,364,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,365,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,366,"eturn base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,369,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,372,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,373,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,374,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,376,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,377,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,378,"eturn base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,381,/ Time fields are same for Julian and Gregorian.
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,382,eturn iGregorianChronology.getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,383,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,410,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,411,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,412,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,413,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,415,hronology base;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,416,f ((base = getBase()) != null) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,417,eturn base.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,418,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,421,eturn getDateOnlyMillis(instant)
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,422," getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,437,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,438," getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,397,// Assume date is Gregorian.
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,398,long instant = iGregorianChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,399,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,400,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,401,if (instant < iCutoverMillis) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,402,// Maybe it's Julian.
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,403,instant = iJulianChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,404,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,405,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,406,if (instant >= iCutoverMillis) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,407,"// Okay, it's in the illegal cutover gap."
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,408,"throw new IllegalArgumentException(""Specified date does not exist"");"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,411,return instant;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,470,f (withUTC().getTimeOnlyMillis(iCutoverMillis) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,443,if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,230,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,230,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,233,"eturn super.getDateOnlyMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,233,"return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,210,ublic long getDateOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,211,"heckLimits(instant, null);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,212,nstant = getBase().getDateOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,213,"heckLimits(instant, ""resulting"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,214,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,217,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,218,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,220,"ong instant = getBase().getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,221,"heckLimits(instant, ""resulting"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,222,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,225,ublic long getTimeOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,226,"heckLimits(instant, null);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,227,nstant = getBase().getTimeOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,228,"heckLimits(instant, ""resulting"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,229,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,232,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,233,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,234,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,236,ong instant = getBase().getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,237,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,238,"heckLimits(instant, ""resulting"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,239,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,251,"ublic long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,219,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,256,"heckLimits(instant, null);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,257,nstant = getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,258,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,224,long instant = getBase().getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,225,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,226,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,263,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,231,"public long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,268,ong instant = getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,269,"year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,270,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,236,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,237,instant = getBase().getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,238,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,140,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,141,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,143,eturn localToUTC(getBase().getDateOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,144,"year, monthOfYear, dayOfMonth));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,147,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,148,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,149,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,151,eturn localToUTC(getBase().getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,152,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,163,"ublic long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,148,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,169,"instant + getZone().getOffset(instant),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,154,"(year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,173,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,158,"public long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,179,"year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,164,"(instant + getZone().getOffset(instant),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,170,* @return instant from 1970-01-01T00:00:00Z

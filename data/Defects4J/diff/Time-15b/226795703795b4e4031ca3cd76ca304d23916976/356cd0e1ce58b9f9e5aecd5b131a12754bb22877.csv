is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,18,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,19,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,20,import java.io.ObjectOutputStream;
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,936,rivate final DateMidnight iInstant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,939,private DateMidnight iInstant;
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,938,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,941,private DateTimeField iField;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,956,* Writes the property in a safe serialization format.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,958,private void writeObject(ObjectOutputStream oos) throws IOException {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,959,oos.writeObject(iInstant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,960,oos.writeObject(iField.getType());
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,964,* Reads the property from a safe serialization format.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,966,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,967,iInstant = (DateMidnight) oos.readObject();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,968,DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,969,iField = type.getField(iInstant.getChronology());
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,18,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,19,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,20,import java.io.ObjectOutputStream;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1326,rivate final DateTime iInstant;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1329,private DateTime iInstant;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1328,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1331,private DateTimeField iField;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1346,* Writes the property in a safe serialization format.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1348,private void writeObject(ObjectOutputStream oos) throws IOException {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1349,oos.writeObject(iInstant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1350,oos.writeObject(iField.getType());
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1354,* Reads the property from a safe serialization format.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1356,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1357,iInstant = (DateTime) oos.readObject();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1358,DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1359,iField = type.getField(iInstant.getChronology());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,18,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,19,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,20,import java.io.ObjectOutputStream;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1155,rivate final MutableDateTime iInstant;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1158,private MutableDateTime iInstant;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1157,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1160,private DateTimeField iField;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1175,* Writes the property in a safe serialization format.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1177,private void writeObject(ObjectOutputStream oos) throws IOException {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1178,oos.writeObject(iInstant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1179,oos.writeObject(iField.getType());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1183,* Reads the property from a safe serialization format.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1185,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1186,iInstant = (MutableDateTime) oos.readObject();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1187,DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1188,iField = type.getField(iInstant.getChronology());
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,30,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,33,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,35,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,36,import org.joda.time.field.DelegatedDurationField;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,37,import org.joda.time.field.MillisDurationField;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,38,import org.joda.time.field.UnsupportedDateTimeField;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,39,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,79,private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,80,private static final long serialVersionUID = 1878496002811998493L;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,81,public MockDelegatedDurationField() {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,82,super(MillisDurationField.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,118,"oadAndCompare(test, ""Instant.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,119,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,132,"loadAndCompare(test, ""Instant.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,133,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,124,"oadAndCompare(test, ""DateTime.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,125,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,138,"loadAndCompare(test, ""DateTime.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,139,"inlineCompare(test, false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,142,public void testSerializedDateTimeProperty() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,143,DateTime.Property test = new DateTime().hourOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,144,"loadAndCompare(test, ""DateTimeProperty.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,145,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,130,"oadAndCompare(test, ""MutableDateTime.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,131,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,150,"loadAndCompare(test, ""MutableDateTime.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,151,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,136,"oadAndCompare(test, ""DateMidnight.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,137,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,156,"loadAndCompare(test, ""DateMidnight.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,157,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,142,"oadAndCompare(test, ""YearMonthDay.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,143,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,162,"loadAndCompare(test, ""YearMonthDay.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,163,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,148,"oadAndCompare(test, ""TimeOfDay.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,149,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,168,"loadAndCompare(test, ""TimeOfDay.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,169,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,154,"oadAndCompare(test, ""DateTimeZoneUTC.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,155,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,174,"loadAndCompare(test, ""DateTimeZoneUTC.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,175,"inlineCompare(test, true);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,160,"oadAndCompare(test, ""DateTimeZone.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,161,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,180,"loadAndCompare(test, ""DateTimeZone.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,181,"inlineCompare(test, true);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,166,"oadAndCompare(test, ""CopticChronology.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,167,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,186,"loadAndCompare(test, ""CopticChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,187,"inlineCompare(test, true);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,172,"oadAndCompare(test, ""ISOChronology.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,173,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,192,"loadAndCompare(test, ""ISOChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,193,"inlineCompare(test, true);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,178,"oadAndCompare(test, ""GJChronology.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,179,nlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,198,"loadAndCompare(test, ""GJChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,199,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,202,public void testSerializedGregorianChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,203,GregorianChronology test = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,204,"loadAndCompare(test, ""GregorianChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,205,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,208,public void testSerializedJulianChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,209,JulianChronology test = JulianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,210,"loadAndCompare(test, ""JulianChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,211,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,214,public void testSerializedBuddhistChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,215,BuddhistChronology test = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,216,"loadAndCompare(test, ""BuddhistChronology.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,217,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,220,public void testSerializedPeriodType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,221,PeriodType test = PeriodType.dayTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,222,"loadAndCompare(test, ""PeriodType.dat"", false);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,223,"inlineCompare(test, false);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,182,"rivate void loadAndCompare(Serializable test, String filename) throws Exception {"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,226,public void testSerializedDateTimeFieldType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,227,DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,228,"loadAndCompare(test, ""DateTimeFieldType.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,229,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,232,public void testSerializedUnsupportedDateTimeField() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,233,UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,234,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,235,UnsupportedDurationField.getInstance(DurationFieldType.years()));
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,236,"loadAndCompare(test, ""UnsupportedDateTimeField.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,237,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,240,"private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception {"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,187,"ssertEquals(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,245,if (same) {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,246,"assertSame(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,247,} else {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,248,"assertEquals(test, obj);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,190,ublic void inlineCompare(Serializable test) throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,252,"public void inlineCompare(Serializable test, boolean same) throws Exception {"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,201,"ssertEquals(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,263,if (same) {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,264,"assertSame(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,265,} else {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,266,"assertEquals(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,296,//    public void testStoreSerializedYearMonthDayProperty() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,297,//        YearMonthDay.Property test = new YearMonthDay().monthOfYear();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,298,"//        store(test, ""YearMonthDayProperty.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,306,//    public void testStoreSerializedTimeOfDayProperty() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,307,//        TimeOfDay.Property test = new TimeOfDay().hourOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,308,"//        store(test, ""TimeOfDayProperty.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,336,//    public void testStoreSerializedGregorianChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,337,//        GregorianChronology test = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,338,"//        store(test, ""GregorianChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,341,//    public void testStoreSerializedJulianChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,342,//        JulianChronology test = JulianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,343,"//        store(test, ""JulianChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,346,//    public void testStoreSerializedBuddhistChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,347,//        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,348,"//        store(test, ""BuddhistChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,351,//    public void testStoreSerializedPeriodType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,352,//        PeriodType test = PeriodType.dayTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,353,"//        store(test, ""PeriodType.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,356,//    public void testStoreSerializedDateTimeFieldType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,357,//        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,358,"//        store(test, ""DateTimeFieldType.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,361,//    public void testStoreSerializedUnsupportedDateTimeField() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,362,//        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,363,"//                DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,364,//                UnsupportedDurationField.getInstance(DurationFieldType.years()));
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,365,"//        store(test, ""UnsupportedDateTimeField.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,368,//    public void testStoreSerializedDurationFieldType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,369,//        DurationFieldType test = DurationFieldType.MINUTES_TYPE;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,370,"//        store(test, ""DurationFieldType.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,373,//    public void testStoreSerializedMillisDurationField() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,374,//        MillisDurationField test = (MillisDurationField) MillisDurationField.INSTANCE;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,375,"//        store(test, ""MillisDurationField.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,378,//    public void testStoreSerializedDelegatedDurationField() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,379,//        DelegatedDurationField test = new MockDelegatedDurationField();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,380,"//        store(test, ""DelegatedDurationField.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,383,//    public void testStoreSerializedUnsupportedDurationField() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,384,//        UnsupportedDurationField test = UnsupportedDurationField.getInstance(DurationFieldType.eras());
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,385,"//        store(test, ""UnsupportedDurationField.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,388,// format changed (properly defined) in v1.1
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,389,//    public void testStoreSerializedDateTimeProperty() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,390,//        DateTime.Property test = new DateTime().hourOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,391,"//        store(test, ""DateTimeProperty.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,263,/        oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,397,//        try {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,398,//            oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,399,//        } finally {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,400,//            oos.close();

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,58,mport org.joda.time.convert.DurationConverter;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,57,import org.joda.time.convert.DurationConverter;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,61,mport org.joda.time.format.ISODurationFormat;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,59,import org.joda.time.format.ISOTimePeriodFormat;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,76,"ublic abstract class AbstractDuration implements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,74,public abstract class AbstractDuration implements ReadableDuration {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,79,rivate static final long serialVersionUID = -2110953284060001145L;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,80,** Millis cache is currently unknown */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,81,rivate static final int STATE_UNKNOWN = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,82,** Millis cache is not calculable */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,83,rivate static final int STATE_NOT_CALCULABLE = 1;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,84,** Millis cache has been calculated and is valid */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,85,rivate static final int STATE_CALCULATED = 2;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,86,"** Total millis is the master field, fields always accurate */"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,87,rivate static final int STATE_TOTAL_MILLIS_MASTER = -1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,77,private static final long serialVersionUID = 358732693691287348L;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,89,** The duration type that allocates the duration to fields */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,90,rivate final DurationType iType;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,91,** The object state */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,92,rivate int iState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,93,"** The total milliseconds, if known */"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,94,rivate long iTotalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,95,** Value for years */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,96,rivate int iYears;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,97,** Value for months */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,98,rivate int iMonths;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,99,** Value for weeks */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,100,rivate int iWeeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,101,** Value for days */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,102,rivate int iDays;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,103,** Value for hours */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,104,rivate int iHours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,105,** Value for minutes */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,106,rivate int iMinutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,107,** Value for seconds */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,108,rivate int iSeconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,109,** Value for millis */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,110,rivate int iMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,79,/** The duration length */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,80,private long iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,114, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,115, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,116, the duration type.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,119, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,120," @param totalMillisMaster  true if the total millis is master, false if the fields are"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,121, @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,123,"ublic AbstractDuration(long duration, DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,124,uper();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,125,"ype = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,126,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,127,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,128,"etTotalMillis(type, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,132, Creates a duration from a set of field values.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,134," @param years  amount of years in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,135," @param months  amount of months in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,136," @param weeks  amount of weeks in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,137," @param days  amount of days in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,138," @param hours  amount of hours in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,139," @param minutes  amount of minutes in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,140," @param seconds  amount of seconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,141," @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,142, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,143," @param totalMillisMaster  true if the total millis is master, false if the fields are"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,144, @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,145, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,147,"ublic AbstractDuration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,148,"nt hours, int minutes, int seconds, int millis,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,149,"urationType type, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,87,public AbstractDuration(long duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,151,"ype = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,152,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,153,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,154,"etDuration(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,89,iMillis = duration;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,160," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,162, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163," @param totalMillisMaster  true if the total millis is master, false if the fields are"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,164, @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,95,"* @param startInstant  interval start, null means now"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,96,"* @param endInstant  interval end, null means now"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,97,* @throws ArithmeticException if the duration exceeds a 64 bit long
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,166,"ublic AbstractDuration(long startInstant, long endInstant, DurationType type, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,99,"public AbstractDuration(long startInstant, long  endInstant) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,168,"ype = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,169,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,170,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,171,"etTotalMillis(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,101,"iMillis = FieldUtils.safeAdd(endInstant, -startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,179, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,180," @param totalMillisMaster  true if the total millis is master, false if the fields are"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,181, @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,109,* @throws ArithmeticException if the duration exceeds a 64 bit long
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,183,ublic AbstractDuration(
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,184,"eadableInstant startInstant, ReadableInstant  endInstant, DurationType type, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,111,"public AbstractDuration(ReadableInstant startInstant, ReadableInstant  endInstant) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,186,"ype = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,187,f (startInstant == null && endInstant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,188,Type = type;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,113,if (startInstant == endInstant) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,114,iMillis = 0L;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,192,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,193,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,194,"etTotalMillis(type, start, end);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,118,"iMillis = FieldUtils.safeAdd(end, -start);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,202," @param type  which set of fields this duration supports, null means use type from object"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,203," @param totalMillisMaster  true if the total millis is master, false if the fields are"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,205, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,207,"ublic AbstractDuration(Object duration, DurationType type, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,128,public AbstractDuration(Object duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,210,"ype = (type == null ? converter.getDurationType(duration, totalMillisMaster) : type);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,211,"ype = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,212,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,213,f (type.isPrecise() && converter.isPrecise(duration)) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,214,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,215,"etTotalMillis(type, converter.getDurationMillis(duration));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,216, else if (this instanceof ReadWritableDuration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,217,"onverter.setInto((ReadWritableDuration) this, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,218, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,219,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,220,"etDuration(type, new MutableDuration(duration, type));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,131,iMillis = converter.getDurationMillis(duration);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,226," Validates a duration type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,227, checking the type is suitable for this instance.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,229, @param type  the type to check
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,230, @param totalMillisMaster  true if total millis should be master
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,231," @return the duration type, not null"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,232, @throws IllegalArgumentException if the duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,234,"rivate DurationType init(DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,235,f (totalMillisMaster) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,236,State = STATE_TOTAL_MILLIS_MASTER;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,238,ype = checkDurationType(type);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,239,f (type == null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,240,"hrow new IllegalArgumentException(""The duration type must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,242,f (totalMillisMaster && type.isPrecise() == false) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,243,"hrow new IllegalArgumentException(""The duration type must be precise: "" + type);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,245,eturn type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,249," Validates a duration type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,250, checking the type is suitable for this instance.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,252," @param type  the type to check, may be null"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,253," @return the validated type to use, not null"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,254, @throws IllegalArgumentException if the duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,256,rotected abstract DurationType checkDurationType(DurationType type);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,260, Returns the object which defines which fields this duration supports.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,262,ublic final DurationType getDurationType() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,263,eturn iType;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,267, Is this duration based on a millisecond duration and thus performs
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,268, all calculations using the total millisecond value.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,269, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,270, Durations operate either using the total milliseconds as the master and the
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,271," field values as derived, or vice versa. This method returns true if the"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,272, total millis field is the master.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,273, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,274," If true, {@link #isPrecise()} will always return true, {@link #getTotalMillis()}"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,275, and {@link #compareTo(Object)} methods will never throw an exception and the
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,276, add methods will add using the total milliseconds value.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,277, See {@link MillisDuration} for details.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,279, @return true if the duration is based on total milliseconds
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,281,ublic final boolean isTotalMillisBased() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,282,eturn (iState == STATE_TOTAL_MILLIS_MASTER);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,286," Gets the total length of this duration in milliseconds,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,287, failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,136,* Gets the total length of this duration in milliseconds.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,290, @throws IllegalStateException if the duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,291, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,293,ublic final long getTotalMillis() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,294,nt state = iState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,295,f (state == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,296,eturn iTotalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,298,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,299,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,301,f (state != STATE_CALCULATED) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,302,"hrow new IllegalStateException(""Duration is imprecise"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,304,eturn iTotalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,308," Is this duration a precise length of time, or descriptive."
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,309, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,310," A precise duration could include millis, seconds, minutes or hours."
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,311," However, days, weeks, months and years can vary in length, resulting in"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,312, an imprecise duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,313, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,314, An imprecise duration can be made precise by pairing it with a
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,315, date in a {@link ReadableInterval}.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,317, @return true if the duration is precise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,319,ublic final boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,320,nt state = iState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,321,f (state == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,322,eturn true;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,324,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,325,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,327,eturn (state == STATE_CALCULATED);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,140,public final long getMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,141,return iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,332, Adds this duration to the given instant using the chronology of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,333, which typically ignores time zones.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,334, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,335," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,336, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,338, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,339, duration to
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,340," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,341, @return milliseconds value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,342, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,344,"ublic final long addTo(long instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,345,"eturn addTo(instant, scalar, null);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,349, Adds this duration to the given instant using a specific chronology.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,350, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,351," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,352, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,354, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,355, duration to
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,356," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,357," @param chrono  override the duration's chronology, unless null is passed in"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,358, @return milliseconds value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,359, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,361,"ublic final long addTo(long instant, int scalar, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,362,f (isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,363,"eturn FieldUtils.safeAdd(instant, getTotalMillis() * scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,366,urationType type = iType;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,367,f (chrono != null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,368,ype = type.withChronology(chrono);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,371,ong value; // used to lock fields against threading issues
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,372,"alue = scaleValue(iYears, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,373,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,374,"nstant = type.years().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,376,"alue = scaleValue(iMonths, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,377,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,378,"nstant = type.months().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,380,"alue = scaleValue(iWeeks, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,381,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,382,"nstant = type.weeks().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,384,"alue = scaleValue(iDays, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,385,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,386,"nstant = type.days().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,388,"alue = scaleValue(iHours, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,389,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,390,"nstant = type.hours().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,392,"alue = scaleValue(iMinutes, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,393,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,394,"nstant = type.minutes().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,396,"alue = scaleValue(iSeconds, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,397,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,398,"nstant = type.seconds().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,400,"alue = scaleValue(iMillis, scalar);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,401,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,402,"nstant = type.millis().add(instant, value);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,405,eturn instant;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,409, Convert the scalar to a multiple efficiently.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,146,* Converts this duration to a Duration instance.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,411, @param value  the value
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,412, @param scalar  the scalar
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,413, @return the converted value
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,415,"rivate static long scaleValue(int value, int scalar) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,416,ong val = value;  // use long to avoid truncation
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,417,witch (scalar) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,418,ase -1:
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,419,eturn -val;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,420,ase 0:
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,421,eturn 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,422,ase 1:
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,423,eturn val;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,424,efault:
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,425,eturn val * scalar;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,430, Adds this duration to the given instant using the chronology of the specified
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,431," instant (if present), returning a new Instant."
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,432, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,433," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,434, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,436," @param instant  the instant to add the duration to, null means now"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,437," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,438, @return instant with the original value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,439, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,441,"ublic final Instant addTo(ReadableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,442,f (instant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,443,"eturn new Instant(addTo(DateTimeUtils.currentTimeMillis(), scalar));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,445,"eturn new Instant(addTo(instant.getMillis(), scalar, instant.getChronology()));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,449, Adds this duration into the given mutable instant using the chronology of
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,450, the specified mutable instant (if present).
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,451, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,452," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,453, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,455," @param instant  the instant to update with the added duration, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,456," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,457, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,458, @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,148,* @return a Duration created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,460,"ublic final void addInto(ReadWritableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,461,f (instant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,462,"hrow new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,150,public final Duration toDuration() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,151,if (this instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,152,return (Duration) this;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,464,"nstant.setMillis(addTo(instant.getMillis(), scalar, instant.getChronology()));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,154,return new Duration(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,469, Gets the years field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,471," @return the number of years in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,473,ublic final int getYears() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,474,eturn iYears;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,479, Gets the months field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,481," @return the number of months in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,483,ublic final int getMonths() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,484,eturn iMonths;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,489, Gets the weeks field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,491," @return the number of weeks in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,493,ublic final int getWeeks() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,494,eturn iWeeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,499, Gets the days field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,501," @return the number of days in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,503,ublic final int getDays() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,504,eturn iDays;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,509, Gets the hours field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,511," @return the number of hours in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,513,ublic final int getHours() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,514,eturn iHours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,519, Gets the minutes field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,521," @return the number of minutes in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,523,ublic final int getMinutes() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,524,eturn iMinutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,529, Gets the seconds field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,531," @return the number of seconds in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,533,ublic final int getSeconds() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,534,eturn iSeconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,539, Gets the millis field part of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,541," @return the number of millis in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,543,ublic final int getMillis() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,544,eturn iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,549, Get this object as an immutable Duration. This can be useful if you
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,550," don't trust the implementation of the interface to be well-behaved, or"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,551, to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,159,* Converts this duration to a TimePeriod instance using the PreciseAll type.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,160,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161,"* The PreciseAll type fixes days at 24 hours, months ay 30 days and years at 365 days"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,162,* thus the time period will be precise. As a result there is no loss of precision
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163,* with regards the length of the duration and the following code will work:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,164,* <pre>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165,* Duration dur = new Duration(123456789L);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,166,* TimePeriod period = d.toTimePeriod();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,167,* Duration dur2 = period.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,168,* // dur.getMillis() == dur2.getMillis()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,169,* </pre>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,553, @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,171,* @return a TimePeriod created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,555,ublic final Duration toDuration() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,556,f (this instanceof Duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,557,eturn (Duration) this;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,559,eturn new Duration(this);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,173,public final TimePeriod toTimePeriod() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,174,"return new TimePeriod(this, DurationType.getPreciseAllType());"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,563, Get this object as a MutableDuration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,178,* Converts this duration to a TimePeriod instance specifying a duration type
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,179,* to control how the duration is split into fields.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,180,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,181,"* If a non-precise duration type is used, the resulting time period will only"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,182,* represent an approximation of the duration. As a result it will not be
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,183,* possible to call {@link TimePeriod#toDuration()} to get the duration back.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,565, @return a MutableDuration using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,185,* @param type  the duration type determining how to split the duration into fields
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,186,* @return a TimePeriod created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,567,ublic final MutableDuration toMutableDuration() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,568,eturn new MutableDuration(this);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,188,public final TimePeriod toTimePeriod(DurationType type) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,189,"return new TimePeriod(this, type);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,573," Compares this duration with the specified duration, which can only be"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,574, performed if both are precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,194,* Compares this duration with the specified duration based on length.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,576, @param obj  a precise duration to check against
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,196,* @param obj  a duration to check against
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,580, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,582,ublic int compareTo(Object obj) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,201,public final int compareTo(Object obj) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,587,ong thisMillis = thisDuration.getTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,588,ong otherMillis = otherDuration.getTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,206,long thisMillis = thisDuration.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,207,long otherMillis = otherDuration.getMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,602, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,606, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,608,ublic boolean isEqual(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,225,public final boolean isEqual(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,617, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,621, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,623,ublic boolean isLongerThan(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,238,public final boolean isLongerThan(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,632, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,636, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,638,ublic boolean isShorterThan(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,251,public final boolean isShorterThan(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,648, on the value of each field. All ReadableDuration instances are accepted.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,649, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,650, To compare two durations for absolute duration (ie. millisecond duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,651," ignoring the fields), use {@link #isEqual(ReadableDuration)} or"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,652, {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,261,* on the millisecond length. All ReadableDuration instances are accepted.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,655," @return true if all the field values are equal, false if"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,656,  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,264,* @return true if the length of the duration is equal
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,658,ublic boolean equals(Object readableDuration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,266,public final boolean equals(Object readableDuration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,666,urationType type = getDurationType();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,667,f (type.equals(other.getDurationType()) == false) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,668,eturn false;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,670,eturn getYears() == other.getYears()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,671,& getMonths() == other.getMonths()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,672,& getWeeks() == other.getWeeks()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,673,& getDays() == other.getDays()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,674,& getHours() == other.getHours()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,675,& getMinutes() == other.getMinutes()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,676,& getSeconds() == other.getSeconds()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,677,& getMillis() == other.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,274,return (getMillis() == other.getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,686,ublic int hashCode() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,687,nt hash = getDurationType().hashCode();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,688,ash = 53 * hash + getYears();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,689,ash = 53 * hash + getMonths();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,690,ash = 53 * hash + getWeeks();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,691,ash = 53 * hash + getDays();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,692,ash = 53 * hash + getHours();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,693,ash = 53 * hash + getMinutes();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,694,ash = 53 * hash + getSeconds();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,695,ash = 53 * hash + getMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,696,eturn hash;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,283,public final int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,284,long len = getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,285,return (int) (len ^ (len >>> 32));
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,293,* The field values are determined using the PreciseAll duration type.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,708,eturn ISODurationFormat.getInstance().standard().print(this);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,298,return ISOTimePeriodFormat.getInstance().standard().print(toTimePeriod());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,713, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,715,"rivate static void checkArgument(DurationField field, String name) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,716,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,717,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,718,"""Duration does not support field \"""" + name + '""');"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,723, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,725,"rivate static void checkSupport(DurationField field, String name) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,726,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,727,hrow new UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,728,"""Duration does not support field \"""" + name + '""');"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,734, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,735, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,736, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,737, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,744,"etTotalMillis(iType, 0L);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,745, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,746,"etDuration(iType, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,751, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,753,"rivate void setDuration(DurationType type, ReadableDuration duration) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,754,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,755,f (duration.isPrecise() == false) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,756,"hrow new IllegalArgumentException(""The duration to copy from must be precise"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,758,"etTotalMillis(type, duration.getTotalMillis());"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,759, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,760,"etDuration(type,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,761,"uration.getYears(), duration.getMonths(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,762,"uration.getWeeks(), duration.getDays(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,763,"uration.getHours(), duration.getMinutes(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,764,"uration.getSeconds(), duration.getMillis());"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,765,f (type.equals(duration.getDurationType()) && duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,766,TotalMillis = duration.getTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,767,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,773, Sets all the fields in one go.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,774, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,775, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,776, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,777, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,779," @param years  amount of years in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,780," @param months  amount of months in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,781," @param weeks  amount of weeks in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,782," @param days  amount of days in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,783," @param hours  amount of hours in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,784," @param minutes  amount of minutes in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,785," @param seconds  amount of seconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,786," @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,787, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,789,"rotected void setDuration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,790,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,791,"etDuration(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,795, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,797,"rivate void setDuration(DurationType type,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,798,"nt years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,799,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,800,f (years != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,801,"heckArgument(type.years(), ""years"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,803,f (months != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,804,"heckArgument(type.months(), ""months"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,806,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,807,"heckArgument(type.weeks(), ""weeks"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,809,f (days != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,810,"heckArgument(type.days(), ""days"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,812,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,813,"heckArgument(type.hours(), ""hours"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,815,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,816,"heckArgument(type.minutes(), ""minutes"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,818,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,819,"heckArgument(type.seconds(), ""seconds"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,821,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,822,"heckArgument(type.millis(), ""millis"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,825,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,826,"pdateTotalMillis(years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,310,setMillis(0L);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,828,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,312,setMillis(duration.getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,830,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,831,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,832,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,833,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,834,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,835,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,836,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,837,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,838,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,851,"rotected void setTotalMillis(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,852,"etTotalMillis(iType, startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,856, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,858," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,859," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,861,"rivate void setTotalMillis(DurationType type, long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,862,ong baseTotalMillis = (endInstant - startInstant);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,863,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,864,"etTotalMillis(type, baseTotalMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,865,eturn;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,867,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,868,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,869,urationField field;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,870,ield = type.years();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,871,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,872,"ears = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,873,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,875,ield = type.months();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,876,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,877,"onths = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,878,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,880,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,881,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,882,"eeks = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,883,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,885,ield = type.days();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,886,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,887,"ays = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,888,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,890,ield = type.hours();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,891,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,892,"ours = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,893,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,895,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,896,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,897,"inutes = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,898,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,900,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,901,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,902,"econds = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,903,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,905,ield = type.millis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,906,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,907,"illis = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,908,"tartInstant = field.add(startInstant, millis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,911,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,912,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,913,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,914,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,915,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,916,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,917,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,918,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,919,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,920,/ (end - start) is excess to be discarded
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,921,TotalMillis = baseTotalMillis - (endInstant - startInstant);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,922,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,926, Sets all the fields in one go from a millisecond duration. If any
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,927," supported fields are imprecise, an UnsupportedOperationException is"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,928, thrown. The exception to this is when the specified duration is zero.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,929, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,930, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,931, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,932, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,934," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,936,rotected void setTotalMillis(long duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,937,"etTotalMillis(iType, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,941, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,943," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,945,"rivate void setTotalMillis(DurationType type, long duration) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,946,f (duration == 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,947,TotalMillis = duration;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,948,f (iState != STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,949,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,952,Years = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,953,Months = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,954,Weeks = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,955,Days = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,956,Hours = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,957,Minutes = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,958,Seconds = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,959,Millis = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,961,eturn;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,964,ype = type.withChronology(type.getChronology().withUTC());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,965,ong startInstant = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,966,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,967,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,968,urationField field;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,970,ield = type.years();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,971,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,972,"ears = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,973,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,975,ield = type.months();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,976,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,977,"onths = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,978,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,980,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,981,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,982,"eeks = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,983,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,985,ield = type.days();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,986,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,987,"ays = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,988,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,990,ield = type.hours();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,991,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,992,"ours = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,993,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,995,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,996,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,997,"inutes = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,998,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1000,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1001,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1002,"econds = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1003,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1005,ield = type.millis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1006,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1007,"illis = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1008,"tartInstant = field.add(startInstant, millis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1011,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1012,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1013,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1014,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1015,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1016,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1017,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1018,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1019,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1020,/ (end - start) is excess to be discarded
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1021,TotalMillis = duration - (duration - startInstant);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1022,f (iState != STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1023,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1029," Walks through the field values, determining total millis and whether"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1030, this duration is precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1032, @return new state
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1033, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1035,rivate int updateTotalMillis() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1036,"eturn updateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1040," Walks through the field values, determining total millis and whether"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1041, this duration is precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1043, @return new state
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1044, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1046,"rivate int updateTotalMillis(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1047,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1048,inal DurationType type = iType;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1050,oolean isPrecise = true;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1051,ong totalMillis = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1053,urationField field;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1054,f (years != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1055,ield = type.years();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1056,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1057,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1060,f (months != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1061,ield = type.months();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1062,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1063,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1066,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1067,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1068,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1069,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1072,f (days != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1073,ield = type.days();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1074,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1075,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1078,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1079,ield = type.hours();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1080,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1081,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1084,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1085,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1086,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1087,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1090,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1091,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1092,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1093,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1096,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1097,ield = type.millis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1098,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1099,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1103,TotalMillis = totalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1104,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1105,eturn STATE_TOTAL_MILLIS_MASTER;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1106, else if (isPrecise) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1107,eturn iState = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1108, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1109,eturn iState = STATE_NOT_CALCULABLE;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1115," Adds a millisecond duration to this one. As a side-effect, all field"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1116, values are normalized.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1118," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1119, @throws IllegalStateException if the duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1120, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1122,rotected void add(long duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1123,"etTotalMillis(FieldUtils.safeAdd(getTotalMillis(), duration));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1127, Adds a duration to this one.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1129," @param duration  the duration to add, mulls means add nothing"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1130, @throws IllegalStateException if the duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1132,rotected void add(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1133,f (duration != null) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1134,dd(duration.getTotalMillis());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1139, Normalizes all the field values in this duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1141, @throws IllegalStateException if this duration is imprecise
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1143,rotected void normalize() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1144,etTotalMillis(getTotalMillis());
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1149, Sets the number of years of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1150, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1151, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1152, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1153, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1155, @param years  the number of years
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1156, @throws UnsupportedOperationException if field is not supported.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1158,rotected void setYears(int years) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1159,f (years != iYears) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1160,f (years != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1161,"heckSupport(iType.years(), ""years"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1163,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1164,"pdateTotalMillis(years, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1165,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1166, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1167,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1168,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1174, Adds the specified years to the number of years in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1176, @param years  the number of years
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1177, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1178, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1180,rotected void addYears(int years) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1181,"etYears(FieldUtils.safeAdd(getYears(), years));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1186, Sets the number of months of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1187, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1188, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1189, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1190, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1192, @param months  the number of months
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1193, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1195,rotected void setMonths(int months) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1196,f (months != iMonths) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1197,f (months != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1198,"heckSupport(iType.months(), ""months"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1200,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1201,"pdateTotalMillis(iYears, months, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1202,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1203, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1204,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1205,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1211, Adds the specified months to the number of months in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1213, @param months  the number of months
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1214, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1215, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1217,rotected void addMonths(int months) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1218,"etMonths(FieldUtils.safeAdd(getMonths(), months));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1223, Sets the number of weeks of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1224, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1225, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1226, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1227, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1229, @param weeks  the number of weeks
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1230, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1232,rotected void setWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1233,f (weeks != iWeeks) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1234,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1235,"heckSupport(iType.weeks(), ""weeks"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1237,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1238,"pdateTotalMillis(iYears, iMonths, weeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1239,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1240, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1241,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1242,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1248, Adds the specified weeks to the number of weeks in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1250, @param weeks  the number of weeks
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1251, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1252, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1254,rotected void addWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1255,"etWeeks(FieldUtils.safeAdd(getWeeks(), weeks));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1260, Sets the number of days of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1261, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1262, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1263, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1264, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1266, @param days  the number of days
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1267, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1269,rotected void setDays(int days) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1270,f (days != iDays) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1271,f (days != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1272,"heckSupport(iType.days(), ""days"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1274,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1275,"pdateTotalMillis(iYears, iMonths, iWeeks, days, iHours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1276,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1277, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1278,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1279,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1285, Adds the specified days to the number of days in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1287, @param days  the number of days
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1288, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1289, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1291,rotected void addDays(int days) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1292,"etDays(FieldUtils.safeAdd(getDays(), days));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1297, Sets the number of hours of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1298, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1299, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1300, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1301, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1303, @param hours  the number of hours
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1304, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1306,rotected void setHours(int hours) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1307,f (hours != iHours) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1308,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1309,"heckSupport(iType.hours(), ""hours"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1311,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1312,"pdateTotalMillis(iYears, iMonths, iWeeks, iDays, hours, iMinutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1313,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1314, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1315,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1316,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1322, Adds the specified hours to the number of hours in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1324, @param hours  the number of hours
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1325, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1326, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1328,rotected void addHours(int hours) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1329,"etHours(FieldUtils.safeAdd(getHours(), hours));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1334, Sets the number of minutes of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1335, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1336, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1337, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1338, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1340, @param minutes  the number of minutes
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1341, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1343,rotected void setMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1344,f (minutes != iMinutes) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1345,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1346,"heckSupport(iType.minutes(), ""minutes"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1348,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1349,"pdateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, minutes, iSeconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1350,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1351, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1352,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1353,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1359, Adds the specified minutes to the number of minutes in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1361, @param minutes  the number of minutes
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1362, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1363, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1365,rotected void addMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1366,"etMinutes(FieldUtils.safeAdd(getMinutes(), minutes));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1371, Sets the number of seconds of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1372, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1373, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1374, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1375, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1377, @param seconds  the number of seconds
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1378, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1380,rotected void setSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1381,f (seconds != iSeconds) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1382,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1383,"heckSupport(iType.seconds(), ""seconds"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1385,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1386,"pdateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, seconds, iMillis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1387,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1388, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1389,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1390,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1396, Adds the specified seconds to the number of seconds in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1398, @param seconds  the number of seconds
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1399, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1400, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1402,rotected void addSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1403,"etSeconds(FieldUtils.safeAdd(getSeconds(), seconds));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1408, Sets the number of millis of the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1409, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1410, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1411, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1412, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1414, @param millis  the number of millis
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1415, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1417,rotected void setMillis(int millis) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1418,f (millis != iMillis) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1419,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1420,"heckSupport(iType.millis(), ""millis"");"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1422,f (iState == STATE_TOTAL_MILLIS_MASTER) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1423,"pdateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, millis);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1424,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1425, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1426,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1427,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1433, Adds the specified millis to the number of millis in the duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1435, @param millis  the number of millis
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1436, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1437, @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1439,rotected void addMillis(int millis) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1440,"etMillis(FieldUtils.safeAdd(getMillis(), millis));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,326,protected void setMillis(long length) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,327,iMillis = length;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,59,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,98,uration duration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,99,f (interval instanceof ReadableInterval) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,99,TimePeriod duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,100,if (interval instanceof AbstractInterval) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,101,AbstractInterval ri = (AbstractInterval) interval;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,102,iStartMillis = ri.iStartMillis;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,103,iStartInstant = ri.iStartInstant;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,104,iEndMillis = ri.iEndMillis;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,105,iEndInstant = ri.iEndInstant;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,106,iDuration = ri.iDuration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,108,} else if (interval instanceof ReadableInterval) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,103,uration = ri.getDuration();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,108,uration = null;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,110,"utableInterval mi = new MutableInterval(0, 0);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,118,MutableInterval mi = new MutableInterval();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,114,uration = mi.getDuration();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,117,f (duration != null && duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,118,Duration = duration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,168, Constructs an interval from a start instant and a duration.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,169, <p>
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,170," When forming the interval, the chronology from the instant is used"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,171," if present, otherwise the chronology of the duration is used."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,172,* Constructs an interval from a start instant and a millisecond duration.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,174," @param duration  duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,175,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,176,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,191,"EndMillis = duration.addTo(iStartMillis, 1, chrono);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,192,f (duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,193,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,193,"iEndMillis = FieldUtils.safeAdd(iStartMillis, duration.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,194,iDuration = duration.toDuration();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,199, Constructs an interval from a duration and an end instant.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,200, <p>
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,201," When forming the interval, the chronology from the instant is used"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,202," if present, otherwise the chronology of the duration is used."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,199,* Constructs an interval from a millisecond duration and an end instant.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,204," @param duration  duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,201,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,203,* @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,222,"StartMillis = duration.addTo(iEndMillis, 1, chrono);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,223,f (duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,224,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,220,"iStartMillis = FieldUtils.safeAdd(iEndMillis, -duration.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,221,iDuration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,226,* Constructs an interval from a start instant and a period.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,227,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,228,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,229,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,231,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,232,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,233,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,235,"public AbstractInterval(ReadableInstant start, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,236,super();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,237,Chronology chrono = null;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,238,if (start == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,239,iStartMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,240,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,241,iStartMillis = start.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,242,chrono = start.getChronology();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,243,if (start instanceof Instant) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,244,iStartInstant = (Instant) start;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,247,if (period == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,248,iEndMillis = iStartMillis;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,249,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,250,"iEndMillis = period.addTo(iStartMillis, 1, chrono);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,255,* Constructs an interval from a period and an end instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,256,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,257,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,258,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,260,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,261,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,262,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,264,"public AbstractInterval(ReadableTimePeriod period, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,265,super();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,266,Chronology chrono = null;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,267,if (end == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,268,iEndMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,269,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,270,iEndMillis = end.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,271,chrono = end.getChronology();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,272,if (end instanceof Instant) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,273,iEndInstant = (Instant) end;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,276,if (period == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,277,iStartMillis = iEndMillis;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,278,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,279,"iStartMillis = period.addTo(iEndMillis, -1, chrono);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,336,* @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,283,eturn (getEndMillis() - getStartMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,339,"return FieldUtils.safeAdd(getEndMillis(), -getStartMillis());"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,287, Gets the precise duration of this time interval.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,343,* Gets the millisecond duration of this time interval.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,349,* @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,296,eturn getDuration(null);
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,298,eturn iDuration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,302, Gets the duration of this time interval using the specified duration type.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,304," @param type  the requested type of the duration, null means MillisType"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,305, @return the duration of the time interval
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,307,ublic final Duration getDuration(DurationType type) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,308,f (type == null) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,309,ype = DurationType.getMillisType();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,311,uration duration = iDuration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,312,f (duration == null) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,313,f (type.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,314,"uration = new Duration(getEndMillis() - getStartMillis(), type);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,315,f (type.equals(DurationType.getMillisType())) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,316,Duration = duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,353,if (iStartMillis == iEndMillis) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,354,iDuration = Duration.ZERO;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,319,"uration = new Duration(getStartInstant(), getEndInstant(), type);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,356,"iDuration = new Duration(iStartMillis, iEndMillis);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,321, else {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,322,uration = duration.withDurationTypeUsingTotalMillis(type);
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,324,eturn duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,359,return iDuration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,498,* Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,499,* All duration type.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,500,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,501,* This method should be used to exract the field values describing the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,502,* difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,503,* The time period may not be precise - if you want the millisecond duration
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,504,* then you should use {@link #getDuration()}.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,506,"* @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,507,* @return a time period derived from the interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,509,public final TimePeriod toTimePeriod() {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,510,"return new TimePeriod(getStartMillis(), getEndMillis());"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,514,* Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,515,* specified duration type.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,516,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,517,* This method should be used to exract the field values describing the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,518,* difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,519,* The time period may not be precise - if you want the millisecond duration
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,520,* then you should use {@link #getDuration()}.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,522,"* @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,523,* @return a time period derived from the interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,525,public final TimePeriod toTimePeriod(DurationType type) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,526,"return new TimePeriod(getStartMillis(), getEndMillis(), type);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,472,ublic boolean equals(Object readableInterval) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,540,public final boolean equals(Object readableInterval) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,489,ublic int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,557,public final int hashCode() {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,550," Sets the duration of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,618,* Stores the duration of this time interval.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,624,"* @param duration  new duration for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,626,protected void storeDuration(Duration duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,627,// this method exists so that subclasses can block it
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,628,iDuration = duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,633,"* Sets the duration of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,635,* @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,636,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,638,protected void setDurationAfterStart(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,639,"setEndMillis(FieldUtils.safeAdd(getStartMillis(), duration));"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,643,"* Sets the duration of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,646,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,648,protected void setDurationBeforeEnd(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,649,"setStartMillis(FieldUtils.safeAdd(getEndMillis(), -duration));"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,653,"* Sets the duration of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,655,"* @param duration  new duration for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,656,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,560,"hrow new IllegalArgumentException(""The duration must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,562,"etEndMillis(duration.addTo(getStartMillis(), 1));"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,563,f (duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,564,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,660,setEndMillis(getStartMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,661,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,662,"setEndMillis(FieldUtils.safeAdd(getStartMillis(), duration.getMillis()));"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,663,storeDuration(duration.toDuration());
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,570, <p>
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,571, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,572, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,573, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,575, @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,670,"* @param duration  new duration for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,671,* @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,579,"hrow new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,675,setStartMillis(getEndMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,676,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,677,"setStartMillis(FieldUtils.safeAdd(getEndMillis(), -duration.getMillis()));"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,678,storeDuration(duration.toDuration());
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,581,"etStartMillis(duration.addTo(getEndMillis(), -1));"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,582,f (duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,583,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,683,"* Sets the period of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,685,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,686,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,688,protected void setTimePeriodAfterStart(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,689,if (period == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,690,setEndMillis(getStartMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,691,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,692,"setEndMillis(period.addTo(getStartMillis(), 1));"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,697,"* Sets the period of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,699,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,700,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,702,protected void setTimePeriodBeforeEnd(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,703,if (period == null) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,704,setStartMillis(getEndMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,705,} else {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,706,"setStartMillis(period.addTo(getEndMillis(), -1));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,10,* are met:
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,58,import org.joda.time.convert.DurationConverter;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,59,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,60,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,61,import org.joda.time.format.ISOTimePeriodFormat;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,64,* AbstractDuration provides the common behaviour for duration classes.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,65,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,66,* This class should generally not be used directly by API users. The
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,67,* {@link ReadableDuration} interface should be used when different
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,68,* kinds of durations are to be referenced.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,69,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,70,* AbstractDuration subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,72,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,73,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,74,* @since 1.0
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,76,public abstract class AbstractTimePeriod
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,77,"implements ReadableTimePeriod, Serializable {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,79,/** Serialization version */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,80,private static final long serialVersionUID = -2110953284060001145L;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,81,/** Millis cache is currently unknown */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,82,private static final int STATE_UNKNOWN = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,83,/** Millis cache is not calculable */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,84,private static final int STATE_NOT_CALCULABLE = 1;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,85,/** Millis cache has been calculated and is valid */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,86,private static final int STATE_CALCULATED = 2;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,88,/** The duration type that allocates the duration to fields */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,89,private final DurationType iType;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,90,/** The object state */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,91,private int iState;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,92,"/** The duration, if known */"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,93,private long iDuration;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,94,/** Value for years */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,95,private int iYears;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,96,/** Value for months */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,97,private int iMonths;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,98,/** Value for weeks */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,99,private int iWeeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,100,/** Value for days */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,101,private int iDays;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,102,/** Value for hours */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,103,private int iHours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,104,/** Value for minutes */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,105,private int iMinutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,106,/** Value for seconds */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,107,private int iSeconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,108,/** Value for millis */
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,109,private int iMillis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,112,* Creates a duration from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,113,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,114,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,115,* the duration type.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,117,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,118,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,119,* @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,121,"public AbstractTimePeriod(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,122,super();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,123,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,124,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,125,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,126,"setTimePeriod(type, duration);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,130,* Creates a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,132,"* @param years  amount of years in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,133,"* @param months  amount of months in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,134,"* @param weeks  amount of weeks in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,135,"* @param days  amount of days in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,136,"* @param hours  amount of hours in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,137,"* @param minutes  amount of minutes in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,138,"* @param seconds  amount of seconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,139,"* @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,140,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,141,* @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,142,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,144,"public AbstractTimePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,145,"int hours, int minutes, int seconds, int millis,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,146,DurationType type) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,147,super();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,148,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,149,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,150,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,151,"setTimePeriod(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,155,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,157,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,158,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,159,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,160,* @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,162,"public AbstractTimePeriod(long startInstant, long endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,163,super();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,164,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,165,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,166,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,167,"setTimePeriod(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,171,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,173,"* @param startInstant  interval start, null means now"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,174,"* @param endInstant  interval end, null means now"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,175,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,176,* @throws IllegalArgumentException if duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,178,public AbstractTimePeriod(
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,179,"ReadableInstant startInstant, ReadableInstant  endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,180,super();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,181,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,182,if (startInstant == null && endInstant == null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,183,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,184,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,185,long start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,186,long end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,187,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,188,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,189,"setTimePeriod(type, start, end);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,194,* Creates a new duration based on another using the {@link ConverterManager}.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,196,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,197,"* @param type  which set of fields this duration supports, null means use type from object"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,198,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,199,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,201,"public AbstractTimePeriod(Object duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,202,super();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,203,DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,204,"type = (type == null ? converter.getDurationType(duration, false) : type);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,205,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,206,iType = type;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,207,if (type.isPrecise() && converter.isPrecise(duration)) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,208,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,209,"setTimePeriod(type, converter.getDurationMillis(duration));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,210,} else if (this instanceof ReadWritableTimePeriod) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,211,"converter.setInto((ReadWritableTimePeriod) this, duration);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,212,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,213,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,214,"setTimePeriod(type, new MutableTimePeriod(duration, type));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,220,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,221,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,223,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,224,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,225,* @throws IllegalArgumentException if the duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,227,protected abstract DurationType checkDurationType(DurationType type);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,231,* Returns the object which defines which fields this duration supports.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,233,public final DurationType getDurationType() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,234,return iType;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,238,"* Is this duration a precise length of time, or descriptive."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,239,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,240,"* A typical precise duration could include millis, seconds, minutes or hours,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,241,"* but days, weeks, months and years usually vary in length, resulting in"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,242,* an imprecise duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,243,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,244,* An imprecise duration can be made precise by pairing it with a
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,245,* date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,247,* @return true if the duration is precise
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,249,public final boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,250,int state = iState;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,251,if (state == STATE_UNKNOWN) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,252,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,254,return (state == STATE_CALCULATED);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,259,* Adds this duration to the given instant using the chronology of the duration
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,260,* which typically ignores time zones.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,261,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,262,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,263,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,265,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,266,* duration to
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,267,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,268,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,269,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,271,"public final long addTo(long instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,272,"return addTo(instant, scalar, null);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,276,* Adds this duration to the given instant using a specific chronology.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,277,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,278,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,279,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,281,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,282,* duration to
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,283,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,284,"* @param chrono  override the duration's chronology, unless null is passed in"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,285,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,286,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,288,"public final long addTo(long instant, int scalar, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,289,if (isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,290,"return FieldUtils.safeAdd(instant, toDurationMillis() * scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,293,DurationType type = iType;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,294,if (chrono != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,295,type = type.withChronology(chrono);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,298,long value; // used to lock fields against threading issues
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,299,"value = scaleValue(iYears, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,300,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,301,"instant = type.years().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,303,"value = scaleValue(iMonths, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,304,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,305,"instant = type.months().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,307,"value = scaleValue(iWeeks, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,308,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,309,"instant = type.weeks().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,311,"value = scaleValue(iDays, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,312,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,313,"instant = type.days().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,315,"value = scaleValue(iHours, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,316,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,317,"instant = type.hours().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,319,"value = scaleValue(iMinutes, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,320,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,321,"instant = type.minutes().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,323,"value = scaleValue(iSeconds, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,324,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,325,"instant = type.seconds().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,327,"value = scaleValue(iMillis, scalar);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,328,if (value != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,329,"instant = type.millis().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,332,return instant;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,336,* Convert the scalar to a multiple efficiently.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,338,* @param value  the value
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,339,* @param scalar  the scalar
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,340,* @return the converted value
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,342,"private static long scaleValue(int value, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,343,long val = value;  // use long to avoid truncation
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,344,switch (scalar) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,345,case -1:
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,346,return -val;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,347,case 0:
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,348,return 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,349,case 1:
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,350,return val;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,351,default:
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,352,return val * scalar;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,357,* Adds this duration to the given instant using the chronology of the specified
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,358,"* instant (if present), returning a new Instant."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,359,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,360,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,361,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,363,"* @param instant  the instant to add the duration to, null means now"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,364,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,365,* @return instant with the original value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,366,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,368,"public final Instant addTo(ReadableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,369,if (instant == null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,370,"return new Instant(addTo(DateTimeUtils.currentTimeMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,372,"return new Instant(addTo(instant.getMillis(), scalar, instant.getChronology()));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,376,* Adds this duration into the given mutable instant using the chronology of
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,377,* the specified mutable instant (if present).
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,378,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,379,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,380,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,382,"* @param instant  the instant to update with the added duration, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,383,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,384,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,385,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,387,"public final void addInto(ReadWritableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,388,if (instant == null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,389,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,391,"instant.setMillis(addTo(instant.getMillis(), scalar, instant.getChronology()));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,396,* Gets the years field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,398,"* @return the number of years in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,400,public final int getYears() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,401,return iYears;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,406,* Gets the months field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,408,"* @return the number of months in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,410,public final int getMonths() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,411,return iMonths;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,416,* Gets the weeks field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,418,"* @return the number of weeks in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,420,public final int getWeeks() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,421,return iWeeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,426,* Gets the days field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,428,"* @return the number of days in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,430,public final int getDays() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,431,return iDays;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,436,* Gets the hours field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,438,"* @return the number of hours in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,440,public final int getHours() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,441,return iHours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,446,* Gets the minutes field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,448,"* @return the number of minutes in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,450,public final int getMinutes() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,451,return iMinutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,456,* Gets the seconds field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,458,"* @return the number of seconds in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,460,public final int getSeconds() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,461,return iSeconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,466,* Gets the millis field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,468,"* @return the number of millis in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,470,public final int getMillis() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,471,return iMillis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,476,* Get this object as an immutable TimePeriod. This can be useful if you
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,477,"* don't trust the implementation of the interface to be well-behaved, or"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,478,* to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,480,* @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,482,public final TimePeriod toTimePeriod() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,483,if (this instanceof TimePeriod) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,484,return (TimePeriod) this;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,486,return new TimePeriod(this);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,490,* Get this object as a MutableTimePeriod.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,492,* @return a MutableTimePeriod using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,494,public final MutableTimePeriod toMutableTimePeriod() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,495,return new MutableTimePeriod(this);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,500,"* Gets the total length of this duration in milliseconds,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,501,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,503,* @return the total length of the duration in milliseconds.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,504,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,505,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,507,public final long toDurationMillis() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,508,int state = iState;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,509,if (state == STATE_UNKNOWN) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,510,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,512,if (state != STATE_CALCULATED) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,513,"throw new IllegalStateException(""Duration is imprecise"");"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,515,return iDuration;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,519,"* Gets the total length of this duration in milliseconds,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,520,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,522,* @return the total length of the duration in milliseconds.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,523,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,524,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,526,public final Duration toDuration() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,527,return new Duration(toDurationMillis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,532,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,533,* on the value of each field. All ReadableTimePeriod instances are accepted.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,534,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,535,* To compare two durations for absolute duration (ie. millisecond duration
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,536,"* ignoring the fields), use {@link #toDurationMillis()} or {@link #toDuration()}."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,538,* @param readableDuration  a readable duration to check against
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,539,"* @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,540,*  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,542,public final boolean equals(Object readableTimePeriod) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,543,if (this == readableTimePeriod) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,544,return true;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,546,if (readableTimePeriod instanceof ReadableTimePeriod == false) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,547,return false;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,549,ReadableTimePeriod other = (ReadableTimePeriod) readableTimePeriod;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,550,DurationType type = getDurationType();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,551,if (type.equals(other.getDurationType()) == false) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,552,return false;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,554,return getYears() == other.getYears()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,555,&& getMonths() == other.getMonths()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,556,&& getWeeks() == other.getWeeks()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,557,&& getDays() == other.getDays()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,558,&& getHours() == other.getHours()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,559,&& getMinutes() == other.getMinutes()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,560,&& getSeconds() == other.getSeconds()
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,561,&& getMillis() == other.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,565,* Gets a hash code for the duration that is compatable with the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,566,* equals method.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,568,* @return a hash code
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,570,public final int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,571,int hash = getDurationType().hashCode();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,572,hash = 53 * hash + getYears();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,573,hash = 53 * hash + getMonths();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,574,hash = 53 * hash + getWeeks();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,575,hash = 53 * hash + getDays();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,576,hash = 53 * hash + getHours();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,577,hash = 53 * hash + getMinutes();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,578,hash = 53 * hash + getSeconds();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,579,hash = 53 * hash + getMillis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,580,return hash;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,585,* Gets the value as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,586,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,587,"* For example, ""P6H3M7S"" represents 6 hours, 3 minutes, 7 seconds."
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,589,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,591,public String toString() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,592,return ISOTimePeriodFormat.getInstance().standard().print(this);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,597,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,599,private static void checkArgument(DurationField field) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,600,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,601,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,602,"(""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,607,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,609,private static void checkSupport(DurationField field) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,610,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,611,throw new UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,612,"(""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,617,* Sets all the fields in one go from another ReadableTimePeriod.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,618,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,619,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,620,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,621,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,623,"* @param period  the period to set, null means zero length period"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,624,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,626,protected void setTimePeriod(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,627,if (period == null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,628,"setTimePeriod(iType, 0L);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,629,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,630,"setTimePeriod(iType, period);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,635,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,637,"private void setTimePeriod(DurationType type, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,638,"setTimePeriod(type,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,639,"period.getYears(), period.getMonths(),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,640,"period.getWeeks(), period.getDays(),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,641,"period.getHours(), period.getMinutes(),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,642,"period.getSeconds(), period.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,646,* Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,647,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,648,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,649,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,650,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,652,"* @param years  amount of years in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,653,"* @param months  amount of months in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,654,"* @param weeks  amount of weeks in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,655,"* @param days  amount of days in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,656,"* @param hours  amount of hours in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,657,"* @param minutes  amount of minutes in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,658,"* @param seconds  amount of seconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,659,"* @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,660,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,662,"protected void setTimePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,663,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,664,"setTimePeriod(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,668,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,670,"private void setTimePeriod(DurationType type,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,671,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,672,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,673,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,674,checkArgument(type.years());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,676,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,677,checkArgument(type.months());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,679,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,680,checkArgument(type.weeks());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,682,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,683,checkArgument(type.days());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,685,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,686,checkArgument(type.hours());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,688,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,689,checkArgument(type.minutes());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,691,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,692,checkArgument(type.seconds());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,694,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,695,checkArgument(type.millis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,698,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,699,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,700,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,701,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,702,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,703,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,704,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,705,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,706,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,707,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,711,* Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,712,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,713,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,714,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,715,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,717,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,718,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,720,"protected void setTimePeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,721,"setTimePeriod(iType, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,725,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,727,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,728,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,730,"private void setTimePeriod(DurationType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,731,long baseTotalMillis = (endInstant - startInstant);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,732,"int years = 0, months = 0, weeks = 0, days = 0;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,733,"int hours = 0, minutes = 0, seconds = 0, millis = 0;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,734,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,735,field = type.years();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,736,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,737,"years = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,738,"startInstant = field.add(startInstant, years);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,740,field = type.months();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,741,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,742,"months = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,743,"startInstant = field.add(startInstant, months);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,745,field = type.weeks();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,746,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,747,"weeks = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,748,"startInstant = field.add(startInstant, weeks);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,750,field = type.days();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,751,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,752,"days = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,753,"startInstant = field.add(startInstant, days);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,755,field = type.hours();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,756,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,757,"hours = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,758,"startInstant = field.add(startInstant, hours);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,760,field = type.minutes();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,761,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,762,"minutes = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,763,"startInstant = field.add(startInstant, minutes);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,765,field = type.seconds();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,766,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,767,"seconds = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,768,"startInstant = field.add(startInstant, seconds);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,770,field = type.millis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,771,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,772,"millis = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,773,"startInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,776,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,777,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,778,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,779,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,780,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,781,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,782,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,783,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,784,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,785,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,789,* Sets all the fields in one go from a millisecond duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,790,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,791,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,792,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,793,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,795,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,797,protected void setTimePeriod(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,798,"setTimePeriod(iType, duration);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,802,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,804,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,806,"private void setTimePeriod(DurationType type, long duration) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,807,if (duration == 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,808,iDuration = duration;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,809,iYears = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,810,iMonths = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,811,iWeeks = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,812,iDays = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,813,iHours = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,814,iMinutes = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,815,iSeconds = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,816,iMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,817,iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,818,return;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,821,type = type.withChronology(type.getChronology().withUTC());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,822,long startInstant = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,823,"int years = 0, months = 0, weeks = 0, days = 0;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,824,"int hours = 0, minutes = 0, seconds = 0, millis = 0;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,825,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,827,field = type.years();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,828,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,829,"years = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,830,"startInstant = field.add(startInstant, years);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,832,field = type.months();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,833,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,834,"months = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,835,"startInstant = field.add(startInstant, months);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,837,field = type.weeks();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,838,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,839,"weeks = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,840,"startInstant = field.add(startInstant, weeks);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,842,field = type.days();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,843,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,844,"days = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,845,"startInstant = field.add(startInstant, days);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,847,field = type.hours();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,848,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,849,"hours = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,850,"startInstant = field.add(startInstant, hours);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,852,field = type.minutes();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,853,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,854,"minutes = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,855,"startInstant = field.add(startInstant, minutes);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,857,field = type.seconds();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,858,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,859,"seconds = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,860,"startInstant = field.add(startInstant, seconds);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,862,field = type.millis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,863,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,864,"millis = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,865,"startInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,868,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,869,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,870,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,871,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,872,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,873,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,874,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,875,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,876,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,877,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,881,* Sets all the fields in one go from an interval dividing the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,882,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,884,"* @param interval  the interval to set, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,886,protected void setTimePeriod(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,887,if (interval != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,888,"setTimePeriod(interval.getStartMillis(), interval.getEndMillis());"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,889,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,890,setTimePeriod(0L);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,895,* Sets all the fields in one go from a duration dividing the
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,896,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,898,"* @param duration  the duration to set, null means zero length"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,900,protected void setTimePeriod(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,901,if (duration != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,902,setTimePeriod(duration.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,903,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,904,setTimePeriod(0L);
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,910,"* Walks through the field values, determining total millis and whether"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,911,* this duration is precise.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,913,* @return new state
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,914,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,916,private int updateTotalMillis() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,917,final DurationType type = iType;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,919,boolean isPrecise = true;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,920,long totalMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,922,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,923,"int years = iYears, months = iMonths, weeks = iWeeks, days = iDays;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,924,"int hours = iHours, minutes = iMinutes, seconds = iSeconds, millis = iMillis;"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,925,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,926,field = type.years();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,927,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,928,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,931,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,932,field = type.months();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,933,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,934,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,937,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,938,field = type.weeks();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,939,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,940,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,943,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,944,field = type.days();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,945,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,946,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,949,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,950,field = type.hours();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,951,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,952,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,955,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,956,field = type.minutes();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,957,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,958,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,961,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,962,field = type.seconds();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,963,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,964,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,967,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,968,field = type.millis();
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,969,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,970,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,974,iDuration = totalMillis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,975,if (isPrecise) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,976,return iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,977,} else {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,978,return iState = STATE_NOT_CALCULABLE;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,984,* Adds a period to this one by adding each field in turn.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,986,"* @param period  the period to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,987,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,988,* not supported by this period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,989,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,991,protected void add(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,992,if (period != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,993,setTimePeriod(
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,994,"FieldUtils.safeAdd(getYears(), period.getYears()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,995,"FieldUtils.safeAdd(getMonths(), period.getMonths()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,996,"FieldUtils.safeAdd(getWeeks(), period.getWeeks()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,997,"FieldUtils.safeAdd(getDays(), period.getDays()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,998,"FieldUtils.safeAdd(getHours(), period.getHours()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,999,"FieldUtils.safeAdd(getMinutes(), period.getMinutes()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1000,"FieldUtils.safeAdd(getSeconds(), period.getSeconds()),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1001,"FieldUtils.safeAdd(getMillis(), period.getMillis())"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1007,* Adds an interval to this one by dividing the interval into
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1008,* fields and calling {@link #add(ReadableTimePeriod)}.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1010,"* @param interval  the interval to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1011,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1013,protected void add(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1014,if (interval != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1015,"add(new TimePeriod(interval.getStartMillis(), interval.getEndMillis()));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1020,* Adds a duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1021,* fields and calling {@link #add(ReadableTimePeriod)}.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1023,"* @param duration  the duration to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1024,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1026,protected void add(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1027,if (duration != null) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1028,add(new TimePeriod(duration.getMillis()));
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1033,* Adds a millisecond duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1034,* fields and calling {@link #add(ReadableTimePeriod)}.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1036,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1037,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1039,protected void add(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1040,add(new TimePeriod(duration));
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1044,* Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1045,* <p>
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1046,* This method converts to a milliecond duration and back again.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1048,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1050,protected void normalize() {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1051,setTimePeriod(toDurationMillis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1056,* Sets the number of years of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1058,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1059,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1061,protected void setYears(int years) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1062,if (years != iYears) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1063,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1064,checkSupport(iType.years());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1066,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1067,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1072,* Adds the specified years to the number of years in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1074,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1075,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1076,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1078,protected void addYears(int years) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1079,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1080,"setYears(FieldUtils.safeAdd(getYears(), years));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1086,* Sets the number of months of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1088,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1089,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1091,protected void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1092,if (months != iMonths) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1093,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1094,checkSupport(iType.months());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1096,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1097,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1102,* Adds the specified months to the number of months in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1104,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1105,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1106,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1108,protected void addMonths(int months) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1109,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1110,"setMonths(FieldUtils.safeAdd(getMonths(), months));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1116,* Sets the number of weeks of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1118,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1119,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1121,protected void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1122,if (weeks != iWeeks) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1123,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1124,checkSupport(iType.weeks());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1126,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1127,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1132,* Adds the specified weeks to the number of weeks in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1134,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1135,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1136,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1138,protected void addWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1139,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1140,"setWeeks(FieldUtils.safeAdd(getWeeks(), weeks));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1146,* Sets the number of days of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1148,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1149,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1151,protected void setDays(int days) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1152,if (days != iDays) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1153,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1154,checkSupport(iType.days());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1156,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1157,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1162,* Adds the specified days to the number of days in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1164,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1165,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1166,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1168,protected void addDays(int days) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1169,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1170,"setDays(FieldUtils.safeAdd(getDays(), days));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1176,* Sets the number of hours of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1178,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1179,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1181,protected void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1182,if (hours != iHours) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1183,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1184,checkSupport(iType.hours());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1186,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1187,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1192,* Adds the specified hours to the number of hours in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1194,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1195,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1196,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1198,protected void addHours(int hours) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1199,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1200,"setHours(FieldUtils.safeAdd(getHours(), hours));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1206,* Sets the number of minutes of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1208,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1209,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1211,protected void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1212,if (minutes != iMinutes) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1213,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1214,checkSupport(iType.minutes());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1216,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1217,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1222,* Adds the specified minutes to the number of minutes in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1224,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1225,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1226,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1228,protected void addMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1229,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1230,"setMinutes(FieldUtils.safeAdd(getMinutes(), minutes));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1236,* Sets the number of seconds of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1238,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1239,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1241,protected void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1242,if (seconds != iSeconds) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1243,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1244,checkSupport(iType.seconds());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1246,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1247,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1252,* Adds the specified seconds to the number of seconds in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1254,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1255,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1256,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1258,protected void addSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1259,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1260,"setSeconds(FieldUtils.safeAdd(getSeconds(), seconds));"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1266,* Sets the number of millis of the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1268,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1269,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1271,protected void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1272,if (millis != iMillis) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1273,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1274,checkSupport(iType.millis());
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1276,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1277,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1282,* Adds the specified millis to the number of millis in the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1284,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1285,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1286,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1288,protected void addMillis(int millis) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1289,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1290,"setMillis(FieldUtils.safeAdd(getMillis(), millis));"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,59, An immutable duration that defines and adds durations based on individual field values.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,59,* An immutable duration specifying a length of time in milliseconds.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,61," A duration can be divided into a number of fields, such as hours and seconds."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,62, The way in which that divide occurs is controlled by the DurationType class.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,61,* A duration is defined by a fixed number of milliseconds.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,62,"* There is no concept of fields, such as days or seconds, as these fields can vary in length."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,63,* A duration may be converted to a {@link TimePeriod} to obtain field values.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,64,* This conversion will typically cause a loss of precision however.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,64, <code>Duration</code> can uses any duration type to split the milliseconds into fields.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,65, The {@link DurationType#getAllType() All} type is used by default.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,66," <code>All</code> uses the ISO chronology and divide the duration into years, months,"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,67," weeks, days, hours, minutes, seconds and milliseconds as best it can."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,68, <p>
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,69, This class performs calculations using the individual fields.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,70, The {@link ReadableDuration#isTotalMillisBased} method will always return false.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,71, The total milliseconds may be calculated so long as the value of all imprecise
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,72, fields in the duration type are set to zero.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,73, <p>
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,74," When this duration is added to an instant, the effect is of adding each field in turn."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,75," As a result, this duration takes into account daylight savings time."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,76, Adding a duration of 1 day to the day before daylight savings starts will only add
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,77, 23 hours rather than 24 to ensure that the time remains the same.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,78," If this is not the behaviour you want, then see {@link MillisDuration}."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,79, <p>
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,80," Duration is thread-safe and immutable, provided that the DurationType is as well."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,81, All standard DurationType classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,66,* Duration is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,86, @see MutableDuration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,96,rivate static final long serialVersionUID = 741052353876488155L;
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,99, Creates a duration from the given millisecond duration using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,100, <p>
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,101, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,102, the duration type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,103, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,104, of the duration type.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,106," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,108,ublic Duration(long duration) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,109,"uper(duration, null, false);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,80,private static final long serialVersionUID = 2471658376918L;
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,114, <p>
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,115, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,116, the duration type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,117, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,118, of the duration type.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,121, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,123,"ublic Duration(long duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,124,"uper(duration, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,128, Create a duration from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,129, This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,131, @param hours  amount of hours in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,132, @param minutes  amount of minutes in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,133, @param seconds  amount of seconds in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,134, @param millis  amount of milliseconds in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,136,"ublic Duration(int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,137,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,141, Create a duration from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,143, @param years  amount of years in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,144, @param months  amount of months in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,145, @param weeks  amount of weeks in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,146, @param days  amount of days in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,147, @param hours  amount of hours in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,148, @param minutes  amount of minutes in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,149, @param seconds  amount of seconds in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,150, @param millis  amount of milliseconds in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,152,"ublic Duration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,153,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,154,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,158, Create a duration from a set of field values.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,160," @param years  amount of years in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,161," @param months  amount of months in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,162," @param weeks  amount of weeks in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,163," @param days  amount of days in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,164," @param hours  amount of hours in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,165," @param minutes  amount of minutes in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,166," @param seconds  amount of seconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,167," @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,168," @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,169, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,171,"ublic Duration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,172,"nt hours, int minutes, int seconds, int millis, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,173,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type, false);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,87,public Duration(long duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,88,super(duration);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,177, Creates a duration from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,178, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,92,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,96,* @throws ArithmeticException if the duration exceeds a 64 bit long
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,184,"uper(startInstant, endInstant, null, false);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,99,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,189, This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,191," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,192," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,193," @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,195,"ublic Duration(long startInstant, long endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,196,"uper(startInstant, endInstant, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,200, Creates a duration from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,201, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,107,* @throws ArithmeticException if the duration exceeds a 64 bit long
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,207,"uper(startInstant, endInstant, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,211, Creates a duration from the given interval endpoints.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,212, This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,214," @param startInstant  interval start, null means now"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,215," @param endInstant  interval end, null means now"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,216," @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,218,"ublic Duration(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,219,"uper(startInstant, endInstant, type, false);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,110,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,228, @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,231,"uper(duration, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,235, Creates a duration from the specified object using the
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,236, {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,238, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,239," @param type  which set of fields this duration supports, null means use converter"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,240, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,241, @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,243,"ublic Duration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,244,"uper(duration, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,249," Validates a duration type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,250, checking the type is suitable for this instance.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,252," @param type  the type to check, may be null"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,253," @return the validated type to use, not null"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,254, @throws IllegalArgumentException if the duration type is not precise
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,256,rotected final DurationType checkDurationType(DurationType type) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,257,f (type == null) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,258,eturn DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,260,eturn type;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,121,super(duration);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,265, Creates a new Duration instance with the same total milliseconds but
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,266, different DurationType.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,126,* Creates a new Duration instance with a different milisecond length.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,268," @param type  the duration type to use, null means AllType"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,128,* @param length  the new length
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,270, @throws IllegalStateException if this duration is imprecise
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,272,ublic Duration withDurationTypeUsingTotalMillis(DurationType type) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,273,f (type == null) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,274,ype = DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,276,f (type.equals(getDurationType())) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,131,public Duration withMillis(long length) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,132,if (length == getMillis()) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,279,"eturn new Duration(getTotalMillis(), type);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,283, Creates a new Duration instance with the same field values but
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,284, different DurationType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,286," @param type  the duration type to use, null means AllType"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,287, @return the new duration instance
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,288, @throws IllegalArgumentException if the new duration won't accept all of the current fields
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,290,ublic Duration withDurationTypeUsingFields(DurationType type) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,291,f (type == null) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,292,ype = DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,294,f (type.equals(getDurationType())) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,295,eturn this;
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,297,"eturn new Duration(getYears(), getMonths(), getWeeks(), getDays(),"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,298,"etHours(), getMinutes(), getSeconds(), getMillis(), type);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,302, Creates a new Duration instance with the same total milliseconds but
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,303, all the fields normalized to be within their standard ranges.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,305, @return the new duration instance
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,306, @throws IllegalStateException if this duration is imprecise
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,308,ublic Duration withFieldsNormalized() {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,309,"eturn new Duration(getTotalMillis(), getDurationType());"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,135,return new Duration(length);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,316,rotected final void setDuration(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,320," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,322,"rotected final void setDuration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,323,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,327," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,329,"rotected final void setTotalMillis(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,333," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,335,rotected final void setTotalMillis(long duration) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,339," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,341,rotected final void setYears(int years) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,345," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,347,rotected final void setMonths(int months) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,351," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,353,rotected final void setWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,357," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,359,rotected final void setDays(int days) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,363," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,365,rotected final void setHours(int hours) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,369," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,371,rotected final void setMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,375," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,377,rotected final void setSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,381," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,383,rotected final void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,142,protected final void setMillis(long duration) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,59, Interval is the standard implementation of an immutable time interval
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,60, class. The duration of the time interval is always a precise amount of
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,61, milliseconds even if a variable length duration was passed into the
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,62, constructor.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,59,* Interval is the standard implementation of an immutable time interval.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,60,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,61,* The duration of the time interval is always a precise amount of milliseconds
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,62,* even if a variable length duration was passed into the constructor.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,71,ublic final class Interval extends AbstractInterval
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,71,public class Interval
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,72,extends AbstractInterval
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,78, Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,79,* Constructs an interval from a start and end instant.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,80, @param interval  the time interval to convert
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,81, @throws IllegalArgumentException if the interval is null or invalid
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,81,"* @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,82,"* @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,83,ublic Interval(Object interval) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,84,uper(interval);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,84,"public Interval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,85,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,88, Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,89,* Constructs a time interval as a copy of another.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,90," @param startInstant  start of this interval, as milliseconds from"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,91,  1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,92," @param endInstant  end of this interval, as milliseconds from"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,93,  1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,91,* @param interval  the time interval to copy
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,92,* @throws IllegalArgumentException if the interval is null or invalid
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,95,"ublic Interval(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,96,"uper(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,94,public Interval(Object interval) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,95,super(interval);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,110, Constructs an interval from a start instant and a duration.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,109,* Constructs an interval from a start instant and a millisecond duration.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,113," @param duration  duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,112,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,113,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,120, Constructs an interval from a duration and an end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,120,* Constructs an interval from a millisecond duration and an end instant.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,122," @param duration  duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,122,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,124,* @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,130," Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,131,* Constructs an interval from a start instant and a time period.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,132,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,133,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,134,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,136,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,137,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,138,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,132,rotected final void setStartMillis(long millisInstant) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,140,"public Interval(ReadableInstant start, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,141,"super(start, period);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,145,* Constructs an interval from a time period and an end instant.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,146,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,147,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,148,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,150,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,151,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,152,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,154,"public Interval(ReadableTimePeriod period, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,155,"super(period, end);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,138,rotected final void setEndMillis(long millisInstant) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,162,protected final void setStartMillis(long millisInstant) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,144,rotected final void setDurationAfterStart(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,168,protected final void setEndMillis(long millisInstant) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,150,rotected final void setDurationBeforeEnd(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,174,protected final void storeDuration(Duration duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,483,// TODO Change from Object to individual methods
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,486,"add(FieldUtils.safeMultiply(d.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,487,} else if (duration instanceof ReadableTimePeriod) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,488,ReadableTimePeriod d = (ReadableTimePeriod) duration;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,71,ublic final class MutableInterval extends AbstractInterval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,71,public final class MutableInterval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,72,extends AbstractInterval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,78, Constructs a time interval as a copy of another.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,80, @param interval the time interval to copy
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,81, @throws IllegalArgumentException if the interval is null
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,79,* Constructs a time interval from 1970-01-01 to 1970-01-01.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,83,ublic MutableInterval(ReadableInterval interval) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,84,uper(interval);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,81,public MutableInterval() {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,82,"super(0L, 0L);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,88, Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,86,* Constructs an interval from a start and end instant.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,90, @param interval the time interval to convert
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,91, @throws IllegalArgumentException if the interval is null
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,88,"* @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,89,"* @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,93,ublic MutableInterval(Object interval) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,94,uper(interval);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,91,"public MutableInterval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,92,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,98, Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,96,* Constructs a time interval as a copy of another.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,100," @param startInstant  start of this interval, as milliseconds from"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,101,  1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,102," @param endInstant  end of this interval, as milliseconds from"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,103,  1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,98,* @param interval  the time interval to copy
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,99,* @throws IllegalArgumentException if the interval is null or invalid
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,105,"ublic MutableInterval(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,106,"uper(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,101,public MutableInterval(Object interval) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,102,super(interval);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,112, @param start  start of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,113, @param end  end of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,114, @throws IllegalArgumentException if either instant is null
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,108,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,109,"* @param end  end of this interval, null means now"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,121, Constructs an interval from a start instant and a duration.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,116,* Constructs an interval from a start instant and a millisecond duration.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,123, @param start  start of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,124, @param duration  duration of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,125, @throws IllegalArgumentException if start or duration is null
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,118,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,119,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,120,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,132, Constructs an interval from a duration and an end instant.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,127,* Constructs an interval from a millisecond duration and an end instant.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,134, @param duration duration of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,135, @param end end of this interval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,136, @throws IllegalArgumentException if duration or end is null
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,129,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,130,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,131,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,138,* Constructs an interval from a start instant and a time period.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,139,* <p>
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,140,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,141,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,143,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,144,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,145,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,147,"public MutableInterval(ReadableInstant start, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,148,"super(start, period);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,152,* Constructs an interval from a time period and an end instant.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,153,* <p>
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,154,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,155,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,157,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,158,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,159,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,161,"public MutableInterval(ReadableTimePeriod period, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,162,"super(period, end);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,190, @param millisDuration  new duration for interval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,214,* @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,215,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,192,ublic void setDurationAfterStart(long millisDuration) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,193,uper.setEndMillis(getStartMillis() + millisDuration);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,217,public void setDurationAfterStart(long duration) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,218,super.setDurationAfterStart(duration);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,197," Sets the duration of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,222,"* Sets the duration of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,225,* @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,201,ublic void setDurationAfterStart(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,202,uper.setDurationAfterStart(duration);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,227,public void setDurationBeforeEnd(long duration) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,228,super.setDurationBeforeEnd(duration);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,206," Sets the duration of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,232,"* Sets the duration of this time interval, preserving the start instant."
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,208, @param millisDuration  new duration for interval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,234,* @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,235,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,210,ublic void setDurationBeforeEnd(long millisDuration) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,211,uper.setStartMillis(getEndMillis() - millisDuration);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,237,public void setDurationAfterStart(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,238,super.setDurationAfterStart(duration);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,245,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,252,"* Sets the period of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,254,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,255,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,257,public void setTimePeriodAfterStart(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,258,super.setTimePeriodAfterStart(period);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,262,"* Sets the period of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,264,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,265,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,267,public void setTimePeriodBeforeEnd(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,268,super.setTimePeriodBeforeEnd(period);
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,59, Standard mutable duration implementation.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,59,* Standard mutable time period implementation.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,61," MutableDuration is mutable and not thread-safe, unless concurrent threads"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,61,"* MutableTimePeriod is mutable and not thread-safe, unless concurrent threads"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,67, @see Duration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,67,* @see TimePeriod
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,69,ublic class MutableDuration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,70,xtends AbstractDuration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,71,"mplements ReadWritableDuration, Cloneable, Serializable {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,69,public class MutableTimePeriod
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,70,extends AbstractTimePeriod
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,71,"implements ReadWritableTimePeriod, Cloneable, Serializable {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,77, Creates a zero-length duration using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,77,* Creates a zero-length period using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,79,ublic MutableDuration() {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,80,"uper(0L, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,79,public MutableTimePeriod() {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,80,"super(0L, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,84, Creates a zero-length duration using the specified duration type.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,84,* Creates a zero-length period using the specified duration type.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,86, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,88,ublic MutableDuration(DurationType type) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,89,"uper(0L, type, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,93, Creates a zero-length duration using the specified duration type.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,94, <p>
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,95, This constructor enables the created object to be based on total miliseconds
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,96, rather than the more normal fields. A total millisecond based duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,97, performs all calculations using the total millis and is always precise.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,99, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,100, @param totalMillisBased  true if duration treats the total millis as the master field
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,101, @throws IllegalArgumentException if the duration type is imprecise and totalMillisBased is true
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,86,* @param type  which set of fields this period supports
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,103,"ublic MutableDuration(DurationType type, boolean totalMillisBased) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,104,"uper(0L, type, totalMillisBased);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,88,public MutableTimePeriod(DurationType type) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,89,"super(0L, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,108, Creates a duration from the given millisecond duration using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,93,* Creates a period from the given millisecond duration using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,117,ublic MutableDuration(long duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,118,"uper(duration, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,102,public MutableTimePeriod(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,103,"super(duration, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,122, Creates a duration from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,107,* Creates a period from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,132,"ublic MutableDuration(long duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,133,"uper(duration, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,117,"public MutableTimePeriod(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,118,"super(duration, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,137, Create a duration from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,138, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,122,* Create a period from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,123,* This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,140, @param hours  amount of hours in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,141, @param minutes  amount of minutes in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,142, @param seconds  amount of seconds in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,143, @param millis  amount of milliseconds in this duration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,125,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,126,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,127,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,128,* @param millis  amount of milliseconds in this period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,145,"ublic MutableDuration(int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,146,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,130,"public MutableTimePeriod(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,131,"super(0, 0, 0, 0, hours, minutes, seconds, millis, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,150, Create a duration from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,135,* Create a period from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,152, @param years  amount of years in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,153, @param months  amount of months in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,154, @param weeks  amount of weeks in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,155, @param days  amount of days in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,156, @param hours  amount of hours in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,157, @param minutes  amount of minutes in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,158, @param seconds  amount of seconds in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,159, @param millis  amount of milliseconds in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,161,"ublic MutableDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,137,* @param years  amount of years in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,138,* @param months  amount of months in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,139,* @param weeks  amount of weeks in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,140,* @param days  amount of days in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,141,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,142,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,143,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,144,* @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,146,"public MutableTimePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,163,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,148,"super(years, months, weeks, days, hours, minutes, seconds, millis, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,167, Create a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,152,* Create a period from a set of field values.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,169," @param years  amount of years in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,170," @param months  amount of months in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,171," @param weeks  amount of weeks in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,172," @param days  amount of days in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,173," @param hours  amount of hours in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,174," @param minutes  amount of minutes in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,175," @param seconds  amount of seconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,176," @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,177," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,154,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,155,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,156,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,157,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,158,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,159,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,160,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,161,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,162,"* @param type  which set of fields this period supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,180,"ublic MutableDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,165,"public MutableTimePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,182,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,167,"super(years, months, weeks, days, hours, minutes, seconds, millis, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,186, Creates a duration from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,187, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,171,* Creates a period from the given interval endpoints using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,172,* This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,192,"ublic MutableDuration(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,193,"uper(startInstant, endInstant, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,177,"public MutableTimePeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,178,"super(startInstant, endInstant, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,197, Creates a duration from the given interval endpoints.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,198, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,182,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,183,* This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,202," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,187,"* @param type  which set of fields this period supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,204,"ublic MutableDuration(long startInstant, long endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,205,"uper(startInstant, endInstant, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,189,"public MutableTimePeriod(long startInstant, long endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,190,"super(startInstant, endInstant, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,209, Creates a duration from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,210, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,194,* Creates a period from the given interval endpoints using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,195,* This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,215,"ublic MutableDuration(ReadableInstant startInstant, ReadableInstant endInstant) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,216,"uper(startInstant, endInstant, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,200,"public MutableTimePeriod(ReadableInstant startInstant, ReadableInstant endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,201,"super(startInstant, endInstant, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,220, Creates a duration from the given interval endpoints.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,221, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,205,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,206,* This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,225," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,210,"* @param type  which set of fields this period supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,227,"ublic MutableDuration(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,228,"uper(startInstant, endInstant, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,212,"public MutableTimePeriod(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,213,"super(startInstant, endInstant, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,232, Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,217,* Creates a period from the specified object using the
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,235, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,236, @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,220,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,221,* @throws IllegalArgumentException if period is invalid
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,239,ublic MutableDuration(Object duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,240,"uper(duration, null, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,224,public MutableTimePeriod(Object period) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,225,"super(period, null);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,244, Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,229,* Creates a period from the specified object using the
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,247, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,248," @param type  which set of fields this duration supports, null means use converter"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,249, @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,232,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,233,"* @param type  which set of fields this period supports, null means use converter"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,234,* @throws IllegalArgumentException if period is invalid
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,252,"ublic MutableDuration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,253,"uper(duration, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,237,"public MutableTimePeriod(Object period, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,238,"super(period, type);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,267,f (isTotalMillisBased()) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,268,eturn DurationType.getPreciseAllType();
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,269, else {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,270,eturn DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,252,return DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,278, Sets all the fields in one go from another ReadableDuration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,259,* Sets all the fields in one go from another ReadableTimePeriod.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,280," @param duration  the duration to set, null means zero length duration"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,261,"* @param period  the period to set, null means zero length period"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,283,ublic void setDuration(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,284,uper.setDuration(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,264,public void setTimePeriod(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,265,super.setTimePeriod(period);
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,290," @param years  amount of years in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,291," @param months  amount of months in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,292," @param weeks  amount of weeks in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,293," @param days  amount of days in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,294," @param hours  amount of hours in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,295," @param minutes  amount of minutes in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,296," @param seconds  amount of seconds in this duration, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,297," @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,271,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,272,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,273,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,274,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,275,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,276,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,277,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,278,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,300,"ublic void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,281,"public void setTimePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,302,"uper.setDuration(years, months, weeks, days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,283,"super.setTimePeriod(years, months, weeks, days,"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,307, Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,288,* Sets all the fields in one go from an interval dividing the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,289,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,291,"* @param interval  the interval to set, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,293,public void setTimePeriod(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,294,super.setTimePeriod(interval);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,298,* Sets all the fields in one go from a millisecond interval dividing the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,299,* fields using the duration type.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,312,"ublic void setTotalMillis(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,313,"uper.setTotalMillis(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,304,"public void setTimePeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,305,"super.setTimePeriod(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,317, Sets all the fields in one go from a millisecond duration.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,318, Only fields that are supported and precise will be set.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,309,* Sets all the fields in one go from a duration dividing the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,310,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,312,"* @param duration  the duration to set, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,314,public void setTimePeriod(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,315,super.setTimePeriod(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,319,* Sets all the fields in one go from a millisecond duration dividing the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,320,* fields using the duration type.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,322,ublic void setTotalMillis(long duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,323,uper.setTotalMillis(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,324,public void setTimePeriod(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,325,super.setTimePeriod(duration);
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,328, Adds a millisecond duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,330,* Adds a period to this one by adding each field in turn.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,330," @param duration  the duration to add, in milliseconds"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,331, @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,332,"* @param period  the period to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,333,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,334,* not supported by this period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,335,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,333,ublic void add(long duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,334,uper.add(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,337,public void add(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,338,super.add(period);
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,338, Adds a duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,342,* Adds an interval to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,343,* fields and then adding each field in turn.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,340," @param duration  the duration to add, mulls means add nothing"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,341, @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,345,"* @param interval  the interval to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,346,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,348,public void add(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,349,super.add(interval);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,353,* Adds a duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,354,* fields and then adding each field in turn.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,356,"* @param duration  the duration to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,357,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,348, Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,364,* Adds a duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,365,* fields and then adding each field in turn.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,367,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,368,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,370,public void add(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,371,super.add(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,375,* Normalizes all the field values in this period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,376,* <p>
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,377,* This method converts to a milliecond duration and back again.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,350, @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,379,* @throws IllegalStateException if this period is imprecise
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,358, Sets the number of years of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,387,* Sets the number of years of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,368, Adds the specified years to the number of years in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,397,* Adds the specified years to the number of years in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,401,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,379, Sets the number of months of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,409,* Sets the number of months of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,389, Adds the specified months to the number of months in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,419,* Adds the specified months to the number of months in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,423,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,400, Sets the number of weeks of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,431,* Sets the number of weeks of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,410, Adds the specified weeks to the number of weeks in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,441,* Adds the specified weeks to the number of weeks in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,445,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,421, Sets the number of days of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,453,* Sets the number of days of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,431, Adds the specified days to the number of days in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,463,* Adds the specified days to the number of days in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,467,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,442, Sets the number of hours of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,475,* Sets the number of hours of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,452, Adds the specified hours to the number of hours in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,485,* Adds the specified hours to the number of hours in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,489,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,463, Sets the number of minutes of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,497,* Sets the number of minutes of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,473, Adds the specified minutes to the number of minutes in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,507,* Adds the specified minutes to the number of minutes in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,511,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,484, Sets the number of seconds of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,519,* Sets the number of seconds of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,494, Adds the specified seconds to the number of seconds in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,529,* Adds the specified seconds to the number of seconds in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,533,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,505, Sets the number of millis of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,541,* Sets the number of millis of the period.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,515, Adds the specified millis to the number of millis in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,551,* Adds the specified millis to the number of millis in the period.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,555,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,531,ublic MutableDuration copy() {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,532,eturn (MutableDuration)clone();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,568,public MutableTimePeriod copy() {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,569,return (MutableTimePeriod)clone();
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,99,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,104,"* Sets the duration of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,106,* @param millisDuration  new duration for interval
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,108,void setDurationBeforeEnd(long millisDuration);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,114,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,112, @param millisDuration  new duration for interval
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,121,* @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,122,* @throws ArithmeticException if the start instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,114,oid setDurationBeforeEnd(long millisDuration);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,124,void setDurationBeforeEnd(ReadableDuration duration);
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,117," Sets the duration of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,127,"* Sets the period of this time interval, preserving the start instant."
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,119, @param duration  new duration for interval
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,129,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,130,* @throws ArithmeticException if the end instant exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,121,oid setDurationBeforeEnd(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,132,void setTimePeriodAfterStart(ReadableTimePeriod period);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,135,"* Sets the period of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,137,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,138,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,140,void setTimePeriodBeforeEnd(ReadableTimePeriod period);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,66,ublic interface ReadWritableDuration extends ReadableDuration {
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,66,public interface ReadWritableTimePeriod extends ReadableTimePeriod {
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,69, Sets all the fields in one go from another ReadableDuration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,70,* Sets all the fields in one go from another ReadableTimePeriod.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,71, @param duration  the duration to set
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,72, @throws IllegalArgumentException if duration is null
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,73, @throws UnsupportedOperationException if an unsupported field's value is
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,74, non-zero
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,72,"* @param period  the period to set, null means zero length period"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,73,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,76,oid setDuration(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,75,void setTimePeriod(ReadableTimePeriod period);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,81," @param years amount of years in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,82, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,83," @param months amount of months in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,84, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,85," @param weeks amount of weeks in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,86, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,87," @param days amount of days in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,88, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,89," @param hours amount of hours in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,90, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,91," @param minutes amount of minutes in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,92, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,93," @param seconds amount of seconds in this duration, which must be zero if"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,94, unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,95," @param millis amount of milliseconds in this duration, which must be"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,96, zero if unsupported.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,97, @throws UnsupportedOperationException if an unsupported field's value is
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,98, non-zero
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,80,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,81,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,82,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,83,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,84,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,85,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,86,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,87,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,88,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,90,"void setTimePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,91,"int hours, int minutes, int seconds, int millis);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,94,* Sets all the fields in one go from an interval dividing the
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,95,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,97,"* @param interval  the interval to set, null means zero length"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,99,void setTimePeriod(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,102,* Sets all the fields in one go from a millisecond interval dividing the
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,103,* fields using the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,105,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,106,"* @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,100,"oid setDuration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,101,"nt hours, int minutes, int seconds, int millis);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,108,"void setTimePeriod(long startInstant, long endInstant);"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,104, Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,111,* Sets all the fields in one go from a duration dividing the
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,112,* fields using the duration type.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,106," @param startInstant interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,107," @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,114,"* @param duration  the duration to set, null means zero length"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,109,"oid setTotalMillis(long startInstant, long endInstant);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,116,void setTimePeriod(ReadableDuration duration);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,112, Sets all the fields in one go from a millisecond duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,119,* Sets all the fields in one go from a millisecond duration dividing the
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,120,* fields using the duration type.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,115, @throws UnsupportedOperationException if any fields are imprecise
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,117,oid setTotalMillis(long duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,124,void setTimePeriod(long duration);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,121, Adds a millisecond duration to this one.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,128,* Adds a period to this one by adding each field in turn.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,123," @param duration  the duration to add, in milliseconds"
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,124, @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,130,"* @param period  the period to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,131,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,132,* not supported by this period
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,133,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,126,oid add(long duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,135,void add(ReadableTimePeriod period);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,129, Adds a duration to this one.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,138,* Adds an interval to this one by dividing the interval into
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,139,* fields and then adding each field in turn.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,131, @param duration  the duration to add
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,132, @throws IllegalArgumentException if the duration is null
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,133, @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,141,"* @param interval  the interval to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,142,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,144,void add(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,147,* Adds a duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,148,* fields and then adding each field in turn.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,150,"* @param duration  the duration to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,151,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,156,* Adds a duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,157,* fields and then adding each field in turn.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,159,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,160,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,162,void add(long duration);
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,138, Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,165,* Normalizes all the field values in this period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,166,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,167,* This method converts to a milliecond duration and back again.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,140, @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,169,* @throws IllegalStateException if this period is imprecise
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,146, Sets the number of years of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,175,* Sets the number of years of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,154, Adds the specified years to the number of years in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,183,* Adds the specified years to the number of years in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,187,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,163, Sets the number of months of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,193,* Sets the number of months of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,171, Adds the specified months to the number of months in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,201,* Adds the specified months to the number of months in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,205,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,180, Sets the number of weeks of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,211,* Sets the number of weeks of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,188, Adds the specified weeks to the number of weeks in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,219,* Adds the specified weeks to the number of weeks in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,223,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,197, Sets the number of days of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,229,* Sets the number of days of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,205, Adds the specified days to the number of days in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,237,* Adds the specified days to the number of days in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,241,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,214, Sets the number of hours of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,247,* Sets the number of hours of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,222, Adds the specified hours to the number of hours in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,255,* Adds the specified hours to the number of hours in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,259,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,231, Sets the number of minutes of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,265,* Sets the number of minutes of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,239, Adds the specified minutes to the number of minutes in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,273,* Adds the specified minutes to the number of minutes in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,277,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,248, Sets the number of seconds of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,283,* Sets the number of seconds of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,256, Adds the specified seconds to the number of seconds in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,291,* Adds the specified seconds to the number of seconds in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,295,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,265, Sets the number of millis of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,301,* Sets the number of millis of the period.
False,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,273, Adds the specified millis to the number of millis in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,309,* Adds the specified millis to the number of millis in the period.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,313,* @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,57, Defines a duration of time that can be queried using fields.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,57,* Defines an exact duration of time in milliseconds.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,61, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,62," Durations can be split up into multiple fields, but implementations are not"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,63, required to evenly distribute the values across the fields. Nor are they
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,64, required to normalize the fields nor match the signs.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,65, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,66," For example, an implementation can represent a duration of ""4 days, 6 hours"""
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,67," as ""102 hours"", ""1 day, 78 hours"", ""367200000 milliseconds"", or even"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,68," ""3 days, -8 hours, 2275 minutes, 298 seconds, 2000 milliseconds""."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,63,* @see ReadableTimePeriod
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,78, Returns the object which defines which fields this duration supports.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,80,urationType getDurationType();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,83, Is this duration based on a millisecond duration and thus performs
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,84, all calculations using the total millisecond value.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,85, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,86, Durations operate either using the total milliseconds as the master and the
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,87," field values as derived, or vice versa. This method returns true if the"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,88, total millis field is the master. The effect is to control how the duration
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89, manages addition over the daylight savings boundary.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,90, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91," If true, {@link #isPrecise()} will always return true, {@link #getTotalMillis()}"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92, and {@link #compareTo(Object)} methods will never throw an exception and the
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93, add methods will add using the total milliseconds value.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94, See {@link MillisDuration} for details.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96, @return true if the duration is based on total milliseconds
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98,oolean isTotalMillisBased();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,101," Gets the total length of this duration in milliseconds,"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,102, failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,71,* Gets the total length of this duration in milliseconds.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,105, @throws IllegalStateException if the duration is imprecise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,ong getTotalMillis();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110," Is this duration a precise length of time, or descriptive."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,111, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,112," A precise duration could include millis, seconds, minutes or hours."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,113," However, days, weeks, months and years can vary in length, resulting in"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,114, an imprecise duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,115, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,116, An imprecise duration can be made precise by pairing it with a
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,117, date in a {@link ReadableInterval}.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,119, @return true if the duration is precise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121,oolean isPrecise();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125," Adds this duration to the given instant, returning a new value."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,126, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,127," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,130, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,131, duration to
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,132," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,133, @return milliseconds value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,134, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,136,"ong addTo(long instant, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,139," Adds this duration to the given instant, returning a new value."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,140, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,141," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,142, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,144, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,145, duration to
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,146," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,147," @param chrono  override the duration's chronology, unless null is passed in"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,148, @return milliseconds value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,149, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,151,"ong addTo(long instant, int scalar, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,154," Adds this duration to the given instant, returning a new Instant."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,155, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,156," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,157, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,159, @param instant  the instant to add the duration to
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,160," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,161, @return instant with the original value plus this duration times scalar
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,162, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,163, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,165,"nstant addTo(ReadableInstant instant, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,168, Adds this duration into the given mutable instant.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,169, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,170," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,171, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,173, @param instant  the instant to update with the added duration
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,174," @param scalar  the number of times to add the duration, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,175, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,176, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,178,"oid addInto(ReadWritableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,75,long getMillis();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,182, Gets the years field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,184," @return the number of years in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,186,nt getYears();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,189, Gets the months field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,191," @return the number of months in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,193,nt getMonths();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,196, Gets the weeks field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,198," @return the number of weeks in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,200,nt getWeeks();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,203, Gets the days field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,205," @return the number of days in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,207,nt getDays();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,210, Gets the hours field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,79,* Converts this duration to a Duration instance.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,80,* This can be useful if you don't trust the implementation of the interface
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,81,"* to be well-behaved, or to get a guaranteed immutable object."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,212," @return the number of hours in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,83,* @return a Duration created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,214,nt getHours();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,217, Gets the minutes field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,219," @return the number of minutes in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,221,nt getMinutes();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,224, Gets the seconds field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,226," @return the number of seconds in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,228,nt getSeconds();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,231, Gets the millis field part of the duration.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,233," @return the number of millis in the duration, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,235,nt getMillis();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,85,Duration toDuration();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,238, Gets this object as an immutable Duration. This can be useful if you
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,239," don't trust the implementation of the interface to be well-behaved, or"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,240, to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89,* Converts this duration to a TimePeriod instance using the PreciseAll type.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,90,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91,"* The PreciseAll type fixes days at 24 hours, months ay 30 days and years at 365 days"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,* thus the time period will be precise. As a result there is no loss of precision
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,* with regards the length of the duration and the following code will work:
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95,* Duration dur = new Duration(123456789L);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96,* TimePeriod period = d.toTimePeriod();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97,* Duration dur2 = period.toDuration();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98,* // dur.getMillis() == dur2.getMillis()
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,99,* </pre>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,242, @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,101,* @return a TimePeriod created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,244,uration toDuration();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,103,TimePeriod toTimePeriod();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,247, Get this object as a MutableDuration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,106,* Converts this duration to a TimePeriod instance specifying a duration type
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,* to control how the duration is split into fields.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,108,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,109,"* If a non-precise duration type is used, the resulting time period will only"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110,* represent an approximation of the duration. As a result it will not be
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,111,* possible to call {@link TimePeriod#toDuration()} to get the duration back.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,249, @return a MutableDuration using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,113,* @param type  the duration type determining how to split the duration into fields
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,114,* @return a TimePeriod created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,251,utableDuration toMutableDuration();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,116,TimePeriod toTimePeriod(DurationType type);
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,255," Compares this duration with the specified duration, which can only be"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,256, performed if both are precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120,* Compares this duration with the specified duration based on length.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,258, @param obj  a precise duration to check against
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,122,* @param obj  a duration to check against
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,262, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,268, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,270, @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,132,"* @param duration  another duration to compare to, null means zero milliseconds"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,272, @throws IllegalArgumentException if the duration is null
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,273, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,279, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,281, @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,140,"* @param duration  another duration to compare to, null means zero milliseconds"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,283, @throws IllegalArgumentException if the duration is null
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,284, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,290, Both durations must be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,292, @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,148,"* @param duration  another duration to compare to, null means zero milliseconds"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,294, @throws IllegalArgumentException if the duration is null
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,295, @throws IllegalStateException if either duration is imprecise
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,302, on the value of each field. All ReadableDuration instances are accepted.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,303, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,304, To compare two durations for absolute duration (ie. millisecond duration
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,305," ignoring the fields), use {@link #isEqual(ReadableDuration)} or"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,306, {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,156,* on the millisecond length. All ReadableDuration instances are accepted.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,309," @return true if all the field values are equal, false if"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,310,  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,159,* @return true if the length of the duration is equal
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,166,* The following formula must be used:
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,167,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,168,*  long len = getMillis();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,169,*  return (int) (len ^ (len >>> 32));
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,170,* </pre>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,326," For example, ""P6H3M5S"" represents 6 hours, 3 minutes, 5 seconds."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,180,"* For example, ""P6H3M7S"" represents 6 hours, 3 minutes, 7 seconds."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,181,* The field values are determined using the PreciseAll duration type.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,107,* @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,110, Gets the duration of this time interval using the MillisType duration type.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,112,* Gets the millisecond duration of this time interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,112, The duration returned will always be precise because it is relative to
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,113, a known date.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114,* If this interval was constructed using a precise duration then that object will
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115,* be returned. Otherwise a new Duration instance using the MillisType is returned.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115, @return the duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,117,* @return the precise duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,118,* @throws ArithmeticException if the duration exceeds the capacity of a long
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,120, Gets the duration of this time interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,122," @param type  the requested type of the duration, null means MillisType"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,123, @return the duration of the time interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,125,uration getDuration(DurationType type);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,214,* Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,215,* All duration type.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,216,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,217,* This method should be used to exract the field values describing the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,218,* difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,219,* The time period may not be precise - if you want the millisecond duration
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,220,* then you should use {@link #getDuration()}.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,222,"* @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,223,* @return a time period derived from the interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,225,TimePeriod toTimePeriod();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,228,* Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,229,* specified duration type.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,230,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,231,* This method should be used to exract the field values describing the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,232,* difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,233,* The time period may not be precise - if you want the millisecond duration
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,234,* then you should use {@link #getDuration()}.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,236,"* @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,237,* @return a time period derived from the interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,239,TimePeriod toTimePeriod(DurationType type);
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,10,* are met:
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,57,* Defines a time period specified in terms of individual duration fields.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,58,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,59,* The implementation of this interface may be mutable or immutable. This
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,60,"* interface only gives access to retrieve data, never to change it."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,61,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,62,"* Time periods are split up into multiple fields, for example days and seconds."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,63,* Implementations are not required to evenly distribute the values across the fields.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,64,* The value for each field may be positive or negative.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,65,* The {@link DurationType} defines the rules for dividing the fields and which fields
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,66,* are supported. Unsupported fields always have a value of zero.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,67,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,68,"* When a time period is added to an instant, the effect is to add each field in turn."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,69,"* For example, a time period could be defined as 3 months, 2 days and -1 hours."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,70,"* In most circumstances this would be the same as 3 months, 1 day, and 23 hours."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,71,"* However, when adding across a daylight savings boundary, a day may be 23 or 25 hours long."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,72,"* Thus, the time period is always added field by field to the datetime."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,74,* @see ReadableDuration
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,75,* @see ReadableInterval
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,76,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,77,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,78,* @since 1.0
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,80,public interface ReadableTimePeriod {
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,83,* Returns the object which defines which fields this duration supports.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,85,DurationType getDurationType();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,88,"* Is this duration a precise length of time, or descriptive."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,89,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,90,"* A precise duration could include millis, seconds, minutes or hours."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,91,"* However, days, weeks, months and years can vary in length, resulting in"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,92,* an imprecise duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,93,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,94,* An imprecise duration can be made precise by pairing it with a
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,95,* date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,97,* @return true if the duration is precise
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,99,boolean isPrecise();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,103,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,104,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,105,* The addition uses the chronology of the DurationType.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,106,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,107,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,109,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,110,* duration to
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,111,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,112,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,113,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,115,"long addTo(long instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,118,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,119,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,120,* The addition uses the chronology specified.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,121,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,122,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,124,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,125,* duration to
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,126,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,127,"* @param chrono  override the chronology of the duration type, unless null is passed in"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,128,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,129,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,131,"long addTo(long instant, int scalar, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,134,"* Adds this duration to the given instant, returning a new Instant."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,135,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,136,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,137,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,139,* @param instant  the instant to add the duration to
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,140,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,141,* @return instant with the original value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,142,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,143,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,145,"Instant addTo(ReadableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,148,* Adds this duration into the given mutable instant.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,149,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,150,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,151,* in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,153,* @param instant  the instant to update with the added duration
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,154,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,155,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,156,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,158,"void addInto(ReadWritableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,162,* Gets the years field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,164,"* @return the number of years in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,166,int getYears();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,169,* Gets the months field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,171,"* @return the number of months in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,173,int getMonths();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,176,* Gets the weeks field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,178,"* @return the number of weeks in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,180,int getWeeks();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,183,* Gets the days field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,185,"* @return the number of days in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,187,int getDays();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,190,* Gets the hours field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,192,"* @return the number of hours in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,194,int getHours();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,197,* Gets the minutes field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,199,"* @return the number of minutes in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,201,int getMinutes();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,204,* Gets the seconds field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,206,"* @return the number of seconds in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,208,int getSeconds();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,211,* Gets the millis field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,213,"* @return the number of millis in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,215,int getMillis();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,219,* Gets this object as an immutable TimePeriod. This can be useful if you
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,220,"* don't trust the implementation of the interface to be well-behaved, or"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,221,* to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,223,* @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,225,TimePeriod toTimePeriod();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,228,* Get this object as a MutableTimePeriod.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,230,* @return a MutableTimePeriod using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,232,MutableTimePeriod toMutableTimePeriod();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,235,"* Gets the total length of this time period in milliseconds,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,236,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,238,* @return the total length of the time period in milliseconds.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,239,* @throws IllegalStateException if this time period is imprecise
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,241,long toDurationMillis();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,244,"* Gets the total length of this time period,"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,245,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,247,* @return the total length of the time period in milliseconds.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,248,* @throws IllegalStateException if this time period is imprecise
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,250,Duration toDuration();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,254,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,255,* on the value of each field. All ReadableTimePeriod instances are accepted.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,256,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,257,* To compare two durations for absolute duration (ie. millisecond duration
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,258,"* ignoring the fields), use {@link #toDurationMillis()} or {@link #toDuration()}."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,260,* @param readableDuration  a readable duration to check against
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,261,"* @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,262,*  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,264,boolean equals(Object readableTimePeriod);
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,267,* Gets a hash code for the duration that is compatable with the
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,268,* equals method. The hashcode must be calculated as follows:
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,269,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,270,*   int hash = getDurationType().hashCode();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,271,*   hash = 53 * hash + getYears();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,272,*   hash = 53 * hash + getMonths();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,273,*   hash = 53 * hash + getWeeks();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,274,*   hash = 53 * hash + getDays();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,275,*   hash = 53 * hash + getHours();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,276,*   hash = 53 * hash + getMinutes();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,277,*   hash = 53 * hash + getSeconds();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,278,*   hash = 53 * hash + getMillis();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,279,*   return hash;
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,280,* </pre>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,282,* @return a hash code
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,284,int hashCode();
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,288,* Gets the value as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,289,* <p>
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,290,"* For example, ""P6H3M5S"" represents 6 hours, 3 minutes, 5 seconds."
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,292,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadableTimePeriod.java,294,String toString();
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,59, A precise immutable duration that defines and adds durations based on milliseconds.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,59,* An immutable time period specifying a set of duration field values.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,61, A precise duration is one that is defined primarily by a fixed number of milliseconds.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,62," The fields, such as hours and seconds, are provided for convenience."
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,63, The {@link ReadableDuration#isTotalMillisBased} method will always return true.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,61,"* A time period is divided into a number of fields, such as hours and seconds."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,62,* The way in which that divide occurs is controlled by the DurationType class.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,65, <code>MillisDuration</code> uses any precise duration type to split the milliseconds
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,66, into fields.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,67, The {@link DurationType#getPreciseAllType() PreciseAll} type is used by default.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,68, <code>PreciseAll</code> uses the ISO chronology and fixes
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,69," days at 24 hours, weeks at 7 days, months at 30 days and years at 365 days."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,64,* <code>TimePeriod</code> can use any duration type to split the milliseconds into fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,65,* The {@link DurationType#getAllType() All} type is used by default.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,66,"* <code>All</code> uses the ISO chronology and divides a duration into years, months,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,67,"* weeks, days, hours, minutes, seconds and milliseconds as best it can."
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,71, When a precise duration is added to an instant the millisecond value of the instant
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,72, is added. The field values are not used. If the addition to the instant crosses a
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,73, daylight savings boundary the effect may be unexpected.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,69,* This class performs calculations using the individual fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,70,* It <i>may</i> be possible to convert a <code>TimePeriod</code> to a <code>Duration</code>.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,71,* The conversion will succeed if the time period is precise.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,72,* A time period is precise if all of the populated fields have a fixed known duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,75," For example, consider a <code>MillisDuration</code> of 1 day."
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,76, This actually represents <code>24 * 60 * 60 * 1000</code> milliseconds.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,77, When you add this to a <code>DateTime</code> just before daylight savings changes
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,78, the result will be to add the milliseconds. Thus the result will be one hour
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,79, different on the following day.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,80, <pre>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,81," MillisDuration dur = new MillisDuration(0, 0, 0, 1, 0, 0, 0, 0); // 1 'day'"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,82," DateTime dt = new DateTime(2004, 3, 27, 12, 0, 0, 0); // before DST"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,83," DateTime result = new DateTime(dur.addTo(dt, 1)); // after DST"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,84, // result:  2004-03-27T12:00:00 -> 2004-03-28T13:00:00
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,85," // note: result time is 13:00, as 1 day is always 24 hours in MillisDuration"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,86, </pre>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,87, If this behaviour is not what you want then you should use {@link Duration}.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,74,"* When this time period is added to an instant, the effect is of adding each field in turn."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,75,"* As a result, this takes into account daylight savings time."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,76,* Adding a time period of 1 day to the day before daylight savings starts will only add
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,77,* 23 hours rather than 24 to ensure that the time remains the same.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,78,"* If this is not the behaviour you want, then see {@link Duration}."
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,89," MillisDuration is thread-safe and immutable, provided that the DurationType is as well."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,80,"* TimePeriod is thread-safe and immutable, provided that the DurationType is as well."
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,95, @see Duration
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,96, @see MutableDuration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,86,* @see MutableTimePeriod
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,98,ublic class MillisDuration
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,99,xtends AbstractDuration
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,100,"mplements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,88,public class TimePeriod
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,89,extends AbstractTimePeriod
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,90,"implements ReadableTimePeriod, Serializable {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,103,ublic static final MillisDuration ZERO = new MillisDuration(0L);
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,93,public static final TimePeriod ZERO = new TimePeriod(0L);
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,106,rivate static final long serialVersionUID = 5727916780257544L;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,96,private static final long serialVersionUID = 741052353876488155L;
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,109, Creates a duration from the given millisecond duration using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,99,* Creates a duration from the given millisecond duration using AllType.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,111, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,101,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,102,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,103,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,104,* of the duration type.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,115,ublic MillisDuration(long duration) {
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,116,"uper(duration, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,108,public TimePeriod(long duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,109,"super(duration, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,122, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,115,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,116,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,117,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,118,* of the duration type.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,125," @param type  which set of fields this duration supports, null means PreciseAllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,126, @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,121,* @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,128,"ublic MillisDuration(long duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,129,"uper(duration, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,123,"public TimePeriod(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,124,"super(duration, type);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,133, Create a duration from a set of field values using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,128,* Create a duration from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,129,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,140,"ublic MillisDuration(int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,141,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,136,"public TimePeriod(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,137,"super(0, 0, 0, 0, hours, minutes, seconds, millis, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,145, Create a duration from a set of field values using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,141,* Create a duration from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,155, @throws ArithmeticException if the total millis is too large for a <code>long</code>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,157,"ublic MillisDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,152,"public TimePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,159,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,154,"super(years, months, weeks, days, hours, minutes, seconds, millis, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,173," @param type  which set of fields this duration supports, null means PreciseAllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,174, @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,168,"* @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,176, @throws ArithmeticException if the total millis is too large for a <code>long</code>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,178,"ublic MillisDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,171,"public TimePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,180,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,173,"super(years, months, weeks, days, hours, minutes, seconds, millis, type);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,184, Creates a duration from the given interval endpoints using PreciseAllType.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,185, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,186, This constructor is a convenience for the single <code>long</code> constructor.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,187, The start and end instant play non role in determining the field values.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,188, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,177,* Creates a duration from the given interval endpoints using AllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,178,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,193,"ublic MillisDuration(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,194,"uper(startInstant, endInstant, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,183,"public TimePeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,184,"super(startInstant, endInstant, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,199, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,200, This constructor is a convenience for the single <code>long</code> constructor.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,201, The start and end instant play non role in determining the field values.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,202, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,189,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,206," @param type  which set of fields this duration supports, null means PreciseAllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,207, @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,193,"* @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,209,"ublic MillisDuration(long startInstant, long endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,210,"uper(startInstant, endInstant, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,195,"public TimePeriod(long startInstant, long endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,196,"super(startInstant, endInstant, type);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,214, Creates a duration from the given interval endpoints using PreciseAllType.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,215, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,216, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,200,* Creates a duration from the given interval endpoints using AllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,201,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,221,"ublic MillisDuration(ReadableInstant startInstant, ReadableInstant endInstant) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,222,"uper(startInstant, endInstant, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,206,"public TimePeriod(ReadableInstant startInstant, ReadableInstant endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,207,"super(startInstant, endInstant, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,227, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,228, This constructor is a convenience for the single <code>long</code> constructor.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,229, The start and end instant play non role in determining the field values.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,230, The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,212,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,234," @param type  which set of fields this duration supports, null means PreciseAllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,235, @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,216,"* @param type  which set of fields this duration supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,237,"ublic MillisDuration(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,238,"uper(startInstant, endInstant, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,218,"public TimePeriod(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,219,"super(startInstant, endInstant, type);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,244, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,245, This constructor is a convenience for the single <code>long</code> constructor.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,246, The start and end instant play non role in determining the field values.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,247, The duration created using this constructor will always have normalized fields.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,253,ublic MillisDuration(Object duration) {
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,254,"uper(duration, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,230,public TimePeriod(Object duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,231,"super(duration, null);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,260, <p>
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,261, The duration created using this constructor will always have normalized fields.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,266, @throws IllegalArgumentException if the duration type is not precise
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,269,"ublic MillisDuration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,270,"uper(duration, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,243,"public TimePeriod(Object duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,244,"super(duration, type);"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,284,eturn DurationType.getPreciseAllType();
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,286,f (type.isPrecise() == false) {
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,287,"hrow new IllegalArgumentException(""The duration type must be precise: "" + type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,258,return DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,294, Creates a new MillisDuration instance with the same total milliseconds but
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,295," different DurationType, which must be precise."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,265,* Creates a new TimePeriod instance with the same field values but
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,266,* different DurationType.
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,297," @param type  the duration type to use, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,268,"* @param type  the duration type to use, null means AllType"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,299, @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,270,* @throws IllegalArgumentException if the new duration won't accept all of the current fields
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,272,public TimePeriod withDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,273,if (type == null) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,274,type = DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,276,if (type.equals(getDurationType())) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,277,return this;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,279,"return new TimePeriod(getYears(), getMonths(), getWeeks(), getDays(),"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,280,"getHours(), getMinutes(), getSeconds(), getMillis(), type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,284,* Creates a new TimePeriod instance with the same millisecond duration but
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,285,* different DurationType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,287,"* @param type  the duration type to use, null means AllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,288,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,289,* @throws IllegalStateException if this duration is imprecise
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,301,ublic MillisDuration withDurationType(DurationType type) {
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,302,ype = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,291,public TimePeriod withDurationTypeRetainDuration(DurationType type) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,292,if (type == null) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,293,type = DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,306,"eturn new MillisDuration(getTotalMillis(), type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,298,"return new TimePeriod(toDurationMillis(), type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,302,* Creates a new TimePeriod instance with the same millisecond duration but
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,303,* all the fields normalized to be within their standard ranges.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,305,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,306,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,308,public TimePeriod withFieldsNormalized() {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,309,"return new TimePeriod(toDurationMillis(), getDurationType());"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,313,rotected final void setDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,316,protected final void setTimePeriod(ReadableTimePeriod period) {
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,319,"rotected final void setDuration(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,320,"nt hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,322,"protected final void setTimePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,323,"int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,326,"rotected final void setTotalMillis(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,329,"protected final void setTimePeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,332,rotected final void setTotalMillis(long duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/TimePeriod.java,335,protected final void setTimePeriod(long duration) {
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,171, @param totalMillisMaster  true if total millis based duration
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,171,* @param precise  true if a precise type is required
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,"ublic DurationType getDurationType(Object object, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,176,f (totalMillisMaster) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,"public DurationType getDurationType(Object object, boolean precise) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,176,if (precise) {
False,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,57,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,57,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,93,"oid setInto(ReadWritableDuration duration, Object object);"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,93,"void setInto(ReadWritableTimePeriod duration, Object object);"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,56,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,56,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,123,"ublic void setInto(ReadWritableDuration duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,124,uration.setTotalMillis(((Long) object).longValue());
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,123,"public void setInto(ReadWritableTimePeriod duration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,124,duration.setTimePeriod(((Long) object).longValue());
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,57,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,57,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,116,"ublic void setInto(ReadWritableDuration duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,117,uration.setTotalMillis(0L);
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,116,"public void setInto(ReadWritableTimePeriod duration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,117,duration.setTimePeriod(0L);
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,58,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,58,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,90,eturn ((ReadableDuration) object).isPrecise();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,90,return true;
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,103,eturn ((ReadableDuration) object).getTotalMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,103,return ((ReadableDuration) object).getMillis();
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,117,"ublic void setInto(ReadWritableDuration duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,118,uration.setDuration((ReadableDuration) object);
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,117,"public void setInto(ReadWritableTimePeriod duration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,118,duration.setTimePeriod((ReadableDuration) object);
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,125, @param totalMillisMaster  true if total millis based duration
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,125,* @param precise  true if a precise type is required
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,130,"ublic DurationType getDurationType(Object object, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,131,eturn ((ReadableDuration) object).getDurationType();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,130,"public DurationType getDurationType(Object object, boolean precise) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,131,return DurationType.getPreciseAllType();
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,104,"ublic void setInto(ReadWritableDuration writableDuration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,104,"public void setInto(ReadWritableTimePeriod writableDuration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,106,"ritableDuration.setTotalMillis(interval.getStartMillis(), interval.getEndMillis());"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,106,"writableDuration.setTimePeriod(interval.getStartMillis(), interval.getEndMillis());"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,import org.joda.time.ReadWritableTimePeriod;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,61,import org.joda.time.TimePeriod;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,63,mport org.joda.time.format.DurationFormatter;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,64,mport org.joda.time.format.DurationParser;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,64,import org.joda.time.format.TimePeriodFormatter;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,65,import org.joda.time.format.TimePeriodParser;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,66,mport org.joda.time.format.ISODurationFormat;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,67,import org.joda.time.format.ISOTimePeriodFormat;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,145,"ublic void setInto(ReadWritableDuration duration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,146,"public void setInto(ReadWritableTimePeriod duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,147,urationParser parser = ISODurationFormat.getInstance().standard();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,148,TimePeriodParser parser = ISOTimePeriodFormat.getInstance().standard();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,152,"arser.parseMutableDuration(duration.getDurationType(), str);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,153,"parser.parseMutableTimePeriod(duration.getDurationType(), str);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,182,urationFormatter durationParser = ISODurationFormat.getInstance().standard();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,183,TimePeriodFormatter durationParser = ISOTimePeriodFormat.getInstance().standard();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,184,eadableDuration duration;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,185,TimePeriod period;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,189,"uration = durationParser.parseDuration(getDurationType(leftStr, false), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,190,"period = durationParser.parseTimePeriod(getDurationType(leftStr, false), leftStr);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,192,uration = null;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,193,period = null;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,197,f (duration != null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,198,if (period != null) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,200,"uration = durationParser.parseDuration(getDurationType(rightStr, false), rightStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,201,"period = durationParser.parseTimePeriod(getDurationType(rightStr, false), rightStr);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,202,ritableInterval.setDurationAfterStart(duration);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,203,writableInterval.setTimePeriodAfterStart(period);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,206,f (duration == null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,207,if (period == null) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,209,ritableInterval.setDurationBeforeEnd(duration);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,210,writableInterval.setTimePeriodBeforeEnd(period);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,88,/ Accessed also by AbstractDurationFormatter.
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,88,// Accessed also by AbstractTimePeriodFormatter.
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,56,mport org.joda.time.Duration;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,58,mport org.joda.time.MutableDuration;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,59,mport org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,57,import org.joda.time.MutableTimePeriod;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,58,import org.joda.time.ReadableTimePeriod;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,59,import org.joda.time.TimePeriod;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,62," Abstract base class for implementing {@link DurationPrinter}s,"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,63," {@link DurationParser}s, and {@link DurationFormatter}s. This class"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,62,"* Abstract base class for implementing {@link TimePeriodPrinter}s,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,63,"* {@link TimePeriodParser}s, and {@link TimePeriodFormatter}s. This class"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,67, The print methods assume that your subclass has implemented DurationPrinter or
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,68," DurationFormatter. If not, a ClassCastException is thrown when calling those"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,67,* The print methods assume that your subclass has implemented TimePeriodPrinter or
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,68,"* TimePeriodFormatter. If not, a ClassCastException is thrown when calling those"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,72," DurationParser or DurationFormatter. If not, a ClassCastException is thrown"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,72,"* TimePeriodParser or TimePeriodFormatter. If not, a ClassCastException is thrown"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,78,ublic abstract class AbstractDurationFormatter {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,78,public abstract class AbstractTimePeriodFormatter {
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,80,ublic int countFieldsToPrint(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,81,"eturn ((DurationPrinter) this).countFieldsToPrint(duration, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,80,public int countFieldsToPrint(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,81,"return ((TimePeriodPrinter) this).countFieldsToPrint(period, Integer.MAX_VALUE);"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,84,ublic String print(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,85,urationPrinter p = (DurationPrinter) this;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,86,tringBuffer buf = new StringBuffer(p.calculatePrintedLength(duration));
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,87,".printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,84,public String print(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,85,TimePeriodPrinter p = (TimePeriodPrinter) this;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,86,StringBuffer buf = new StringBuffer(p.calculatePrintedLength(period));
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,87,"p.printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,91,"ublic Duration parseDuration(DurationType type, String text) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,92,"eturn parseMutableDuration(type, text).toDuration();"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,91,"public TimePeriod parseTimePeriod(DurationType type, String text) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,92,"return parseMutableTimePeriod(type, text).toTimePeriod();"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,95,"ublic MutableDuration parseMutableDuration(DurationType type, String text) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,96,urationParser p = (DurationParser) this;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,97,"utableDuration duration = new MutableDuration(0, type);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,95,"public MutableTimePeriod parseMutableTimePeriod(DurationType type, String text) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,96,TimePeriodParser p = (TimePeriodParser) this;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,97,"MutableTimePeriod period = new MutableTimePeriod(0, type);"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,99,"nt newPos = p.parseInto(duration, text, 0);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,99,"int newPos = p.parseInto(period, text, 0);"
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,102,eturn duration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,102,return period;
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,108,hrow new IllegalArgumentException(AbstractDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,109,"createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,108,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractTimePeriodFormatter.java,109,"AbstractDateTimeFormatter.createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,57, ISODurationFormat provides factory methods for the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,57,* ISOTimePeriodFormat provides factory methods for the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,59," ISODurationFormat is thread-safe and immutable, and the formatters it"
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,59,"* ISOTimePeriodFormat is thread-safe and immutable, and the formatters it"
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,63, @see DurationFormat
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,64, @see DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,63,* @see TimePeriodFormat
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,64,* @see TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,66,ublic class ISODurationFormat {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,67,rivate static final ISODurationFormat INSTANCE = new ISODurationFormat();
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,66,public class ISOTimePeriodFormat {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,67,private static final ISOTimePeriodFormat INSTANCE = new ISOTimePeriodFormat();
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,70, Returns a singleton instance of ISODurationFormat.
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,70,* Returns a singleton instance of ISOTimePeriodFormat.
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,72,ublic static ISODurationFormat getInstance() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,72,public static ISOTimePeriodFormat getInstance() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,76,rivate transient DurationFormatter
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,76,private transient TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,83,rivate ISODurationFormat() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,83,private ISOTimePeriodFormat() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,90,ublic DurationFormatter standard() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,90,public TimePeriodFormatter standard() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,92,Standard = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,92,iStandard = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,118,ublic DurationFormatter alternate() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,118,public TimePeriodFormatter alternate() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,120,Alternate = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,120,iAlternate = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,140,ublic DurationFormatter alternateExtended() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,140,public TimePeriodFormatter alternateExtended() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,142,AlternateExtended = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,142,iAlternateExtended = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,166,ublic DurationFormatter alternateWithWeeks() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,166,public TimePeriodFormatter alternateWithWeeks() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,168,AlternateWithWeeks = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,168,iAlternateWithWeeks = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,189,ublic DurationFormatter alternateExtendedWithWeeks() {
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,189,public TimePeriodFormatter alternateExtendedWithWeeks() {
False,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,191,AlternateExtendedWihWeeks = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODurationFormat.java,JodaTime/src/java/org/joda/time/format/ISOTimePeriodFormat.java,191,iAlternateExtendedWihWeeks = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,59, DurationFormat provides basic printing and parsing capabilities for
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,59,* TimePeriodFormat provides basic printing and parsing capabilities for
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,62," DurationFormat is thread-safe and immutable, and the formatters it returns"
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,62,"* TimePeriodFormat is thread-safe and immutable, and the formatters it returns"
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,67, @see ISODurationFormat
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,68, @see DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,67,* @see ISOTimePeriodFormat
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,68,* @see TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,70,ublic class DurationFormat {
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,70,public class TimePeriodFormat {
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,72,rivate static final DurationFormat INSTANCE = new DurationFormat();
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,72,private static final TimePeriodFormat INSTANCE = new TimePeriodFormat();
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,79,ublic static DurationFormat getInstance() {
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,79,public static TimePeriodFormat getInstance() {
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,89,ublic static DurationFormat getInstance(Locale locale) {
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,89,public static TimePeriodFormat getInstance(Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,93,rivate final DurationFormatter iDefault;
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,93,private final TimePeriodFormatter iDefault;
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,95,rivate DurationFormat() {
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,96,Default = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,95,private TimePeriodFormat() {
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,96,iDefault = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,124, Returns the default DurationFormatter.
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,124,* Returns the default TimePeriodFormatter.
False,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,126,ublic DurationFormatter getDefault() {
True,JodaTime/src/java/org/joda/time/format/DurationFormat.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormat.java,126,public TimePeriodFormatter getDefault() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatter.java,65,"ublic interface DurationFormatter extends DurationPrinter, DurationParser {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatter.java,65,"public interface TimePeriodFormatter extends TimePeriodPrinter, TimePeriodParser {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,62,mport org.joda.time.ReadWritableDuration;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,63,mport org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,62,import org.joda.time.ReadWritableTimePeriod;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,63,import org.joda.time.ReadableTimePeriod;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,66, DurationFormatterBuilder is used for constructing {@link DurationFormatter}s.
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,67, DurationFormatters are built by appending specific fields and separators.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,66,* TimePeriodFormatterBuilder is used for constructing {@link TimePeriodFormatter}s.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,67,* TimePeriodFormatters are built by appending specific fields and separators.
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,74, DurationFormatter yearsAndMonths = new DurationFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,74,* TimePeriodFormatter yearsAndMonths = new TimePeriodFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,85," DurationFormatterBuilder itself is mutable and not thread-safe, but the"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,85,"* TimePeriodFormatterBuilder itself is mutable and not thread-safe, but the"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,88, @see DurationFormat
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,88,* @see TimePeriodFormat
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,91,ublic class DurationFormatterBuilder {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,91,public class TimePeriodFormatterBuilder {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,105,/ List of DurationFormatters used to build a final formatter.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,105,// List of TimePeriodFormatters used to build a final formatter.
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,108,/ List of DurationFormatters used to build an alternate formatter. The
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,108,// List of TimePeriodFormatters used to build an alternate formatter. The
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,112,ublic DurationFormatterBuilder() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,112,public TimePeriodFormatterBuilder() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,117, Converts to a DurationPrinter that prints using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,117,* Converts to a TimePeriodPrinter that prints using all the appended
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,121,ublic DurationPrinter toPrinter() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,121,public TimePeriodPrinter toPrinter() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,126, Converts to a DurationParser that parses using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,126,* Converts to a TimePeriodParser that parses using all the appended
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,130,ublic DurationParser toParser() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,130,public TimePeriodParser toParser() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,135, Converts to a DurationFormatter that formats using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,135,* Converts to a TimePeriodFormatter that formats using all the appended
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,139,ublic DurationFormatter toFormatter() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,140,urationFormatter formatter = toFormatter(iFormatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,139,public TimePeriodFormatter toFormatter() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,140,TimePeriodFormatter formatter = toFormatter(iFormatters);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,156,rivate static DurationFormatter toFormatter(List formatters) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,156,private static TimePeriodFormatter toFormatter(List formatters) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,159,urationFormatter before = (DurationFormatter) formatters.get(0);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,159,TimePeriodFormatter before = (TimePeriodFormatter) formatters.get(0);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,196, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,196,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,198,ublic DurationFormatterBuilder append(DurationFormatter formatter)
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,198,public TimePeriodFormatterBuilder append(TimePeriodFormatter formatter)
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,213, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,213,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,216,ublic DurationFormatterBuilder appendLiteral(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,216,public TimePeriodFormatterBuilder appendLiteral(String text) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,232, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,232,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,234,ublic DurationFormatterBuilder minimumPrintedDigits(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,234,public TimePeriodFormatterBuilder minimumPrintedDigits(int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,243, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,243,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,245,ublic DurationFormatterBuilder maximumParsedDigits(int maxDigits) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,245,public TimePeriodFormatterBuilder maximumParsedDigits(int maxDigits) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,253, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,253,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,255,ublic DurationFormatterBuilder rejectSignedValues(boolean v) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,255,public TimePeriodFormatterBuilder rejectSignedValues(boolean v) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,267, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,267,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,271,ublic DurationFormatterBuilder printZeroRarely() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,271,public TimePeriodFormatterBuilder printZeroRarely() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,280, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,280,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,282,ublic DurationFormatterBuilder printZeroIfSupported() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,282,public TimePeriodFormatterBuilder printZeroIfSupported() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,292, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,292,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,294,ublic DurationFormatterBuilder printZeroAlways() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,294,public TimePeriodFormatterBuilder printZeroAlways() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,304, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,304,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,307,ublic DurationFormatterBuilder appendPrefix(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,307,public TimePeriodFormatterBuilder appendPrefix(String text) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,323, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,323,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,326,"ublic DurationFormatterBuilder appendPrefix(String singularText,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,326,"public TimePeriodFormatterBuilder appendPrefix(String singularText,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,339, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,339,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,342,rivate DurationFormatterBuilder appendPrefix(DurationFieldAffix prefix) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,342,private TimePeriodFormatterBuilder appendPrefix(DurationFieldAffix prefix) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,356, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,356,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,358,ublic DurationFormatterBuilder appendYears() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,358,public TimePeriodFormatterBuilder appendYears() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,366, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,366,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,368,ublic DurationFormatterBuilder appendMonths() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,368,public TimePeriodFormatterBuilder appendMonths() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,376, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,376,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,378,ublic DurationFormatterBuilder appendWeeks() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,378,public TimePeriodFormatterBuilder appendWeeks() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,386, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,386,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,388,ublic DurationFormatterBuilder appendDays() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,388,public TimePeriodFormatterBuilder appendDays() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,396, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,396,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,398,ublic DurationFormatterBuilder appendHours() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,398,public TimePeriodFormatterBuilder appendHours() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,406, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,406,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,408,ublic DurationFormatterBuilder appendMinutes() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,408,public TimePeriodFormatterBuilder appendMinutes() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,416, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,416,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,418,ublic DurationFormatterBuilder appendSeconds() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,418,public TimePeriodFormatterBuilder appendSeconds() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,426, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,426,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,428,ublic DurationFormatterBuilder appendMillis() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,428,public TimePeriodFormatterBuilder appendMillis() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,436, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,436,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,438,ublic DurationFormatterBuilder appendMillis3Digit() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,438,public TimePeriodFormatterBuilder appendMillis3Digit() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,462, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,462,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,466,ublic DurationFormatterBuilder appendSuffix(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,466,public TimePeriodFormatterBuilder appendSuffix(String text) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,482, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,482,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,486,"ublic DurationFormatterBuilder appendSuffix(String singularText,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,486,"public TimePeriodFormatterBuilder appendSuffix(String singularText,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,499, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,499,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,503,rivate DurationFormatterBuilder appendSuffix(DurationFieldAffix suffix) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,503,private TimePeriodFormatterBuilder appendSuffix(DurationFieldAffix suffix) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,534, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,534,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,536,ublic DurationFormatterBuilder appendSeparator(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,536,public TimePeriodFormatterBuilder appendSeparator(String text) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,552, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,552,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,554,"ublic DurationFormatterBuilder appendSeparator(String text,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,554,"public TimePeriodFormatterBuilder appendSeparator(String text,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,584,urationFormatter composite = createComposite(formatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,584,TimePeriodFormatter composite = createComposite(formatters);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,606, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,606,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,609,ublic DurationFormatterBuilder favorLastFieldForZero() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,609,public TimePeriodFormatterBuilder favorLastFieldForZero() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,623, @return this DurationFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,623,* @return this TimePeriodFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,626,ublic DurationFormatterBuilder favorFirstFieldForZero() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,626,public TimePeriodFormatterBuilder favorFirstFieldForZero() {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,638,rivate static DurationFormatter createComposite(List formatters) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,638,private static TimePeriodFormatter createComposite(List formatters) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,640,eturn (DurationFormatter)formatters.get(0);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,640,return (TimePeriodFormatter)formatters.get(0);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,820,rivate static final class FieldFormatter extends AbstractDurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,821,mplements DurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,820,private static final class FieldFormatter extends AbstractTimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,821,implements TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,868,ublic int countFieldsToPrint(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,869,f (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(duration) >= 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,868,public int countFieldsToPrint(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,869,if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) >= 0) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,875,"ublic int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,876,eturn stopAt <= 0 ? 0 : countFieldsToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,875,"public int countFieldsToPrint(ReadableTimePeriod period, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,876,return stopAt <= 0 ? 0 : countFieldsToPrint(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,879,ublic int calculatePrintedLength(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,880,ong valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,879,public int calculatePrintedLength(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,880,long valueLong = getFieldValue(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,905,"ublic void printTo(StringBuffer buf, ReadableDuration duration) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,906,ong valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,905,"public void printTo(StringBuffer buf, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,906,long valueLong = getFieldValue(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,927,"ublic void printTo(Writer out, ReadableDuration duration) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,928,ong valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,927,"public void printTo(Writer out, ReadableTimePeriod period) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,928,long valueLong = getFieldValue(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,949,"ublic int parseInto(ReadWritableDuration duration,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,949,"public int parseInto(ReadWritableTimePeriod period,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,996,f (!mustParse && !isSupported(duration.getDurationType())) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,996,if (!mustParse && !isSupported(period.getDurationType())) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1056,"etFieldValue(duration, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1056,"setFieldValue(period, value);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1069,ong getFieldValue(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1069,long getFieldValue(ReadableTimePeriod period) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1074,ype = duration.getDurationType();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1074,type = period.getDurationType();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1086,alue = duration.getYears();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1086,value = period.getYears();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1092,alue = duration.getMonths();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1092,value = period.getMonths();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1098,alue = duration.getWeeks();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1098,value = period.getWeeks();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1104,alue = duration.getDays();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1104,value = period.getDays();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1110,alue = duration.getHours();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1110,value = period.getHours();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1116,alue = duration.getMinutes();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1116,value = period.getMinutes();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1122,alue = duration.getSeconds();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1122,value = period.getSeconds();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1128,alue = duration.getMillis();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1128,value = period.getMillis();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1162,"oid setFieldValue(ReadWritableDuration duration, int value) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1162,"void setFieldValue(ReadWritableTimePeriod period, int value) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1167,uration.setYears(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1167,period.setYears(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1170,uration.setMonths(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1170,period.setMonths(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1173,uration.setWeeks(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1173,period.setWeeks(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1176,uration.setDays(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1176,period.setDays(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1179,uration.setHours(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1179,period.setHours(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1182,uration.setMinutes(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1182,period.setMinutes(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1185,uration.setSeconds(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1185,period.setSeconds(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1188,uration.setMillis(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1188,period.setMillis(value);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1198,rivate static final class Literal extends AbstractDurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1199,mplements DurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1198,private static final class Literal extends AbstractTimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1199,implements TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1207,"ublic int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1207,"public int countFieldsToPrint(ReadableTimePeriod period, int stopAt) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1211,ublic int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1211,public int calculatePrintedLength(ReadableTimePeriod period) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1215,"ublic void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1215,"public void printTo(StringBuffer buf, ReadableTimePeriod period) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1219,"ublic void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1219,"public void printTo(Writer out, ReadableTimePeriod period) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1223,"ublic int parseInto(ReadWritableDuration duration,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1224,"tring durationStr, int position) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1225,"f (durationStr.regionMatches(true, position, iText, 0, iText.length())) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1223,"public int parseInto(ReadWritableTimePeriod period,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1224,"String periodStr, int position) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1225,"if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1232,rivate static final class Separator extends AbstractDurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1233,mplements DurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1232,private static final class Separator extends AbstractTimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1233,implements TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1238,rivate final DurationFormatter iBefore;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1239,rivate final DurationFormatter iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1238,private final TimePeriodFormatter iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1239,private final TimePeriodFormatter iAfter;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1246,"urationFormatter before, DurationFormatter after) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1246,"TimePeriodFormatter before, TimePeriodFormatter after) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1253,"ublic int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1254,"nt sum = iBefore.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1253,"public int countFieldsToPrint(ReadableTimePeriod period, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1254,"int sum = iBefore.countFieldsToPrint(period, stopAt);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1256,"um += iAfter.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1256,"sum += iAfter.countFieldsToPrint(period, stopAt);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1261,ublic int calculatePrintedLength(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1262,nt sum = iBefore.calculatePrintedLength(duration)
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1263, iAfter.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1261,public int calculatePrintedLength(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1262,int sum = iBefore.calculatePrintedLength(period)
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1263,+ iAfter.calculatePrintedLength(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1265,"f (iBefore.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1266,"nt afterCount = iAfter.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1265,"if (iBefore.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1266,"int afterCount = iAfter.countFieldsToPrint(period, 2);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1275,"ublic void printTo(StringBuffer buf, ReadableDuration duration) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1276,urationPrinter before = iBefore;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1277,urationPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1275,"public void printTo(StringBuffer buf, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1276,TimePeriodPrinter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1277,TimePeriodPrinter after = iAfter;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1279,"efore.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1279,"before.printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1281,"f (before.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1282,"nt afterCount = after.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1281,"if (before.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1282,"int afterCount = after.countFieldsToPrint(period, 2);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1288,"fter.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1288,"after.printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1291,"ublic void printTo(Writer out, ReadableDuration duration) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1292,urationPrinter before = iBefore;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1293,urationPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1291,"public void printTo(Writer out, ReadableTimePeriod period) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1292,TimePeriodPrinter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1293,TimePeriodPrinter after = iAfter;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1295,"efore.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1295,"before.printTo(out, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1297,"f (before.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1298,"nt afterCount = after.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1297,"if (before.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1298,"int afterCount = after.countFieldsToPrint(period, 2);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1304,"fter.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1304,"after.printTo(out, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1307,"ublic int parseInto(ReadWritableDuration duration,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1308,"tring durationStr, int position) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1307,"public int parseInto(ReadWritableTimePeriod period,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1308,"String periodStr, int position) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1311,"osition = iBefore.parseInto(duration, durationStr, position);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1311,"position = iBefore.parseInto(period, periodStr, position);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1320,"f (durationStr.regionMatches(true, position, iText, 0, iText.length())) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1320,"if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1322, else if (iText != iFinalText && durationStr.regionMatches
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1322,} else if (iText != iFinalText && periodStr.regionMatches
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1328,"eturn iAfter.parseInto(duration, durationStr, position);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1328,"return iAfter.parseInto(period, periodStr, position);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1335,"eparator finish(DurationFormatter before, DurationFormatter after) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1335,"Separator finish(TimePeriodFormatter before, TimePeriodFormatter after) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1340,rivate static final class Composite extends AbstractDurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1341,mplements DurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1340,private static final class Composite extends AbstractTimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1341,implements TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1343,rivate final DurationFormatter[] iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1343,private final TimePeriodFormatter[] iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1346,Formatters = (DurationFormatter[])formatters.toArray
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1347,new DurationFormatter[formatters.size()]);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1346,iFormatters = (TimePeriodFormatter[])formatters.toArray
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1347,(new TimePeriodFormatter[formatters.size()]);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1350,"ublic int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1350,"public int countFieldsToPrint(ReadableTimePeriod period, int stopAt) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1352,urationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1352,TimePeriodPrinter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1354,um += printers[i].countFieldsToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1354,sum += printers[i].countFieldsToPrint(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1359,ublic int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1359,public int calculatePrintedLength(ReadableTimePeriod period) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1361,urationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1361,TimePeriodPrinter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1363,um += printers[i].calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1363,sum += printers[i].calculatePrintedLength(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1368,"ublic void printTo(StringBuffer buf, ReadableDuration duration) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1369,urationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1368,"public void printTo(StringBuffer buf, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1369,TimePeriodPrinter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1372,"rinters[i].printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1372,"printers[i].printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1376,"ublic void printTo(Writer out, ReadableDuration duration) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1377,urationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1376,"public void printTo(Writer out, ReadableTimePeriod period) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1377,TimePeriodPrinter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1380,"rinters[i].printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1380,"printers[i].printTo(out, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1384,"ublic int parseInto(ReadWritableDuration duration,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1385,"tring durationStr, int position) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1386,urationParser[] parsers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1384,"public int parseInto(ReadWritableTimePeriod period,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1385,"String periodStr, int position) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1386,TimePeriodParser[] parsers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1394,"osition = parsers[i].parseInto(duration, durationStr, position);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1394,"position = parsers[i].parseInto(period, periodStr, position);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1400,rivate static final class AlternateSelector extends AbstractDurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1401,mplements DurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1400,private static final class AlternateSelector extends AbstractTimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1401,implements TimePeriodFormatter
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1403,rivate final DurationFormatter iPrimaryFormatter;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1404,rivate final DurationPrinter[] iAlternatePrinters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1403,private final TimePeriodFormatter iPrimaryFormatter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1404,private final TimePeriodPrinter[] iAlternatePrinters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1407,"lternateSelector(DurationFormatter primaryFormatter,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1407,"AlternateSelector(TimePeriodFormatter primaryFormatter,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1411,AlternatePrinters = (DurationPrinter[])alternatePrinters.toArray
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1412,new DurationPrinter[alternatePrinters.size()]);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1411,iAlternatePrinters = (TimePeriodPrinter[])alternatePrinters.toArray
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1412,(new TimePeriodPrinter[alternatePrinters.size()]);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1416,"ublic int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1417,"nt count = iPrimaryFormatter.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1416,"public int countFieldsToPrint(ReadableTimePeriod period, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1417,"int count = iPrimaryFormatter.countFieldsToPrint(period, stopAt);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1419,f (chooseFieldToPrint(duration) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1419,if (chooseFieldToPrint(period) != null) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1426,ublic int calculatePrintedLength(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1427,"f (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1428,eturn iPrimaryFormatter.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1426,public int calculatePrintedLength(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1427,"if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1428,return iPrimaryFormatter.calculatePrintedLength(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1431,bject chosenOne = chooseFieldToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1431,Object chosenOne = chooseFieldToPrint(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1434,urationPrinter[] printers = iAlternatePrinters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1434,TimePeriodPrinter[] printers = iAlternatePrinters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1436,urationPrinter dp = printers[i];
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1436,TimePeriodPrinter dp = printers[i];
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1438,um += dp.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1438,sum += dp.calculatePrintedLength(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1444,"ublic void printTo(StringBuffer buf, ReadableDuration duration) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1445,"f (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1446,"PrimaryFormatter.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1444,"public void printTo(StringBuffer buf, ReadableTimePeriod period) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1445,"if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1446,"iPrimaryFormatter.printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1450,bject chosenOne = chooseFieldToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1450,Object chosenOne = chooseFieldToPrint(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1452,urationPrinter[] printers = iAlternatePrinters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1452,TimePeriodPrinter[] printers = iAlternatePrinters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1455,urationPrinter dp = printers[i];
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1455,TimePeriodPrinter dp = printers[i];
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1457,"p.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1457,"dp.printTo(buf, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1462,"ublic void printTo(Writer out, ReadableDuration duration) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1463,"f (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1464,"PrimaryFormatter.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1462,"public void printTo(Writer out, ReadableTimePeriod period) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1463,"if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1464,"iPrimaryFormatter.printTo(out, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1468,bject chosenOne = chooseFieldToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1468,Object chosenOne = chooseFieldToPrint(period);
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1470,urationPrinter[] printers = iAlternatePrinters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1470,TimePeriodPrinter[] printers = iAlternatePrinters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1473,urationPrinter dp = printers[i];
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1473,TimePeriodPrinter dp = printers[i];
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1475,"p.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1475,"dp.printTo(out, period);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1480,"ublic int parseInto(ReadWritableDuration duration,"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1481,"tring durationStr, int position) {"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1482,"eturn iPrimaryFormatter.parseInto(duration, durationStr, position);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1480,"public int parseInto(ReadWritableTimePeriod period,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1481,"String periodStr, int position) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1482,"return iPrimaryFormatter.parseInto(period, periodStr, position);"
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1485,rivate FieldFormatter chooseFieldToPrint(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1486,urationType type = duration.getDurationType();
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1487,urationPrinter[] printers = iAlternatePrinters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1485,private FieldFormatter chooseFieldToPrint(ReadableTimePeriod period) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1486,DurationType type = period.getDurationType();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1487,TimePeriodPrinter[] printers = iAlternatePrinters;
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1491,urationPrinter dp = printers[i];
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1491,TimePeriodPrinter dp = printers[i];
False,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1505,urationPrinter dp = printers[i];
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/TimePeriodFormatterBuilder.java,1505,TimePeriodPrinter dp = printers[i];
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,56,mport org.joda.time.Duration;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,56,import org.joda.time.TimePeriod;
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,58,mport org.joda.time.MutableDuration;
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,59,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,58,import org.joda.time.MutableTimePeriod;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,59,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,62, Defines an interface for parsing textual representations of durations.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,62,* Defines an interface for parsing textual representations of time periods.
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,65, @see DurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,66, @see DurationFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,67, @see DurationFormat
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,65,* @see TimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,66,* @see TimePeriodFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,67,* @see TimePeriodFormat
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,70,ublic interface DurationParser {
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,70,public interface TimePeriodParser {
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,74," Parses a duration from the given text, at the given position, saving the"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,73,"* Parses a period from the given text, at the given position, saving the"
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,79," If it fails, the return value is negative, but the duration may still be"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,78,"* If it fails, the return value is negative, but the period may still be"
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,83, @param duration  a duration that will be modified
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,84, @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,82,* @param period  a period that will be modified
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,83,* @param periodStr  text to parse
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,90,"nt parseInto(ReadWritableDuration duration, String durationStr, int position);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,89,"int parseInto(ReadWritableTimePeriod period, String periodStr, int position);"
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,93," Parses a duration from the given text, returning a new Duration."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,92,"* Parses a period from the given text, returning a new TimePeriod."
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,96, @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,95,* @param periodStr  text to parse
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,100,"uration parseDuration(DurationType type, String durationStr);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,99,"TimePeriod parseTimePeriod(DurationType type, String periodStr);"
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,103," Parses a duration from the given text, returning a new MutableDuration."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,102,"* Parses a period from the given text, returning a new MutableTimePeriod."
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,106, @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,105,* @param periodStr  text to parse
False,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,110,"utableDuration parseMutableDuration(DurationType type, String durationStr);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/TimePeriodParser.java,109,"MutableTimePeriod parseMutableTimePeriod(DurationType type, String periodStr);"
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,59,mport org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,59,import org.joda.time.ReadableTimePeriod;
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,62, Defines an interface for creating textual representations of durations.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,62,* Defines an interface for creating textual representations of time periods.
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,65, @see DurationFormatter
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,66, @see DurationFormatterBuilder
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,67, @see DurationFormat
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,65,* @see TimePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,66,* @see TimePeriodFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,67,* @see TimePeriodFormat
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,70,ublic interface DurationPrinter {
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,70,public interface TimePeriodPrinter {
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,76, @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,76,* @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,79,nt countFieldsToPrint(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,79,int countFieldsToPrint(ReadableTimePeriod period);
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,85, @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,85,* @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,89,"nt countFieldsToPrint(ReadableDuration duration, int stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,89,"int countFieldsToPrint(ReadableTimePeriod period, int stopAt);"
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,94, @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,94,* @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,97,nt calculatePrintedLength(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,97,int calculatePrintedLength(ReadableTimePeriod period);
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,101, Prints a ReadableDuration to a StringBuffer.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,101,* Prints a ReadableTimePeriod to a StringBuffer.
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,103, @param buf  the formatted duration is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,104, @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,103,* @param buf  the formatted period is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,104,* @param period  the period to format
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,106,"oid printTo(StringBuffer buf, ReadableDuration duration);"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,106,"void printTo(StringBuffer buf, ReadableTimePeriod period);"
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,109, Prints a ReadableDuration to a Writer.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,109,* Prints a ReadableTimePeriod to a Writer.
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,111, @param out  the formatted duration is written out
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,112, @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,111,* @param out  the formatted period is written out
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,112,* @param period  the period to format
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,114,"oid printTo(Writer out, ReadableDuration duration) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,114,"void printTo(Writer out, ReadableTimePeriod period) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,117, Prints a ReadableDuration to a new String.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,117,* Prints a ReadableTimePeriod to a new String.
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,119, @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,119,* @param period  the period to format
False,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,122,tring print(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/TimePeriodPrinter.java,122,String print(ReadableTimePeriod period);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,150,uration test = new Duration(0L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,150,TimePeriod test = new TimePeriod(0L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,155,uration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,155,TimePeriod test = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,157,"est = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,157,"test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,162,uration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,162,TimePeriod test = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,167,uration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,167,TimePeriod test = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,169,"est = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,169,"test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,174,uration test = new Duration(0L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,174,TimePeriod test = new TimePeriod(0L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,186,uration test1 = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,187,uration test2 = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,186,TimePeriod test1 = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,187,TimePeriod test2 = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,196,uration test3 = new Duration(321L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,196,TimePeriod test3 = new TimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,206,"ssertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,206,"assertEquals(false, test1.equals(new TimePeriod(123L, DurationType.getDayHourType())));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,209,lass MockDuration extends AbstractDuration {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,209,class MockDuration extends AbstractTimePeriod {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,219,uration test1 = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,220,uration test1a = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,219,TimePeriod test1 = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,220,TimePeriod test1a = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,226,uration test2 = new Duration(321L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,226,TimePeriod test2 = new TimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,230,"uration test3 = new Duration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,230,"TimePeriod test3 = new TimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,247,"est1.compareTo(new Duration(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,247,"test1.compareTo(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,253,uration test1 = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,254,uration test1a = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,253,TimePeriod test1 = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,254,TimePeriod test1a = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,260,uration test2 = new Duration(321L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,260,TimePeriod test2 = new TimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,264,"uration test3 = new Duration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,264,"TimePeriod test3 = new TimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,272,"ssertEquals(true, new Duration(0L).isEqual(null));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,272,"assertEquals(true, new TimePeriod(0L).isEqual(null));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,276,uration test1 = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,277,uration test1a = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,276,TimePeriod test1 = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,277,TimePeriod test1a = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,283,uration test2 = new Duration(321L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,283,TimePeriod test2 = new TimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,287,"uration test3 = new Duration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,287,"TimePeriod test3 = new TimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,295,"ssertEquals(false, new Duration(0L).isShorterThan(null));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,295,"assertEquals(false, new TimePeriod(0L).isShorterThan(null));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,299,uration test1 = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,300,uration test1a = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,299,TimePeriod test1 = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,300,TimePeriod test1a = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,306,uration test2 = new Duration(321L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,306,TimePeriod test2 = new TimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,310,"uration test3 = new Duration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,310,"TimePeriod test3 = new TimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,318,"ssertEquals(false, new Duration(0L).isLongerThan(null));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,318,"assertEquals(false, new TimePeriod(0L).isLongerThan(null));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,323,uration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,323,TimePeriod test = new TimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,333,uration result = (Duration) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,333,TimePeriod result = (TimePeriod) ois.readObject();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,383,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,383,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,390,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,390,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,397,uration test = new Duration(100L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,397,TimePeriod test = new TimePeriod(100L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,414,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,414,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,430,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,430,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,446,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,446,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,463,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,463,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,479,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,479,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,495,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,495,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,511,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,511,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,528,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,528,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,545,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,545,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,552,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,552,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,561,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,561,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,564,"est = new Duration(0, 0, 0, 0, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,564,"test = new TimePeriod(0, 0, 0, 0, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,567,est = new Duration(12345L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,567,test = new TimePeriod(12345L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,573,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,574,uration result = test.toDuration();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,573,TimePeriod test = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,574,TimePeriod result = test.toDuration();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,579,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,580,utableDuration result = test.toMutableDuration();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,579,TimePeriod test = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,580,MutableTimePeriod result = test.toMutableDuration();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,588,"ssertEquals(0L, Duration.ZERO.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,589,"ssertEquals(DurationType.getAllType(), Duration.ZERO.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,588,"assertEquals(0L, TimePeriod.ZERO.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,589,"assertEquals(DurationType.getAllType(), TimePeriod.ZERO.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,594,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,595,uration result = test.withDurationTypeUsingTotalMillis(DurationType.getAllType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,594,TimePeriod test = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,595,TimePeriod result = test.withDurationTypeUsingTotalMillis(DurationType.getAllType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,600,uration test = new Duration(3123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,601,uration result = test.withDurationTypeUsingTotalMillis(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,600,TimePeriod test = new TimePeriod(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,601,TimePeriod result = test.withDurationTypeUsingTotalMillis(DurationType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,609,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,609,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,617,uration test = new Duration(3123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,618,uration result = test.withDurationTypeUsingTotalMillis(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,617,TimePeriod test = new TimePeriod(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,618,TimePeriod result = test.withDurationTypeUsingTotalMillis(null);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,627,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,628,uration result = test.withDurationTypeUsingFields(DurationType.getAllType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,627,TimePeriod test = new TimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,628,TimePeriod result = test.withDurationTypeUsingFields(DurationType.getAllType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,633,uration test = new Duration(3123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,634,uration result = test.withDurationTypeUsingFields(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,633,TimePeriod test = new TimePeriod(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,634,TimePeriod result = test.withDurationTypeUsingFields(DurationType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,642,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,642,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,650,uration test = new Duration(3123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,651,uration result = test.withDurationTypeUsingFields(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,650,TimePeriod test = new TimePeriod(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,651,TimePeriod result = test.withDurationTypeUsingFields(null);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,659,"uration test = new Duration(1, 2, 0, 4, 5, 6, 7, 8, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,660,uration result = test.withDurationTypeUsingFields(DurationType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,659,"TimePeriod test = new TimePeriod(1, 2, 0, 4, 5, 6, 7, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,660,TimePeriod result = test.withDurationTypeUsingFields(DurationType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,674,"uration test = new Duration(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getPreciseAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,675,uration result = test.withFieldsNormalized();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,674,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getPreciseAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,675,TimePeriod result = test.withFieldsNormalized();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,687,"uration test = new Duration(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,687,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,749,tatic class MockChangeDuration extends Duration {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,749,static class MockChangeDuration extends TimePeriod {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,140,uration test = Duration.ZERO;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,140,TimePeriod test = TimePeriod.ZERO;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,160,uration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,160,TimePeriod test = new TimePeriod(length);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,180,"uration test = new Duration(length, null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,180,"TimePeriod test = new TimePeriod(length, null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,199,"uration test = new Duration(length, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,199,"TimePeriod test = new TimePeriod(length, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,218,"uration test = new Duration(length, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,218,"TimePeriod test = new TimePeriod(length, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,237,"uration test = new Duration(length, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,237,"TimePeriod test = new TimePeriod(length, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,256,"uration test = new Duration(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,256,"TimePeriod test = new TimePeriod(5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,277,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,277,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,299,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,299,"TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,317,"uration test = new Duration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,317,"TimePeriod test = new TimePeriod(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,335,"ew Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,335,"new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,344,"uration test = new Duration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,344,"TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,361,"uration test = new Duration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,361,"TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,379,"uration test = new Duration(dt1.getMillis(), dt2.getMillis(), null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,379,"TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,396,"uration test = new Duration(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,396,"TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,413,"uration test = new Duration(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,413,"TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,431,"uration test = new Duration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,431,"TimePeriod test = new TimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,448,"uration test = new Duration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,448,"TimePeriod test = new TimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,465,"uration test = new Duration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,465,"TimePeriod test = new TimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,482,"uration test = new Duration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,482,"TimePeriod test = new TimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,499,"uration test = new Duration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,499,"TimePeriod test = new TimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,517,"uration test = new Duration(dt1, dt2, null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,517,"TimePeriod test = new TimePeriod(dt1, dt2, null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,534,"uration test = new Duration(dt1, dt2, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,534,"TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,551,"uration test = new Duration(dt1, dt2, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,551,"TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,568,"uration test = new Duration(dt1, dt2, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,568,"TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,585,"uration test = new Duration(dt1, dt2, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,585,"TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,604,"uration test = new Duration(""P1Y2M3D"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,604,"TimePeriod test = new TimePeriod(""P1Y2M3D"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,622,uration test = new Duration((Object) null);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,622,TimePeriod test = new TimePeriod((Object) null);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,637,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,637,"TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,655,"uration base = new Duration(dt1, dt2);  // AllType and precise"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,656,uration test = new Duration(base);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,655,"TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,656,TimePeriod test = new TimePeriod(base);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,675,"uration test = new Duration(""P1Y2M3D"", DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,675,"TimePeriod test = new TimePeriod(""P1Y2M3D"", DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,693,"uration test = new Duration((Object) null, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,693,"TimePeriod test = new TimePeriod((Object) null, DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,708,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,708,"TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,724,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,724,"TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,188,"uration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,188,"TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,201,"uration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,201,"TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,215,uration dur = new Duration(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,215,TimePeriod dur = new TimePeriod(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,240,"uration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,240,"TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,166,"uration d = new Duration(1, 1, 0, 1, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,166,"TimePeriod d = new TimePeriod(1, 1, 0, 1, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,188,"uration d = new Duration(1, 1, 0, 1, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,188,"TimePeriod d = new TimePeriod(1, 1, 0, 1, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,150,utableDuration test = new MutableDuration();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,150,MutableTimePeriod test = new MutableTimePeriod();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,155,utableDuration test = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,155,MutableTimePeriod test = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,157,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,157,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,162,utableDuration test = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,162,MutableTimePeriod test = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,167,utableDuration test = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,167,MutableTimePeriod test = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,169,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,169,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,174,utableDuration test = new MutableDuration();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,174,MutableTimePeriod test = new MutableTimePeriod();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,187,utableDuration test1 = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,188,utableDuration test2 = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,187,MutableTimePeriod test1 = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,188,MutableTimePeriod test2 = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,197,utableDuration test3 = new MutableDuration(321L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,197,MutableTimePeriod test3 = new MutableTimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,207,"ssertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,207,"assertEquals(false, test1.equals(new TimePeriod(123L, DurationType.getDayHourType())));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,210,lass MockMutableDuration extends AbstractDuration {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,210,class MockMutableDuration extends AbstractTimePeriod {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,220,utableDuration test1 = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,221,utableDuration test1a = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,220,MutableTimePeriod test1 = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,221,MutableTimePeriod test1a = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,227,utableDuration test2 = new MutableDuration(321L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,227,MutableTimePeriod test2 = new MutableTimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,231,"utableDuration test3 = new MutableDuration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,231,"MutableTimePeriod test3 = new MutableTimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,248,"est1.compareTo(new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,248,"test1.compareTo(new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,254,utableDuration test1 = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,255,utableDuration test1a = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,254,MutableTimePeriod test1 = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,255,MutableTimePeriod test1a = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,261,utableDuration test2 = new MutableDuration(321L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,261,MutableTimePeriod test2 = new MutableTimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,265,"utableDuration test3 = new MutableDuration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,265,"MutableTimePeriod test3 = new MutableTimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,273,"ssertEquals(true, new MutableDuration(0L).isEqual(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,273,"assertEquals(true, new MutableTimePeriod(0L).isEqual(null));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,277,utableDuration test1 = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,278,utableDuration test1a = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,277,MutableTimePeriod test1 = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,278,MutableTimePeriod test1a = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,284,utableDuration test2 = new MutableDuration(321L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,284,MutableTimePeriod test2 = new MutableTimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,288,"utableDuration test3 = new MutableDuration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,288,"MutableTimePeriod test3 = new MutableTimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,296,"ssertEquals(false, new MutableDuration(0L).isShorterThan(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,296,"assertEquals(false, new MutableTimePeriod(0L).isShorterThan(null));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,300,utableDuration test1 = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,301,utableDuration test1a = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,300,MutableTimePeriod test1 = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,301,MutableTimePeriod test1a = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,307,utableDuration test2 = new MutableDuration(321L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,307,MutableTimePeriod test2 = new MutableTimePeriod(321L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,311,"utableDuration test3 = new MutableDuration(321L, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,311,"MutableTimePeriod test3 = new MutableTimePeriod(321L, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,319,"ssertEquals(false, new MutableDuration(0L).isLongerThan(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,319,"assertEquals(false, new MutableTimePeriod(0L).isLongerThan(null));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,324,utableDuration test = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,324,MutableTimePeriod test = new MutableTimePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,334,utableDuration result = (MutableDuration) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,334,MutableTimePeriod result = (MutableTimePeriod) ois.readObject();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,352,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,352,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,368,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,368,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,384,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,384,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,391,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,391,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,398,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,398,MutableTimePeriod test = new MutableTimePeriod(100L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,415,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,415,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,431,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,431,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,447,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,447,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,464,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,464,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,480,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,480,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,496,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,496,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,512,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,512,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,529,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,529,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,546,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,546,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,553,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,553,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,562,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,562,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,565,"est = new MutableDuration(0, 0, 0, 0, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,565,"test = new MutableTimePeriod(0, 0, 0, 0, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,568,est = new MutableDuration(12345L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,568,test = new MutableTimePeriod(12345L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,574,utableDuration test = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,575,uration result = test.toDuration();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,574,MutableTimePeriod test = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,575,TimePeriod result = test.toDuration();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,582,utableDuration test = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,583,utableDuration result = test.toMutableDuration();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,582,MutableTimePeriod test = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,583,MutableTimePeriod result = test.toMutableDuration();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,591,utableDuration test = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,592,utableDuration copy = test.copy();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,591,MutableTimePeriod test = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,592,MutableTimePeriod copy = test.copy();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,600,utableDuration test = new MutableDuration(123L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,601,utableDuration copy = (MutableDuration) test.clone();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,600,MutableTimePeriod test = new MutableTimePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,601,MutableTimePeriod copy = (MutableTimePeriod) test.clone();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,140,utableDuration test = new MutableDuration();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,140,MutableTimePeriod test = new MutableTimePeriod();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,160,utableDuration test = new MutableDuration(DurationType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,160,MutableTimePeriod test = new MutableTimePeriod(DurationType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,176,utableDuration test = new MutableDuration((DurationType) null);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,176,MutableTimePeriod test = new MutableTimePeriod((DurationType) null);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,192,"utableDuration test = new MutableDuration(null, true);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,192,"MutableTimePeriod test = new MutableTimePeriod(null, true);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,212,"utableDuration test = new MutableDuration(null, false);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,212,"MutableTimePeriod test = new MutableTimePeriod(null, false);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,229,"ew MutableDuration(DurationType.getAllType(), true);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,229,"new MutableTimePeriod(DurationType.getAllType(), true);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,240,utableDuration test = new MutableDuration(length);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,240,MutableTimePeriod test = new MutableTimePeriod(length);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,261,"utableDuration test = new MutableDuration(length, null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,261,"MutableTimePeriod test = new MutableTimePeriod(length, null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,281,"utableDuration test = new MutableDuration(length, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,281,"MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,300,"utableDuration test = new MutableDuration(length, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,300,"MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,319,"utableDuration test = new MutableDuration(length, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,319,"MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,338,"utableDuration test = new MutableDuration(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,338,"MutableTimePeriod test = new MutableTimePeriod(5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,360,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,360,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,383,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,383,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,402,"utableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,402,"MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,420,"ew MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,420,"new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,429,"utableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,429,"MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,447,"utableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,447,"MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,465,"utableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,465,"MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,483,"utableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,483,"MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,500,"utableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,500,"MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,518,"utableDuration test = new MutableDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,518,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,536,"utableDuration test = new MutableDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,536,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,553,"utableDuration test = new MutableDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,553,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,570,"utableDuration test = new MutableDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,570,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,588,"utableDuration test = new MutableDuration(dt1, dt2, null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,588,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,606,"utableDuration test = new MutableDuration(dt1, dt2, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,606,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,623,"utableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,623,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,640,"utableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,640,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,657,"utableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,657,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,676,"utableDuration test = new MutableDuration(""P1Y2M3D"");"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,676,"MutableTimePeriod test = new MutableTimePeriod(""P1Y2M3D"");"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,695,utableDuration test = new MutableDuration((Object) null);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,695,MutableTimePeriod test = new MutableTimePeriod((Object) null);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,710,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,710,"MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,728,"uration base = new Duration(dt1, dt2);  // AllType and precise"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,729,utableDuration test = new MutableDuration(base);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,728,"TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,729,MutableTimePeriod test = new MutableTimePeriod(base);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,748,"utableDuration test = new MutableDuration(""P1Y2M3D"", DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,748,"MutableTimePeriod test = new MutableTimePeriod(""P1Y2M3D"", DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,767,"utableDuration test = new MutableDuration((Object) null, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,767,"MutableTimePeriod test = new MutableTimePeriod((Object) null, DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,782,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,782,"MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,798,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,798,"MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,144,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,144,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,148,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,148,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,152,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,152,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,159,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,159,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,163,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,163,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,167,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,167,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,174,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,174,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,178,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,178,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,182,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,182,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,189,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,189,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,193,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,193,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,197,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,197,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,204,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,204,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,208,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,208,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,212,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,212,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,219,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,219,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,223,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,223,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,227,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,227,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,234,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,234,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,238,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,238,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,242,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,242,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,249,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,249,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,253,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,253,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,257,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,257,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,264,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,264,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,268,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,268,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,272,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,272,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,279,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,279,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,283,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,283,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,287,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,287,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,294,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,294,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,298,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,298,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,302,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,302,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,309,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,309,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,313,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,313,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,317,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,317,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,324,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,324,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,328,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,328,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,332,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,332,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,339,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,339,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,343,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,343,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,347,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,347,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,354,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,354,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,358,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,358,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,362,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,362,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,369,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,369,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,373,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,373,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,377,"est = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,377,"test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,384,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,384,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,397,"utableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,397,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,414,"utableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,414,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,428,"utableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,428,"MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,444,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,445,"est.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,444,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,445,"test.setDuration(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,457,"utableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,457,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,459,"est.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,459,"test.setDuration(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,474,"utableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,475,"est.setDuration(new MutableDuration(0, 0, 0, 0, 0, 0, 0, 18));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,474,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,475,"test.setDuration(new MutableTimePeriod(0, 0, 0, 0, 0, 0, 0, 18));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,488,"utableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,488,"MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,490,"est.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,490,"test.setDuration(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,503,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,503,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,517,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,517,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,532,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,532,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,547,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,547,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,561,utableDuration test = new MutableDuration(DurationType.getAllType().withYearsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,561,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withYearsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,576,utableDuration test = new MutableDuration(DurationType.getAllType().withMonthsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,576,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMonthsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,591,utableDuration test = new MutableDuration(DurationType.getAllType().withWeeksRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,591,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withWeeksRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,606,utableDuration test = new MutableDuration(DurationType.getAllType().withDaysRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,606,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withDaysRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,621,utableDuration test = new MutableDuration(DurationType.getAllType().withHoursRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,621,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withHoursRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,636,utableDuration test = new MutableDuration(DurationType.getAllType().withMinutesRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,636,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMinutesRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,651,utableDuration test = new MutableDuration(DurationType.getAllType().withSecondsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,651,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withSecondsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,666,utableDuration test = new MutableDuration(DurationType.getAllType().withMillisRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,666,MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMillisRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,682,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,682,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,695,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,695,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,712,utableDuration test = new MutableDuration(DurationType.getPreciseYearWeekType());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,712,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearWeekType());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,734,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withYearsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,734,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withYearsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,753,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMonthsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,753,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMonthsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,772,utableDuration test = new MutableDuration(DurationType.getPreciseYearWeekType().withWeeksRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,772,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearWeekType().withWeeksRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,791,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withDaysRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,791,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withDaysRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,810,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withHoursRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,810,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withHoursRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,829,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMinutesRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,829,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMinutesRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,848,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withSecondsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,848,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withSecondsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,867,utableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMillisRemoved());
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,867,MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMillisRemoved());
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,882,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,882,MutableTimePeriod test = new MutableTimePeriod(100L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,896,"utableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,896,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,915,"utableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,915,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,930,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,930,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,939,utableDuration test = new MutableDuration(100L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,940,est.add(new Duration(100L));
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,939,MutableTimePeriod test = new MutableTimePeriod(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,940,test.add(new TimePeriod(100L));
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,953,"utableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,954,"est.add(new Duration(1, 0, 12, 1, 5, 6, 7, 8, DurationType.getPreciseYearWeekType()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,953,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,954,"test.add(new TimePeriod(1, 0, 12, 1, 5, 6, 7, 8, DurationType.getPreciseYearWeekType()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,966,"utableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,967,est.add(Duration.ZERO);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,966,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,967,test.add(TimePeriod.ZERO);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,980,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,980,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,982,est.add(new Duration(100L));
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,982,test.add(new TimePeriod(100L));
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,988,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,988,MutableTimePeriod test = new MutableTimePeriod(100L);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,990,"est.add(new Duration(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,990,"test.add(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,996,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,996,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1010,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1010,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1018,"utableDuration test = new MutableDuration(1, 14, 0, 36, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1018,"MutableTimePeriod test = new MutableTimePeriod(1, 14, 0, 36, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,77,mport org.joda.time.Duration;
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,77,import org.joda.time.TimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,81,mport org.joda.time.ReadWritableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,81,import org.joda.time.ReadWritableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,364, = ConverterManager.getInstance().getDurationConverter(new Duration(DurationType.getMillisType()));
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,364,c = ConverterManager.getInstance().getDurationConverter(new TimePeriod(DurationType.getMillisType()));
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,406,"ublic void setInto(ReadWritableDuration duration, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,406,"public void setInto(ReadWritableTimePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,425,"ublic void setInto(ReadWritableDuration duration, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,425,"public void setInto(ReadWritableTimePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,477,"ublic void setInto(ReadWritableDuration duration, Object object) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,477,"public void setInto(ReadWritableTimePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,66,mport org.joda.time.MutableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,66,import org.joda.time.MutableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,166,utableDuration m = new MutableDuration(DurationType.getMillisType());
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,166,MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,68,mport org.joda.time.MutableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,68,import org.joda.time.MutableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,183,utableDuration m = new MutableDuration(DurationType.getMillisType());
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,183,MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,65,mport org.joda.time.Duration;
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,65,import org.joda.time.TimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,68,mport org.joda.time.MutableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,68,import org.joda.time.MutableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,124,"ssertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(123L)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,124,"assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new TimePeriod(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,126,"eadableDurationConverter.INSTANCE.getDurationMillis(new Duration(1, 2, 0, 1, 0, 0, 0, 0));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,126,"ReadableDurationConverter.INSTANCE.getDurationMillis(new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,134,"ew Duration(123L, DurationType.getMillisType()), false));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,134,"new TimePeriod(123L, DurationType.getMillisType()), false));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,137,"ew Duration(1, 2, 0, 1, 0, 0, 0, 0), false));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,137,"new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0), false));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,144,"ssertEquals(true, ReadableDurationConverter.INSTANCE.isPrecise(new Duration(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,145,"ssertEquals(false, ReadableDurationConverter.INSTANCE.isPrecise(new Duration(1, 2, 0, 1, 0, 0, 0, 0)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,144,"assertEquals(true, ReadableDurationConverter.INSTANCE.isPrecise(new TimePeriod(123L)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,145,"assertEquals(false, ReadableDurationConverter.INSTANCE.isPrecise(new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,149,utableDuration m = new MutableDuration(DurationType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,150,"eadableDurationConverter.INSTANCE.setInto(m, new Duration(1, 2, 0, 3, 0, 0, 0, 0));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,149,MutableTimePeriod m = new MutableTimePeriod(DurationType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,150,"ReadableDurationConverter.INSTANCE.setInto(m, new TimePeriod(1, 2, 0, 3, 0, 0, 0, 0));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,67,mport org.joda.time.MutableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,67,import org.joda.time.MutableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,143,utableDuration m = new MutableDuration(DurationType.getMillisType());
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,143,MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,68,mport org.joda.time.MutableDuration;
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,68,import org.joda.time.MutableTimePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,335,utableDuration m = new MutableDuration(DurationType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,335,MutableTimePeriod m = new MutableTimePeriod(DurationType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,345, = new MutableDuration(DurationType.getYearWeekType());
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,345,m = new MutableTimePeriod(DurationType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,355," = new MutableDuration(1, 0, 1, 1, 1, 1, 1, 1, DurationType.getYearWeekType());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,355,"m = new MutableTimePeriod(1, 0, 1, 1, 1, 1, 1, 1, DurationType.getYearWeekType());"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,19,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,20,import java.util.Date;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,89,* Constructs a TimeOfDay from a <code>java.util.Calendar</code>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,90,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,91,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,92,* Each field is queried from the Calendar and assigned to the TimeOfDay.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,93,* This is useful to ensure that the field values are the same in the
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,94,"* created TimeOfDay no matter what the time zone is. For example, if"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,95,"* the Calendar states that the time is 04:29, then the created TimeOfDay"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,96,* will always have the time 04:29 irrespective of time zone issues.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,97,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,98,* This factory method ignores the type of the calendar and always
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,99,* creates a TimeOfDay with ISO chronology.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,101,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,102,* @return the created TimeOfDay
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,103,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,104,* @throws IllegalArgumentException if the time is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,105,* @since 1.2
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,107,public static TimeOfDay fromCalendarFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,108,if (calendar == null) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,109,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,111,return new TimeOfDay(
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,112,"calendar.get(Calendar.HOUR_OF_DAY),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,113,"calendar.get(Calendar.MINUTE),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,114,"calendar.get(Calendar.SECOND),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,115,calendar.get(Calendar.MILLISECOND)
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,120,* Constructs a TimeOfDay from a <code>java.util.Date</code>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,121,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,122,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,123,* Each field is queried from the Date and assigned to the TimeOfDay.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,124,* This is useful to ensure that the field values are the same in the
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,125,"* created TimeOfDay no matter what the time zone is. For example, if"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,126,"* the Calendar states that the time is 04:29, then the created TimeOfDay"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,127,* will always have the time 04:29 irrespective of time zone issues.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,128,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,129,* This factory method always creates a TimeOfDay with ISO chronology.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,131,* @param date  the Date to extract fields from
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,132,* @return the created TimeOfDay
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,133,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,134,* @throws IllegalArgumentException if the date is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,135,* @since 1.2
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,137,public static TimeOfDay fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,138,if (date == null) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,139,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,141,return new TimeOfDay(
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,142,"date.getHours(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,143,"date.getMinutes(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,144,"date.getSeconds(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,145,(int) (date.getTime() % 1000)
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,19,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,20,import java.util.Date;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,76,/ Constructors
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,80,* Constructs a YearMonthDay from a <code>java.util.Calendar</code>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,81,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,82,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,83,* Each field is queried from the Calendar and assigned to the YearMonthDay.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,84,"* This is useful if you have been using the Calendar as a local date,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,85,* ignoing the zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,86,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,87,* This factory method ignores the type of the calendar and always
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,88,* creates a YearMonthDay with ISO chronology. It is expected that you
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,89,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,90,* this is not validated.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,92,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,93,* @return the created YearMonthDay
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,94,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,95,* @throws IllegalArgumentException if the date is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,96,* @since 1.2
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,98,public static YearMonthDay fromCalendarFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,99,if (calendar == null) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,100,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,102,return new YearMonthDay(
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,103,"calendar.get(Calendar.YEAR),"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,104,"calendar.get(Calendar.MONTH) + 1,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,105,calendar.get(Calendar.DAY_OF_MONTH)
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,110,* Constructs a YearMonthDay from a <code>java.util.Date</code>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,111,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,112,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,113,* Each field is queried from the Date and assigned to the YearMonthDay.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,114,"* This is useful if you have been using the Date as a local date,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,115,* ignoing the zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,116,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,117,* This factory method always creates a YearMonthDay with ISO chronology.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,119,* @param date  the Date to extract fields from
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,120,* @return the created YearMonthDay
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,121,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,122,* @throws IllegalArgumentException if the date is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,123,* @since 1.2
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,125,public static YearMonthDay fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,126,if (date == null) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,127,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,129,return new YearMonthDay(
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,130,"date.getYear() + 1900,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,131,"date.getMonth() + 1,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,132,date.getDate()
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,103,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,104,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,105,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,106,"TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,107,"assertEquals(expected, TimeOfDay.fromCalendarFields(cal));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,108,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,109,TimeOfDay.fromCalendarFields(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,110,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,111,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,115,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,116,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,117,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,118,"TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,119,"assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,120,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,121,TimeOfDay.fromDateFields(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,122,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,123,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,85,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,86,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,87,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,88,"YearMonthDay expected = new YearMonthDay(1970, 2, 3);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,89,"assertEquals(expected, YearMonthDay.fromCalendarFields(cal));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,90,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,91,YearMonthDay.fromCalendarFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,92,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,93,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,97,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,98,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,99,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,100,"YearMonthDay expected = new YearMonthDay(1970, 2, 3);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,101,"assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,102,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,103,YearMonthDay.fromDateFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,104,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,105,} catch (IllegalArgumentException ex) {}

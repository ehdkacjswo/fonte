is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,62,import org.joda.time.property.DateOnlyFieldProperty;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,65,* DateOnly is the basic implementation of a date only class supporting
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,66,* chronologies. It holds the date as milliseconds from the Java epoch of
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,67,* 1970-01-01. The time component and time zone is fixed at T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,68,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,69,* This class uses a Chronology internally. The Chronology determines how the
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,70,* millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,71,* The default Chronology is <code>ISOChronology</code> which is the agreed
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,72,* international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,81, DateOnly is the basic implementation of a date only class supporting
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,82, chronologies. It holds the date as milliseconds from the Java epoch of
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,83, 1970-01-01. The time component and time zone is fixed at T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,96,* @see MutableDateOnly
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,223,* Gets a copy of this instant with different millis.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,224,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,225,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,226,"* Only the millis will change, the chronology is kept."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,227,* Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,229,"* @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,230,* @return a copy of this instant with different millis
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232,public ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,233,newMillis = resetUnsupportedFields(newMillis);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,234,"return newMillis == getMillis() ? this : new DateOnly(newMillis, getChronology());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,238,* Gets a copy of this instant with a different chronology.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,239,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,240,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,241,"* Only the chronology will change, the millis are kept."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,242,* Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,244,* @param newChronology  the new chronology
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,245,* @return a copy of this instant with a different chronology
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,246,* @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,248,public ReadableInstant toCopy(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,249,if (newChronology == null) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,250,"throw new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,252,newChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,253,"return newChronology == getChronology() ? this : new DateOnly(getMillis(), newChronology);"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,235,ublic final boolean isMatchingType(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,236,eturn instant instanceof DateOnly;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,344,/ TODO: DateTimeFieldProperty cannot be constructed with anything but
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,345,/ DateTime.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,356,ublic final DateTimeFieldProperty dayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,357,"eturn new DateTimeFieldProperty(this, getChronology().dayOfWeek());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,389,public final DateOnlyFieldProperty dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,390,"return new DateOnlyFieldProperty(this, getChronology().dayOfWeek());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,365,ublic final DateTimeFieldProperty dayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,366,"eturn new DateTimeFieldProperty(this, getChronology().dayOfMonth());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,398,public final DateOnlyFieldProperty dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,399,"return new DateOnlyFieldProperty(this, getChronology().dayOfMonth());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,374,ublic final DateTimeFieldProperty dayOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,375,"eturn new DateTimeFieldProperty(this, getChronology().dayOfYear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,407,public final DateOnlyFieldProperty dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,408,"return new DateOnlyFieldProperty(this, getChronology().dayOfYear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,383,ublic final DateTimeFieldProperty weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,384,"eturn new DateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,416,public final DateOnlyFieldProperty weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,417,"return new DateOnlyFieldProperty(this, getChronology().weekOfWeekyear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,392,ublic final DateTimeFieldProperty weekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,393,"eturn new DateTimeFieldProperty(this, getChronology().weekyear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,425,public final DateOnlyFieldProperty weekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,426,"return new DateOnlyFieldProperty(this, getChronology().weekyear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,401,ublic final DateTimeFieldProperty monthOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,402,"eturn new DateTimeFieldProperty(this, getChronology().monthOfYear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,434,public final DateOnlyFieldProperty monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,435,"return new DateOnlyFieldProperty(this, getChronology().monthOfYear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,410,ublic final DateTimeFieldProperty year() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,411,"eturn new DateTimeFieldProperty(this, getChronology().year());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,443,public final DateOnlyFieldProperty year() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,444,"return new DateOnlyFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,419,ublic final DateTimeFieldProperty yearOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,420,"eturn new DateTimeFieldProperty(this, getChronology().yearOfEra());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,452,public final DateOnlyFieldProperty yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,453,"return new DateOnlyFieldProperty(this, getChronology().yearOfEra());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,428,ublic final DateTimeFieldProperty yearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,429,"eturn new DateTimeFieldProperty(this, getChronology().yearOfCentury());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,461,public final DateOnlyFieldProperty yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,462,"return new DateOnlyFieldProperty(this, getChronology().yearOfCentury());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,437,ublic final DateTimeFieldProperty centuryOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,438,"eturn new DateTimeFieldProperty(this, getChronology().centuryOfEra());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,470,public final DateOnlyFieldProperty centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,471,"return new DateOnlyFieldProperty(this, getChronology().centuryOfEra());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,446,ublic final DateTimeFieldProperty era() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,447,"eturn new DateTimeFieldProperty(this, getChronology().era());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,479,public final DateOnlyFieldProperty era() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,480,"return new DateOnlyFieldProperty(this, getChronology().era());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,462,"rotected ReadableInstant create(long millis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,463,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,464,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,466,f (millis == getMillis() && chronology == getChronology()) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,467,eturn this;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,469,"eturn new DateOnly(millis, chronology);"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,62,import org.joda.time.property.TimeOnlyFieldProperty;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,65,* TimeOnly is the basic implementation of a time only class supporting
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,66,* chronologies. It holds the time as milliseconds from T00:00:00. The date
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,67,* component and time zone is fixed at 1970-01-01TZ.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,68,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,69,* This class uses a Chronology internally. The Chronology determines how the
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,70,* millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,71,* The default Chronology is <code>ISOChronology</code> which is the agreed
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,72,* international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,81, TimeOnly is the basic implementation of a time only class supporting
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,82, chronologies. It holds the time as milliseconds from T00:00:00. The date
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,83, component and time zone is fixed at 1970-01-01TZ.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,96,* @see MutableTimeOnly
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,227,* Gets a copy of this instant with different millis.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,228,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,229,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,230,"* Only the millis will change, the chronology is kept."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,231,* Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,233,"* @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,234,* @return a copy of this instant with different millis
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236,public ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,237,newMillis = resetUnsupportedFields(newMillis);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,238,"return newMillis == getMillis() ? this : new TimeOnly(newMillis, getChronology());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,242,* Gets a copy of this instant with a different chronology.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,243,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,244,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,245,"* Only the chronology will change, the millis are kept."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,246,* Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,248,* @param newChronology  the new chronology
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,249,* @return a copy of this instant with a different chronology
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,250,* @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,252,public ReadableInstant toCopy(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,253,if (newChronology == null) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,254,"throw new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,256,newChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,257,"return newChronology == getChronology() ? this : new TimeOnly(getMillis(), newChronology);"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,239,ublic final boolean isMatchingType(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,240,eturn instant instanceof TimeOnly;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,246, Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,281,* Get the hour of day (0-23) field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,290,* Get the hour of day (offset to 1-24) field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,292,* @return the clockhour of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,294,public final int getClockhourOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,295,return getChronology().clockhourOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,299,* Get the hour of am/pm (0-11) field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,301,* @return the hour of halfday
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,303,public final int getHourOfHalfday() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,304,return getChronology().hourOfHalfday().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,308,* Get the hour of am/pm (offset to 1-12) field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,310,* @return the clockhour of halfday
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,312,public final int getClockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,313,return getChronology().clockhourOfHalfday().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,317,* Get the AM(0) PM(1) field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,319,* @return the halfday of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,321,public final int getHalfdayOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,322,return getChronology().halfdayOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,308,/ TODO: DateTimeFieldProperty cannot be constructed with anything but
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,309,/ DateTime.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,314, Get the hour of day field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,382,* Get the hour of day (0-23) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,318,ublic final DateTimeFieldProperty hourOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,319,"eturn new DateTimeFieldProperty(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,386,public final TimeOnlyFieldProperty hourOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,387,"return new TimeOnlyFieldProperty(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,391,* Get the hour of day (offset to 1-24) field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,393,* @return the clockhour of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,395,public final TimeOnlyFieldProperty clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,396,"return new TimeOnlyFieldProperty(this, getChronology().clockhourOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,400,* Get the hour of am/pm (0-11) field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,402,* @return the hour of halfday property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,404,public final TimeOnlyFieldProperty hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,405,"return new TimeOnlyFieldProperty(this, getChronology().hourOfHalfday());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,409,* Get the hour of am/pm (offset to 1-12) field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,411,* @return the clockhour of halfday property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,413,public final TimeOnlyFieldProperty clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,414,"return new TimeOnlyFieldProperty(this, getChronology().clockhourOfHalfday());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,418,* Get the AM(0) PM(1) field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,420,* @return the halfday of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,422,public final TimeOnlyFieldProperty halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,423,"return new TimeOnlyFieldProperty(this, getChronology().halfdayOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,327,ublic final DateTimeFieldProperty minuteOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,328,"eturn new DateTimeFieldProperty(this, getChronology().minuteOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,431,public final TimeOnlyFieldProperty minuteOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,432,"return new TimeOnlyFieldProperty(this, getChronology().minuteOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,336,ublic final DateTimeFieldProperty minuteOfHour() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,337,"eturn new DateTimeFieldProperty(this, getChronology().minuteOfHour());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,440,public final TimeOnlyFieldProperty minuteOfHour() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,441,"return new TimeOnlyFieldProperty(this, getChronology().minuteOfHour());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,345,ublic final DateTimeFieldProperty secondOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,346,"eturn new DateTimeFieldProperty(this, getChronology().secondOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,449,public final TimeOnlyFieldProperty secondOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,450,"return new TimeOnlyFieldProperty(this, getChronology().secondOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,354,ublic final DateTimeFieldProperty secondOfMinute() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,355,"eturn new DateTimeFieldProperty(this, getChronology().secondOfMinute());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,458,public final TimeOnlyFieldProperty secondOfMinute() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,459,"return new TimeOnlyFieldProperty(this, getChronology().secondOfMinute());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,363,ublic final DateTimeFieldProperty millisOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,364,"eturn new DateTimeFieldProperty(this, getChronology().millisOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,467,public final TimeOnlyFieldProperty millisOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,468,"return new TimeOnlyFieldProperty(this, getChronology().millisOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,372,ublic final DateTimeFieldProperty millisOfSecond() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,373,"eturn new DateTimeFieldProperty(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,476,public final TimeOnlyFieldProperty millisOfSecond() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,477,"return new TimeOnlyFieldProperty(this, getChronology().millisOfSecond());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,389,"rotected ReadableInstant create(long millis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,390,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,391,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,393,f (millis == getMillis() && chronology == getChronology()) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,394,eturn this;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,396,"eturn new TimeOnly(millis, chronology);"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,480,"ssertEquals(var, i, 1, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,480,"assertEquals(var, i, 1, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,482,"ssertEquals(var, i, -1, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,482,"assertEquals(var, i, -1, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,484,"ssertEquals(var, i, 0, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,484,"assertEquals(var, i, 0, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,486,"ssertEquals(var, i, 2, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,486,"assertEquals(var, i, 2, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,488,"ssertEquals(var, i, 8, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,488,"assertEquals(var, i, 8, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,490,"ssertEquals(var, i, 9, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,490,"assertEquals(var, i, 9, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,492,"ssertEquals(var, i, -13, (int)field.getDifference(sum, millis));"
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java,492,"assertEquals(var, i, -13, field.getDifference(sum, millis));"
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,54,ackage org.joda.test.time ;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,54,package org.joda.test.time;
True,JodaTime/src/test/org/joda/test/time/TestInstant.java,JodaTime/src/test/org/joda/test/time/TestInstant.java,63,import org.joda.test.time.*;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,6, All rights reserved.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,10, are met:
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,18,    distribution.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,33,    permission of the Joda project.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,46, SUCH DAMAGE.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,54,ackage org.joda.test.time.partial;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,56,mport java.util.Date;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,57,mport java.util.Locale;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,59,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,60,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,62,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,63,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,64,mport org.joda.time.DateTimeField;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,65,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,66,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,67,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,68,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,69,mport org.joda.time.partial.TimeOfDay;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,72, This class is a Junit unit test for TimeOfDay.
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,74, @author Stephen Colebourne
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,76,ublic class TestTimeOfDay extends TestCase {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,78,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,80,rivate long TEST_TIME =
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,81,0L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,82, 20L * DateTimeConstants.MILLIS_PER_MINUTE
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,83, 30L * DateTimeConstants.MILLIS_PER_SECOND
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,84, 40L;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,86,rivate DateTimeZone zone = null;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,88,ublic static void main(String[] args) {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,89,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,92,ublic static TestSuite suite() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,93,eturn new TestSuite(TestTimeOfDay.class);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,96,ublic TestTimeOfDay(String name) {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,97,uper(name);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,100,rotected void setUp() throws Exception {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,101,ateTimeUtils.setCurrentMillisFixed(TEST_TIME);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,102,one = DateTimeZone.getDefault();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,103,ateTimeZone.setDefault(DateTimeZone.UTC);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,106,rotected void tearDown() throws Exception {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,107,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,108,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,109,one = null;
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,114, Test constructor ()
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,116,ublic void testConstructor() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,117,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,118,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,119,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,120,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,121,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,122,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,126, Test constructor (Chronology)
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,128,ublic void testConstructor_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,129,imeOfDay test = new TimeOfDay(JulianChronology.getInstance());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,130,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,131,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,132,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,133,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,134,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,138, Test constructor (long)
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,140,ublic void testConstructor_long() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,141,imeOfDay test = new TimeOfDay(TEST_TIME);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,142,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,143,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,144,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,145,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,146,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,150," Test constructor (long, Chronology)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,152,ublic void testConstructor_longChronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,153,"imeOfDay test = new TimeOfDay(TEST_TIME, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,154,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,155,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,156,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,157,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,158,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,162, Test constructor (Object)
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,164,ublic void testConstructor_Object() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,165,ate date = new Date(TEST_TIME);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,166,imeOfDay test = new TimeOfDay(date);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,167,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,168,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,169,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,170,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,171,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,175," Test constructor (Object, Chronology)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,177,ublic void testConstructor_ObjectChronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,178,ate date = new Date(TEST_TIME);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,179,"imeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,180,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,181,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,182,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,183,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,184,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,188," Test constructor (int, int)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,190,ublic void testConstructor_intint() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,191,"imeOfDay test = new TimeOfDay(10, 20);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,192,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,193,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,194,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,195,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,196,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,197,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,198,"ew TimeOfDay(-1, 20);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,199,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,200, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,201,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,202,"ew TimeOfDay(24, 20);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,203,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,204, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,205,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,206,"ew TimeOfDay(10, -1);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,207,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,208, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,209,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,210,"ew TimeOfDay(10, 60);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,211,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,212, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,216," Test constructor (int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,218,ublic void testConstructor_intintChronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,219,"imeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,220,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,221,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,222,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,223,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,224,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,225,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,226,"ew TimeOfDay(-1, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,227,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,228, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,229,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,230,"ew TimeOfDay(24, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,231,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,232, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,233,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,234,"ew TimeOfDay(10, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,235,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,236, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,237,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,238,"ew TimeOfDay(10, 60, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,239,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,240, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,244," Test constructor (int, int, int)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,246,ublic void testConstructor_intintint() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,247,"imeOfDay test = new TimeOfDay(10, 20, 30);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,248,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,249,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,250,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,251,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,252,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,253,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,254,"ew TimeOfDay(-1, 20, 30);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,255,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,256, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,257,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,258,"ew TimeOfDay(24, 20, 30);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,259,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,260, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,261,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,262,"ew TimeOfDay(10, -1, 30);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,263,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,264, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,265,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,266,"ew TimeOfDay(10, 60, 30);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,267,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,268, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,269,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,270,"ew TimeOfDay(10, 20, -1);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,271,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,272, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,273,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,274,"ew TimeOfDay(10, 20, 60);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,275,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,276, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,280," Test constructor (int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,282,ublic void testConstructor_intintintChronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,283,"imeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,284,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,285,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,286,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,287,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,288,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,289,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,290,"ew TimeOfDay(-1, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,291,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,292, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,293,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,294,"ew TimeOfDay(24, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,295,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,296, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,297,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,298,"ew TimeOfDay(10, -1, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,299,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,300, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,301,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,302,"ew TimeOfDay(10, 60, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,303,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,304, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,305,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,306,"ew TimeOfDay(10, 20, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,307,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,308, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,309,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,310,"ew TimeOfDay(10, 20, 60, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,311,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,312, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,316," Test constructor (int, int, int, int)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,318,ublic void testConstructor_intintintint() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,319,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,320,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,321,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,322,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,323,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,324,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,325,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,326,"ew TimeOfDay(-1, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,327,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,328, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,329,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,330,"ew TimeOfDay(24, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,331,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,332, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,333,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,334,"ew TimeOfDay(10, -1, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,335,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,336, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,337,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,338,"ew TimeOfDay(10, 60, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,339,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,340, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,341,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,342,"ew TimeOfDay(10, 20, -1, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,343,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,344, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,345,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,346,"ew TimeOfDay(10, 20, 60, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,347,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,348, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,349,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,350,"ew TimeOfDay(10, 20, 30, -1);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,351,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,352, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,353,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,354,"ew TimeOfDay(10, 20, 30, 1000);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,355,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,356, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,360," Test constructor (int, int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,362,ublic void testConstructor_intintintintChronology() throws Throwable {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,363,"imeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,364,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,365,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,366,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,367,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,368,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,369,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,370,"ew TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,371,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,372, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,373,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,374,"ew TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,375,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,376, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,377,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,378,"ew TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,379,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,380, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,381,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,382,"ew TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,383,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,384, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,385,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,386,"ew TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,387,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,388, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,389,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,390,"ew TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,391,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,392, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,393,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,394,"ew TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,395,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,396, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,397,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,398,"ew TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,399,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,400, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,403,ublic void testGet() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,404,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,405,"ssertEquals(10, test.get(ISOChronology.getInstance().hourOfDay()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,406,"ssertEquals(20, test.get(ISOChronology.getInstance().minuteOfHour()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,407,"ssertEquals(30, test.get(ISOChronology.getInstance().secondOfMinute()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,408,"ssertEquals(40, test.get(ISOChronology.getInstance().millisOfSecond()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,409,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,410,est.get(null);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,411,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,412, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,413,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,414,est.get(ISOChronology.getInstance().dayOfMonth());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,415,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,416, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,417,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,418,est.get(ISOChronology.getInstance(PARIS).hourOfDay());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,419,ail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,420, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,421,/ TODO: Should this fail or suceed - by succeeding it exposes out implementation
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,422,/        try {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,423,/            test.get(JulianChronology.getInstance().hourOfDay());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,424,/            fail();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,425,/        } catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,428,ublic void testGetFieldSize() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,429,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,430,"ssertEquals(4, test.getFieldSize());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,433,ublic void testGetField() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,434,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,435,"ssertSame(ISOChronology.getInstance().hourOfDay(), test.getField(0));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,436,"ssertSame(ISOChronology.getInstance().minuteOfHour(), test.getField(1));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,437,"ssertSame(ISOChronology.getInstance().secondOfMinute(), test.getField(2));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,438,"ssertSame(ISOChronology.getInstance().millisOfSecond(), test.getField(3));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,439,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,440,est.getField(-1);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,441, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,442,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,443,est.getField(5);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,444, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,447,ublic void testGetFields() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,448,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,449,ateTimeField[] fields = test.getFields();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,450,"ssertSame(ISOChronology.getInstance().hourOfDay(), fields[0]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,451,"ssertSame(ISOChronology.getInstance().minuteOfHour(), fields[1]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,452,"ssertSame(ISOChronology.getInstance().secondOfMinute(), fields[2]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,453,"ssertSame(ISOChronology.getInstance().millisOfSecond(), fields[3]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,456,ublic void testGetValue() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,457,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,458,"ssertEquals(10, test.getValue(0));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,459,"ssertEquals(20, test.getValue(1));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,460,"ssertEquals(30, test.getValue(2));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,461,"ssertEquals(40, test.getValue(3));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,462,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,463,est.getValue(-1);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,464, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,465,ry {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,466,est.getValue(5);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,467, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,470,ublic void testGetValues() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,471,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,472,nt[] values = test.getValues();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,473,"ssertEquals(10, values[0]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,474,"ssertEquals(20, values[1]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,475,"ssertEquals(30, values[2]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,476,"ssertEquals(40, values[3]);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,479,ublic void testIsSupported() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,480,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,481,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,482,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().minuteOfHour()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,483,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().secondOfMinute()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,484,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().millisOfSecond()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,485,"ssertEquals(false, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,486,"ssertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).hourOfDay()));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,489,ublic void testEqualsHashCode() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,490,"imeOfDay test1 = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,491,"imeOfDay test2 = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,492,"ssertEquals(true, test1.equals(test2));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,493,"ssertEquals(true, test2.equals(test1));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,494,"ssertEquals(true, test1.equals(test1));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,495,"ssertEquals(true, test2.equals(test2));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,496,"ssertEquals(test1.hashCode(), test2.hashCode());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,497,"ssertEquals(test1.hashCode(), test1.hashCode());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,498,"ssertEquals(test2.hashCode(), test2.hashCode());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,500,"imeOfDay test3 = new TimeOfDay(11, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,501,"ssertEquals(false, test1.equals(test3));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,502,"ssertEquals(false, test2.equals(test3));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,503,"ssertEquals(false, test3.equals(test1));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,504,"ssertEquals(false, test3.equals(test2));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,505,ssertTrue(test1.hashCode() != test3.hashCode());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,506,ssertTrue(test2.hashCode() != test3.hashCode());
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,509,ublic void testResolve_long() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,510,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,511,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,512,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,513,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,514,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,515,ateTime dt = new DateTime(0L);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,516,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,518,"ateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,519,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,520,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,521,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,522,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,523,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,524,"ssertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,527,ublic void testResolve_RI() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,528,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,529,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,530,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,531,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,532,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,533,ateTime dt = new DateTime(0L);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,534,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,536,ateTime result = test.resolveDateTime(dt);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,537,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,538,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,539,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,540,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,541,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,542,"ssertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,545,ublic void testPropertyGet() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,546,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,547,"ssertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,548,"ssertEquals(""hourOfDay"", test.hourOfDay().getName());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,549,"ssertSame(test, test.hourOfDay().getPartialInstant());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,550,"ssertSame(test, test.hourOfDay().getTimeOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,551,"ssertEquals(10, test.hourOfDay().get());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,552,"ssertEquals(""10"", test.hourOfDay().getAsText());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,553,"ssertEquals(""10"", test.hourOfDay().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,554,"ssertEquals(""10"", test.hourOfDay().getAsShortText());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,555,"ssertEquals(""10"", test.hourOfDay().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,556,"ssertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,557,"ssertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,558,"ssertEquals(2, test.hourOfDay().getMaximumTextLength(null));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,559,"ssertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,562,ublic void testPropertyGetMaxMinValues() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,563,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,564,"ssertEquals(0, test.hourOfDay().getMinimumValue());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,565,"ssertEquals(0, test.hourOfDay().getMinimumValueOverall());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,566,"ssertEquals(23, test.hourOfDay().getMaximumValue());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,567,"ssertEquals(23, test.hourOfDay().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,570,ublic void testPropertyAddInField() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,571,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,572,imeOfDay updated = test.hourOfDay().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,573,"ssertEquals(19, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,574,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,575,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,576,"ssertEquals(40, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,577,pdated = updated.hourOfDay().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,578,"ssertEquals(4, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,579,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,580,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,581,"ssertEquals(40, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,584,ublic void testPropertySet() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,585,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,586,imeOfDay set = test.hourOfDay().setCopy(12);
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,587,"ssertEquals(12, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,588,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,589,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,590,"ssertEquals(40, set.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,593,ublic void testPropertySetText() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,594,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,595,"imeOfDay set = test.hourOfDay().setCopy(""12"");"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,596,"ssertEquals(12, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,597,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,598,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,599,"ssertEquals(40, set.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,54,ackage org.joda.test.time;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,56,import junit.framework.Test;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,57,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,58,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,61,* Entry point for all tests in this package.
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,63,* @version $Revision$ $Date$
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,67,public class TestAll extends TestCase {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,69,public TestAll(String testName) {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,70,super(testName);
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,73,public static Test suite() {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,74,TestSuite suite = new TestSuite();
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,75,suite.addTest(TestDateTimeComparator.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,76,suite.addTest(TestParseISO.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,77,return suite;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,80,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,81,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,82,TestAll.class.getName()
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,84,junit.textui.TestRunner.main(testCaseName);
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,56,import junit.framework.Test;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,57,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,58,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,61,* Entry point for all tests in Joda Time.
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,63,* @version $Revision$ $Date$
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,67,public class TestAllPackages extends TestCase {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,69,public TestAllPackages(String testName) {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,70,super(testName);
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,73,public static Test suite() {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,74,TestSuite suite = new TestSuite();
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,75,suite.addTest(org.joda.time.TestAll.suite());
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,76,suite.addTest(org.joda.time.chrono.gj.TestAll.suite());
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,77,suite.addTest(org.joda.time.partial.TestAll.suite());
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,78,return suite;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,81,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,82,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,83,TestAllPackages.class.getName()
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,85,junit.textui.TestRunner.main(testCaseName);
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,54,ackage org.joda.test.time;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,65,import org.joda.test.time.*;
False,JodaTime/src/test/org/joda/test/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,54,ackage org.joda.test.time;
True,JodaTime/src/test/org/joda/test/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/test/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,59,import org.joda.test.time.*;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,54,package org.joda.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,58,import junit.framework.TestCase;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,61,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,87,ublic class Test {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,88,public class MainTest extends TestCase {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,125,"est(iterations, mode, seed);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,126,"new MainTest(iterations, mode, seed).testChronology();"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,130,private final int iIterations;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,131,private final int iMode;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,132,private final long iSeed;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,133,private final Chronology iTest;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,134,private final Chronology iActual;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,130, @param mode GREGORIAN_MODE or JULIAN_MODE
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,138,"* @param mode GREGORIAN_MODE or JULIAN_MODE,0=Gregorian, 1=Julian"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,133,"ublic static void test(final int iterations, int mode, long seed) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,134,tring modeStr;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,141,"public MainTest(int iterations, int mode, long seed) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,142,"super(""testChronology"");"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,143,iIterations = iterations;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,144,iMode = mode;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,145,iSeed = seed;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,147,iTest = new TestGregorianChronology();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,148,iActual = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,149,} else {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,150,iTest = new TestJulianChronology();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,151,iActual = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,157,* Main junit test
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,159,public void testChronology() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,160,int iterations = iIterations;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,161,long seed = iSeed;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,162,String modeStr;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,163,if (iMode == GREGORIAN_MODE) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,143,est t = new Test(mode);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,163,".testFields(millis, value, millis2);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,190,"testFields(millis, value, millis2);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,169,hrow e;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,196,fail(e.getMessage());
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,176,rivate static long randomMillis(Random rnd) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,177,ong millis = rnd.nextLong();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,178,f (millis >= 0) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,179,illis = millis % MAX_MILLIS;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,180, else {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,181,illis = millis % -MIN_MILLIS;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,183,eturn millis;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,186,"rivate static void dump(Chronology chrono, long millis) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,187,"ystem.out.println(""year:           "" + chrono.year().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,188,"ystem.out.println(""monthOfYear:    "" + chrono.monthOfYear().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,189,"ystem.out.println(""dayOfMonth:     "" + chrono.dayOfMonth().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,190,"ystem.out.println(""weekyear:       "" + chrono.weekyear().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,191,"ystem.out.println(""weekOfWeekyear: "" + chrono.weekOfWeekyear().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,192,"ystem.out.println(""dayOfWeek:      "" + chrono.dayOfWeek().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,193,"ystem.out.println(""dayOfYear:      "" + chrono.dayOfYear().get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,196,rivate final int iMode;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,197,rivate final Chronology iTest;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,198,rivate final Chronology iActual;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,201," @param mode 0=Gregorian, 1=Julian"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,203,ublic Test(int mode) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,204,Mode = mode;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,205,f (mode == GREGORIAN_MODE) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,206,Test = new TestGregorianChronology();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,207,Actual = GregorianChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,208, else {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,209,Test = new TestJulianChronology();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,210,Actual = JulianChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,214,"ublic void testFields(long millis, int value, long millis2) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,204,"private void testFields(long millis, int value, long millis2) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,462,private static long randomMillis(Random rnd) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,463,long millis = rnd.nextLong();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,464,if (millis >= 0) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,465,millis = millis % MAX_MILLIS;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,466,} else {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,467,millis = millis % -MIN_MILLIS;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,469,return millis;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,472,"private static void dump(Chronology chrono, long millis) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,473,"System.out.println(""year:           "" + chrono.year().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,474,"System.out.println(""monthOfYear:    "" + chrono.monthOfYear().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,475,"System.out.println(""dayOfMonth:     "" + chrono.dayOfMonth().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,476,"System.out.println(""weekyear:       "" + chrono.weekyear().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,477,"System.out.println(""weekOfWeekyear: "" + chrono.weekOfWeekyear().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,478,"System.out.println(""dayOfWeek:      "" + chrono.dayOfWeek().get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java,479,"System.out.println(""dayOfYear:      "" + chrono.dayOfYear().get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,54,package org.joda.time.chrono.gj;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,56,import junit.framework.Test;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,57,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,58,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,61,* Entry point for all tests in this package.
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,63,* @version $Revision$ $Date$
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,67,public class TestAll extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,69,public TestAll(String testName) {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,70,super(testName);
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,73,public static Test suite() {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,74,TestSuite suite = new TestSuite();
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,75,"suite.addTest(new MainTest(200, 0, 1345435247779935L));"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,76,"suite.addTest(new MainTest(200, 1, 1345435247779935L));"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,77,return suite;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,80,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,81,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,82,TestAll.class.getName()
True,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,JodaTime/src/test/org/joda/time/chrono/gj/TestAll.java,84,junit.textui.TestRunner.main(testCaseName);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianChronology.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianChronology.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianDayOfMonthField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianDayOfMonthField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianWeekyearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianWeekyearField.java,54,package org.joda.time.chrono.gj;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianYearField.java,54,ackage org.joda.test.time.chrono.gj;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestJulianYearField.java,54,package org.joda.time.chrono.gj;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,10,* are met:
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,54,package org.joda.time.partial;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,56,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,57,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,59,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,60,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,61,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,64,* A basic mock testing class for a PartialInstant that doesn't extend AbstractPartialInstant.
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,66,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,68,public class MockPartialInstant implements PartialInstant {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,70,public static final PartialInstant EMPTY_INSTANCE = new MockPartialInstant();
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,72,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,73,return ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,75,public int getFieldSize() {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,76,return 0;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,78,public DateTimeField getField(int index) {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,79,return null;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,81,public int getValue(int index) {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,82,return 0;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,84,public int get(DateTimeField field) {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,85,return 0;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,87,public boolean isSupported(DateTimeField field) {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,88,return false;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,90,"public long resolve(long baseMillis, DateTimeZone tz) {"
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,91,return 0L;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,93,public DateTime resolveDateTime(ReadableInstant base) {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,94,return null;
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,96,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,97,return new DateTimeField[0];
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,99,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,JodaTime/src/test/org/joda/time/partial/MockPartialInstant.java,100,return new int[0];
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,10,* are met:
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,54,package org.joda.time.partial;
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,56,import junit.framework.Test;
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,57,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,58,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,61,* Entry point for all tests in this package.
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,63,* @version $Revision$ $Date$
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,67,public class TestAll extends TestCase {
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,69,public TestAll(String testName) {
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,70,super(testName);
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,73,public static Test suite() {
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,74,TestSuite suite = new TestSuite();
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,75,suite.addTest(TestTimeOfDay.suite());
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,76,return suite;
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,79,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,80,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,81,TestAll.class.getName()
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,83,junit.textui.TestRunner.main(testCaseName);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,10,* are met:
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,54,package org.joda.time.partial;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,60,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,61,import java.util.Date;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,62,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,64,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,65,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,67,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,68,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,69,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,70,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,71,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,72,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,73,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,74,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,75,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,76,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,77,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,78,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,81,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,83,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,85,public class TestTimeOfDay extends TestCase {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,87,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,89,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,90,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,91,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,92,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,93,+ 40L;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,95,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,96,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,97,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,98,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,99,+ 4L;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,101,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,102,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,103,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,104,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,105,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,106,+ 8L;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,108,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,110,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,111,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,114,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,115,return new TestSuite(TestTimeOfDay.class);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,118,public TestTimeOfDay(String name) {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,119,super(name);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,122,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,123,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,124,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,125,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,128,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,129,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,130,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,131,zone = null;
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,136,* Test constructor ()
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,138,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,139,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,140,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,141,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,142,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,143,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,144,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,148,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,150,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,151,TimeOfDay test = new TimeOfDay(JulianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,152,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,153,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,154,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,155,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,156,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,160,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,162,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,163,TimeOfDay test = new TimeOfDay((Chronology) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,164,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,165,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,166,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,167,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,168,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,173,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,175,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,176,TimeOfDay test = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,177,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,178,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,179,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,180,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,181,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,185,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,187,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,188,TimeOfDay test = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,189,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,190,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,191,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,192,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,193,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,197,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,199,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,200,"TimeOfDay test = new TimeOfDay(TEST_TIME1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,201,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,202,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,203,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,204,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,205,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,209,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,211,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,212,"TimeOfDay test = new TimeOfDay(TEST_TIME2, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,213,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,214,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,215,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,216,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,217,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,221,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,223,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,224,"TimeOfDay test = new TimeOfDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,225,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,226,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,227,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,228,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,229,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,234,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,236,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,237,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,238,TimeOfDay test = new TimeOfDay(date);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,239,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,240,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,241,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,242,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,243,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,247,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,249,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,250,TimeOfDay test = new TimeOfDay(null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,251,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,252,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,253,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,254,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,255,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,259,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,261,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,262,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,263,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,264,TimeOfDay test = new TimeOfDay(new Integer(0));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,265,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,266,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,267,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,268,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,269,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,270,} finally {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,271,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,276,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,278,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,279,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,280,"TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,281,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,282,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,283,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,284,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,285,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,289,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,291,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,292,"TimeOfDay test = new TimeOfDay((Object) null, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,293,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,294,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,295,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,296,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,297,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,301,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,303,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,304,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,305,"TimeOfDay test = new TimeOfDay(date, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,306,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,307,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,308,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,309,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,310,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,314,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,316,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,317,"TimeOfDay test = new TimeOfDay((Object) null, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,318,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,319,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,320,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,321,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,322,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,326,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,328,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,329,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,330,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,331,"TimeOfDay test = new TimeOfDay(new Integer(0), JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,332,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,333,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,334,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,335,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,336,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,337,} finally {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,338,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,344,"* Test constructor (int, int)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,346,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,347,"TimeOfDay test = new TimeOfDay(10, 20);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,348,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,349,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,350,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,351,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,352,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,353,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,354,"new TimeOfDay(-1, 20);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,355,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,356,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,357,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,358,"new TimeOfDay(24, 20);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,359,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,360,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,361,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,362,"new TimeOfDay(10, -1);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,363,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,364,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,365,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,366,"new TimeOfDay(10, 60);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,367,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,368,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,372,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,374,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,375,"TimeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,376,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,377,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,378,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,379,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,380,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,381,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,382,"new TimeOfDay(-1, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,383,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,384,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,385,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,386,"new TimeOfDay(24, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,387,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,388,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,389,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,390,"new TimeOfDay(10, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,391,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,392,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,393,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,394,"new TimeOfDay(10, 60, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,395,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,396,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,400,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,402,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,403,"TimeOfDay test = new TimeOfDay(10, 20, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,404,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,405,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,406,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,407,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,408,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,412,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,414,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,415,"TimeOfDay test = new TimeOfDay(10, 20, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,416,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,417,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,418,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,419,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,420,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,421,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,422,"new TimeOfDay(-1, 20, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,423,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,424,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,425,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,426,"new TimeOfDay(24, 20, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,427,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,428,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,429,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,430,"new TimeOfDay(10, -1, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,431,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,432,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,433,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,434,"new TimeOfDay(10, 60, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,435,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,436,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,437,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,438,"new TimeOfDay(10, 20, -1);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,439,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,440,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,441,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,442,"new TimeOfDay(10, 20, 60);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,443,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,444,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,448,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,450,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,451,"TimeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,452,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,453,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,454,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,455,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,456,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,457,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,458,"new TimeOfDay(-1, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,459,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,460,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,461,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,462,"new TimeOfDay(24, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,463,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,464,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,465,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,466,"new TimeOfDay(10, -1, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,467,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,468,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,469,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,470,"new TimeOfDay(10, 60, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,471,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,472,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,473,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,474,"new TimeOfDay(10, 20, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,475,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,476,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,477,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,478,"new TimeOfDay(10, 20, 60, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,479,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,480,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,484,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,486,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,487,"TimeOfDay test = new TimeOfDay(10, 20, 30, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,488,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,489,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,490,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,491,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,492,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,496,"* Test constructor (int, int, int, int)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,498,public void testConstructor_int_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,499,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,500,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,501,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,502,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,503,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,504,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,505,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,506,"new TimeOfDay(-1, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,507,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,508,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,509,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,510,"new TimeOfDay(24, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,511,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,512,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,513,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,514,"new TimeOfDay(10, -1, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,515,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,516,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,517,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,518,"new TimeOfDay(10, 60, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,519,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,520,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,521,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,522,"new TimeOfDay(10, 20, -1, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,523,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,524,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,525,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,526,"new TimeOfDay(10, 20, 60, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,527,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,528,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,529,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,530,"new TimeOfDay(10, 20, 30, -1);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,531,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,532,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,533,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,534,"new TimeOfDay(10, 20, 30, 1000);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,535,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,536,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,540,"* Test constructor (int, int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,542,public void testConstructor_int_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,543,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,544,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,545,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,546,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,547,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,548,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,549,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,550,"new TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,551,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,552,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,553,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,554,"new TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,555,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,556,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,557,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,558,"new TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,559,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,560,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,561,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,562,"new TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,563,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,564,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,565,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,566,"new TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,567,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,568,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,569,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,570,"new TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,571,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,572,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,573,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,574,"new TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,575,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,576,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,577,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,578,"new TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,579,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,580,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,584,"* Test constructor (int, int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,586,public void testConstructor_int_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,587,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, null);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,588,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,589,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,590,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,591,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,592,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,596,public void testGet() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,597,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,598,"assertEquals(10, test.get(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,599,"assertEquals(20, test.get(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,600,"assertEquals(30, test.get(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,601,"assertEquals(40, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,602,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,603,test.get(null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,604,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,605,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,606,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,607,test.get(ISOChronology.getInstance().dayOfMonth());
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,608,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,609,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,610,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,611,test.get(ISOChronology.getInstance(PARIS).hourOfDay());
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,612,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,613,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,614,// TODO: Should this fail or suceed - by succeeding it exposes out implementation
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,615,//        try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,616,//            test.get(JulianChronology.getInstance().hourOfDay());
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,617,//            fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,618,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,621,public void testGetFieldSize() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,622,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,623,"assertEquals(4, test.getFieldSize());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,626,public void testGetField() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,627,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,628,"assertSame(ISOChronology.getInstance().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,629,"assertSame(ISOChronology.getInstance().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,630,"assertSame(ISOChronology.getInstance().secondOfMinute(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,631,"assertSame(ISOChronology.getInstance().millisOfSecond(), test.getField(3));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,632,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,633,test.getField(-1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,634,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,635,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,636,test.getField(5);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,637,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,640,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,641,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,642,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,643,"assertSame(ISOChronology.getInstance().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,644,"assertSame(ISOChronology.getInstance().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,645,"assertSame(ISOChronology.getInstance().secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,646,"assertSame(ISOChronology.getInstance().millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,649,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,650,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,651,"assertEquals(10, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,652,"assertEquals(20, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,653,"assertEquals(30, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,654,"assertEquals(40, test.getValue(3));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,655,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,656,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,657,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,658,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,659,test.getValue(5);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,660,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,663,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,664,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,665,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,666,"assertEquals(10, values[0]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,667,"assertEquals(20, values[1]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,668,"assertEquals(30, values[2]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,669,"assertEquals(40, values[3]);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,672,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,673,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,674,"assertEquals(true, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,675,"assertEquals(true, test.isSupported(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,676,"assertEquals(true, test.isSupported(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,677,"assertEquals(true, test.isSupported(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,678,"assertEquals(false, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,679,"assertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).hourOfDay()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,682,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,683,"TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,684,"TimeOfDay test2 = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,685,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,686,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,687,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,688,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,689,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,690,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,691,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,693,"TimeOfDay test3 = new TimeOfDay(11, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,694,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,695,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,696,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,697,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,698,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,699,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,701,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,702,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,703,"assertEquals(false, test1.equals(MockPartialInstant.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,706,class MockInstant extends MockPartialInstant {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,707,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,708,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,709,"ISOChronology.getInstance().hourOfDay(),"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,710,"ISOChronology.getInstance().minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,711,"ISOChronology.getInstance().secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,712,"ISOChronology.getInstance().millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,715,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,716,"return new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,721,public void testResolve_long() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,722,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,723,DateTime dt = new DateTime(0L);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,724,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,726,"DateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,727,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,728,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,729,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,730,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,731,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,732,"assertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,735,public void testResolveDateTime_RI() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,736,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,737,DateTime dt = new DateTime(0L);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,738,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,740,DateTime result = test.resolveDateTime(dt);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,741,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,742,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,743,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,744,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,745,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,746,"assertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,749,public void testResolveDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,750,"TimeOfDay test = new TimeOfDay(1, 2, 3, 4);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,751,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,753,DateTime result = test.resolveDateTime(null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,754,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,755,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,756,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,757,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,758,"assertEquals(""1970-01-02T01:02:03.004Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,761,public void testResolveInto_RWI() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,762,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,763,MutableDateTime mdt = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,764,"assertEquals(""1970-01-01T00:00:00.000Z"", mdt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,766,test.resolveInto(mdt);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,767,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,768,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,769,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,770,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,771,"assertEquals(""1970-01-01T10:20:30.040Z"", mdt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,774,public void testResolveInto_nullRWI() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,775,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,777,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,778,test.resolveInto(null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,779,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,780,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,784,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,785,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,787,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,788,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,789,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,790,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,791,oos.close();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,793,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,794,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,795,TimeOfDay result = (TimeOfDay) ois.readObject();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,796,ois.close();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,798,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,799,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,800,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,801,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,805,public void testToString() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,806,// TODO
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,810,public void testPropertyGetHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,811,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,812,"assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,813,"assertEquals(""hourOfDay"", test.hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,814,"assertEquals(""Property[hourOfDay]"", test.hourOfDay().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,815,"assertSame(test, test.hourOfDay().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,816,"assertSame(test, test.hourOfDay().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,817,"assertEquals(10, test.hourOfDay().get());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,818,"assertEquals(""10"", test.hourOfDay().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,819,"assertEquals(""10"", test.hourOfDay().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,820,"assertEquals(""10"", test.hourOfDay().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,821,"assertEquals(""10"", test.hourOfDay().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,822,"assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,823,"assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,824,"assertEquals(2, test.hourOfDay().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,825,"assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,828,public void testPropertyGetMaxMinValuesHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,829,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,830,"assertEquals(0, test.hourOfDay().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,831,"assertEquals(0, test.hourOfDay().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,832,"assertEquals(23, test.hourOfDay().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,833,"assertEquals(23, test.hourOfDay().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,836,public void testPropertyAddInFieldHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,837,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,838,TimeOfDay updated = test.hourOfDay().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,839,"assertEquals(19, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,840,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,841,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,842,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,843,updated = updated.hourOfDay().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,844,"assertEquals(4, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,845,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,846,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,847,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,850,public void testPropertySetHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,851,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,852,TimeOfDay set = test.hourOfDay().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,853,"assertEquals(12, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,854,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,855,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,856,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,859,public void testPropertySetTextHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,860,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,861,"TimeOfDay set = test.hourOfDay().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,862,"assertEquals(12, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,863,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,864,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,865,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,868,public void testPropertyCompareToHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,869,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,870,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,871,"assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,872,"assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,873,"assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,874,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,875,test1.hourOfDay().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,876,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,877,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,879,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,880,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,881,"assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,882,"assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,883,"assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,884,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,885,test1.hourOfDay().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,886,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,887,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,891,public void testPropertyGetMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,892,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,893,"assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,894,"assertEquals(""minuteOfHour"", test.minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,895,"assertEquals(""Property[minuteOfHour]"", test.minuteOfHour().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,896,"assertSame(test, test.minuteOfHour().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,897,"assertSame(test, test.minuteOfHour().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,898,"assertEquals(20, test.minuteOfHour().get());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,899,"assertEquals(""20"", test.minuteOfHour().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,900,"assertEquals(""20"", test.minuteOfHour().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,901,"assertEquals(""20"", test.minuteOfHour().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,902,"assertEquals(""20"", test.minuteOfHour().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,903,"assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,904,"assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,905,"assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,906,"assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,909,public void testPropertyGetMaxMinValuesMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,910,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,911,"assertEquals(0, test.minuteOfHour().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,912,"assertEquals(0, test.minuteOfHour().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,913,"assertEquals(59, test.minuteOfHour().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,914,"assertEquals(59, test.minuteOfHour().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,917,public void testPropertyAddInFieldMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,918,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,919,TimeOfDay updated = test.minuteOfHour().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,920,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,921,"assertEquals(29, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,922,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,923,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,924,updated = updated.minuteOfHour().addInFieldCopy(49);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,925,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,926,"assertEquals(18, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,927,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,928,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,931,public void testPropertySetMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,932,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,933,TimeOfDay set = test.minuteOfHour().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,934,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,935,"assertEquals(12, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,936,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,937,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,940,public void testPropertySetTextMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,941,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,942,"TimeOfDay set = test.minuteOfHour().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,943,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,944,"assertEquals(12, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,945,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,946,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,949,public void testPropertyCompareToMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,950,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,951,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,952,"assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,953,"assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,954,"assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,955,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,956,test1.minuteOfHour().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,957,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,958,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,960,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,961,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,962,"assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,963,"assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,964,"assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,965,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,966,test1.minuteOfHour().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,967,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,968,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,972,public void testPropertyGetSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,973,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,974,"assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,975,"assertEquals(""secondOfMinute"", test.secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,976,"assertEquals(""Property[secondOfMinute]"", test.secondOfMinute().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,977,"assertSame(test, test.secondOfMinute().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,978,"assertSame(test, test.secondOfMinute().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,979,"assertEquals(30, test.secondOfMinute().get());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,980,"assertEquals(""30"", test.secondOfMinute().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,981,"assertEquals(""30"", test.secondOfMinute().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,982,"assertEquals(""30"", test.secondOfMinute().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,983,"assertEquals(""30"", test.secondOfMinute().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,984,"assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,985,"assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,986,"assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,987,"assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,990,public void testPropertyGetMaxMinValuesSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,991,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,992,"assertEquals(0, test.secondOfMinute().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,993,"assertEquals(0, test.secondOfMinute().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,994,"assertEquals(59, test.secondOfMinute().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,995,"assertEquals(59, test.secondOfMinute().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,998,public void testPropertyAddInFieldSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,999,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1000,TimeOfDay updated = test.secondOfMinute().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1001,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1002,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1003,"assertEquals(39, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1004,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1005,updated = updated.secondOfMinute().addInFieldCopy(49);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1006,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1007,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1008,"assertEquals(28, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1009,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1012,public void testPropertySetSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1013,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1014,TimeOfDay set = test.secondOfMinute().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1015,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1016,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1017,"assertEquals(12, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1018,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1021,public void testPropertySetTextSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1022,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1023,"TimeOfDay set = test.secondOfMinute().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1024,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1025,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1026,"assertEquals(12, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1027,"assertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1030,public void testPropertyCompareToSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1031,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1032,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1033,"assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1034,"assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1035,"assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1036,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1037,test1.secondOfMinute().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1038,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1039,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1041,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1042,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1043,"assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1044,"assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1045,"assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1046,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1047,test1.secondOfMinute().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1048,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1049,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1053,public void testPropertyGetMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1054,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1055,"assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1056,"assertEquals(""millisOfSecond"", test.millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1057,"assertEquals(""Property[millisOfSecond]"", test.millisOfSecond().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1058,"assertSame(test, test.millisOfSecond().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1059,"assertSame(test, test.millisOfSecond().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1060,"assertEquals(40, test.millisOfSecond().get());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1061,"assertEquals(""40"", test.millisOfSecond().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1062,"assertEquals(""40"", test.millisOfSecond().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1063,"assertEquals(""40"", test.millisOfSecond().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1064,"assertEquals(""40"", test.millisOfSecond().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1065,"assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1066,"assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1067,"assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1068,"assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1071,public void testPropertyGetMaxMinValuesMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1072,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1073,"assertEquals(0, test.millisOfSecond().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1074,"assertEquals(0, test.millisOfSecond().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1075,"assertEquals(999, test.millisOfSecond().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1076,"assertEquals(999, test.millisOfSecond().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1079,public void testPropertyAddInFieldMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1080,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1081,TimeOfDay updated = test.millisOfSecond().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1082,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1083,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1084,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1085,"assertEquals(49, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1086,updated = updated.millisOfSecond().addInFieldCopy(990);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1087,"assertEquals(10, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1088,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1089,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1090,"assertEquals(39, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1093,public void testPropertySetMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1094,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1095,TimeOfDay set = test.millisOfSecond().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1096,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1097,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1098,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1099,"assertEquals(12, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1102,public void testPropertySetTextMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1103,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1104,"TimeOfDay set = test.millisOfSecond().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1105,"assertEquals(10, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1106,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1107,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1108,"assertEquals(12, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1111,public void testPropertyCompareToMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1112,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1113,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1114,"assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1115,"assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1116,"assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1117,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1118,test1.millisOfSecond().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1119,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1120,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1122,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1123,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1124,"assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1125,"assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1126,"assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1127,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1128,test1.millisOfSecond().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1129,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1130,} catch (IllegalArgumentException ex) {}

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,65,tring[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,66,or (int i=0; i<zoneStrings.length; i++) {
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,67,tring[] set = zoneStrings[i];
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,68,f (set != null && set.length == 5 && id.equals(set[0])) {
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,69,"yNameKeyCache.put(set[2], new String[] {set[2], set[1]});"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,70,/ need to handle case where summer and winter have the same
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,71,"/ abbreviation, such as EST in Australia [1716305]"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,72,"/ we handle this by appending ""-Summer"", cf ZoneInfoCompiler"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,73,f (set[2].equals(set[4])) {
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,74,"yNameKeyCache.put(set[4] + ""-Summer"", new String[] {set[4], set[3]});"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,75, else {
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,76,"yNameKeyCache.put(set[4], new String[] {set[4], set[3]});"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,78,reak;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,66,String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,67,String[] setEn = null;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,68,for (String[] strings : zoneStringsEn) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,69,if (strings != null && strings.length == 5 && id.equals(strings[0])) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,70,setEn = strings;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,71,break;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,74,String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,75,String[] setLoc = null;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,76,for (String[] strings : zoneStringsLoc) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,77,if (strings != null && strings.length == 5 && id.equals(strings[0])) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,78,setLoc = strings;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,79,break;
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,83,if (setEn != null && setLoc != null) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,84,"byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});"
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,85,// need to handle case where summer and winter have the same
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,86,"// abbreviation, such as EST in Australia [1716305]"
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,87,"// we handle this by appending ""-Summer"", cf ZoneInfoCompiler"
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,88,if (setEn[2].equals(setEn[4])) {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,89,"byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});"
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,90,} else {
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,91,"byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});"
False,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,83,eturn (String[])byNameKeyCache.get(nameKey);
True,src/main/java/org/joda/time/tz/DefaultNameProvider.java,src/main/java/org/joda/time/tz/DefaultNameProvider.java,95,return (String[]) byNameKeyCache.get(nameKey);
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,23,import java.lang.reflect.Method;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,32,import java.text.DateFormatSymbols;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,643,static final boolean JDK6;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,644,static {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,645,boolean jdk6 = true;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,646,try {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,647,"DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,648,} catch (Exception ex) {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,649,jdk6 = false;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,651,JDK6 = jdk6;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,661,public void testGetShortName_berlin() {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,662,"DateTimeZone berlin = DateTimeZone.forID(""Europe/Berlin"");"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,663,"assertEquals(""CET"", berlin.getShortName(TEST_TIME_WINTER, Locale.ENGLISH));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,664,"assertEquals(""CEST"", berlin.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,665,if (JDK6) {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,666,"assertEquals(""MEZ"", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,667,"assertEquals(""MESZ"", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,668,} else {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,669,"assertEquals(""CET"", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,670,"assertEquals(""CEST"", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,693,public void testGetName_berlin() {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,694,"DateTimeZone berlin = DateTimeZone.forID(""Europe/Berlin"");"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,695,"assertEquals(""Central European Time"", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,696,"assertEquals(""Central European Summer Time"", berlin.getName(TEST_TIME_SUMMER, Locale.ENGLISH));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,697,if (JDK6) {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,698,"assertEquals(""Mitteleurop\u00e4ische Zeit"", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,699,"assertEquals(""Mitteleurop\u00e4ische Sommerzeit"", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,700,} else {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,701,"assertEquals(""Zentraleurop\u00e4ische Zeit"", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,702,"assertEquals(""Zentraleurop\u00e4ische Sommerzeit"", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));"

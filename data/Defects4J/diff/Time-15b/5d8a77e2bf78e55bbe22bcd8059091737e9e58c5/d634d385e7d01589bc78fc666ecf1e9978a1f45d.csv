is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,2,*  Copyright 2001-2012 Stephen Colebourne
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,84,rivate transient Info[] iInfoCache;
True,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,84,private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,89,InfoCache = new Info[cInfoCacheMask + 1];
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,92,rivate void readObject(java.io.ObjectInputStream in)
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,93,"hrows java.io.IOException, ClassNotFoundException"
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,95,n.defaultReadObject();
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,96,InfoCache = new Info[cInfoCacheMask + 1];
False,src/test/java/org/joda/time/tz/TestAll.java,src/test/java/org/joda/time/tz/TestAll.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/tz/TestAll.java,src/test/java/org/joda/time/tz/TestAll.java,2,*  Copyright 2001-2012 Stephen Colebourne
True,src/test/java/org/joda/time/tz/TestAll.java,src/test/java/org/joda/time/tz/TestAll.java,40,suite.addTest(TestCachedDateTimeZone.suite());
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,2,*  Copyright 2001-2012 Stephen Colebourne
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,5,*  you may not use this file except in compliance with the License.
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,6,*  You may obtain a copy of the License at
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,13,*  See the License for the specific language governing permissions and
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,14,*  limitations under the License.
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,16,package org.joda.time.tz;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,18,import java.io.ByteArrayInputStream;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,19,import java.io.ByteArrayOutputStream;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,20,import java.io.ObjectInputStream;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,21,import java.io.ObjectOutputStream;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,23,import junit.framework.TestCase;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,24,import junit.framework.TestSuite;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,26,import org.joda.time.DateTimeZone;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,29,* Test cases for FixedDateTimeZone.
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,31,* @author Stephen Colebourne
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,33,public class TestCachedDateTimeZone extends TestCase {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,35,public static void main(String[] args) {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,36,junit.textui.TestRunner.run(suite());
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,39,public static TestSuite suite() {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,40,return new TestSuite(TestCachedDateTimeZone.class);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,43,private DateTimeZone originalDateTimeZone = null;
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,45,public TestCachedDateTimeZone(String name) {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,46,super(name);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,49,protected void setUp() throws Exception {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,50,originalDateTimeZone = DateTimeZone.getDefault();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,51,DateTimeZone.setDefault(DateTimeZone.UTC);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,54,protected void tearDown() throws Exception {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,55,DateTimeZone.setDefault(originalDateTimeZone);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,58,public void test_caching() throws Exception {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,59,"CachedDateTimeZone zone1 = CachedDateTimeZone.forZone(DateTimeZone.forID(""Europe/Paris""));"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,60,"CachedDateTimeZone zone2 = CachedDateTimeZone.forZone(DateTimeZone.forID(""Europe/Paris""));"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,61,"assertSame(zone1, zone2);"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,65,public void testSerialization() throws Exception {
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,66,"CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID(""Europe/Paris""));"
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,68,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,69,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,70,oos.writeObject(test);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,71,byte[] bytes = baos.toByteArray();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,72,oos.close();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,74,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,75,ObjectInputStream ois = new ObjectInputStream(bais);
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,76,CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,77,ois.close();
True,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java,79,"assertEquals(test, result);"

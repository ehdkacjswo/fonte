is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,41," Names should be plural, such as 'years' or 'hours'."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,26,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,428,"rivate int compareReverse(Comparable a, Comparable b) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,429,f (a == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,430,f (b == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,429,"private int compareReverse(DurationField a, DurationField b) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,430,if (a == null || !a.isSupported()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,431,if (b == null || !b.isSupported()) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,435,f (b == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,436,if (b == null || !b.isSupported()) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,24,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,181,public void testFormat_yearOfEraParse() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,182,Chronology chrono = Chronology.getGJ();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,184,DateTimeFormatter f = DateTimeFormat
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,185,".forPattern(""YYYY-MM GG"")"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,186,.withChronology(chrono)
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,187,.withLocale(Locale.UK);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,189,"DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,190,"assertEquals(dt, f.parseDateTime(""2005-10 AD""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,192,"dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,193,"assertEquals(dt, f.parseDateTime(""2005-10 BC""));"

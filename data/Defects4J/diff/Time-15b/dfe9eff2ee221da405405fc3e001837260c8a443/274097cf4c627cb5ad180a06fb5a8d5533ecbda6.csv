is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,60,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,326,"* Get this object as a DateTime using ISOChronology in the default zone,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,327,* returning <code>this</code> if possible.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,329,* @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,331,public DateTime toDateTimeISO() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,332,if (getChronology() == ISOChronology.getInstance()) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,333,return this;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,335,return super.toDateTimeISO();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,154, Get this object as a DateTime.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,154,* Get this object as a DateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,156,* @return a DateTime using the same millis with ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,158,public DateTime toDateTimeISO() {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,159,"return new DateTime(getMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,163,* Get this object as a DateTime using the same chronology but a different zone.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,176, Get this object as a trusted ISO immutable DateTime. The purpose of
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,177, this method is to guarantee that an externally received DateTime
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,178, object does not have any backdoors that allow it to be modified.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,179, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,180," If this object is already a DateTime, whose chronology is"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,181," {@link ISOChronology ISO}, and the time zone came from the default"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,182," {@link org.joda.time.tz.Provider provider}, then this object is cast to"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,183," a DateTime and returned. Otherwise, a new trusted DateTime is returned."
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,185, @return a trusted ISO DateTime using the same millis
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,186," @throws IllegalArgumentException if the time zone is not trusted, and"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,187, no matching trusted time zone can be found.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,189,ublic DateTime toTrustedISODateTime() {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,190,ateTimeZone zone = getZone();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,191,f (zone == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,192,"eturn new DateTime(this, (Chronology)null);"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,195,ateTimeZone trusted = DateTimeZone.getInstance(zone.getID());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,197,f (zone == trusted &&
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,198,etClass() == DateTime.class &&
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,199,etChronology().getClass() == ISOChronology.class) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,200,eturn (DateTime) this;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,203,"eturn new DateTime(this, ISOChronology.getInstance(trusted));"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,221, Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,199,* Get this object as a MutableDateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,201,* @return a MutableDateTime using the same millis with ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,203,public MutableDateTime toMutableDateTimeISO() {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,204,"return new MutableDateTime(getMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,208,* Get this object as a MutableDateTime using the same chronology but a different zone.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,429,public void testToDateTimeISO() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,430,DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,431,DateTime result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,432,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,433,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,434,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,435,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,481,ublic void testToTrustedISODateMidnight() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,490,public void testToMutableDateTime() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,483,ateTime result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,484,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,485,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,492,MutableDateTime result = test.toMutableDateTime();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,489,/        test = new MockUntrustedDateMidnight(TEST_TIME1_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,490,/        result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,491,"/        assertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,492,"/        assertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,493,"/        assertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,494,"/        assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,496,"est = new DateMidnight(TEST_TIME1_UTC, new MockUntrustedZone(""Europe/Paris""));"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,497,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,498,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,499,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,500,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,501,"ssertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,504,/    static class MockUntrustedDateMidnight extends DateMidnight {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,505,/        MockUntrustedDateMidnight(long millis) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,506,/            super(millis);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,510,tatic class MockUntrustedZone extends DateTimeZone {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,511,ockUntrustedZone(String id) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,512,uper(id);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,514,ublic String getNameKey(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,515,eturn null;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,517,ublic int getOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,518,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,520,ublic int getStandardOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,521,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,523,ublic boolean isFixed() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,524,eturn true;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,526,ublic long nextTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,527,eturn 0;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,529,ublic long previousTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,530,eturn 0;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,532,ublic boolean equals(Object object) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,533,eturn false;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,537,ublic void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,497,public void testToMutableDateTimeISO() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,539,utableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,499,MutableDateTime result = test.toMutableDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,500,"assertSame(MutableDateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,501,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,468,public void testToDateTimeISO() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,469,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,470,DateTime result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,471,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,473,"test = new DateTime(TEST_TIME1, ISOChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,474,result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,475,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,476,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,477,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,478,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,479,"assertNotSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,481,"test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,482,result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,483,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,484,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,485,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,486,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,487,"assertNotSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,489,"test = new DateTime(TEST_TIME1, new MockNullZoneChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,490,result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,491,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,492,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,493,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,494,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,495,"assertNotSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,508,ublic void testToTrustedISODateTime() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,538,public void testToMutableDateTime() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,510,ateTime result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,511,"ssertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,512,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,513,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,515,/        test = new MockUntrustedDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,516,/        result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,517,"/        assertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,518,"/        assertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,519,"/        assertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,520,"/        assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,522,"est = new DateTime(TEST_TIME1, new MockUntrustedZone(""Europe/Paris""));"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,523,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,524,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,525,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,540,MutableDateTime result = test.toMutableDateTime();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,527,"ssertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,530,/    static class MockUntrustedDateTime extends DateTime {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,531,/        MockUntrustedDateTime(long millis) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,532,/            super(millis);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,536,tatic class MockUntrustedZone extends DateTimeZone {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,537,ockUntrustedZone(String id) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,538,uper(id);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,540,ublic String getNameKey(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,541,eturn null;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,543,ublic int getOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,544,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,546,ublic int getStandardOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,547,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,549,ublic boolean isFixed() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,550,eturn true;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,552,ublic long nextTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,553,eturn 0;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,555,ublic long previousTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,556,eturn 0;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,558,ublic boolean equals(Object object) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,559,eturn false;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,542,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,563,ublic void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,545,public void testToMutableDateTimeISO() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,565,utableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,547,MutableDateTime result = test.toMutableDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,548,"assertSame(MutableDateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,549,"assertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,856,/    public void testImmutable() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,857,/        MockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,858,"/        assertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,859,/        try {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,860,/            test.testSetMillis();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,861,/            fail();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,862,/        } catch (UnsupportedOperationException ex) {}
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,863,"/        assertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,865,/        test = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,866,"/        assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,867,/        try {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,868,/            test.testSetChronology();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,869,/            fail();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,870,/        } catch (UnsupportedOperationException ex) {}
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,871,"/        assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,874,/    static class MockChangeDateTime extends DateTime {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,875,/        MockChangeDateTime(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,876,/            super(instant);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,878,/        public void testSetMillis() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,879,/            setMillis(0L);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,881,/        public void testSetChronology() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,882,/            setChronology(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,410,public void testToDateTimeISO() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,411,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,412,DateTime result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,413,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,414,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,415,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,416,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,443,ublic void testToTrustedISODateTime() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,452,public void testToMutableDateTime() {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,445,ateTime result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,446,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,447,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,454,MutableDateTime result = test.toMutableDateTime();
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,452,ublic void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,459,public void testToMutableDateTimeISO() {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,454,utableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,461,MutableDateTime result = test.toMutableDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,462,"assertSame(MutableDateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,463,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,446,public void testToDateTimeISO() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,447,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,448,DateTime result = test.toDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,449,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,450,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,451,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,452,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,497,ublic void testToTrustedISOMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,506,public void testToMutableDateTime() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,499,ateTime result = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,500,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,501,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,502,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,503,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,505,est = new MockUntrustedMutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,506,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,507,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,508,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,508,MutableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,509,assertTrue(test != result);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,512,"est = new MutableDateTime(TEST_TIME1, new MockUntrustedZone(""Europe/Paris""));"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,513,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,514,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,515,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,516,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,517,"ssertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,520,tatic class MockUntrustedMutableDateTime extends MutableDateTime {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,521,ockUntrustedMutableDateTime(long millis) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,522,uper(millis);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,526,tatic class MockUntrustedZone extends DateTimeZone {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,527,ockUntrustedZone(String id) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,528,uper(id);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,530,ublic String getNameKey(long instant) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,531,eturn null;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,533,ublic int getOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,534,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,536,ublic int getStandardOffset(long instant) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,537,eturn 60 * 60 * 1000;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,539,ublic boolean isFixed() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,540,eturn true;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,542,ublic long nextTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,543,eturn 0;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,545,ublic long previousTransition(long instant) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,546,eturn 0;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,548,ublic boolean equals(Object object) {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,549,eturn false;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,553,ublic void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,514,public void testToMutableDateTimeISO() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,555,utableDateTime result = test.toMutableDateTime();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,556,ssertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,516,MutableDateTime result = test.toMutableDateTimeISO();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,517,"assertSame(MutableDateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,518,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,521,"assertNotSame(test, result);"

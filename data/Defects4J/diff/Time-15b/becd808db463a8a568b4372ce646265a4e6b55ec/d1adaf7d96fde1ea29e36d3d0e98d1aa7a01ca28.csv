is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,60,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,61,mport org.joda.time.convert.DurationConverter;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,62,mport org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,398,/ Millis
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,434, Set the date and time from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,430,* Sets the millisecond instant of this instant from another.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,436, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,439, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,440, @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,441, @see #setDateTime(Object)
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,432,"* This method does not change the chronology of this instant, just the"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,433,* millisecond instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,435,"* @param instant  the instant to use, null means now"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,443,ublic void setMillis(Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,444,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,445,etMillis(converter.getInstantMillis(instant));  // set via this class not super
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437,public void setMillis(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,438,long instantMillis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,439,setMillis(instantMillis);  // set via this class not super
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,448,/ Add
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,461, Adds an amount of time to this instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,462, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,463," If the resulting value is too large for the implementation,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,464, an exception is thrown.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,454,* Adds a duration to this instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,466, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,467," include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,456,* This will typically change the value of most fields.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,469, @param duration  an object representing a duration
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,470, @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,458,"* @param duration  the duration to add, null means add zero"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,473,ublic void add(Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,461,public void add(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,478, Adds an amount of time to this instant specifying how many times to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,466,* Adds a duration to this instant specifying how many times to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,467,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,468,* This will typically change the value of most fields.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,470,"* @param duration  the duration to add, null means add zero"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,471,"* @param scalar  direction and amount to add, which may be negative"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,472,* @throws ArithmeticException if the result exceeds the capacity of the instant
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,474,"public void add(ReadableDuration duration, int scalar) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,475,if (duration != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,476,"add(FieldUtils.safeMultiply(duration.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,481,* Adds a period to this instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,480," If the resulting value is too large for the implementation,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,481, an exception is thrown.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,483,* This will typically change the value of most fields.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,485,"* @param period  the period to add, null means add zero"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,486,* @throws ArithmeticException if the result exceeds the capacity of the instant
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,488,public void add(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,489,"add(period, 1);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,493,* Adds a period to this instant specifying how many times to add.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,483, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,484," include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,495,* This will typically change the value of most fields.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,486, @param duration  duration to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,497,"* @param period  the period to add, null means add zero"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,488, @throws IllegalArgumentException if the duration is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,491,"ublic void add(Object duration, int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,492,f (duration instanceof ReadablePeriod) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,493,eadablePeriod d = (ReadablePeriod) duration;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,494,".addInto(this, scalar);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,495, else {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,496,urationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,497,"dd(FieldUtils.safeMultiply(converter.getDurationMillis(duration), scalar));"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,"public void add(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,502,if (period != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"setMillis(period.addTo(getMillis(), scalar));  // set via this class not super"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,/ Chronology
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,514,/ Time zone
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,561,/ Field based
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,585, Adds to the value to the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,586, It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,587, For example:
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,588, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,589, MutableDateTime dt = new MutableDateTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,590," dt.add(GJChronology.getInstance().year(), 2);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,591, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,592," Where possible the {@link #add(DurationField, int)} is a better choice as"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,593, it is more explicit about what is being added.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,595, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,596, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,597, @throws IllegalArgumentException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,598, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,600,"ublic void add(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,601,f (field == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,602,"hrow new IllegalArgumentException(""The DateTimeField must not be null"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,604,"etMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,629," Add a value to the specified field, wrapping within that field."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,630, It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,631, For example:
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,632, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,633, MutableDateTime dt = new MutableDateTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,634," addWrapField(GJChronology.getInstance().monthOfYear(), 6);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,635, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,637, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,638, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,639, @throws IllegalArgumentException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,640, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,642,"ublic void addWrapField(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,643,f (field == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,644,"hrow new IllegalArgumentException(""The DateTimeField must not be null"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,646,"etMillis(field.addWrapField(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,649,/ Date methods
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,775,/ Time methods
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,892,/ Setters
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,898," @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,854,"* @param instant  an instant to copy the date from, time part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,906, Set the date from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,862,* Set the date from another instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,908, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,909, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,910," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,912," @param instant  an object representing an instant, time part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,865,"* @param instant  an instant to copy the date from, time part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,915,ublic void setDate(final Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,916,/ TODO: Does time zone need to be considered? See setTime(Object)
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,917,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,918,etDate(converter.getInstantMillis(instant));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,868,public void setDate(final ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,869,// TODO: Does time zone need to be considered? See setTime(ReadableInstant)
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,870,long instantMillis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,871,setDate(instantMillis);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,944," @param millis milliseconds from T00:00:00Z, date part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,897,"* @param instant  an instant to copy the time from, date part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,953, Set the time from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,906,* Set the time from another instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,955, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,956, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,957," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,959," @param instant  an object representing an instant, date part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,909,"* @param instant  an instant to copy the time from, date part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,962,ublic void setTime(final Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,963,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,964,ong millis = converter.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,965,ateTimeZone zone = converter.getChronology(instant).getZone();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,912,public void setTime(final ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,913,long instantMillis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,914,Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,915,DateTimeZone zone = instantChrono.getZone();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,967,"illis = zone.getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,917,"instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,969,etTime(millis);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,919,setTime(instantMillis);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,994, Set the date and time from milliseconds.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,995, This method is a synonym for {@link #setMillis(long)}.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,997, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,998, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1000,ublic void setDateTime(final long instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1001,etMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1005, Set the date and time from an object representing an instant.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1006, This method is a synonym for {@link #setMillis(Object)}.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1007, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1008, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1009," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1011, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1012, @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1014,ublic void setDateTime(final Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1015,etMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1040,etDateTime(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,964,setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1043,/ Date properties
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1148,/ Time properties
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1213,/ Misc
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1224,/ Basics
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,267, Set the date from milliseconds.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,268, The time part of this object will be unaffected.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,270," @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored"
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,271, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,273,oid setDate(long instant);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,276, Set the date from an object representing an instant.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,277, The time part of this object will be unaffected.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,278, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,279, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,280, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,281," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,283," @param instant  an object representing an instant, time part ignored"
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,284, @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,286,oid setDate(Object instant);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,295, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,272,* @throws IllegalArgumentException if any value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,301, Set the time from milliseconds.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,302, The date part of this object will be unaffected.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,304," @param millis milliseconds from T00:00:00Z, date part ignored"
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,305, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,307,oid setTime(long millis);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,310, Set the date from an object representing an instant.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,311, The date part of this object will be unaffected.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,312, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,313, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,314, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,315," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,317," @param instant  an object representing an instant, date part ignored"
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,318, @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,320,oid setTime(Object instant);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,330, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,284,* @throws IllegalArgumentException if any value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,336, Set the date and time from milliseconds.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,337, This method is a synonym for {@link #setMillis(long)}.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,339, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,340, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,342,oid setDateTime(long instant);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,345, Set the date and time from an object representing an instant.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,346, This method is a synonym for {@link #setMillis(Object)}.
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,347, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,348, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,349, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,350," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,352, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,353, @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,355,oid setDateTime(Object instant);
False,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,367, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,298,* @throws IllegalArgumentException if any value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,79, Sets the value from an Object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,79,* Sets the millisecond instant of this instant from another.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,81, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,82, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,83," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,81,"* This method does not change the chronology of this instant, just the"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,82,* millisecond instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,85, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,86, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,84,"* @param instant  the instant to use, null means now"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,88,oid setMillis(Object instant);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,86,void setMillis(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,129, Adds a number of millis to the value.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,127,* Adds a millisecond duration to this instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,131," If the resulting value is too large for millis, seconds"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,132, will change and so on unless it is too large for the
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,133," implementation, when an exception is thrown."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,129,* This will typically change the value of ost fields.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,141, Adds an amount of time to this instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,137,* Adds a duration to this instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,143," If the resulting value is too large for the implementation,"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,144, an exception is thrown.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,139,* This will typically change the value of most fields.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,141,"* @param duration  the duration to add, null means add zero"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,142,* @throws ArithmeticException if the result exceeds the capacity of the instant
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,144,void add(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,147,* Adds a duration to this instant specifying how many times to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,146, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,147, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,148," include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,149,* This will typically change the value of most fields.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,150, @param duration  an object representing a duration
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,151, @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,151,"* @param duration  the duration to add, null means add zero"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,152,"* @param scalar  direction and amount to add, which may be negative"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,154,oid add(Object duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,155,"void add(ReadableDuration duration, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,157, Adds an amount of time to this instant specifying how many times to add.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,158,* Adds a period to this instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,159," If the resulting value is too large for the implementation,"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,160, an exception is thrown.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,160,* This will typically change the value of most fields.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,162,"* @param period  the period to add, null means add zero"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,163,* @throws ArithmeticException if the result exceeds the capacity of the instant
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,165,void add(ReadablePeriod period);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,168,* Adds a period to this instant specifying how many times to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,162, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,163, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,164," include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,170,* This will typically change the value of most fields.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,166, @param duration  an object representing a duration
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,172,"* @param period  the period to add, null means add zero"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,168, @throws IllegalArgumentException if the duration is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,171,"oid add(Object duration, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,176,"void add(ReadablePeriod period, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,203," Adds to the value of one of the fields of a datetime, wrapping within that field."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,204, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,205," For example, 2002-03-01 add 14 months gives 2003-05-01. But 2002-03-01 add wrapped"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,206, 14 months gives 2002-05-01. This is similar to the <code>roll</code> method on Calendar.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,207, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,208, DateTimeField instances are generally obtained from a {@link Chronology} subclass.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,209," However, an application can create its own DateTimeField to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,210, date time millis in new ways.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,212," @param field  a DateTimeField instance, usually obtained from a Chronology"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,213, @param value  the number of times to add the duration
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,214, @throws IllegalArgumentException if the field is null
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,215, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,217,"oid addWrapField(DateTimeField field, int value);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,153,ublic void testAdd_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,153,public void testAdd_RD1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,155,est.add(new Long(123456L));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,155,test.add(new Duration(123456L));
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,159,ublic void testAdd_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,159,public void testAdd_RD2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,161,est.add((Object) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,161,test.add((ReadableDuration) null);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,165,ublic void testAdd_Object3() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,166,"eriod d = new Period(1, 1, 0, 1, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,167,"utableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,168,"ssertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,169,est.add(d);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,170,"ssertEquals(""2003-07-10T06:07:08.009+01:00"", test.toString());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,174,ublic void testAdd_Object_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,166,public void testAdd_RD_int1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,176,"est.add(new Long(123L), -2);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,177,"ssertEquals(TEST_TIME1 + (-2 * 123L), test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,168,"test.add(new Duration(123456L), -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,169,"assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,180,ublic void testAdd_Object_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,172,public void testAdd_RD_int2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,184,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,187,ublic void testAdd_Object_int3() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,179,public void testAdd_RP1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,191,"est.add(d, -2);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,192,"ssertEquals(""2000-04-07T03:04:05.006+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,183,test.add(d);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,184,"assertEquals(""2003-07-10T06:07:08.009+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,187,public void testAdd_RP2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,188,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,189,test.add((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,190,"assertEquals(TEST_TIME1, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,196,ublic void testAdd_DateTimeField_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,194,public void testAdd_RP_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,195,"Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,198,"est.add(ISOChronology.getInstance().year(), 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,199,"ssertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,197,"test.add(d, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,198,"assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,202,ublic void testAdd_DateTimeField_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,201,public void testAdd_RP_int2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,204,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,205,"est.add((DateTimeField) null, 2010);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,206,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,207, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,203,"test.add((ReadablePeriod) null, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,228,ublic void testAddWrapField_DateTimeField_int1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,229,"utableDateTime test = new MutableDateTime(2002, 6, 1, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,230,"est.addWrapField(ISOChronology.getInstance().monthOfYear(), 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,231,"ssertEquals(2, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,234,ublic void testAddWrapField_DateTimeField_int2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,235,utableDateTime test = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,236,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,237,"est.addWrapField(null, 2010);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,238,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,239, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,240,"ssertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,62,import org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,214,ublic void testSetMillis_Object1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,215,utableDateTime test = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,216,est.setMillis(new Long(TEST_TIME2));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,215,public void testSetMillis_RI1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,216,"MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,217,test.setMillis(new Instant(TEST_TIME2));
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,218,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,219,"assertEquals(BuddhistChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,221,ublic void testSetMillis_Object2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,222,utableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,222,public void testSetMillis_RI2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,223,"MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,225,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,226,"assertEquals(BuddhistChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,290,ublic void testSetDate_Object1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,291,"ong setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,291,public void testSetDate_RI1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,292,"DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 501);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,303,ublic void testSetDate_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,304,public void testSetDate_RI2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,352,ublic void testSetTime_Object1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,353,"ong setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,353,public void testSetTime_RI1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,354,"DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,365,ublic void testSetTime_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,366,public void testSetTime_RI2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,415,ublic void testSetDateTime_long1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,416,utableDateTime test = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,417,est.setDateTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,418,"ssertEquals(TEST_TIME2, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,419,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,423,ublic void testSetDateTime_Object1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,424,utableDateTime test = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,425,est.setDateTime(new Long(TEST_TIME2));
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,426,"ssertEquals(TEST_TIME2, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,427,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,430,ublic void testSetDateTime_Object2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,431,utableDateTime test = new MutableDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,432,est.setDateTime(null);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,433,"ssertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,434,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"

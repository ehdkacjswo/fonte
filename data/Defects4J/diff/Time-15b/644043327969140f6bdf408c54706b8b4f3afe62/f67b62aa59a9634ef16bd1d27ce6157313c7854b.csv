is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,605, <p>
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,606, NOTE: This implementation violates the Comparable contract.
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,607, This method will accept any instance of ReadablePartial as input.
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,608," However, it is possible that some implementations of ReadablePartial"
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,609," exist that do not extend AbstractPartial, and thus will throw a"
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,610, ClassCastException if compared in the opposite direction.
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,611, The cause of this problem is that ReadablePartial doesn't define
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,612," the compareTo() method, however we can't change that until v2.0."
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,629, <p>
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,630, NOTE: This implementation violates the Comparable contract.
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,631, This method will accept any instance of ReadablePartial as input.
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,632," However, it is possible that some implementations of ReadablePartial"
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,633," exist that do not extend AbstractPartial, and thus will throw a"
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,634, ClassCastException if compared in the opposite direction.
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,635, The cause of this problem is that ReadablePartial doesn't define
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,636," the compareTo() method, however we can't change that until v2.0."
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,651, <p>
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,652, NOTE: This implementation violates the Comparable contract.
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,653, This method will accept any instance of ReadablePartial as input.
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,654," However, it is possible that some implementations of ReadablePartial"
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,655," exist that do not extend AbstractPartial, and thus will throw a"
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,656, ClassCastException if compared in the opposite direction.
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,657, The cause of this problem is that ReadablePartial doesn't define
False,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,658," the compareTo() method, however we can't change that until v2.0."
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,34,ublic interface ReadablePartial {
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,34,public interface ReadablePartial extends Comparable<ReadablePartial> {
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,147,/ NOTE: This method should have existed in Joda-Time v1.0.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,148,/ We STRONGLY recommend that all implementations of ReadablePartial
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,149,"/ implement this method, as per AbstractPartial."
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,150,/ The simplest way to do this is to extend AbstractPartial.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,151,/ v2.0 of Joda-Time will include this method in this interface.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,154,/     * Compares this partial with another returning an integer
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,155,/     * indicating the order.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,156,/     * <p>
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,157,"/     * The fields are compared in order, from largest to smallest."
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,158,/     * The first field that is non-equal is used to determine the result.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,159,"/     * Thus a YearHour partial will first be compared on the year, and then"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,160,/     * on the hour.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,161,/     * <p>
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,162,/     * The specified object must be a partial instance whose field types
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,163,/     * match those of this partial. If the parial instance has different
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,164,/     * fields then a ClassCastException is thrown.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,166,/     * @param partial  an object to check against
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,167,"/     * @return negative if this is less, zero if equal, positive if greater"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,168,/     * @throws ClassCastException if the partial is the wrong class
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,169,/     *  or if it has field types that don't match
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,170,/     * @throws NullPointerException if the partial is null
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,171,/     * @since 2.0
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,173,/    int compareTo(Object partial);
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,149,* Compares this partial with another returning an integer
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,150,* indicating the order.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,151,* <p>
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,152,"* The fields are compared in order, from largest to smallest."
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,153,* The first field that is non-equal is used to determine the result.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,154,"* Thus a year-hour partial will first be compared on the year, and then"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,155,* on the hour.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,156,* <p>
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,157,* The specified object must be a partial instance whose field types
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,158,* match those of this partial. If the partial instance has different
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,159,* fields then a {@code ClassCastException} is thrown.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,161,* @param partial  an object to check against
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,162,"* @return negative if this is less, zero if equal, positive if greater"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,163,* @throws ClassCastException if the partial is the wrong class
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,164,*  or if it has field types that don't match
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,165,* @throws NullPointerException if the partial is null
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,166,"* @since 2.0, previously on {@code AbstractPartial}"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,168,int compareTo(ReadablePartial partial);
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,300, NOTE: This implementation violates the Comparable contract.
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,301, This method will accept any instance of ReadablePartial as input.
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,302," However, it is possible that some implementations of ReadablePartial"
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,303," exist that do not extend AbstractPartial, and thus will throw a"
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,304, ClassCastException if compared in the opposite direction.
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,305, The cause of this problem is that ReadablePartial doesn't define
False,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,306," the compareTo() method, however we can't change that until v2.0."
True,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,300,"* NOTE: Prior to v2.0, the {@code Comparable} interface was only implemented"
True,src/main/java/org/joda/time/base/AbstractPartial.java,src/main/java/org/joda/time/base/AbstractPartial.java,301,* in this class and not in the {@code ReadablePartial} interface.
False,src/test/java/org/joda/time/MockPartial.java,src/test/java/org/joda/time/MockPartial.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/MockPartial.java,src/test/java/org/joda/time/MockPartial.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/MockPartial.java,src/test/java/org/joda/time/MockPartial.java,62,public int compareTo(ReadablePartial partial) {
True,src/test/java/org/joda/time/MockPartial.java,src/test/java/org/joda/time/MockPartial.java,63,return 0;

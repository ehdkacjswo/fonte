is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,60,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,63,"* YearMonthDay is an immutable partial instant supporting the year, monthOfYear"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,64,* and dayOfMonth fields.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,65,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,66,* Calculations on YearMonthDay are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,67,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,68,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,69,* Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,70,* <ul>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,71,* <li><code>getMonthOfYear()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,72,* <li><code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,73,* </ul>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,74,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,75,* field:
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,76,* <ul>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,77,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,78,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,79,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,80,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,81,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,82,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,83,* </ul>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,84,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,85,"* YearMonthDay is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,86,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,88,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,89,* @since 1.0
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,91,"public final class YearMonthDay extends AbstractPartialInstant implements PartialInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,93,/** Serialization version */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,94,private static final long serialVersionUID = 797544782896179L;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,96,/** The index of the year field in the field array */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,97,public static final int YEAR = 0;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,98,/** The index of the monthOfYear field in the field array */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,99,public static final int MONTH_OF_YEAR = 1;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,100,/** The index of the dayOfMonth field in the field array */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,101,public static final int DAY_OF_MONTH = 2;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,103,// Constructors
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,106,"* Constructs a YearMonthDay with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,107,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,108,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,109,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,110,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,111,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,113,public YearMonthDay() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,114,super();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,118,"* Constructs a YearMonthDay with the current time, using the specified chronology"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,119,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,120,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,121,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,122,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,123,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,125,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,127,public YearMonthDay(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,128,super(chronology);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,132,* Constructs a YearMonthDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,133,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,134,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,135,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,136,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,137,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,139,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,141,public YearMonthDay(long instant) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,142,super(instant);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,146,* Constructs a YearMonthDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,147,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,148,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,149,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,150,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,151,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,153,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,154,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,156,"public YearMonthDay(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,157,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,161,* Constructs a YearMonthDay from an Object that represents a time.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,162,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,163,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,164,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,165,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,167,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,168,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,170,public YearMonthDay(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,171,super(instant);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,175,"* Constructs a YearMonthDay from an Object that represents a time, using the"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,176,* specified chronology.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,177,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,178,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,179,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,180,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,181,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,182,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,183,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,184,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,186,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,187,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,188,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,190,"public YearMonthDay(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,191,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,195,* Constructs a YearMonthDay with specified time field values
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,196,* using <code>ISOChronology</code> in the default zone.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,197,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,198,* The constructor uses the no time zone initialising the fields as provided.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,199,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,200,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,202,* @param year  the year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,203,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,204,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,206,"public YearMonthDay(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,207,"this(year, monthOfYear, dayOfMonth, null);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,211,* Constructs a YearMonthDay with specified time field values.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,212,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,213,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,214,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,215,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,217,* @param year  the year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,218,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,219,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,220,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,222,"public YearMonthDay(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,223,"super(new int[] {year, monthOfYear, dayOfMonth}, chronology);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,227,"* Constructs a YearMonthDay with specified fields, values and chronology."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,229,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,230,* @param values  the new set of values
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,232,"YearMonthDay(YearMonthDay partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,233,super();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,234,iChronology = partial.iChronology;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,235,iValues = values;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,240,* Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,242,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,244,protected DateTimeField[] initFields(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,245,return new DateTimeField[] {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,246,"chrono.year(),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,247,"chrono.monthOfYear(),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,248,"chrono.dayOfMonth(),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,253,* Initialize the array of values.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,255,* @param instant  the instant to use
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,256,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,258,"protected int[] initValues(long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,259,return new int[] {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,260,"chrono.year().get(instant),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,261,"chrono.monthOfYear().get(instant),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,262,"chrono.dayOfMonth().get(instant),"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,268,* Get the year field value.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,270,* @return the year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,272,public int getYear() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,273,return getValue(YEAR);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,277,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,279,* @return the month of year
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,281,public int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,282,return getValue(MONTH_OF_YEAR);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,286,* Get the day of month field value.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,288,* @return the day of month
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,290,public int getDayOfMonth() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,291,return getValue(DAY_OF_MONTH);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,296,* Get the year field property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,298,* @return the year property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,300,public Property year() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,301,"return new Property(this, YEAR);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,305,* Get the month of year field property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,307,* @return the month of year property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,309,public Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,310,"return new Property(this, MONTH_OF_YEAR);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,314,* Get the day of month field property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,316,* @return the day of month property
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,318,public Property dayOfMonth() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,319,"return new Property(this, DAY_OF_MONTH);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,324,* The property class for YearMonthDay.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,326,public static class Property extends AbstractPartialFieldProperty {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,328,/** The instant */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,329,private final YearMonthDay iInstant;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,330,/** The field index */
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,331,private final int iFieldIndex;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,334,* Constructs a property.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,336,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,337,* @param field  the field
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,338,* @param fieldIndex  the index in the instant
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,340,"Property(YearMonthDay instant, int fieldIndex) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,341,super();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,342,iInstant = instant;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,343,iFieldIndex = fieldIndex;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,347,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,349,* @return the field
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,351,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,352,return iInstant.getField(iFieldIndex);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,356,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,358,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,360,public PartialInstant getPartialInstant() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,361,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,365,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,367,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,369,public YearMonthDay getYearMonthDay() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,370,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,374,* Gets the value of the field that the partial instant is set to.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,376,* @return the field value
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,378,public int get() {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,379,return iInstant.getValue(iFieldIndex);
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,384,* Adds to the value of this field in a copy of this YearMonthDay.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,385,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,386,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,387,* added solely to this field then it will affect larger fields.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,388,* Smaller fields are unaffected.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,389,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,390,"* If the result would be too large, beyond the maximum year, then an"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,391,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,392,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,393,* The YearMonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,394,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,396,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,397,* @return a copy of the YearMonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,398,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,400,public YearMonthDay addCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,401,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,402,"getField().add(iInstant, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,403,"return new YearMonthDay(iInstant, newValues);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,407,* Adds to the value of this field in a copy of this YearMonthDay wrapping
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,408,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,409,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,410,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,411,* added solely to this field then it wraps within this field.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,412,* Other fields are unaffected.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,413,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,414,"* For example,"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,415,* <code>2004-12-20</code> addInField one month returns <code>2004-01-20</code>.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,416,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,417,* The YearMonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,418,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,420,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,421,* @return a copy of the YearMonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,422,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,424,public YearMonthDay addInFieldCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,425,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,426,"getField().addInField(iInstant, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,427,"return new YearMonthDay(iInstant, newValues);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,432,* Sets this field in a copy of the YearMonthDay.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,433,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,434,* The YearMonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,435,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,437,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,438,* @return a copy of the YearMonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,439,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,441,public YearMonthDay setCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,442,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,443,"getField().set(iInstant, iFieldIndex, newValues, value);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,444,"return new YearMonthDay(iInstant, newValues);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,448,* Sets this field in a copy of the YearMonthDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,449,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,450,* The YearMonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,451,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,453,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,454,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,455,* @return a copy of the YearMonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,456,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,458,"public YearMonthDay setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,459,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,460,"getField().set(iInstant, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,461,"return new YearMonthDay(iInstant, newValues);"
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,465,* Sets this field in a copy of the YearMonthDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,466,* <p>
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,467,* The YearMonthDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,468,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,470,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,471,* @return a copy of the YearMonthDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,472,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,474,public YearMonthDay setCopy(String text) {
True,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,JodaTime/src/java/org/joda/time/partial/YearMonthDay.java,475,"return setCopy(text, null);"
True,JodaTime/src/test/org/joda/time/partial/TestAll.java,JodaTime/src/test/org/joda/time/partial/TestAll.java,76,suite.addTest(TestYearMonthDay.suite());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,10,* are met:
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,54,package org.joda.time.partial;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,60,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,61,import java.util.Date;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,62,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,64,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,65,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,67,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,68,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,69,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,70,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,71,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,72,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,73,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,74,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,75,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,76,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,77,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,78,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,81,* This class is a Junit unit test for YearMonthDay.
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,83,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,85,public class TestYearMonthDay extends TestCase {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,87,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,89,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,90,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,92,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,93,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,94,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,95,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,97,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,98,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,99,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,100,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,102,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,104,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,105,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,108,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,109,return new TestSuite(TestYearMonthDay.class);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,112,public TestYearMonthDay(String name) {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,113,super(name);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,116,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,117,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,118,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,119,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,122,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,123,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,124,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,125,zone = null;
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,130,* Test constructor ()
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,132,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,133,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,134,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,135,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,136,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,137,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,141,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,143,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,144,YearMonthDay test = new YearMonthDay(GregorianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,145,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,146,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,147,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,148,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,152,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,154,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,155,YearMonthDay test = new YearMonthDay((Chronology) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,156,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,157,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,158,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,159,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,164,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,166,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,167,YearMonthDay test = new YearMonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,168,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,169,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,170,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,171,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,175,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,177,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,178,YearMonthDay test = new YearMonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,179,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,180,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,181,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,182,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,186,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,188,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,189,"YearMonthDay test = new YearMonthDay(TEST_TIME1, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,190,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,191,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,192,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,193,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,197,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,199,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,200,"YearMonthDay test = new YearMonthDay(TEST_TIME2, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,201,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,202,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,203,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,204,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,208,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,210,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,211,"YearMonthDay test = new YearMonthDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,212,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,213,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,214,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,215,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,220,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,222,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,223,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,224,YearMonthDay test = new YearMonthDay(date);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,225,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,226,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,227,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,228,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,232,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,234,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,235,YearMonthDay test = new YearMonthDay(null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,236,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,237,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,238,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,239,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,243,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,245,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,246,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,247,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,248,YearMonthDay test = new YearMonthDay(new Integer(0));
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,249,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,250,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,251,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,252,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,253,} finally {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,254,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,259,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,261,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,262,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,263,"YearMonthDay test = new YearMonthDay(date, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,264,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,265,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,266,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,267,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,271,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,273,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,274,"YearMonthDay test = new YearMonthDay((Object) null, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,275,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,276,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,277,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,278,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,282,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,284,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,285,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,286,"YearMonthDay test = new YearMonthDay(date, null);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,287,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,288,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,289,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,290,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,294,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,296,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,297,"YearMonthDay test = new YearMonthDay((Object) null, null);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,298,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,299,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,300,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,301,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,305,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,307,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,308,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,309,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,310,"YearMonthDay test = new YearMonthDay(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,311,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,312,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,313,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,314,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,315,} finally {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,316,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,322,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,324,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,325,"YearMonthDay test = new YearMonthDay(1970, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,326,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,327,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,328,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,329,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,330,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,331,"new YearMonthDay(Integer.MIN_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,332,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,333,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,334,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,335,"new YearMonthDay(Integer.MAX_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,336,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,337,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,338,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,339,"new YearMonthDay(1970, 0, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,340,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,341,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,342,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,343,"new YearMonthDay(1970, 13, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,344,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,345,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,346,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,347,"new YearMonthDay(1970, 6, 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,348,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,349,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,350,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,351,"new YearMonthDay(1970, 6, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,352,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,353,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,354,"new YearMonthDay(1970, 7, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,355,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,356,"new YearMonthDay(1970, 7, 32);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,357,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,358,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,362,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,364,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,365,"YearMonthDay test = new YearMonthDay(1970, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,366,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,367,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,368,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,369,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,370,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,371,"new YearMonthDay(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,372,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,373,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,374,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,375,"new YearMonthDay(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,376,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,377,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,378,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,379,"new YearMonthDay(1970, 0, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,380,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,381,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,382,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,383,"new YearMonthDay(1970, 13, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,384,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,385,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,386,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,387,"new YearMonthDay(1970, 6, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,388,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,389,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,390,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,391,"new YearMonthDay(1970, 6, 31, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,392,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,393,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,394,"new YearMonthDay(1970, 7, 31, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,395,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,396,"new YearMonthDay(1970, 7, 32, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,397,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,398,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,402,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,404,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,405,"YearMonthDay test = new YearMonthDay(1970, 6, 9, null);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,406,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,407,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,408,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,409,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,413,public void testGet() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,414,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,415,"assertEquals(1970, test.get(ISOChronology.getInstance().year()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,416,"assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,417,"assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,418,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,419,test.get(null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,420,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,421,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,422,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,423,test.get(ISOChronology.getInstance().hourOfDay());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,424,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,425,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,426,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,427,test.get(ISOChronology.getInstance(PARIS).year());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,428,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,429,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,430,// TODO: Should this fail or suceed - by succeeding it exposes out implementation
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,431,//        try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,432,//            test.get(GregorianChronology.getInstance().year());
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,433,//            fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,434,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,437,public void testGetFieldSize() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,438,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,439,"assertEquals(3, test.getFieldSize());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,442,public void testGetField() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,443,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,444,"assertSame(ISOChronology.getInstance().year(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,445,"assertSame(ISOChronology.getInstance().monthOfYear(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,446,"assertSame(ISOChronology.getInstance().dayOfMonth(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,447,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,448,test.getField(-1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,449,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,450,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,451,test.getField(3);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,452,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,455,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,456,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,457,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,458,"assertSame(ISOChronology.getInstance().year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,459,"assertSame(ISOChronology.getInstance().monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,460,"assertSame(ISOChronology.getInstance().dayOfMonth(), fields[2]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,463,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,464,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,465,"assertEquals(1970, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,466,"assertEquals(6, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,467,"assertEquals(9, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,468,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,469,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,470,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,471,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,472,test.getValue(3);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,473,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,476,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,477,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,478,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,479,"assertEquals(1970, values[0]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,480,"assertEquals(6, values[1]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,481,"assertEquals(9, values[2]);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,484,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,485,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,486,"assertEquals(true, test.isSupported(ISOChronology.getInstance().year()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,487,"assertEquals(true, test.isSupported(ISOChronology.getInstance().monthOfYear()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,488,"assertEquals(true, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,489,"assertEquals(false, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,490,"assertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).year()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,493,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,494,"YearMonthDay test1 = new YearMonthDay(1970, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,495,"YearMonthDay test2 = new YearMonthDay(1970, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,496,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,497,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,498,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,499,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,500,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,501,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,502,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,504,"YearMonthDay test3 = new YearMonthDay(1971, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,505,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,506,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,507,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,508,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,509,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,510,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,512,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,513,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,514,"assertEquals(false, test1.equals(MockPartialInstant.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,517,class MockInstant extends MockPartialInstant {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,518,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,519,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,520,"ISOChronology.getInstance().year(),"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,521,"ISOChronology.getInstance().monthOfYear(),"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,522,"ISOChronology.getInstance().dayOfMonth(),"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,525,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,526,"return new int[] {1970, 6, 9};"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,531,public void testResolve_long() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,532,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,533,DateTime dt = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,534,"assertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,536,"DateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,537,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,538,"assertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,539,"assertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,542,public void testResolveDateTime_RI() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,543,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,544,DateTime dt = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,545,"assertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,547,DateTime result = test.resolveDateTime(dt);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,548,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,549,"assertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,550,"assertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,553,public void testResolveDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,554,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,555,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,557,DateTime result = test.resolveDateTime(null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,558,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,559,"assertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,562,public void testResolveInto_RWI() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,563,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,564,MutableDateTime mdt = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,565,"assertEquals(""1970-04-06T12:24:00.000Z"", mdt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,567,test.resolveInto(mdt);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,568,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,569,"assertEquals(""1972-06-09T12:24:00.000Z"", mdt.toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,572,public void testResolveInto_nullRWI() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,573,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,575,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,576,test.resolveInto(null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,577,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,578,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,582,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,583,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,585,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,586,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,587,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,588,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,589,oos.close();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,591,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,592,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,593,YearMonthDay result = (YearMonthDay) ois.readObject();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,594,ois.close();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,596,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,597,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,598,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,599,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,603,public void testToString() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,604,// TODO
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,608,public void testPropertyGetYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,609,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,610,"assertSame(test.getChronology().year(), test.year().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,611,"assertEquals(""year"", test.year().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,612,"assertEquals(""Property[year]"", test.year().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,613,"assertSame(test, test.year().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,614,"assertSame(test, test.year().getYearMonthDay());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,615,"assertEquals(1972, test.year().get());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,616,"assertEquals(""1972"", test.year().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,617,"assertEquals(""1972"", test.year().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,618,"assertEquals(""1972"", test.year().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,619,"assertEquals(""1972"", test.year().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,620,"assertEquals(test.getChronology().years(), test.year().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,621,"assertEquals(null, test.year().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,622,"assertEquals(9, test.year().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,623,"assertEquals(9, test.year().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,626,public void testPropertyGetMaxMinValuesYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,627,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,628,"assertEquals(-292275054, test.year().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,629,"assertEquals(-292275054, test.year().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,630,"assertEquals(292277023, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,631,"assertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,634,public void testPropertyAddYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,635,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,636,YearMonthDay copy = test.year().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,637,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,638,"check(copy, 1981, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,640,copy = test.year().addCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,641,"check(copy, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,643,copy = test.year().addCopy(292277023 - 1972);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,644,"check(copy, 292277023, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,646,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,647,test.year().addCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,648,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,649,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,650,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,652,copy = test.year().addCopy(-1972);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,653,"check(copy, 0, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,655,copy = test.year().addCopy(-1973);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,656,"check(copy, -1, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,658,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,659,test.year().addCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,660,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,661,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,662,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,665,public void testPropertyAddInFieldYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,666,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,667,YearMonthDay copy = test.year().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,668,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,669,"check(copy, 1981, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,671,copy = test.year().addInFieldCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,672,"check(copy, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,674,copy = test.year().addInFieldCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,675,"check(copy, -292275054, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,677,copy = test.year().addInFieldCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,678,"check(copy, 292277023, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,681,public void testPropertySetYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,682,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,683,YearMonthDay copy = test.year().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,684,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,685,"check(copy, 12, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,688,public void testPropertySetTextYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,689,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,690,"YearMonthDay copy = test.year().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,691,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,692,"check(copy, 12, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,695,public void testPropertyCompareToYear() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,696,YearMonthDay test1 = new YearMonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,697,YearMonthDay test2 = new YearMonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,698,"assertEquals(true, test1.year().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,699,"assertEquals(true, test2.year().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,700,"assertEquals(true, test1.year().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,701,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,702,test1.year().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,703,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,704,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,706,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,707,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,708,"assertEquals(true, test1.year().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,709,"assertEquals(true, test2.year().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,710,"assertEquals(true, test1.year().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,711,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,712,test1.year().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,713,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,714,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,718,public void testPropertyGetMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,719,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,720,"assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,721,"assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,722,"assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,723,"assertSame(test, test.monthOfYear().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,724,"assertSame(test, test.monthOfYear().getYearMonthDay());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,725,"assertEquals(6, test.monthOfYear().get());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,726,"assertEquals(""June"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,727,"assertEquals(""juin"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,728,"assertEquals(""Jun"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,729,"assertEquals(""juin"", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,730,"assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,731,"assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,732,"assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,733,"assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,734,"test = new YearMonthDay(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,735,"assertEquals(""juillet"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,736,"assertEquals(""juil."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,739,public void testPropertyGetMaxMinValuesMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,740,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,741,"assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,742,"assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,743,"assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,744,"assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,747,public void testPropertyAddMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,748,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,749,YearMonthDay copy = test.monthOfYear().addCopy(6);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,750,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,751,"check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,753,copy = test.monthOfYear().addCopy(7);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,754,"check(copy, 1973, 1, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,756,copy = test.monthOfYear().addCopy(-5);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,757,"check(copy, 1972, 1, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,759,copy = test.monthOfYear().addCopy(-6);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,760,"check(copy, 1971, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,762,"test = new YearMonthDay(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,763,copy = test.monthOfYear().addCopy(1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,764,"check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,766,copy = test.monthOfYear().addCopy(2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,767,"check(copy, 1972, 3, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,769,copy = test.monthOfYear().addCopy(3);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,770,"check(copy, 1972, 4, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,772,"test = new YearMonthDay(1971, 1, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,773,copy = test.monthOfYear().addCopy(1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,774,"check(copy, 1971, 2, 28);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,777,public void testPropertyAddInFieldMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,778,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,779,YearMonthDay copy = test.monthOfYear().addInFieldCopy(4);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,780,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,781,"check(copy, 1972, 10, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,783,copy = test.monthOfYear().addInFieldCopy(8);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,784,"check(copy, 1972, 2, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,786,copy = test.monthOfYear().addInFieldCopy(-8);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,787,"check(copy, 1972, 10, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,789,"test = new YearMonthDay(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,790,copy = test.monthOfYear().addInFieldCopy(1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,791,"check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,793,copy = test.monthOfYear().addInFieldCopy(2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,794,"check(copy, 1972, 3, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,796,copy = test.monthOfYear().addInFieldCopy(3);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,797,"check(copy, 1972, 4, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,799,"test = new YearMonthDay(1971, 1, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,800,copy = test.monthOfYear().addInFieldCopy(1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,801,"check(copy, 1971, 2, 28);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,804,public void testPropertySetMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,805,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,806,YearMonthDay copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,807,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,808,"check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,810,"test = new YearMonthDay(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,811,copy = test.monthOfYear().setCopy(2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,812,"check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,814,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,815,test.monthOfYear().setCopy(13);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,816,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,817,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,818,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,819,test.monthOfYear().setCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,820,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,821,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,824,public void testPropertySetTextMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,825,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,826,"YearMonthDay copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,827,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,828,"check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,830,"copy = test.monthOfYear().setCopy(""December"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,831,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,832,"check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,834,"copy = test.monthOfYear().setCopy(""Dec"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,835,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,836,"check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,839,public void testPropertyCompareToMonth() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,840,YearMonthDay test1 = new YearMonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,841,YearMonthDay test2 = new YearMonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,842,"assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,843,"assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,844,"assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,845,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,846,test1.monthOfYear().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,847,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,848,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,850,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,851,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,852,"assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,853,"assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,854,"assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,855,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,856,test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,857,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,858,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,862,public void testPropertyGetDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,863,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,864,"assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,865,"assertEquals(""dayOfMonth"", test.dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,866,"assertEquals(""Property[dayOfMonth]"", test.dayOfMonth().toString());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,867,"assertSame(test, test.dayOfMonth().getPartialInstant());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,868,"assertSame(test, test.dayOfMonth().getYearMonthDay());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,869,"assertEquals(9, test.dayOfMonth().get());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,870,"assertEquals(""9"", test.dayOfMonth().getAsText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,871,"assertEquals(""9"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,872,"assertEquals(""9"", test.dayOfMonth().getAsShortText());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,873,"assertEquals(""9"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,874,"assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,875,"assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,876,"assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,877,"assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,880,public void testPropertyGetMaxMinValuesDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,881,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,882,"assertEquals(1, test.dayOfMonth().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,883,"assertEquals(1, test.dayOfMonth().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,884,"assertEquals(30, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,885,"assertEquals(31, test.dayOfMonth().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,886,"test = new YearMonthDay(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,887,"assertEquals(31, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,888,"test = new YearMonthDay(1972, 2, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,889,"assertEquals(29, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,890,"test = new YearMonthDay(1971, 2, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,891,"assertEquals(28, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,894,public void testPropertyAddDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,895,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,896,YearMonthDay copy = test.dayOfMonth().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,897,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,898,"check(copy, 1972, 6, 18);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,900,copy = test.dayOfMonth().addCopy(21);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,901,"check(copy, 1972, 6, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,903,copy = test.dayOfMonth().addCopy(22);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,904,"check(copy, 1972, 7, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,906,copy = test.dayOfMonth().addCopy(22 + 30);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,907,"check(copy, 1972, 7, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,909,copy = test.dayOfMonth().addCopy(22 + 31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,910,"check(copy, 1972, 8, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,912,copy = test.dayOfMonth().addCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,913,"check(copy, 1972, 12, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,915,copy = test.dayOfMonth().addCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,916,"check(copy, 1973, 1, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,918,copy = test.dayOfMonth().addCopy(-8);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,919,"check(copy, 1972, 6, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,921,copy = test.dayOfMonth().addCopy(-9);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,922,"check(copy, 1972, 5, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,924,copy = test.dayOfMonth().addCopy(-8 - 31 - 30 - 31 - 29 - 31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,925,"check(copy, 1972, 1, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,927,copy = test.dayOfMonth().addCopy(-9 - 31 - 30 - 31 - 29 - 31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,928,"check(copy, 1971, 12, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,931,public void testPropertyAddInFieldDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,932,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,933,YearMonthDay copy = test.dayOfMonth().addInFieldCopy(21);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,934,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,935,"check(copy, 1972, 6, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,937,copy = test.dayOfMonth().addInFieldCopy(22);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,938,"check(copy, 1972, 6, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,940,copy = test.dayOfMonth().addInFieldCopy(-12);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,941,"check(copy, 1972, 6, 27);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,943,"test = new YearMonthDay(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,944,copy = test.dayOfMonth().addInFieldCopy(21);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,945,"check(copy, 1972, 7, 30);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,947,copy = test.dayOfMonth().addInFieldCopy(22);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,948,"check(copy, 1972, 7, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,950,copy = test.dayOfMonth().addInFieldCopy(23);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,951,"check(copy, 1972, 7, 1);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,953,copy = test.dayOfMonth().addInFieldCopy(-12);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,954,"check(copy, 1972, 7, 28);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,957,public void testPropertySetDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,958,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,959,YearMonthDay copy = test.dayOfMonth().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,960,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,961,"check(copy, 1972, 6, 12);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,963,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,964,test.dayOfMonth().setCopy(31);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,965,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,966,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,967,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,968,test.dayOfMonth().setCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,969,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,970,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,973,public void testPropertySetTextDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,974,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,975,"YearMonthDay copy = test.dayOfMonth().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,976,"check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,977,"check(copy, 1972, 6, 12);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,980,public void testPropertyCompareToDay() {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,981,YearMonthDay test1 = new YearMonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,982,YearMonthDay test2 = new YearMonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,983,"assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,984,"assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,985,"assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,986,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,987,test1.dayOfMonth().compareTo((PartialInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,988,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,989,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,991,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,992,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,993,"assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,994,"assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,995,"assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,996,try {
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,997,test1.dayOfMonth().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,998,fail();
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,999,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,1003,"private void check(YearMonthDay test, int hour, int min, int sec) {"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,1004,"assertEquals(hour, test.getYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,1005,"assertEquals(min, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java,1006,"assertEquals(sec, test.getDayOfMonth());"

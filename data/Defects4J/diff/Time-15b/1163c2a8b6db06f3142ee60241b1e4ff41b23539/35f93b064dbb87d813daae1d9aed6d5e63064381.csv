is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,110, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,111, ISO chronology in the default zone.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,112, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,113," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,115,ublic static LocalDate nowDefaultZone() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,116,"eturn forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,120, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,121, ISO chronology in the specified zone.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,122, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,123," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,124," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,126," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,128,ublic static LocalDate now(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,129,"eturn forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,133, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,134, specified chronology.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,135, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,136," If the chronology is null, ISO chronology in the default time zone is used."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,137," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,139," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,141,ublic static LocalDate now(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,142,"eturn forInstant(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,164,ublic static LocalDate forFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,127,public static LocalDate fromCalendarFields(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,190,ublic static LocalDate forFields(Date date) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,153,public static LocalDate fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,166,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,167,* ISO chronology in the default zone.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,168,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,169,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,171,public LocalDate() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,172,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,176,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,177,* ISO chronology in the specified zone.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,178,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,179,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,180,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,182,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,184,public LocalDate(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,185,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,189,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,190,* specified chronology.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,191,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,192,"* If the chronology is null, ISO chronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,193,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,195,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,197,public LocalDate(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,198,"this(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,210,ublic static LocalDate forInstantDefaultZone(long instant) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,211,"eturn forInstant(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,210,public LocalDate(long instant) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,211,"this(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,224,"ublic static LocalDate forInstant(long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,225,"eturn forInstant(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,224,"public LocalDate(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,225,"this(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,238,"ublic static LocalDate forInstant(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,238,"public LocalDate(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,241,"eturn new LocalDate(localMillis, chronology.withUTC());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,242,chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,243,chronology.dayOfMonth().roundFloor(localMillis);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,244,iLocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,245,iChronology = chronology;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,261,ublic static LocalDate forInstant(Object instant) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,262,"eturn forInstant(instant, (Chronology) null);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,265,public LocalDate(Object instant) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,266,"this(instant, (Chronology) null);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,281,"ublic static LocalDate forInstant(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,285,"public LocalDate(Object instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,283,"hronology chrono = converter.getChronology(instant, zone);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,284,"ong millis = converter.getInstantMillis(instant, chrono);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,285,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,286,"eturn forInstant(millis, chrono);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,287,"Chronology chronology = converter.getChronology(instant, zone);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,288,"long millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,290,"long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,291,chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,292,chronology.dayOfMonth().roundFloor(localMillis);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,293,iLocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,294,iChronology = chronology;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,304,"ublic static LocalDate forInstant(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,312,"public LocalDate(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,308,"eturn forInstant(millis, chrono);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,312, Constructs an instance set to the local time defined by the specified
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,313, instant evaluated using the specified local (UTC) chronology.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,315, @param localMillis  the local milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,316," @param chronology  the UTC chronology, not null"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,318,"ocalDate(long localMillis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,319,uper();
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,320,hronology.dayOfMonth().roundFloor(localMillis);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,317,"long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,318,chrono = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,319,chrono.dayOfMonth().roundFloor(localMillis);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,322,Chronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,321,iChronology = chrono;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,518,ublic DateTime toDateTimeAtMidnightDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,517,public DateTime toDateTimeAtMidnight() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,550,ublic DateTime toDateTimeAtCurrentTimeDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,549,public DateTime toDateTimeAtCurrentTime() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,583,ublic DateMidnight toDateMidnightDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,582,public DateMidnight toDateMidnight() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,616,ublic DateTime toDateTimeDefaultZone(LocalTime time) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,615,public DateTime toDateTime(LocalTime time) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,658,ublic Interval toIntervalDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,657,public Interval toInterval() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1686,ublic LocalDate withRoundedFloor() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1685,public LocalDate roundFloor() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1700,ublic LocalDate withRoundedCeiling() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1699,public LocalDate roundCeiling() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1710,ublic LocalDate withRoundedHalfFloor() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1709,public LocalDate roundHalfFloor() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1720,ublic LocalDate withRoundedHalfCeiling() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1719,public LocalDate roundHalfCeiling() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1731,ublic LocalDate withRoundedHalfEven() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1730,public LocalDate roundHalfEven() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,107, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,108, ISO chronology in the default zone.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,109, <p>
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,110," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,112,ublic static LocalTime nowDefaultZone() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,113,"eturn forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,117, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,118, ISO chronology in the specified zone.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,119, <p>
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,120," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,121," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,123," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,125,ublic static LocalTime now(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,126,"eturn forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,130, Constructs an instance set to the current local time evaluated using
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,131, specified chronology and zone.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,132, <p>
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,133," If the chronology is null, ISO chronology in the default time zone is used."
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,134," Once the constructor is completed, the zone is no longer used."
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,136," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,138,ublic static LocalTime now(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,139,"eturn forInstant(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,192,ublic static LocalTime forFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,155,public static LocalTime fromCalendarFields(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,219,ublic static LocalTime forFields(Date date) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,182,public static LocalTime fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,196,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,197,* ISO chronology in the default zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,198,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,199,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,201,public LocalTime() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,202,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,206,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,207,* ISO chronology in the specified zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,208,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,209,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,210,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,212,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,214,public LocalTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,215,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,219,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,220,* specified chronology and zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,221,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,222,"* If the chronology is null, ISO chronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,223,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,225,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,227,public LocalTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,228,"this(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,240,ublic static LocalTime forInstantDefaultZone(long instant) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,241,"eturn forInstant(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,240,public LocalTime(long instant) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,241,"this(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,254,"ublic static LocalTime forInstant(long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,255,"eturn forInstant(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,254,"public LocalTime(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,255,"this(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,268,"ublic static LocalTime forInstant(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,268,"public LocalTime(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,271,"eturn new LocalTime(localMillis, chronology.withUTC());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,272,chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,273,chronology.millisOfDay().get(localMillis);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,274,iLocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,275,iChronology = chronology;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,289,ublic static LocalTime forInstant(Object instant) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,290,"eturn forInstant(instant, (Chronology) null);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,293,public LocalTime(Object instant) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,294,"this(instant, (Chronology) null);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,309,"ublic static LocalTime forInstant(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,313,"public LocalTime(Object instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,311,"hronology chrono = converter.getChronology(instant, zone);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,312,"ong millis = converter.getInstantMillis(instant, chrono);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,313,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,314,"eturn forInstant(millis, chrono);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,315,"Chronology chronology = converter.getChronology(instant, zone);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,316,"long millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,317,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,319,"long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,320,chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,321,chronology.millisOfDay().get(localMillis);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,322,iLocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,323,iChronology = chronology;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,332,"ublic static LocalTime forInstant(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,341,"public LocalTime(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,336,"eturn forInstant(millis, chrono);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,340, Constructs an instance set to the local time defined by the specified
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,341, instant evaluated using the specified local (UTC) chronology.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,343, @param localMillis  the local milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,344," @param chronology  the UTC chronology, not null"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,346,"ocalTime(long localMillis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,347,uper();
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,348,hronology.millisOfDay().get(localMillis);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,346,"long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,347,chrono = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,348,chrono.millisOfDay().get(localMillis);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,350,Chronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,350,iChronology = chrono;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1085,ublic DateTime toDateTimeTodayDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1085,public DateTime toDateTimeToday() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1378,ublic LocalTime withRoundedFloor() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1378,public LocalTime roundFloor() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1392,ublic LocalTime withRoundedCeiling() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1392,public LocalTime roundCeiling() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1402,ublic LocalTime withRoundedHalfFloor() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1402,public LocalTime roundHalfFloor() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1412,ublic LocalTime withRoundedHalfCeiling() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1412,public LocalTime roundHalfCeiling() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1423,ublic LocalTime withRoundedHalfEven() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1423,public LocalTime roundHalfEven() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,103,ocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,103,LocalDate test = new LocalDate();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,122,ocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,122,LocalDate test = new LocalDate();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,127,ocalDate test = LocalDate.now(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,127,LocalDate test = new LocalDate(COPTIC_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,140,ocalDate test = LocalDate.now(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,140,LocalDate test = new LocalDate(COPTIC_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,149,ocalDate test = LocalDate.now(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,149,LocalDate test = new LocalDate(COPTIC_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,162,ocalDate test = LocalDate.now(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,162,LocalDate test = new LocalDate(COPTIC_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,171,ocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,171,LocalDate test = new LocalDate();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,184,ocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,184,LocalDate test = new LocalDate();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,193,ocalDate test = LocalDate.now(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,193,LocalDate test = new LocalDate(COPTIC_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,607,ateTime test = base.toDateTimeAtMidnightDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,607,DateTime test = base.toDateTimeAtMidnight();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,635,ateTime test = base.toDateTimeAtCurrentTimeDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,635,DateTime test = base.toDateTimeAtCurrentTime();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,674,ublic void testToDateTimeDefaultZone_LocalTime() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,674,public void testToDateTime_LocalTime() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,678,ateTime test = base.toDateTimeDefaultZone(tod);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,678,DateTime test = base.toDateTime(tod);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,684,ublic void testToDateTimeDefaultZone_nullLocalTime() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,684,public void testToDateTime_nullLocalTime() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,689,ateTime test = base.toDateTimeDefaultZone((LocalTime) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,689,DateTime test = base.toDateTime((LocalTime) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,741,ateMidnight test = base.toDateMidnightDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,741,DateMidnight test = base.toDateMidnight();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,794,nterval test = base.toIntervalDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,794,Interval test = base.toInterval();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,796,ateTime start = base.toDateTimeAtMidnightDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,796,DateTime start = base.toDateTimeAtMidnight();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,85,ublic void testFactory_ForCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,85,public void testFactory_FromCalendarFields() throws Exception {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,89,"ssertEquals(expected, LocalDate.forFields(cal));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,89,"assertEquals(expected, LocalDate.fromCalendarFields(cal));"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,91,ocalDate.forFields((Calendar) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,91,LocalDate.fromCalendarFields((Calendar) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,97,ublic void testFactory_ForDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,97,public void testFactory_FromDateFields() throws Exception {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,101,"ssertEquals(expected, LocalDate.forFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,101,"assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,103,ocalDate.forFields((Date) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,103,LocalDate.fromDateFields((Date) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,109,ublic void testFactory_nowDefaultZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,110,ocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,109,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,110,LocalDate test = new LocalDate();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,117,ublic void testFactory_now_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,117,public void testConstructor_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,122,ocalDate test = LocalDate.now(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,122,LocalDate test = new LocalDate(LONDON);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,128,est = LocalDate.now(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,128,test = new LocalDate(PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,135,ublic void testFactory_now_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,135,public void testConstructor_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,140,ocalDate test = LocalDate.now((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,140,LocalDate test = new LocalDate((DateTimeZone) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,147,ublic void testFactory_now_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,148,ocalDate test = LocalDate.now(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,147,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,148,LocalDate test = new LocalDate(GREGORIAN_PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,155,ublic void testFactory_now_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,156,ocalDate test = LocalDate.now((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,155,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,156,LocalDate test = new LocalDate((Chronology) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,164,ublic void testFactory_forInstantDefaultZone_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,165,ocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,164,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,165,LocalDate test = new LocalDate(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,172,ublic void testFactory_forInstantDefaultZone_long2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,173,ocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,172,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,173,LocalDate test = new LocalDate(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,180,ublic void testFactory_forInstant_long1_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,181,"ocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,180,public void testConstructor_long1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,181,"LocalDate test = new LocalDate(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,188,ublic void testFactory_forInstant_long2_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,189,"ocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,188,public void testConstructor_long2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,189,"LocalDate test = new LocalDate(TEST_TIME2, PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,196,ublic void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,197,"ocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,196,public void testConstructor_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,197,"LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,204,ublic void testFactory_forInstant_long1_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,205,"ocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,204,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,205,"LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,212,ublic void testFactory_forInstant_long2_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,213,"ocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,212,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,213,"LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,220,ublic void testFactory_forInstant_long_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,221,"ocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,220,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,221,"LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,229,ublic void testFactory_forInstant_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,229,public void testConstructor_Object1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,231,ocalDate test = LocalDate.forInstant(date);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,231,LocalDate test = new LocalDate(date);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,238,ublic void testFactory_forInstant_nullObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,239,ocalDate test = LocalDate.forInstant((Object) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,238,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,239,LocalDate test = new LocalDate((Object) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,246,ublic void testFactory_forInstant_Object_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,246,public void testConstructor_Object_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,248,"ocalDate test = LocalDate.forInstant(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,248,"LocalDate test = new LocalDate(date, PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,255,ublic void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,256,"ocalDate test = LocalDate.forInstant((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,255,public void testConstructor_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,256,"LocalDate test = new LocalDate((Object) null, PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,263,ublic void testFactory_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,263,public void testConstructor_Object_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,265,"ocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,265,"LocalDate test = new LocalDate(date, (DateTimeZone) null);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,272,ublic void testFactory_nullObject_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,273,"ocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,272,public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,273,"LocalDate test = new LocalDate((Object) null, (DateTimeZone) null);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,280,ublic void testFactory_forInstant_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,280,public void testConstructor_Object_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,282,"ocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,282,"LocalDate test = new LocalDate(date, GREGORIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,289,ublic void testFactory_forInstant_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,290,"ocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,289,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,290,"LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,297,ublic void testFactory_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,297,public void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,299,"ocalDate test = LocalDate.forInstant(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,299,"LocalDate test = new LocalDate(date, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,306,ublic void testFactory_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,307,"ocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,306,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,307,"LocalDate test = new LocalDate((Object) null, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,667,ateTime test = base.toDateTimeTodayDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,667,DateTime test = base.toDateTimeToday();
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,106,ublic void testFactory_ForFields_Calendar() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,106,public void testFactory_FromCalendarFields_Calendar() throws Exception {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,110,"ssertEquals(expected, LocalTime.forFields(cal));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,110,"assertEquals(expected, LocalTime.fromCalendarFields(cal));"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,112,ocalTime.forFields((Calendar) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,112,LocalTime.fromCalendarFields((Calendar) null);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,118,ublic void testFactory_ForFields_Date() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,118,public void testFactory_FromDateFields_Date() throws Exception {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,122,"ssertEquals(expected, LocalTime.forFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,122,"assertEquals(expected, LocalTime.fromDateFields(cal.getTime()));"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,124,ocalTime.forFields((Date) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,124,LocalTime.fromDateFields((Date) null);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,159,ublic void testFactory_nowDefaultZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,160,ocalTime test = LocalTime.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,159,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,160,LocalTime test = new LocalTime();
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,169,ublic void testFactory_now_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,169,public void testConstructor_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,174,ocalTime test = LocalTime.now(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,174,LocalTime test = new LocalTime(LONDON);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,181,est = LocalTime.now(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,181,test = new LocalTime(PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,189,ublic void testFactory_now_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,189,public void testConstructor_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,194,ocalTime test = LocalTime.now((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,194,LocalTime test = new LocalTime((DateTimeZone) null);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,203,ublic void testFactory_now_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,204,ocalTime test = LocalTime.now(JULIAN_LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,203,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,204,LocalTime test = new LocalTime(JULIAN_LONDON);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,212,ublic void testFactory_now_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,213,ocalTime test = LocalTime.now((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,212,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,213,LocalTime test = new LocalTime((Chronology) null);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,222,ublic void testFactory_forInstantDefaultZone_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,223,ocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,222,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,223,LocalTime test = new LocalTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,231,ublic void testFactory_forInstantDefaultZone_long2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,232,ocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,231,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,232,LocalTime test = new LocalTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,241,ublic void testFactory_forInstant_long_DateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,242,"ocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,241,public void testConstructor_long_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,242,"LocalTime test = new LocalTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,250,ublic void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,251,"ocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,250,public void testConstructor_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,251,"LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,260,ublic void testFactory_forInstant_long1_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,261,"ocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,260,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,261,"LocalTime test = new LocalTime(TEST_TIME1, JULIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,269,ublic void testFactory_forInstant_long2_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,270,"ocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,269,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,270,"LocalTime test = new LocalTime(TEST_TIME2, JULIAN_LONDON);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,278,ublic void testFactory_forInstant_long_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,279,"ocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,278,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,279,"LocalTime test = new LocalTime(TEST_TIME1, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,288,ublic void testFactory_forInstant_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,288,public void testConstructor_Object1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,290,ocalTime test = LocalTime.forInstant(date);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,290,LocalTime test = new LocalTime(date);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,298,ublic void testFactory_forInstant_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,298,public void testConstructor_Object2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,301,ocalTime test = LocalTime.forInstant(cal);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,301,LocalTime test = new LocalTime(cal);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,309,ublic void testFactory_forInstant_nullObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,310,ocalTime test = LocalTime.forInstant((Object) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,309,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,310,LocalTime test = new LocalTime((Object) null);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,318,/    public void testFactory_forInstant_localTimeObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,319,"/        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,320,/        LocalTime test = LocalTime.forInstant(base);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,321,"/        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,322,"/        assertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,323,"/        assertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,324,"/        assertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,325,"/        assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,319,public void testConstructor_Object1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,320,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,321,"LocalTime test = new LocalTime(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,322,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,323,"assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,324,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,325,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,326,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,329,public void testConstructor_Object2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,330,"LocalTime test = new LocalTime(""T10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,331,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,333,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,334,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,336,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,337,"new LocalTime(""T1020"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,338,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,339,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,342,public void testConstructor_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"LocalTime test = new LocalTime((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,345,"assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,346,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,347,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,351,public void testConstructor_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,352,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,353,"LocalTime test = new LocalTime(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,354,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,355,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,356,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,357,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,358,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,361,public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,362,"LocalTime test = new LocalTime((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,363,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,364,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,365,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,366,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,367,"assertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,329,ublic void testFactory_forInstant_Object1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,371,public void testConstructor_Object1_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,331,"ocalTime test = LocalTime.forInstant(date, JULIAN_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,373,"LocalTime test = new LocalTime(date, JULIAN_LONDON);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,339,ublic void testFactory_forInstant_Object2_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,340,"ocalTime test = LocalTime.forInstant(""T10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,381,public void testConstructor_Object2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,382,"LocalTime test = new LocalTime(""T10:20"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,347,"ocalTime.forInstant(""T1020"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,389,"new LocalTime(""T1020"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,352,ublic void testFactory_forInstant_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,353,"ocalTime test = LocalTime.forInstant((Object) null, JULIAN_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,394,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,395,"LocalTime test = new LocalTime((Object) null, JULIAN_LONDON);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,361,ublic void testFactory_forInstant_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,403,public void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,363,"ocalTime test = LocalTime.forInstant(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,405,"LocalTime test = new LocalTime(date, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,371,ublic void testFactory_forInstant_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,372,"ocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,413,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,414,"LocalTime test = new LocalTime((Object) null, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,98,"heck(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,99,"heck(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,100,"heck(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,101,"heck(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,102,"heck(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,98,"check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,99,"check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,100,"check(test.hourOfDay().roundHalfCeiling(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,101,"check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,102,"check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,105,"heck(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,106,"heck(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,107,"heck(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,108,"heck(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,109,"heck(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,105,"check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,106,"check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,107,"check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,108,"check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,109,"check(test.hourOfDay().roundHalfEven(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,112,"heck(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,113,"heck(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,114,"heck(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,115,"heck(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,116,"heck(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,112,"check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,113,"check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,114,"check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,115,"check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,116,"check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,119,"heck(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,120,"heck(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,121,"heck(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,122,"heck(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,123,"heck(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,119,"check(test.hourOfDay().roundCeiling(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,120,"check(test.hourOfDay().roundFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,121,"check(test.hourOfDay().roundHalfCeiling(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,122,"check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,123,"check(test.hourOfDay().roundHalfEven(), 12, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,244,ocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,245,ocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,244,LocalTime test1 = new LocalTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,245,LocalTime test2 = new LocalTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,421,ocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,422,ocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,421,LocalTime test1 = new LocalTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,422,LocalTime test2 = new LocalTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,592,ocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,593,ocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,592,LocalTime test1 = new LocalTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,593,LocalTime test2 = new LocalTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,757,ocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,758,ocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,757,LocalTime test1 = new LocalTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,758,LocalTime test2 = new LocalTime(TEST_TIME2);

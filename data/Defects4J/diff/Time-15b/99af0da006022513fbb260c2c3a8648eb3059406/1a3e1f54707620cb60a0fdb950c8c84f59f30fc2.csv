is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,10, are met:
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,57,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,59,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,60,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,61,mport org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,62,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,65, AbstractDateTime provides the common behaviour for datetime classes.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,66, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,67, This class should generally not be used directly by API users.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,68, The {@link ReadableDateTime} interface should be used when different
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,69, kinds of date/time objects are to be referenced.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,70, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,71, AbstractDateTime subclasses may be mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,73, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,74, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,75, @since 1.0
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,77,ublic abstract class AbstractDateTime extends AbstractInstant
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,78,"mplements ReadableDateTime, Serializable {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,80,** Serialization version. */
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,81,rivate static final long serialVersionUID = 597501475466447837L;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,84, Selects the correct chronology to use for the chronology based constructors
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,85, on subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,87, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,88, @return the passed in Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,90,rivate static Chronology selectChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,91,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,92,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,94,eturn chrono;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,97,** The millis from 1970-01-01T00:00:00Z */
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,98,rivate long iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,99,** The chronology to use */
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,100,rivate Chronology iChronology;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,102,/ Constructors
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,105, Constructs an instance set to the current system millisecond time
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,106, using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,108,rotected AbstractDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,109,"his(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,113, Constructs an instance set to the current system millisecond time
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,114, using <code>ISOChronology</code> in the specified time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,115, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,116," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,118," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,120,rotected AbstractDateTime(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,121,"his(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,125, Constructs an instance set to the current system millisecond time
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,126, using the specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,127, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,128," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,129, in the default time zone is used.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,131," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,133,rotected AbstractDateTime(final Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,134,"his(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,139, Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,140, using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,142, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,144,rotected AbstractDateTime(final long instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,145,"his(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,149, Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,150, using <code>ISOChronology</code> in the specified time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,151, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,152," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,154, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,155," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,157,"rotected AbstractDateTime(final long instant, final DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,158,"his(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,162, Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,163, using the specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,164, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,165," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,166, in the default time zone is used.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,168, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,169," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,171,"rotected AbstractDateTime(final long instant, final Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,172,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,173,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,174,"Millis = round(instant, iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,179, Constructs an instance from an Object that represents a datetime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,180, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,181," If the object contains no chronology, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,182, in the default time zone is used.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,183, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,184, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,185," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,187," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,188, @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,190,rotected AbstractDateTime(final Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,191,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,192,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,193,Chronology = selectChronology(converter.getChronology(instant));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,194,"Millis = round(converter.getInstantMillis(instant), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,198," Constructs an instance from an Object that represents a datetime,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,199, forcing the time zone to that specified.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,200, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,201," If the object contains no chronology, <code>ISOChronology</code> is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,202," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,203, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,204, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,205," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,207," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,208," @param zone  the time zone, null means default time zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,209, @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,211,"rotected AbstractDateTime(final Object instant, final DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,212,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,213,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,214,"Chronology = selectChronology(converter.getChronology(instant, zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,215,"Millis = round(converter.getInstantMillis(instant, zone), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,219," Constructs an instance from an Object that represents a datetime,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,220, using the specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,221, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,222," If the chronology is null, ISOChronology in the default time zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,223, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,224, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,225," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,227," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,228," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,229, @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,231,"rotected AbstractDateTime(final Object instant, final Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,232,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,233,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,234,"Chronology = selectChronology(converter.getChronology(instant, chronology));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,235,"Millis = round(converter.getInstantMillis(instant, chronology), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,240, Constructs an instance from datetime field values
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,241, using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,243, @param year  the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,244, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,245, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,246, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,247, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,248, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,249, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,251,rotected AbstractDateTime(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,252,"inal int year,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,253,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,254,"inal int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,255,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,256,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,257,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,258,inal int millisOfSecond) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,259,"his(year, monthOfYear, dayOfMonth, hourOfDay,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,260,"inuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,264, Constructs an instance from datetime field values
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,265, using <code>ISOChronology</code> in the specified time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,266, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,267," If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,269, @param year  the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,270, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,271, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,272, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,273, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,274, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,275, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,276," @param zone  the time zone, null means default time zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,278,rotected AbstractDateTime(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,279,"inal int year,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,280,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,281,"inal int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,282,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,283,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,284,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,285,"inal int millisOfSecond,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,286,inal DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,287,"his(year, monthOfYear, dayOfMonth, hourOfDay,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,288,"inuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,292, Constructs an instance from datetime field values
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,293, using the specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,294, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,295," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,296, in the default time zone is used.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,298, @param year  the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,299, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,300, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,301, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,302, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,303, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,304, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,305," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,307,rotected AbstractDateTime(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,308,"inal int year,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,309,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,310,"inal int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,311,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,312,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,313,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,314,"inal int millisOfSecond,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,315,inal Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,316,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,317,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,318,"ong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,319,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,320,"Millis = round(instant, iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,324, Rounds the specified instant as required by the subclass.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,325, This method must not access instance variables.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,326, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,327, This implementation performs no rounding and returns the instant.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,329, @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,330," @param chronology  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,332,"rotected long round(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,333,eturn instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,336,/ Accessors
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,339, Gets the milliseconds of the datetime instant from the Java epoch
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,340, of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,342, @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,344,ublic final long getMillis() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,345,eturn iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,349, Gets the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,351, @return the Chronology that the datetime is using
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,353,ublic final Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,354,eturn iChronology;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,357,/ Date field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,360, Get the era field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,362, @return the era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,364,ublic final int getEra() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,365,eturn getChronology().era().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,369, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,371, @return the year of era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,373,ublic final int getCenturyOfEra() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,374,eturn getChronology().centuryOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,378, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,380, @return the year of era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,382,ublic final int getYearOfEra() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,383,eturn getChronology().yearOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,387, Get the year of century field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,389, @return the year of century
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,391,ublic final int getYearOfCentury() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,392,eturn getChronology().yearOfCentury().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,396, Get the year field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,398, @return the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,400,ublic final int getYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,401,eturn getChronology().year().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,405, Get the weekyear field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,407, @return the year of a week based year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,409,ublic final int getWeekyear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,410,eturn getChronology().weekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,414, Get the month of year field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,416, @return the month of year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,418,ublic final int getMonthOfYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,419,eturn getChronology().monthOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,423, Get the week of weekyear field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,425, @return the week of a week based year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,427,ublic final int getWeekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,428,eturn getChronology().weekOfWeekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,432, Get the day of year field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,434, @return the day of year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,436,ublic final int getDayOfYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,437,eturn getChronology().dayOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,441, Get the day of month field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,442, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,443, The values for the day of month are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,445, @return the day of month
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,447,ublic final int getDayOfMonth() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,448,eturn getChronology().dayOfMonth().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,452, Get the day of week field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,453, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,454, The values for the day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,456, @return the day of week
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,458,ublic final int getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,459,eturn getChronology().dayOfWeek().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,462,/ Time field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,465, Get the hour of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,467, @return the hour of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,469,ublic final int getHourOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,470,eturn getChronology().hourOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,474, Get the minute of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,476, @return the minute of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,478,ublic final int getMinuteOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,479,eturn getChronology().minuteOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,483, Get the minute of hour field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,485, @return the minute of hour
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,487,ublic final int getMinuteOfHour() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,488,eturn getChronology().minuteOfHour().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,492, Get the second of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,494, @return the second of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,496,ublic final int getSecondOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,497,eturn getChronology().secondOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,501, Get the second of minute field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,503, @return the second of minute
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,505,ublic final int getSecondOfMinute() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,506,eturn getChronology().secondOfMinute().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,510, Get the millis of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,512, @return the millis of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,514,ublic final int getMillisOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,515,eturn getChronology().millisOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,519, Get the millis of second field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,521, @return the millis of second
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,523,ublic final int getMillisOfSecond() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,524,eturn getChronology().millisOfSecond().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,527,/ Output
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,530, Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,532, @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,534,ublic abstract String toString();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,537, Output the instant using the specified format pattern.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,539," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,540, @see  org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,542,ublic String toString(String pattern) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,543,f (pattern == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,544,eturn toString();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,546,eturn DateTimeFormat.getInstance(getChronology()).forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,550, Output the instant using the specified format pattern.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,552," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,553," @param locale  Locale to use, null means default"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,554, @see  org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,556,"ublic String toString(String pattern, Locale locale) throws IllegalArgumentException {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,557,f (pattern == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,558,eturn toString();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,560,"eturn DateTimeFormat.getInstance(getChronology(), locale).forPattern(pattern).print(this);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,564," Set the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,565, 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,566, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,567, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,568, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,569, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,571, @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,572, instant to
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,574,rotected void setMillis(long instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,575,Millis = instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,579, Set the value from an Object representing an instant.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,580, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,581, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,582," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,584, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,585, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,587,rotected void setMillis(Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,588,"/ Don't set iMillis directly, as it may provide a backdoor to"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,589,/ immutable subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,590,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,591,etMillis(converter.getInstantMillis(instant));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,595, Set the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,596, <p>
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,597, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,598, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,599, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,601," @param chronology  the chronology to use, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,603,rotected void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,604,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,608, Sets the time zone of the datetime via the chronology. Setting the time
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,609, zone does not affect the millisecond value of this instant.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,611," @param zone  the time zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,612, @see #setZoneRetainFields
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,614,rotected void setZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,615,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,616,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,618,f (iChronology.getZone() != zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,619,"/ Don't set iChronology directly, as it may provide a backdoor to"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,620,/ immutable subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,621,etChronology(iChronology.withZone(zone));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,626, Moves the time zone of the datetime via the chronology. Moving the time
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,627, zone alters the millisecond value of this instant such that it is
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,628, relative to the new time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,630," @param newZone  the time zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,631, @see #setZone
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,633,rotected void setZoneRetainFields(DateTimeZone newZone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,634,ewZone = (newZone == null ? DateTimeZone.getDefault() : newZone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,635,ateTimeZone originalZone = getZone();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,636,riginalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,637,f (newZone == originalZone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,638,eturn;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,641,"ong millis = originalZone.getMillisKeepLocal(newZone, getMillis());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642,"/ Don't set iChronology and iMillis directly, as it may provide a"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,643,/ backdoor to immutable subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,644,etChronology(iChronology.withZone(newZone));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,645,etMillis(millis);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,59,mport org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,59,import org.joda.time.base.BaseDateTime;
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,103,ublic class DateMidnight extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,103,public final class DateMidnight
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,104,extends BaseDateTime
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,302,"rotected long round(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,303,"protected long checkInstant(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,317,ublic final DateMidnight withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,318,public DateMidnight withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,319,"ewMillis = round(newMillis, chrono);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,320,"newMillis = checkInstant(newMillis, chrono);"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,344,ublic final DateMidnight withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,345,public DateMidnight withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,356,ublic final DateMidnight withZoneRetainFields(DateTimeZone newZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,357,public DateMidnight withZoneRetainFields(DateTimeZone newZone) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,375,ublic final Property era() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,376,public Property era() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,384,ublic final Property centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,385,public Property centuryOfEra() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,393,ublic final Property yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,394,public Property yearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,402,ublic final Property yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,403,public Property yearOfEra() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,411,ublic final Property year() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,412,public Property year() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,420,ublic final Property weekyear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,421,public Property weekyear() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,429,ublic final Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,430,public Property monthOfYear() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,438,ublic final Property weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,439,public Property weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,447,ublic final Property dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,448,public Property dayOfYear() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,456,ublic final Property dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,457,public Property dayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,465,ublic final Property dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,466,public Property dayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,469,/ Output
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,472, Output the date time in ISO8601 format (yyyy-MM-dd'T'00:00:00.000Z).
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,474, @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,476,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,477,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,481," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,482, immutable.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,484,rotected final void setMillis(long millis) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,488," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,489, immutable.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,491,rotected final void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,522,ublic static class Property extends AbstractReadableInstantFieldProperty {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,499,public static final class Property extends AbstractReadableInstantFieldProperty {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,669,ublic final DateMidnight setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,646,public DateMidnight setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,59,import org.joda.time.base.BaseDateTime;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,60,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,99,ublic class DateTime extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,99,public final class DateTime
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,100,extends BaseDateTime
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,105,/ Constructors
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,325,ublic final DateTime withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,325,public DateTime withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,339,ublic final DateTime withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,339,public DateTime withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,361,ublic final DateTime withZone(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,361,public DateTime withZone(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,382,ublic final DateTime withZoneRetainFields(DateTimeZone newZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,382,public DateTime withZoneRetainFields(DateTimeZone newZone) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,411,"ublic final DateTime withDate(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,411,"public DateTime withDate(int year, int monthOfYear, int dayOfMonth) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,437,"ublic final DateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,437,"public DateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,459,ublic final DateTime withFields(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,459,public DateTime withFields(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,476,ublic final DateTime withDurationAdded(long durationToAdd) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,476,public DateTime withDurationAdded(long durationToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,490,"ublic final DateTime withDurationAdded(long durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,490,"public DateTime withDurationAdded(long durationToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,508,ublic final DateTime withDurationAdded(ReadableDuration durationToAdd) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,508,public DateTime withDurationAdded(ReadableDuration durationToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,525,"ublic final DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,525,"public DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,547,ublic final DateTime withPeriodAdded(ReadablePeriod periodToAdd) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,547,public DateTime withPeriodAdded(ReadablePeriod periodToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,566,"ublic final DateTime withPeriodAdded(ReadablePeriod periodToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,566,"public DateTime withPeriodAdded(ReadablePeriod periodToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,581,ublic final Property era() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,581,public Property era() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,590,ublic final Property centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,590,public Property centuryOfEra() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,599,ublic final Property yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,599,public Property yearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,608,ublic final Property yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,608,public Property yearOfEra() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,617,ublic final Property year() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,617,public Property year() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,626,ublic final Property weekyear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,626,public Property weekyear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,635,ublic final Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,635,public Property monthOfYear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,644,ublic final Property weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,644,public Property weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,653,ublic final Property dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,653,public Property dayOfYear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,662,ublic final Property dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,662,public Property dayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,671,ublic final Property dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,671,public Property dayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,682,ublic final Property hourOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,682,public Property hourOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,691,ublic final Property minuteOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,691,public Property minuteOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,700,ublic final Property minuteOfHour() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,700,public Property minuteOfHour() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,709,ublic final Property secondOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,709,public Property secondOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,718,ublic final Property secondOfMinute() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,718,public Property secondOfMinute() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,727,ublic final Property millisOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,727,public Property millisOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,736,ublic final Property millisOfSecond() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,736,public Property millisOfSecond() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,740,/ Output
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,743, Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,745, @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,747,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,748,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,752," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,753, immutable.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,755,rotected final void setMillis(long millis) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,759," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,760, immutable.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,762,rotected final void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,794,ublic static class Property extends AbstractReadableInstantFieldProperty {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,770,public static final class Property extends AbstractReadableInstantFieldProperty {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,941,ublic final DateTime setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,917,public DateTime setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,225,* Gets the zone handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,226,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,227,"* If the zone is <code>null</code>, {@link DateTimeZone#getDefault()}"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,228,"* will be returned. Otherwise, the chronology is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,230,"* @param chrono  the chronology to use, null means the default zone"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,231,"* @return the chronology, or default if null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,233,public static final DateTimeZone getZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,234,if (zone == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,235,return DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,237,return zone;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,58,mport org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,58,import org.joda.time.base.AbstractInstant;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,60,import org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,75,ublic final class Instant extends AbstractInstant
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,76,public final class Instant
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,77,extends AbstractInstant
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,129,eturn newMillis == iMillis ? this : new Instant(newMillis);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,131,return (newMillis == iMillis ? this : new Instant(newMillis));
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160, Output the date time in ISO8601 format.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,162,* Output the date time in ISO8601 format using the UTC time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,58,import org.joda.time.base.BaseDateTime;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,104,ublic class MutableDateTime extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,105,public class MutableDateTime
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,106,extends BaseDateTime
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,128,/ Constructors
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,208, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,209,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,210,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,211," @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,213,"* @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,225, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,227,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,228,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,228," @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,231,"* @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,238, using the specifed chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,241,* using the specified chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,242, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,245,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,246,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,245," @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,249,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,402,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,403,* All changes to the millisecond field occurs via this method.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437,uper.setMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,444,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,445,setMillis(converter.getInstantMillis(instant));  // set via this class not super
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,454,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,447,ublic void add(final long duration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,448,etMillis(getMillis() + duration);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,456,public void add(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,457,"setMillis(FieldUtils.safeAdd(getMillis(), duration));  // set via this class not super"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,464,ublic void add(final Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,473,public void add(Object duration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,482,"ublic void add(final Object duration, final int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,483,/ TODO Change from Object to individual methods
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,484,f (duration instanceof ReadableDuration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,485,eadableDuration d = (ReadableDuration) duration;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,486,"dd(FieldUtils.safeMultiply(d.getMillis(), scalar));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,487, else if (duration instanceof ReadablePeriod) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,491,"public void add(Object duration, int scalar) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,492,if (duration instanceof ReadablePeriod) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,505,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,506,* All changes to the chronology occur via this method.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,524,uper.setZone(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,531,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,532,Chronology chrono = getChronology();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,533,if (chrono.getZone() != zone) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,534,setChronology(chrono.withZone(zone));  // set via this class not super
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,539,uper.setZoneRetainFields(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,550,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,551,DateTimeZone originalZone = getZone();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,552,originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,553,if (zone == originalZone) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,554,return;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,557,"long millis = originalZone.getMillisKeepLocal(zone, getMillis());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,558,setChronology(getChronology().withZone(zone));  // set via this class not super
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,559,setMillis(millis);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,10,* are met:
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,54,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,56,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,58,import org.joda.time.ReadableDateTime;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,59,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,62,* AbstractDateTime provides the common behaviour for datetime classes.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,63,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,64,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,65,* The {@link ReadableDateTime} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,66,* kinds of date/time objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,67,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,68,* Whenever you want to implement <code>ReadableDateTime</code> you should
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,69,* extend this class.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,70,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,71,* AbstractDateTime subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,73,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,74,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,75,* @since 1.0
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,77,public abstract class AbstractDateTime
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,78,extends AbstractInstant
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,79,implements ReadableDateTime {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,83,* Constructor.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,85,protected AbstractDateTime() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,86,super();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,91,* Get the era field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,93,* @return the era
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,95,public int getEra() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,96,return getChronology().era().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,100,* Get the year of era field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,102,* @return the year of era
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,104,public int getCenturyOfEra() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,105,return getChronology().centuryOfEra().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,109,* Get the year of era field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,111,* @return the year of era
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,113,public int getYearOfEra() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,114,return getChronology().yearOfEra().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,118,* Get the year of century field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,120,* @return the year of century
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,122,public int getYearOfCentury() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,123,return getChronology().yearOfCentury().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,127,* Get the year field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,129,* @return the year
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,131,public int getYear() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,132,return getChronology().year().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,136,* Get the weekyear field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,138,* @return the year of a week based year
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,140,public int getWeekyear() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,141,return getChronology().weekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,145,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,147,* @return the month of year
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,149,public int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,150,return getChronology().monthOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,154,* Get the week of weekyear field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,156,* @return the week of a week based year
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,158,public int getWeekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,159,return getChronology().weekOfWeekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,163,* Get the day of year field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,165,* @return the day of year
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,167,public int getDayOfYear() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,168,return getChronology().dayOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,172,* Get the day of month field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,173,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,174,* The values for the day of month are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,176,* @return the day of month
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,178,public int getDayOfMonth() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,179,return getChronology().dayOfMonth().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,183,* Get the day of week field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,184,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,185,* The values for the day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,187,* @return the day of week
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,189,public int getDayOfWeek() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,190,return getChronology().dayOfWeek().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,195,* Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,197,* @return the hour of day
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,199,public int getHourOfDay() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,200,return getChronology().hourOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,204,* Get the minute of day field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,206,* @return the minute of day
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,208,public int getMinuteOfDay() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,209,return getChronology().minuteOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,213,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,215,* @return the minute of hour
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,217,public int getMinuteOfHour() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,218,return getChronology().minuteOfHour().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,222,* Get the second of day field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,224,* @return the second of day
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,226,public int getSecondOfDay() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,227,return getChronology().secondOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,231,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,233,* @return the second of minute
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,235,public int getSecondOfMinute() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,236,return getChronology().secondOfMinute().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,240,* Get the millis of day field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,242,* @return the millis of day
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,244,public int getMillisOfDay() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,245,return getChronology().millisOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,249,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,251,* @return the millis of second
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,253,public int getMillisOfSecond() {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,254,return getChronology().millisOfSecond().get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,259,* Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,261,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,262,* @see  org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,264,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,265,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,266,return toString();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,268,return DateTimeFormat.getInstance(getChronology()).forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,272,* Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,274,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,275,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,276,* @see  org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,278,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,279,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,280,return toString();
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,282,"return DateTimeFormat.getInstance(getChronology(), locale).forPattern(pattern).print(this);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,54,ackage org.joda.time;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,54,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,61,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,62,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,63,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,65,import org.joda.time.Instant;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,66,import org.joda.time.MutableDateTime;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,67,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,69,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,81,* Whenever you want to implement <code>ReadableInstant</code> you should
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,82,* extend this class.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,83,* <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,96,ublic final DateTimeZone getZone() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,108,public DateTimeZone getZone() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,115,ublic final int get(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,127,public int get(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,129,ublic final Instant toInstant() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,141,public Instant toInstant() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,141,ublic final DateTime toDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,153,public DateTime toDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,154,ublic final DateTime toDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,166,public DateTime toDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,170,ublic final DateTime toDateTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,182,public DateTime toDateTime(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,194,ublic final DateTime toTrustedISODateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,206,public DateTime toTrustedISODateTime() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,221,ublic final MutableDateTime toMutableDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,233,public MutableDateTime toMutableDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,231,ublic final MutableDateTime toMutableDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,243,public MutableDateTime toMutableDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,244,ublic final MutableDateTime toMutableDateTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,256,public MutableDateTime toMutableDateTime(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,256,ublic final Date toDate() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,268,public Date toDate() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,268,ublic final Calendar toCalendar(Locale locale) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,280,public Calendar toCalendar(Locale locale) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,288,ublic final GregorianCalendar toGregorianCalendar() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,300,public GregorianCalendar toGregorianCalendar() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,315,ublic final boolean equals(Object readableInstant) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,316,/ must be final to fulfil ReadableInstant contract
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,327,public boolean equals(Object readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,328,// must be to fulfil ReadableInstant contract
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,340,ublic final int hashCode() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,341,/ must be final to fulfil ReadableInstant contract
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,352,public int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,353,// must be to fulfil ReadableInstant contract
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,359,ublic final int compareTo(Object instant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,371,public int compareTo(Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,386,ublic final boolean isAfter(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,398,public boolean isAfter(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,399,ublic final boolean isBefore(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,411,public boolean isBefore(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,412,ublic final boolean isEqual(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,424,public boolean isEqual(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,422, Get the value as a String in a recognisable ISO8601 format.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,423, <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,424, The string output is in ISO8601 format to enable the String
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,425, constructor to correctly parse it.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,427, @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,434,* Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,436,* @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,429,ublic abstract String toString();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,438,public String toString() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,439,return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,10,* are met:
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,54,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,59,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,60,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,61,import org.joda.time.ReadableDateTime;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,62,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,63,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,64,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,67,* BaseDateTime is an abstract implementation of ReadableDateTime that stores
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,68,* data in <code>long</code> and <code>Chronology</code> fields.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,69,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,70,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,71,* The {@link ReadableDateTime} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,72,* kinds of date/time objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,73,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,74,* BaseDateTime subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,76,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,77,* @author Kandarp Shah
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,78,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,79,* @since 1.0
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,81,public abstract class BaseDateTime
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,82,extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,83,"implements ReadableDateTime, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,85,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,86,private static final long serialVersionUID = -6728882245981L;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,88,/** The millis from 1970-01-01T00:00:00Z */
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,89,private long iMillis;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,90,/** The chronology to use */
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,91,private Chronology iChronology;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,95,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,96,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,98,public BaseDateTime() {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,99,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,103,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,104,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,105,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,106,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,108,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,110,public BaseDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,111,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,115,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,116,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,117,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,118,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,119,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,121,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,123,public BaseDateTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,124,"this(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,129,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,130,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,132,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,134,public BaseDateTime(long instant) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,135,"this(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,139,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,140,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,141,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,142,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,144,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,145,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,147,"public BaseDateTime(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,148,"this(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,152,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,153,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,154,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,155,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,156,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,158,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,159,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,161,"public BaseDateTime(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,162,super();
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,163,iChronology = checkChronology(chronology);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,164,"iMillis = checkInstant(instant, iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,169,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,170,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,171,"* If the object contains no chronology, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,172,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,173,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,174,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,175,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,176,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,178,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,179,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,181,public BaseDateTime(Object instant) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,182,super();
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,183,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,184,iChronology = checkChronology(converter.getChronology(instant));
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,185,"iMillis = checkInstant(converter.getInstantMillis(instant), iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,189,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,190,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,191,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,192,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,193,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,194,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,195,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,196,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,197,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,199,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,200,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,201,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,203,"public BaseDateTime(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,204,super();
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,205,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,206,"iChronology = checkChronology(converter.getChronology(instant, zone));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,207,"iMillis = checkInstant(converter.getInstantMillis(instant, zone), iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,211,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,212,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,213,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,214,"* If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,215,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,216,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,217,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,218,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,220,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,221,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,222,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,224,"public BaseDateTime(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,225,super();
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,226,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,227,"iChronology = checkChronology(converter.getChronology(instant, chronology));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,228,"iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,233,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,234,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,236,* @param year  the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,237,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,238,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,239,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,240,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,241,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,242,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,244,public BaseDateTime(
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,245,"int year,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,246,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,247,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,248,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,249,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,250,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,251,int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,252,"this(year, monthOfYear, dayOfMonth, hourOfDay,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,253,"minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,257,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,258,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,259,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,260,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,262,* @param year  the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,263,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,264,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,265,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,266,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,267,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,268,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,269,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,271,public BaseDateTime(
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,272,"int year,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,273,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,274,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,275,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,276,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,277,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,278,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,279,DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,280,"this(year, monthOfYear, dayOfMonth, hourOfDay,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,281,"minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,285,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,286,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,287,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,288,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,289,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,291,* @param year  the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,292,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,293,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,294,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,295,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,296,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,297,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,298,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,300,public BaseDateTime(
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,301,"int year,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,302,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,303,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,304,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,305,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,306,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,307,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,308,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,309,super();
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,310,iChronology = checkChronology(chronology);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,311,"long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,312,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,313,"iMillis = checkInstant(instant, iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,318,"* Checks the specified chronology before storing it, potentially altering it."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,319,* This method must not access any instance variables.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,320,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,321,* This implementation converts nulls to ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,323,"* @param chronology  the chronology to use, may be null"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,324,"* @return the chronology to store in this datetime, not null"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,326,protected Chronology checkChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,327,return DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,331,"* Checks the specified instant before storing it, potentially altering it."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,332,* This method must not access any instance variables.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,333,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,334,* This implementation simply returns the instant.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,336,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,337,"* @param chronology  the chronology to use, not null"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,338,* @return the instant to store in this datetime
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,340,"protected long checkInstant(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,341,return instant;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,346,* Gets the milliseconds of the datetime instant from the Java epoch
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,347,* of 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,349,* @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,351,public long getMillis() {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,352,return iMillis;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,356,* Gets the chronology of the datetime.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,358,* @return the Chronology that the datetime is using
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,360,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,361,return iChronology;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,366,* Sets the milliseconds of the datetime.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,367,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,368,* All changes to the millisecond field occurs via this method.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,369,* Override and block this method to make a subclass immutable.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,371,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the datetime to
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,373,protected void setMillis(long instant) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,374,"iMillis = checkInstant(instant, iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,378,* Sets the chronology of the datetime.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,379,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,380,* All changes to the chronology field occurs via this method.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,381,* Override and block this method to make a subclass immutable.
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,383,* @param chronology  the chronology to set
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,385,protected void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,386,iChronology = checkChronology(chronology);
False,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,56,mport org.joda.time.AbstractDateTime;
False,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,57,mport org.joda.time.AbstractInstant;
False,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,58,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,59,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,60,mport org.joda.time.ReadableDateTime;
True,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,56,import org.joda.time.base.AbstractDateTime;
True,JodaTime/src/test/org/joda/time/ClassLoadTest.java,JodaTime/src/test/org/joda/time/ClassLoadTest.java,57,import org.joda.time.base.AbstractInstant;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,69,import org.joda.time.base.AbstractInstant;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,479,est = new MockUntrustedDateMidnight(TEST_TIME1_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,480,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,481,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,482,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,483,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,484,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,480,//        test = new MockUntrustedDateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,481,//        result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,482,"//        assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,483,"//        assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,484,"//        assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,485,"//        assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,494,tatic class MockUntrustedDateMidnight extends DateMidnight {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,495,ockUntrustedDateMidnight(long millis) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,496,uper(millis);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,495,//    static class MockUntrustedDateMidnight extends DateMidnight {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,496,//        MockUntrustedDateMidnight(long millis) {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,497,//            super(millis);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,680,ublic void testImmutable() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,681,ockChangeDateMidnight test = new MockChangeDateMidnight(TEST_TIME_NOW_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,682,"ssertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,683,est.testSetMillis();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,684,"ssertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,686,est = new MockChangeDateMidnight(TEST_TIME_NOW_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,687,"ssertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,688,est.testSetMillisObject();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,689,"ssertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,691,est = new MockChangeDateMidnight(TEST_TIME_NOW_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,692,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,693,est.testSetChronology();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,694,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,696,est = new MockChangeDateMidnight(TEST_TIME_NOW_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,697,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,698,est.testSetZone();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,699,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,701,est = new MockChangeDateMidnight(TEST_TIME_NOW_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,702,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,703,est.testSetZoneRetainFields();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,704,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,707,tatic class MockChangeDateMidnight extends DateMidnight {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,708,ockChangeDateMidnight(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,709,uper(instant);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,711,ublic void testSetMillis() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,712,etMillis(0L);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,714,ublic void testSetMillisObject() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,715,etMillis(new Date(0L));
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,717,ublic void testSetChronology() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,718,etChronology(GregorianChronology.getInstance(PARIS));
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,720,ublic void testSetZone() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,721,etZone(PARIS);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,723,ublic void testSetZoneRetainFields() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,724,etZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,69,import org.joda.time.base.AbstractInstant;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,466,est = new MockUntrustedDateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,467,esult = test.toTrustedISODateTime();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,468,"ssertSame(DateTime.class, result.getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,469,"ssertSame(ISOChronology.class, result.getChronology().getClass());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,470,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,471,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,467,//        test = new MockUntrustedDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,468,//        result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,469,"//        assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,470,"//        assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,471,"//        assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,472,"//        assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,481,tatic class MockUntrustedDateTime extends DateTime {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,482,ockUntrustedDateTime(long millis) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,483,uper(millis);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,482,//    static class MockUntrustedDateTime extends DateTime {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,483,//        MockUntrustedDateTime(long millis) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,484,//            super(millis);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,807,ublic void testImmutable() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,808,ockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,809,"ssertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,810,est.testSetMillis();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,811,"ssertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,813,est = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,814,"ssertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,815,est.testSetMillisObject();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,816,"ssertEquals(TEST_TIME_NOW, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,818,est = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,819,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,820,est.testSetChronology();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,821,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,823,est = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,824,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,825,est.testSetZone();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,826,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,828,est = new MockChangeDateTime(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,829,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,830,est.testSetZoneRetainFields();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,831,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,834,tatic class MockChangeDateTime extends DateTime {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,835,ockChangeDateTime(long instant) {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,836,uper(instant);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,838,ublic void testSetMillis() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,839,etMillis(0L);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,841,ublic void testSetMillisObject() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,842,etMillis(new Date(0L));
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,844,ublic void testSetChronology() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,845,etChronology(GregorianChronology.getInstance(PARIS));
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,847,ublic void testSetZone() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,848,etZone(PARIS);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,850,ublic void testSetZoneRetainFields() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,851,etZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,808,//    public void testImmutable() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,809,//        MockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,810,"//        assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,811,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,812,//            test.testSetMillis();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,813,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,814,//        } catch (UnsupportedOperationException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,815,"//        assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,817,//        test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,818,"//        assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,819,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,820,//            test.testSetChronology();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,821,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,822,//        } catch (UnsupportedOperationException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,823,"//        assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,826,//    static class MockChangeDateTime extends DateTime {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,827,//        MockChangeDateTime(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,828,//            super(instant);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,830,//        public void testSetMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,831,//            setMillis(0L);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,833,//        public void testSetChronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,834,//            setChronology(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,70,import org.joda.time.base.AbstractInstant;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,69,import org.joda.time.base.AbstractInstant;

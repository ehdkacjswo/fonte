is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,114,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,115,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,116,* the duration type.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,207,ype = (type == null ? converter.getDurationType(duration) : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,210,"type = (type == null ? converter.getDurationType(duration, totalMillisMaster) : type);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,964,type = type.withChronology(type.getChronology().withUTC());
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,100,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,101,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,102,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,103,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,104,* of the duration type.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,114,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,115,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,116,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,117,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,118,* of the duration type.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,58,mport org.joda.time.field.PreciseDurationField;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,61,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,96,rivate static final DurationType MILLIS_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,98,rivate static final DurationType ALL_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,99,rivate static final DurationType YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,101,rivate static final DurationType AVERAGE_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,98,private static final DurationType YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,99,private static final DurationType ALL_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,100,private static final DurationType MILLIS_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,108,DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,109,YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110,YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,111,ALL_TYPE = new AllType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110,AY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,111,EAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,112,EAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,113,VERAGE_YEAR_MONTH_TYPE = new AverageYearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,114,LL_TYPE = new AllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,132, Returns a DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,130,* Returns a DurationType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,164,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,162,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,171, Returns a DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,169,* Returns a DurationType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,209,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,207,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,216, Returns a DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,214,* Returns a DurationType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,252,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,250,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,259, Returns a DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,257,* Returns a DurationType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,295,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,293,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,302, Returns a precise DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,304, <ul>
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,305, <li>years (fixed at 365.2425 days)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,306, <li>months (fixed at 30.436875 days)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,307, <li>days
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,308, <li>hours
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,309, <li>minutes
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,310, <li>seconds
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,311, <li>milliseconds
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,312, </ul>
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,314,ublic static DurationType getAverageYearMonthType() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,315,eturn AVERAGE_YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,319," Returns a DurationType, normally precise, of:"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,321, <ul>
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,322, <li>years (fixed to chronology's average year)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,323, <li>months (fixed to chronology's average month)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,324, <li>days
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,325, <li>hours
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,326, <li>minutes
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,327, <li>seconds
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,328, <li>milliseconds
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,329, </ul>
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,331, This factory method returns a DurationType that calculates using any
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,332," Chronology. For best results, the Chronology's time zone should"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,333, be UTC or have fixed offsets.
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,335, @param chrono Chronology to use for calculations.
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,337,ublic static DurationType getAverageYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,338,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,339,eturn getAverageYearMonthType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,341,eturn new AverageYearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,712,eturn null;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,667,return ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,785,rivate static class AllType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,786,rivate static final long serialVersionUID = -359769822629866L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,740,private static class YearWeekType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,741,private static final long serialVersionUID = 1347170237843447098L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,788,llType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,743,YearWeekType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,796,eturn DurationType.getAllType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,751,return DurationType.getYearWeekType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,801,& months().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,807,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,810,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,811,eturn iChronology.months();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,761,return iChronology.weekyears();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,819,eturn getAllType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,769,return getYearWeekType(iChronology);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,823,"eturn ""AllType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,773,"return ""YearWeekType"";"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,864,rivate static class YearWeekType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,865,rivate static final long serialVersionUID = 1347170237843447098L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,814,private static class AllType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,815,private static final long serialVersionUID = -359769822629866L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,867,earWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,817,AllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,875,eturn DurationType.getYearWeekType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,825,return DurationType.getAllType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,830,&& months().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,885,eturn iChronology.weekyears();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,888,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,889,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,892,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,893,eturn getYearWeekType(iChronology);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,896,ublic String getName() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,897,"eturn ""YearWeekType"";"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,901,rivate static class AverageYearMonthType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,902,rivate static final long serialVersionUID = -1629017135050918461L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,904,rivate final DurationField iYears;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,905,rivate final DurationField iMonths;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,907,verageYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,908,uper(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,909,"Years = new PreciseDurationField(""AverageYears"", chrono.years().getUnitMillis());"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,910,"Months = new PreciseDurationField(""AverageMonths"", chrono.months().getUnitMillis());"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,913,ublic DurationType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,914,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,915,eturn this;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,917,eturn DurationType.getAverageYearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,836,return iChronology.years();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,920,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,921,eturn iYears;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,839,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,840,return iChronology.months();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,924,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,925,eturn iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,843,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,844,return iChronology.weeks();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,929,eturn getAverageYearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,848,return getAllType(iChronology);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,933,"eturn ""AverageYearMonthType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,852,"return ""AllType"";"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,109,* <p>
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,110,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,111,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,112,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,113,* of the duration type.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,123,* <p>
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,124,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,125,* the duration type. This ensures that there are no odd effects caused by
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,126,* time zones. The add methods will still use the time zone specific version
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,127,* of the duration type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,58,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,168,* Selects a suitable duration type for the given object.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,170,"* @param object  the object to examine, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,171,* @param totalMillisMaster  true if total millis based duration
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,172,"* @return the duration type, never null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,173,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,"public DurationType getDurationType(Object object, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,176,if (totalMillisMaster) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,177,return DurationType.getPreciseAllType();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,179,return DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,99,* @param totalMillisMaster  true if total millis based duration
False,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,102,urationType getDurationType(Object object);
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,103,"DurationType getDurationType(Object object, boolean totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,56,mport org.joda.time.DurationType;
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,129, Returns the millis duration type.
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,131," @param object  the object to examine, must not be null"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,132, @return the millis duration type
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,134,ublic DurationType getDurationType(Object object) {
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,135,eturn DurationType.getMillisType();
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,57,mport org.joda.time.DurationType;
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,122, Returns null to allow the caller to determine the best type.
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,124, @param object  the object to examine
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,125, @return null
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,127,ublic DurationType getDurationType(Object object) {
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,128,eturn null;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,125,* @param totalMillisMaster  true if total millis based duration
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,129,ublic DurationType getDurationType(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,130,"public DurationType getDurationType(Object object, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,mport org.joda.time.DurationType;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,57,mport org.joda.time.ReadableInterval;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,58,import org.joda.time.ReadableInterval;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,100, Selects a suitable duration type for the given object.
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,102, @param object  the interval
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,103," @return the duration type, never null"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,105,ublic DurationType getDurationType(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,106,eturn ((ReadableInterval) object).getDuration().getDurationType();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,mport org.joda.time.DurationType;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,160, Selects a suitable duration type for the given object.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,162," @param object  the object to examine, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,163," @return the duration type, never null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,164, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,166,ublic DurationType getDurationType(Object object) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,167,eturn DurationType.getAllType();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,201,"uration = durationParser.parseDuration(getDurationType(leftStr), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,189,"duration = durationParser.parseDuration(getDurationType(leftStr, false), leftStr);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,212,"uration = durationParser.parseDuration(getDurationType(rightStr), rightStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,200,"duration = durationParser.parseDuration(getDurationType(rightStr, false), rightStr);"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,95,suite.addTest(TestMillisDuration_Constructors.suite());
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,194,"ssertEquals(null, type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,194,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,219,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,220,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,219,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,220,"assertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,231,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,231,"assertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,250,"ssertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,250,"assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,261,"ssertSame(DurationType.getDayHourType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,261,"assertSame(DurationType.getDayHourType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,277,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,277,"assertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,288,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,288,"assertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,307,"ssertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,307,"assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,318,"ssertSame(DurationType.getYearWeekType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,318,"assertSame(DurationType.getYearWeekType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,334,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,334,"assertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,345,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,345,"assertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,364,"ssertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,364,"assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,375,"ssertSame(DurationType.getYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,375,"assertSame(DurationType.getYearMonthType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,391,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,391,"assertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,402,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,402,"assertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,421,"ssertEquals(true, DurationType.getAllType() == DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,421,"assertEquals(true, DurationType.getAllType() == DurationType.getAllType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,432,"ssertSame(DurationType.getAllType(), type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,433,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,437,ublic void testAverageYearMonthType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,438,urationType type = DurationType.getAverageYearMonthType();
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,439,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,440,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,441,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,442,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,443,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,444,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,445,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,446,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,447,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,448,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,449,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,450,"ssertEquals(true, type == DurationType.getAverageYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,451,"ssertEquals(false, type.equals(DurationType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,452,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,453,"ssertEquals(true, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,454,"ssertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,455,"ssertEquals(""AverageYearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,456,"ssertEquals(""DurationType[AverageYearMonthType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,457,ssertSameAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,458,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,459,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,460,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,464,ublic void testAverageYearMonthType_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,465,urationType type = DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,466,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,467,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,468,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,469,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,470,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,471,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,472,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,473,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,474,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,475,"ssertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,476,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,477,"ssertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(null));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,478,"ssertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,479,"ssertEquals(true, type.equals(DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC())));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,480,"ssertEquals(false, type.equals(DurationType.getAverageYearMonthType()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,481,"ssertEquals(false, type.equals(DurationType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,482,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,483,"ssertEquals(false, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,484,"ssertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,485,"ssertEquals(""AverageYearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,486,"ssertEquals(""DurationType[AverageYearMonthType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,487,ssertEqualsAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,488,"ssertSame(DurationType.getAverageYearMonthType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,489,"ssertSame(DurationType.getAverageYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,432,"assertSame(DurationType.getAllType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,848,"ssertEquals(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,791,"assertEquals(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,206,"ssertEquals(false, test1.equals(new Duration(123L, DurationType.getAverageYearMonthType())));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,206,"assertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,342,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,343,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,344,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,345,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,346,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,347,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,348,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,349,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,342,"expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,343,"expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,344,"expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,345,"expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,346,"expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,347,"expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,348,"expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,349,"expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,357,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,358,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,359,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,360,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,361,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,362,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,363,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,364,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,365,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,368,"long added = test.addTo(TEST_TIME_NOW, -2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,369,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,372,public void testAddTo3() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,383,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,372,ublic void testAddTo3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,388,public void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,379,ublic void testAddTo4() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,395,public void testAddTo5() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,414,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,415,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,430,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,431,"long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,436,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,437,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,438,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,439,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,440,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,441,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,442,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,443,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,444,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,446,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,447,"long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,448,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,452,public void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,431,"ong added = test.addTo(TEST_TIME_NOW, 1, null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,432,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,436,ublic void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,437,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,438,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,439,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,440,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,441,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,442,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,443,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,444,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,445,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,447,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,448,"nstant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,464,"Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,463,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,464,"nstant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,479,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,480,"Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,479,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,495,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,486,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,487,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,488,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,489,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,490,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,491,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,492,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,493,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,502,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,503,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,504,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,505,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,506,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,507,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,508,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,509,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,495,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,496,"nstant added = test.addTo(null, 1);  // null has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,511,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,512,"Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,529,"uration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,545,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,531,"est.addInto(mdt, -2);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,547,"test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,317,"uration test = new Duration(0, 0, 0, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,317,"Duration test = new Duration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,322,"ssertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,322,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,328,ssertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,328,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,63,* This class is a JUnit test for Duration.
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,67,public class TestMillisDuration_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,68,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,69,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,71,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,72,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,74,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,75,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,76,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,77,366 + 365;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,78,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,79,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,80,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,81,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,83,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,84,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,85,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,87,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,88,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,89,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,90,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,91,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,93,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,94,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,95,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,96,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,97,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,99,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,100,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,101,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,103,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,104,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,107,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,108,return new TestSuite(TestMillisDuration_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,111,public TestMillisDuration_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,112,super(name);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,115,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,116,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,117,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,118,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,119,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,120,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,121,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,122,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,125,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,126,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,127,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,128,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,129,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,130,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,131,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,132,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,137,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,139,public void testZERO() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,140,MillisDuration test = MillisDuration.ZERO;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,141,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,142,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,143,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,144,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,145,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,146,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,147,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,148,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,149,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,150,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,151,"assertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,155,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,156,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,157,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,158,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,159,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,160,MillisDuration test = new MillisDuration(length);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,161,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,162,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,163,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,164,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,165,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,166,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,167,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,168,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,169,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,170,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,171,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,175,public void testConstructor_long_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,176,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,177,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,178,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,179,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,180,"MillisDuration test = new MillisDuration(length, null);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,181,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,182,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,183,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,184,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,185,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,186,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,187,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,188,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,189,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,190,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,191,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,194,public void testConstructor_long_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,195,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,196,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,197,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,198,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,199,"MillisDuration test = new MillisDuration(length, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,200,"assertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,201,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,202,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,203,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,204,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,205,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,206,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,207,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,208,"assertEquals(length, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,209,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,210,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,213,public void testConstructor_long_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,214,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,215,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,216,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,217,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,218,"MillisDuration test = new MillisDuration(length, DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,219,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,220,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,221,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,222,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,223,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,224,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,225,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,226,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,227,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,228,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,229,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,232,public void testConstructor_long_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,233,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,234,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,235,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,236,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,237,"MillisDuration test = new MillisDuration(length, DurationType.getPreciseAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,238,"assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,239,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,240,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,241,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,242,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,243,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,244,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,245,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,246,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,247,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,248,"assertEquals(length - 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,253,* Test constructor (4ints)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,255,public void testConstructor_4int1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,256,"MillisDuration test = new MillisDuration(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,257,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,258,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,259,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,260,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,261,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,262,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,263,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,264,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,265,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,266,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,267,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,268,5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,269,"7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,274,* Test constructor (8ints)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,276,public void testConstructor_8int1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,277,"MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,278,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,279,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,280,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,281,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,282,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,283,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,284,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,285,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,286,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,287,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,288,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,289,(365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,290,5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,291,"7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,296,* Test constructor (8ints)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,298,public void testConstructor_8int__DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,299,"MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, null);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,300,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,301,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,302,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,303,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,304,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,305,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,306,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,307,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,308,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,309,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,310,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,311,(365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,312,5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,313,"7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,316,public void testConstructor_8int__DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,317,"MillisDuration test = new MillisDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,318,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,319,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,320,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,321,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,322,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,323,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,324,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,325,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,326,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,327,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,328,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,329,5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,330,"7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,333,public void testConstructor_8int__DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,334,try {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,335,"new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,336,fail();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,337,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,341,public void testConstructor_long_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,342,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,343,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,344,"MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,345,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,346,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,347,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,348,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,349,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,350,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,351,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,352,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,353,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,354,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,355,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,358,public void testConstructor_long_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,359,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,360,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,361,"MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,362,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,363,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,364,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,365,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,366,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,367,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,368,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,369,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,370,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,371,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,372,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,376,public void testConstructor_long_long_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,377,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,378,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,379,"MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), null);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,380,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,381,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,382,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,383,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,384,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,385,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,386,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,387,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,388,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,389,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,390,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,393,public void testConstructor_long_long_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,394,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,395,"DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,396,"MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,397,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,398,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,399,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,400,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,401,"assertEquals(31, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,402,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,403,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,404,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,405,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,406,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,407,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,410,public void testConstructor_long_long_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,411,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,412,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,413,"MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,414,"assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,415,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,416,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,417,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,418,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,419,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,420,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,421,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,422,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,423,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,424,"assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,428,public void testConstructor_RI_RI1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,429,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,430,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,431,"MillisDuration test = new MillisDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,432,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,433,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,434,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,435,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,436,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,437,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,438,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,439,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,440,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,441,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,442,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,445,public void testConstructor_RI_RI2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,446,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,447,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,448,"MillisDuration test = new MillisDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,449,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,450,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,451,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,452,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,453,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,454,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,455,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,456,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,457,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,458,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,459,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,462,public void testConstructor_RI_RI3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,463,DateTime dt1 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,464,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,465,"MillisDuration test = new MillisDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,466,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,467,"assertEquals(3, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,468,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,469,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,470,"assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,471,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,472,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,473,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,474,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,475,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,476,"assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,479,public void testConstructor_RI_RI4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,480,"DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,481,DateTime dt2 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,482,"MillisDuration test = new MillisDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,483,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,484,"assertEquals(-3, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,485,"assertEquals(-1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,486,"assertEquals(-1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,487,"assertEquals(-2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,488,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,489,"assertEquals(-1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,490,"assertEquals(-1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,491,"assertEquals(-1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,492,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,493,"assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,496,public void testConstructor_RI_RI5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,497,DateTime dt1 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,498,DateTime dt2 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,499,"MillisDuration test = new MillisDuration(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,500,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,501,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,502,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,503,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,504,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,505,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,506,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,507,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,508,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,509,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,510,"assertEquals(0L, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,514,public void testConstructor_RI_RI_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,515,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,516,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,517,"MillisDuration test = new MillisDuration(dt1, dt2, null);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,518,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,519,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,520,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,521,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,522,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,523,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,524,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,525,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,526,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,527,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,528,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,531,public void testConstructor_RI_RI_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,532,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,533,"DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,534,"MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,535,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,536,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,537,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,538,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,539,"assertEquals(31, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,540,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,541,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,542,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,543,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,544,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,545,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,548,public void testConstructor_RI_RI_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,549,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,550,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,551,"MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,552,"assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,553,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,554,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,555,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,556,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,557,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,558,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,559,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,560,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,561,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,562,"assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,565,public void testConstructor_RI_RI_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,566,DateTime dt1 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,567,"DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,568,"MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,569,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,570,"assertEquals(3, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,571,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,572,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,573,"assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,574,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,575,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,576,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,577,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,578,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,579,"assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,582,public void testConstructor_RI_RI_DurationType5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,583,DateTime dt1 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,584,DateTime dt2 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,585,"MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,586,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,587,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,588,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,589,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,590,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,591,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,592,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,593,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,594,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,595,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,596,"assertEquals(0L, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,601,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,603,public void testConstructor_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,604,"MillisDuration test = new MillisDuration(""P1Y2M3D"");"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,605,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,606,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,607,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,608,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,609,"assertEquals(3, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,610,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,611,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,612,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,613,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,614,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,615,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,616,"(365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,619,public void testConstructor_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,620,MillisDuration test = new MillisDuration((Object) null);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,621,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,622,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,623,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,624,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,625,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,626,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,627,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,628,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,629,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,630,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,631,"assertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,634,public void testConstructor_Object3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,635,"MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,636,MillisDuration test = new MillisDuration(base);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,637,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,638,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,639,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,640,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,641,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,642,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,643,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,644,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,645,"assertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,646,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,647,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,648,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,651,public void testConstructor_Object4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,652,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,653,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,654,"MillisDuration base = new MillisDuration(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,655,MillisDuration test = new MillisDuration(base);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,656,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,657,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,658,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,659,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,660,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,661,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,662,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,663,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,664,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,665,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,666,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,669,public void testConstructor_Object5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,670,"MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,671,try {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,672,new MillisDuration(base);
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,673,fail();
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,674,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,679,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,681,public void testConstructor_Object_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,682,"MillisDuration test = new MillisDuration(""P1Y2M3D"", DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,683,"assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,684,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,685,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,686,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,687,"assertEquals(3, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,688,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,689,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,690,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,691,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,692,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,693,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,694,"(365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,697,public void testConstructor_Object_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,698,"MillisDuration test = new MillisDuration((Object) null, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,699,"assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,700,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,701,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,702,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,703,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,704,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,705,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,706,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,707,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,708,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,709,"assertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,712,public void testConstructor_Object_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,713,MillisDuration test = new MillisDuration(
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,714,"new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,715,"assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,716,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,717,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,718,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,719,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,720,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,721,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,722,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,723,"assertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,724,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,725,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,726,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,729,public void testConstructor_Object_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,730,"MillisDuration test = new MillisDuration(new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), null);"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,731,"assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,732,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,733,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,734,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,735,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,736,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,737,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,738,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,739,"assertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,740,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,741,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java,742,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,207,"ssertEquals(false, test1.equals(new Duration(123L, DurationType.getAverageYearMonthType())));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,207,"assertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,343,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,344,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,345,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,346,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,347,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,348,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,349,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,350,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,343,"expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,344,"expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,345,"expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,346,"expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,347,"expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,348,"expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,349,"expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,350,"expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,358,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,359,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,360,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,361,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,362,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,363,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,364,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,365,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,366,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,368,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,369,"long added = test.addTo(TEST_TIME_NOW, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,370,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,373,public void testAddTo3() {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,368,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,384,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,389,public void testAddTo4() {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,390,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,391,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,392,"long added = test.addTo(TEST_TIME_NOW, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,393,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,396,public void testAddTo5() {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,397,long expected = TEST_TIME_NOW + 100L;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,398,MutableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,399,"long added = test.addTo(TEST_TIME_NOW, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,400,"assertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,401,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,402,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,431,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,432,"long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,437,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,438,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,439,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,440,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,441,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,442,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,443,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,444,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,445,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,447,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,448,"long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,449,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,453,public void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,418,"ong added = test.addTo(TEST_TIME_NOW, 1, null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,419,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,423,ublic void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,424,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,425,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,426,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,427,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,428,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,429,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,430,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,431,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,432,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,434,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,435,"nstant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,465,"Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,450,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,451,"nstant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,480,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,481,"Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,466,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,496,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,473,"xpected = ISOChronology.getInstanceUTC().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,474,"xpected = ISOChronology.getInstanceUTC().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,475,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,476,"xpected = ISOChronology.getInstanceUTC().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,477,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,478,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,479,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,480,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,503,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,504,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,505,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,506,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,507,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,508,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,509,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,510,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,482,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,483,"nstant added = test.addTo(null, 1);  // null has no time zone, uses duration's UTC"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,512,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,513,"Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,516,"utableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,546,"MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,518,"est.addInto(mdt, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,548,"test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,402,"utableDuration test = new MutableDuration(0, 0, 0, 4, 5, 6, 7, 8, DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,402,"MutableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,407,"ssertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,407,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,413,ssertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,413,assertEquals(
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,407,ublic DurationType getDurationType(Object object) {return null;}
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,407,"public DurationType getDurationType(Object object, boolean tmm) {return null;}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,426,ublic DurationType getDurationType(Object object) {return null;}
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,426,"public DurationType getDurationType(Object object, boolean tmm) {return null;}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,478,ublic DurationType getDurationType(Object object) {return null;}
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,478,"public DurationType getDurationType(Object object, boolean tmm) {return null;}"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,155,"ssertEquals(DurationType.getMillisType(), LongConverter.INSTANCE.getDurationType(new Long(123L)));"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,155,"assertEquals(DurationType.getAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,156,"LongConverter.INSTANCE.getDurationType(new Long(123L), false));"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,157,"assertEquals(DurationType.getPreciseAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,158,"LongConverter.INSTANCE.getDurationType(new Long(123L), true));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,172,"ssertEquals(null, NullConverter.INSTANCE.getDurationType(null));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,172,"assertEquals(DurationType.getAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,173,"NullConverter.INSTANCE.getDurationType(null, false));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,174,"assertEquals(DurationType.getPreciseAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,175,"NullConverter.INSTANCE.getDurationType(null, true));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,67,import org.joda.time.MillisDuration;
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,131,"ssertEquals(DurationType.getMillisType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L, DurationType.getMillisType())));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,132,"ssertEquals(DurationType.getAllType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(1, 2, 0, 1, 0, 0, 0, 0)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,132,"assertEquals(DurationType.getMillisType(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,133,ReadableDurationConverter.INSTANCE.getDurationType(
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,134,"new Duration(123L, DurationType.getMillisType()), false));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,135,"assertEquals(DurationType.getAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,136,ReadableDurationConverter.INSTANCE.getDurationType(
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,137,"new Duration(1, 2, 0, 1, 0, 0, 0, 0), false));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,138,"assertEquals(DurationType.getPreciseAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,139,ReadableDurationConverter.INSTANCE.getDurationType(
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,140,"new MillisDuration(1, 2, 0, 1, 0, 0, 0, 0), true));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,130,"ssertEquals(DurationType.getMillisType(), ReadableIntervalConverter.INSTANCE.getDurationType(i));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,130,"assertEquals(DurationType.getAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,131,"ReadableIntervalConverter.INSTANCE.getDurationType(i, false));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,132,"assertEquals(DurationType.getPreciseAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,133,"ReadableIntervalConverter.INSTANCE.getDurationType(i, true));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,324,"ssertEquals(DurationType.getAllType(), StringConverter.INSTANCE.getDurationType(""P2Y6M9D""));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,325,"ssertEquals(DurationType.getAllType(), StringConverter.INSTANCE.getDurationType(""P2Y6W4D""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,324,"assertEquals(DurationType.getAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,325,"StringConverter.INSTANCE.getDurationType(""P2Y6M9D"", false));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,326,"assertEquals(DurationType.getPreciseAllType(),"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,327,"StringConverter.INSTANCE.getDurationType(""P2Y6M9D"", true));"

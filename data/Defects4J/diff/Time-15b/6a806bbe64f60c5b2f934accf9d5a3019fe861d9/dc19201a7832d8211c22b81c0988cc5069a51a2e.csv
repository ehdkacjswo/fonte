is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,76," <li>PreciseYearMonth - as YearMonth, but years are fixed at 365 days,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,76,"* <li>PreciseAll - as All, but years are fixed at 365 days"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,77,*  and months are fixed at 30 days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,78,"* <li>PreciseYearMonth - as YearMonth, but years are fixed at 365 days"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,82," DurationType is thread-safe and immutable, and all subclasses must be as"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,83, well.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,84,"* DurationType is thread-safe and immutable, and all subclasses must be as well."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,87,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,88,* @since 1.0
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,88,tatic final long serialVersionUID = 2274324892792009998L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,91,private static final long serialVersionUID = 2274324892792009998L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,94,private static final DurationType DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,95,private static final DurationType ALL_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,96,private static final DurationType YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,97,private static final DurationType YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,99,private static final DurationType PRECISE_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,101,private static final DurationType PRECISE_YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,105,DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,106,ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,107,YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,108,YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110,PRECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,112,PRECISE_YEAR_WEEK_TYPE = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,100,/ TODO: Many more caching opportunities
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,103, Returns a DurationType of only a milliseconds field.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,116,* Returns a DurationType of only a milliseconds field using the ISOChronology.
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110, Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,123,* Returns a DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,121,eturn getDayHourType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,134,return DAY_HOUR_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,142,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,143,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,155,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,156,return getDayHourType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,149, Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,162,* Returns a DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,163,eturn getAllType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,176,return ALL_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,187,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,188,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,200,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,201,return getAllType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,194, Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,207,* Returns a DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,207,eturn getYearMonthType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,220,return YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,230,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,231,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,243,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,244,return getYearMonthType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,237, Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,250,* Returns a DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,250,eturn getYearWeekType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,263,return YEAR_WEEK_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,273,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,274,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,286,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,287,return getYearWeekType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,280, Returns a precise DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,293,* Returns a precise DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,297, Returns a precise DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,310,"* Returns a DurationType, normally precise, of:"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,314, @throws IllegalArgumentException if chronology produces an imprecise duration type
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,320,urationType type = new AverageYearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,321,f (!type.isPrecise()) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,322,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,323,"""Chronology produced an imprecise duration type"");"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,325,eturn type;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,332,return new AverageYearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,336,* Returns a precise DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,338,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,339,* <li>years (fixed at 365 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,340,* <li>months (fixed at 30 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,341,* <li>weeks
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,342,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,343,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,344,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,345,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,346,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,347,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,349,public static DurationType getPreciseAllType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,350,return PRECISE_ALL_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,329, Returns a precise DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,354,* Returns a precise DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,346, Returns a precise DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,371,* Returns a precise DurationType using the ISOChronology of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,359,eturn new PreciseYearWeekType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,384,return PRECISE_YEAR_WEEK_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,385, @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,411,"* @param chrono  the new chronology, null means ISOChronology in UTC"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,470, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,471, years.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,498,* Returns a version of this DurationType instance that does not support years.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,500,* @return a new duration type that supports the original set of fields except years
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,481, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,482, months.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,510,* Returns a version of this DurationType instance that does not support months.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,512,* @return a new duration type that supports the original set of fields except months
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,492, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,493, weeks.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,522,* Returns a version of this DurationType instance that does not support weeks.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,524,* @return a new duration type that supports the original set of fields except weeks
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,503, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,504, days.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,534,* Returns a version of this DurationType instance that does not support days.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,536,* @return a new duration type that supports the original set of fields except days
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,514, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,515, hours.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,546,* Returns a version of this DurationType instance that does not support hours.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,548,* @return a new duration type that supports the original set of fields except hours
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,525, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,526, minutes.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,558,* Returns a version of this DurationType instance that does not support minutes.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,560,* @return a new duration type that supports the original set of fields except minutes
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,536, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,537, seconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,570,* Returns a version of this DurationType instance that does not support seconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,572,* @return a new duration type that supports the original set of fields except seconds
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,547, Returns a version of this DurationType instance that does not support
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,548, milliseconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,582,* Returns a version of this DurationType instance that does not support milliseconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,584,* @return a new duration type that supports the original set of fields except milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,595,* Compares this type to another object.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,596,"* To be equal, the object must be a DurationType with the same chronology"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,597,* and same supported fields.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,599,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,600,* @return true if equal
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,629,* Returns a hashcode based on the chronology and supported fields.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,631,* @return a suitable hashcode
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,608,tatic final long serialVersionUID = -4314867016852780422L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,658,private static final long serialVersionUID = -4314867016852780422L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,639,tatic final long serialVersionUID = 1115025839896760481L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,689,private static final long serialVersionUID = 1115025839896760481L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,655,eturn new DayHourType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,705,return DurationType.getDayHourType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,696,tatic final long serialVersionUID = -1336767257680877683L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,746,private static final long serialVersionUID = -359769822629866L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,706,eturn new AllType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,756,return DurationType.getAllType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,738,tatic final long serialVersionUID = -1336767257680877683L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,788,private static final long serialVersionUID = -1336767257680877683L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,748,eturn new YearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,798,return DurationType.getYearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,775,tatic final long serialVersionUID = 1347170237843447098L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,825,private static final long serialVersionUID = 1347170237843447098L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,785,eturn new YearWeekType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,835,return DurationType.getYearWeekType(chrono);
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,812,tatic final long serialVersionUID = -1629017135050918461L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,862,private static final long serialVersionUID = -1629017135050918461L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,827,eturn getAverageYearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,877,return DurationType.getAverageYearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,897,private static final class PreciseAllType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,898,private static final long serialVersionUID = 43967269280186L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,900,private final DurationField iYears;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,901,private final DurationField iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,903,public PreciseAllType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,904,super(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,905,"iYears = new ScaledDurationField(chrono.days(), ""PreciseYears"", 365);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,906,"iMonths = new ScaledDurationField(chrono.days(), ""PreciseMonths"", 30);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,909,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,910,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,913,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,914,return years().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,915,&& months().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,916,&& weeks().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,917,&& super.isPrecise();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,920,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,921,return iYears;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,924,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,925,return iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,928,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,929,return iChronology.weeks();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,932,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,933,return getPreciseAllType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,936,public String getName() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,937,"return ""PreciseAllType"";"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,848,tatic final long serialVersionUID = 1203161678926193794L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,942,private static final long serialVersionUID = 1203161678926193794L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,887,tatic final long serialVersionUID = -2040324323318740267L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,981,private static final long serialVersionUID = -2040324323318740267L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,924,tatic final long serialVersionUID = 940106774669244586L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1018,private static final long serialVersionUID = 940106774669244586L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,929,f ((mask |= masked.iMask) == masked.iMask) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,930,"/ No additional fields removed, so return original."
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,931,eturn masked;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1023,mask |= masked.iMask;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,958,"eturn mask(iType.withChronology(chrono), iMask);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1049,"return MaskedType.mask(iType.withChronology(chrono), iMask);"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1030,"eturn ""Masked["" + (name == null ? """" : name) + ""]"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1121,"String maskStr = """";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1122,if ((iMask & (1 << 0)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1123,"maskStr += ""Years"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1125,if ((iMask & (1 << 1)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1126,"maskStr += ""Months"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1128,if ((iMask & (1 << 2)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1129,"maskStr += ""Weeks"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1131,if ((iMask & (1 << 3)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1132,"maskStr += ""Days"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1134,if ((iMask & (1 << 4)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1135,"maskStr += ""Hours"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1137,if ((iMask & (1 << 5)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1138,"maskStr += ""Minutes"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1140,if ((iMask & (1 << 6)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1141,"maskStr += ""Seconds"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1143,if ((iMask & (1 << 7)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1144,"maskStr += ""Millis"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1146,"return ""Masked"" + maskStr + ""["" + (name == null ? """" : name) + ""]"";"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,106,suite.addTest(TestDurationType.suite());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,60,import java.lang.reflect.Modifier;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,61,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,62,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,64,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,65,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,67,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,68,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,69,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,72,* This class is a JUnit test for DurationType.
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,74,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,76,public class TestDurationType extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,77,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,78,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,80,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,81,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,83,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,84,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,85,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,86,366 + 365;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,87,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,88,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,89,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,90,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,92,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,93,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,94,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,96,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,97,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,98,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,99,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,100,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,102,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,103,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,104,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,105,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,106,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,108,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,109,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,110,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,112,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,113,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,116,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,117,return new TestSuite(TestDurationType.class);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,120,public TestDurationType(String name) {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,121,super(name);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,124,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,125,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,126,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,127,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,128,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,129,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,130,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,131,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,134,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,135,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,136,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,137,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,138,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,139,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,140,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,141,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,145,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,146,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,147,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,148,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,152,private void assertEqualsAfterSerialization(DurationType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,153,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,154,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,155,oos.writeObject(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,156,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,157,oos.close();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,159,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,160,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,161,DurationType result = (DurationType) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,162,ois.close();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,164,"assertEquals(type, result);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,167,private void assertSameAfterSerialization(DurationType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,168,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,169,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,170,oos.writeObject(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,171,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,172,oos.close();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,174,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,175,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,176,DurationType result = (DurationType) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,177,ois.close();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,179,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,183,public void testMillisType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,184,DurationType type = DurationType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,185,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,186,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,187,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,188,"assertEquals(false, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,189,"assertEquals(false, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,190,"assertEquals(false, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,191,"assertEquals(false, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,192,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,193,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,194,"assertEquals(null, type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,195,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,196,"assertEquals(true, type == DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,197,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,198,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,199,"assertEquals(true, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,200,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,201,"assertEquals(""MillisType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,202,"assertEquals(""DurationType[MillisType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,203,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,204,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,205,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,209,public void testDayHourType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,210,DurationType type = DurationType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,211,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,212,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,213,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,214,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,215,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,216,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,217,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,218,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,219,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,220,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,221,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,222,"assertEquals(true, type == DurationType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,223,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,224,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,225,"assertEquals(true, type.hashCode() == DurationType.getDayHourType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,226,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,227,"assertEquals(""DayHourType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,228,"assertEquals(""DurationType[DayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,229,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,230,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,231,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,232,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,236,public void testDayHourType_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,237,DurationType type = DurationType.getDayHourType(BuddhistChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,238,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,239,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,240,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,241,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,242,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,243,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,244,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,245,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,246,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,247,"assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,248,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,249,"assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,250,"assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,251,"assertEquals(true, type.equals(DurationType.getDayHourType(BuddhistChronology.getInstanceUTC())));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,252,"assertEquals(false, type.equals(DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,253,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,254,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,255,"assertEquals(false, type.hashCode() == DurationType.getDayHourType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,256,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,257,"assertEquals(""DayHourType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,258,"assertEquals(""DurationType[DayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,259,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,260,"assertSame(DurationType.getDayHourType(), type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,261,"assertSame(DurationType.getDayHourType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,262,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,266,public void testYearWeekType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,267,DurationType type = DurationType.getYearWeekType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,268,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,269,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,270,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,271,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,272,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,273,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,274,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,275,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,276,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,277,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,278,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,279,"assertEquals(true, type == DurationType.getYearWeekType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,280,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,281,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,282,"assertEquals(true, type.hashCode() == DurationType.getYearWeekType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,283,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,284,"assertEquals(""YearWeekType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,285,"assertEquals(""DurationType[YearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,286,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,287,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,288,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,289,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,293,public void testYearWeekType_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,294,DurationType type = DurationType.getYearWeekType(BuddhistChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,295,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,296,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,297,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,298,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,299,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,300,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,301,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,302,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,303,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,304,"assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,305,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,306,"assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,307,"assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,308,"assertEquals(true, type.equals(DurationType.getYearWeekType(BuddhistChronology.getInstanceUTC())));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,309,"assertEquals(false, type.equals(DurationType.getYearWeekType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,310,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,311,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,312,"assertEquals(false, type.hashCode() == DurationType.getYearWeekType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,313,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,314,"assertEquals(""YearWeekType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,315,"assertEquals(""DurationType[YearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,316,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,317,"assertSame(DurationType.getYearWeekType(), type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,318,"assertSame(DurationType.getYearWeekType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,319,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,323,public void testYearMonthType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,324,DurationType type = DurationType.getYearMonthType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,325,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,326,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,327,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,328,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,329,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,330,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,331,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,332,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,333,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,334,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,335,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,336,"assertEquals(true, type == DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,337,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,338,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,339,"assertEquals(true, type.hashCode() == DurationType.getYearMonthType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,340,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,341,"assertEquals(""YearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,342,"assertEquals(""DurationType[YearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,343,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,344,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,345,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,346,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,350,public void testYearMonthType_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,351,DurationType type = DurationType.getYearMonthType(BuddhistChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,352,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,353,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,354,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,355,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,356,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,357,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,358,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,359,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,360,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,361,"assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,362,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,363,"assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,364,"assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,365,"assertEquals(true, type.equals(DurationType.getYearMonthType(BuddhistChronology.getInstanceUTC())));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,366,"assertEquals(false, type.equals(DurationType.getYearMonthType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,367,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,368,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,369,"assertEquals(false, type.hashCode() == DurationType.getYearMonthType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,370,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,371,"assertEquals(""YearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,372,"assertEquals(""DurationType[YearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,373,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,374,"assertSame(DurationType.getYearMonthType(), type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,375,"assertSame(DurationType.getYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,376,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,380,public void testAllType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,381,DurationType type = DurationType.getAllType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,382,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,383,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,384,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,385,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,386,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,387,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,388,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,389,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,390,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,391,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,392,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,393,"assertEquals(true, type == DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,394,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,395,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,396,"assertEquals(true, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,397,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,398,"assertEquals(""AllType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,399,"assertEquals(""DurationType[AllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,400,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,401,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,402,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,403,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,407,public void testAllType_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,408,DurationType type = DurationType.getAllType(BuddhistChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,409,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,410,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,411,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,412,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,413,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,414,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,415,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,416,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,417,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,418,"assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,419,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,420,"assertEquals(true, DurationType.getAllType() == DurationType.getAllType(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,421,"assertEquals(true, DurationType.getAllType() == DurationType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,422,"assertEquals(true, type.equals(DurationType.getAllType(BuddhistChronology.getInstanceUTC())));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,423,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,424,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,425,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,426,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,427,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,428,"assertEquals(""AllType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,429,"assertEquals(""DurationType[AllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,430,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,431,"assertSame(DurationType.getAllType(), type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,432,"assertSame(DurationType.getAllType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,433,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,437,public void testAverageYearMonthType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,438,DurationType type = DurationType.getAverageYearMonthType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,439,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,440,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,441,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,442,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,443,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,444,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,445,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,446,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,447,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,448,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,449,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,450,"assertEquals(true, type == DurationType.getAverageYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,451,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,452,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,453,"assertEquals(true, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,454,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,455,"assertEquals(""AverageYearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,456,"assertEquals(""DurationType[AverageYearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,457,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,458,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,459,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,460,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,464,public void testAverageYearMonthType_Chronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,465,DurationType type = DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,466,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,467,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,468,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,469,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,470,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,471,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,472,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,473,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,474,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,475,"assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,476,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,477,"assertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,478,"assertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,479,"assertEquals(true, type.equals(DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC())));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,480,"assertEquals(false, type.equals(DurationType.getAverageYearMonthType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,481,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,482,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,483,"assertEquals(false, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,484,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,485,"assertEquals(""AverageYearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,486,"assertEquals(""DurationType[AverageYearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,487,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,488,"assertSame(DurationType.getAverageYearMonthType(), type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,489,"assertSame(DurationType.getAverageYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,490,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,494,public void testPreciseYearWeekType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,495,DurationType type = DurationType.getPreciseYearWeekType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,496,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,497,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,498,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,499,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,500,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,501,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,502,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,503,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,504,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,505,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,506,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,507,"assertEquals(true, type == DurationType.getPreciseYearWeekType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,508,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,509,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,510,"assertEquals(true, type.hashCode() == DurationType.getPreciseYearWeekType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,511,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,512,"assertEquals(""PreciseYearWeekType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,513,"assertEquals(""DurationType[PreciseYearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,514,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,515,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,516,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,517,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,521,public void testPreciseYearMonthType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,522,DurationType type = DurationType.getPreciseYearMonthType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,523,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,524,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,525,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,526,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,527,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,528,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,529,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,530,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,531,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,532,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,533,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,534,"assertEquals(true, type == DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,535,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,536,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,537,"assertEquals(true, type.hashCode() == DurationType.getPreciseYearMonthType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,538,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,539,"assertEquals(""PreciseYearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,540,"assertEquals(""DurationType[PreciseYearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,541,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,542,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,543,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,544,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,548,public void testPreciseAllType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,549,DurationType type = DurationType.getPreciseAllType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,550,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,551,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,552,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,553,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,554,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,555,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,556,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,557,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,558,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,559,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,560,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,561,"assertEquals(true, type == DurationType.getPreciseAllType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,562,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,563,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,564,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,565,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,566,"assertEquals(""PreciseAllType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,567,"assertEquals(""DurationType[PreciseAllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,568,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,569,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,570,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,571,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,575,public void testMaskYears() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,576,DurationType type = DurationType.getPreciseAllType().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,577,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,578,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,579,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,580,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,581,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,582,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,583,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,584,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,585,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,586,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,587,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,588,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withYearsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,589,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,590,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,591,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withYearsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,592,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,593,"assertEquals(""MaskedYears[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,594,"assertEquals(""DurationType[MaskedYears[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,595,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,599,public void testMaskMonths() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,600,DurationType type = DurationType.getPreciseAllType().withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,601,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,602,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,603,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,604,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,605,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,606,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,607,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,608,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,609,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,610,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,611,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,612,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withMonthsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,613,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,614,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,615,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withMonthsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,616,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,617,"assertEquals(""MaskedMonths[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,618,"assertEquals(""DurationType[MaskedMonths[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,619,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,623,public void testMaskWeeks() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,624,DurationType type = DurationType.getPreciseAllType().withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,625,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,626,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,627,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,628,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,629,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,630,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,631,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,632,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,633,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,634,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,635,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,636,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withWeeksRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,637,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,638,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,639,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withWeeksRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,640,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,641,"assertEquals(""MaskedWeeks[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,642,"assertEquals(""DurationType[MaskedWeeks[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,643,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,647,public void testMaskDays() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,648,DurationType type = DurationType.getPreciseAllType().withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,649,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,650,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,651,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,652,"assertEquals(false, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,653,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,654,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,655,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,656,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,657,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,658,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,659,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,660,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withDaysRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,661,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,662,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,663,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withDaysRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,664,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,665,"assertEquals(""MaskedDays[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,666,"assertEquals(""DurationType[MaskedDays[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,667,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,671,public void testMaskHours() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,672,DurationType type = DurationType.getPreciseAllType().withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,673,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,674,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,675,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,676,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,677,"assertEquals(false, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,678,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,679,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,680,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,681,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,682,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,683,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,684,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withHoursRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,685,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,686,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,687,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withHoursRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,688,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,689,"assertEquals(""MaskedHours[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,690,"assertEquals(""DurationType[MaskedHours[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,691,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,695,public void testMaskMinutes() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,696,DurationType type = DurationType.getPreciseAllType().withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,697,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,698,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,699,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,700,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,701,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,702,"assertEquals(false, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,703,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,704,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,705,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,706,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,707,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,708,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withMinutesRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,709,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,710,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,711,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withMinutesRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,712,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,713,"assertEquals(""MaskedMinutes[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,714,"assertEquals(""DurationType[MaskedMinutes[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,715,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,719,public void testMaskSeconds() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,720,DurationType type = DurationType.getPreciseAllType().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,721,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,722,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,723,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,724,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,725,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,726,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,727,"assertEquals(false, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,728,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,729,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,730,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,731,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,732,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withSecondsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,733,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,734,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,735,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withSecondsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,736,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,737,"assertEquals(""MaskedSeconds[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,738,"assertEquals(""DurationType[MaskedSeconds[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,739,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,743,public void testMaskMillis() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,744,DurationType type = DurationType.getPreciseAllType().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,745,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,746,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,747,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,748,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,749,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,750,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,751,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,752,"assertEquals(false, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,753,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,754,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,755,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,756,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withMillisRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,757,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,758,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,759,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withMillisRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,760,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,761,"assertEquals(""MaskedMillis[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,762,"assertEquals(""DurationType[MaskedMillis[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,763,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,767,public void testMaskHoursMinutesSeconds() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,768,DurationType type = DurationType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,769,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,770,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,771,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,772,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,773,"assertEquals(false, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,774,"assertEquals(false, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,775,"assertEquals(false, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,776,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,777,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,778,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,779,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,780,"assertEquals(true, type.equals(DurationType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,781,"assertEquals(false, type.equals(DurationType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,782,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,783,"assertEquals(true, type.hashCode() == DurationType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,784,"assertEquals(false, type.hashCode() == DurationType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,785,"assertEquals(""MaskedHoursMinutesSeconds[PreciseAllType]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,786,"assertEquals(""DurationType[MaskedHoursMinutesSeconds[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,787,assertEqualsAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,791,public void testMaskWithChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,792,DurationType type = DurationType.getAllType().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,793,"assertEquals(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,794,"assertEquals(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,796,DurationType type2 = type.withChronology(CopticChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,797,"assertEquals(CopticChronology.getInstanceUTC(), type2.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,798,"assertEquals(false, type2.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,799,"assertEquals(true, type2.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,800,"assertEquals(true, type2.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,801,"assertEquals(true, type2.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,802,"assertEquals(true, type2.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,803,"assertEquals(true, type2.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,804,"assertEquals(true, type2.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,805,"assertEquals(true, type2.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,809,public void testMaskTwice1() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,810,DurationType type = DurationType.getPreciseAllType().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,811,DurationType type2 = type.withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,812,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,814,type = DurationType.getPreciseAllType().withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,815,type2 = type.withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,816,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,818,type = DurationType.getPreciseAllType().withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,819,type2 = type.withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,820,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,822,type = DurationType.getPreciseAllType().withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,823,type2 = type.withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,824,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,826,type = DurationType.getPreciseAllType().withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,827,type2 = type.withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,828,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,830,type = DurationType.getPreciseAllType().withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,831,type2 = type.withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,832,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,834,type = DurationType.getPreciseAllType().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,835,type2 = type.withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,836,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,838,type = DurationType.getPreciseAllType().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,839,type2 = type.withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,840,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,844,public void testMaskTwice2() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,845,DurationType type = DurationType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,846,DurationType type2 = type.withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,847,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,849,type = DurationType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,850,type2 = type.withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,851,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,853,type = DurationType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,854,type2 = type.withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,855,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,857,type = DurationType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,858,type2 = type.withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,859,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,861,type = DurationType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,862,type2 = type.withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,863,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,865,type = DurationType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,866,type2 = type.withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,867,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,869,type = DurationType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,870,type2 = type.withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,871,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,875,public void testMaskNullName() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,876,DurationType type = new MockDurationTypeWithFields().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,877,"assertEquals(""MaskedYears[]"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,878,"assertEquals(""DurationType[MaskedYears[]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,882,public void testAbstract() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,883,"assertEquals(true, Modifier.isPublic(DurationType.class.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,884,"assertEquals(true, Modifier.isAbstract(DurationType.class.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,886,DurationType type = new MockDurationType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,887,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,888,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,889,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,890,"assertEquals(false, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,891,"assertEquals(false, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,892,"assertEquals(false, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,893,"assertEquals(false, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,894,"assertEquals(false, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,895,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,896,"assertEquals(null, type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,897,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,898,"assertEquals(true, type.equals(new MockDurationType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,899,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,900,"assertEquals(false, type.equals(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,901,"assertEquals(false, type.equals(""six""));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,902,"assertEquals(null, type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,903,"assertEquals(""DurationType[]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,906,static class MockDurationType extends DurationType {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,907,public String getName() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,908,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,910,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,911,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,913,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,914,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,916,public boolean isPrecise() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,917,return false;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,921,static class MockDurationTypeWithFields extends DurationType {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,922,public String getName() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,923,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,925,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,926,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,928,public DurationField years() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,929,return ISOChronology.getInstanceUTC().years();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,931,public DurationField months() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,932,return ISOChronology.getInstanceUTC().months();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,934,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,935,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,937,public boolean isPrecise() {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,938,return false;

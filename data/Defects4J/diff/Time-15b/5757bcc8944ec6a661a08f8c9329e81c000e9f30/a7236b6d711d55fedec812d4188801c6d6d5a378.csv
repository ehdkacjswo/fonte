is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,86,public int hashCode() {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,87,return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
True,JodaTime/src/test/org/joda/time/tz/TestAll.java,JodaTime/src/test/org/joda/time/tz/TestAll.java,40,suite.addTest(TestFixedDateTimeZone.suite());
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,16,package org.joda.time.tz;
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,21,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,24,* Test cases for FixedDateTimeZone.
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,26,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,28,public class TestFixedDateTimeZone extends TestCase {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,30,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,31,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,34,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,35,return new TestSuite(TestFixedDateTimeZone.class);
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,38,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,40,public TestFixedDateTimeZone(String name) {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,41,super(name);
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,44,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,45,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,46,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,49,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,50,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,53,public void testEquals() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,54,"FixedDateTimeZone zone1 = new FixedDateTimeZone(""A"", ""B"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,55,"FixedDateTimeZone zone1b = new FixedDateTimeZone(""A"", ""B"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,56,"FixedDateTimeZone zone2 = new FixedDateTimeZone(""A"", ""C"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,57,"FixedDateTimeZone zone3 = new FixedDateTimeZone(""A"", ""B"", 2, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,58,"FixedDateTimeZone zone4 = new FixedDateTimeZone(""A"", ""B"", 1, 6);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,60,"assertEquals(true, zone1.equals(zone1));"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,61,"assertEquals(true, zone1.equals(zone1b));"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,62,"assertEquals(true, zone1.equals(zone2));  // second arg ignored"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,63,"assertEquals(false, zone1.equals(zone3));"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,64,"assertEquals(false, zone1.equals(zone4));"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,67,public void testHashCode() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,68,"FixedDateTimeZone zone1 = new FixedDateTimeZone(""A"", ""B"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,69,"FixedDateTimeZone zone1b = new FixedDateTimeZone(""A"", ""B"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,70,"FixedDateTimeZone zone2 = new FixedDateTimeZone(""A"", ""C"", 1, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,71,"FixedDateTimeZone zone3 = new FixedDateTimeZone(""A"", ""B"", 2, 5);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,72,"FixedDateTimeZone zone4 = new FixedDateTimeZone(""A"", ""B"", 1, 6);"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,74,"assertEquals(true, zone1.hashCode() == zone1.hashCode());"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,75,"assertEquals(true, zone1.hashCode() == zone1b.hashCode());"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,76,"assertEquals(true, zone1.hashCode() == zone2.hashCode());  // second arg ignored"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,77,"assertEquals(false, zone1.hashCode() == zone3.hashCode());"
True,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java,78,"assertEquals(false, zone1.hashCode() == zone4.hashCode());"

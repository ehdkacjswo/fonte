is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,"* Adds the period to the instant, specifying the number of times to add."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,523,* @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,524,"* @param period  the period to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,525,* @param scalar  the number of times to add
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,526,* @return the updated instant
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,528,"public abstract long add(long instant, ReadablePeriod period, int scalar);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,660," @param periodToAdd  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,660,"* @param period  the period to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,665,"ublic DateTime withPeriodAdded(ReadablePeriod periodToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,666,f (periodToAdd == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,665,"public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,666,if (period == null || scalar == 0) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,669,"ong instant = periodToAdd.addTo(getMillis(), scalar, getChronology());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,669,"long instant = getChronology().add(getMillis(), period, scalar);"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,185, Gets the chronology from the specified instant object handling null.
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,186, <p>
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,187," If the instant object is <code>null</code>, or the instant's chronology is"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,188," <code>null</code>, <code>nullChrono</code> will be returned."
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,189," Otherwise, the chronology from the object is returned."
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,191," @param instant  the instant to examine, null means returns use nullChrono"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,192, @param nullChrono  the chronology to use in the case of finding null
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,193, @return the chronology
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,195,"ublic static final Chronology getInstantChronology(ReadableInstant instant, Chronology nullChrono) {"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,196,f (instant == null) {
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,197,eturn nullChrono;
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,199,hronology chrono = instant.getChronology();
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,200,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,201,eturn nullChrono;
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,203,eturn chrono;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"etMillis(period.addTo(getMillis(), scalar, getChronology()));  // set via this class not super"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"setMillis(getChronology().add(getMillis(), period, scalar));  // set via this class not super"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,356,"etEndMillis(period.addTo(getStartMillis(), 1, chrono));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,356,"setEndMillis(chrono.add(getStartMillis(), period, 1));"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,385,"etStartMillis(period.addTo(getEndMillis(), -1, chrono));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,385,"setStartMillis(chrono.add(getEndMillis(), period, -1));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96, Create a period from a set of field values using the time set of fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96,* Create a period from a set of field values using the standard set of fields.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,104,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,104,"super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,423,* Sets all the fields in one go from two instants using
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,424,* the ISO chronology and dividing the fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,426,"* @param start  the start instant, null means now"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,427,"* @param end  the end instant, null means now"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,429,"public void setPeriod(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,430,"setPeriod(start, end, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,434,* Sets all the fields in one go from two instants using
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,435,* the specified chronology and dividing the fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,437,"* @param start  the start instant, null means now"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,438,"* @param end  the end instant, null means now"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,439,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,441,"public void setPeriod(ReadableInstant start, ReadableInstant end, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,442,if (start == end) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,443,setPeriod(0L);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,444,} else {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,445,long startMillis = DateTimeUtils.getInstantMillis(start);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,446,long endMillis = DateTimeUtils.getInstantMillis(end);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,447,"setPeriod(start, end, chrono);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,607,eturn getPeriodType().getYears(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,636,"return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,616,eturn getPeriodType().getMonths(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,645,"return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,625,eturn getPeriodType().getWeeks(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,654,"return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,634,eturn getPeriodType().getDays(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,663,"return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,644,eturn getPeriodType().getHours(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,673,"return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,653,eturn getPeriodType().getMinutes(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,682,"return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,662,eturn getPeriodType().getSeconds(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,691,"return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,671,eturn getPeriodType().getMillis(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,700,"return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,89,* Create a period with a specified number of years.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,90,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,92,* @param years  the amount of years in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,93,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,95,public static Period years(int years) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,96,"return new Period(new int[] {years}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,100,* Create a period with a specified number of months.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,101,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,103,* @param months  the amount of months in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,104,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,106,public static Period months(int months) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,107,"return new Period(new int[] {months}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,111,* Create a period with a specified number of weeks.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,112,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,114,* @param weeks  the amount of weeks in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,115,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,117,public static Period weeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,118,"return new Period(new int[] {weeks}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,122,* Create a period with a specified number of days.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,123,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,125,* @param days  the amount of days in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,126,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,128,public static Period days(int days) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,129,"return new Period(new int[] {days}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,133,* Create a period with a specified number of hours.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,134,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,136,* @param hours  the amount of hours in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,137,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,139,public static Period hours(int hours) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,140,"return new Period(new int[] {hours}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,144,* Create a period with a specified number of minutes.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,145,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,147,* @param minutes  the amount of minutes in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,148,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,150,public static Period minutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,151,"return new Period(new int[] {minutes}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,155,* Create a period with a specified number of seconds.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,156,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,158,* @param seconds  the amount of seconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,159,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,161,public static Period seconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162,"return new Period(new int[] {seconds}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,166,* Create a period with a specified number of millis.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,167,* The standard period type is used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,169,* @param millis  the amount of millis in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,170,* @return the period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,172,public static Period millis(int millis) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,173,"return new Period(new int[] {millis}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,88, Create a period from a set of field values using the time set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,178,* Creates a new empty period with the standard set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,179,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,180,* One way to initialise a period is as follows:
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,181,* <pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,182,* Period = new Period().withYears(6).withMonths(3).withSeconds(23);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,183,* </pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,184,"* Bear in mind that this creates four period instances in total, three of"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,185,* which are immediately discarded.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,186,"* The alterative is more efficient, but less readable:"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,187,* <pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,188,"* Period = new Period(6, 3, 0, 0, 0, 0, 23, 0);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,189,* </pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,190,* The following is also slightly less wasteful:
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,191,* <pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,192,* Period = Period.years(6).withMonths(3).withSeconds(23);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,193,* </pre>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,195,public Period() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,196,"super(0L, null, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,200,* Create a period from a set of field values using the standard set of fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,96,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,208,"super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,230,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,231,* There is usually little need to use this constructor.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,232,* The period type is used primarily to define how to split an interval into a period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,233,"* As this constructor already is split, the period type does no real work."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,156," fields, such as the UTC or precise types."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,272,"* fields, such as UTC"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,464,* Constructor used when we trust ourselves.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,466,"* @param values  the values to use, not null, not cloned"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,467,"* @param type  which set of fields this period supports, not null"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,469,"private Period(int[] values, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,470,"super(values, type);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,365,eturn getPeriodType().getYears(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,491,"return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,374,eturn getPeriodType().getMonths(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,500,"return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,383,eturn getPeriodType().getWeeks(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,509,"return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,392,eturn getPeriodType().getDays(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,518,"return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,402,eturn getPeriodType().getHours(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,528,"return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,411,eturn getPeriodType().getMinutes(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,537,"return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,420,eturn getPeriodType().getSeconds(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,546,"return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,429,eturn getPeriodType().getMillis(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,555,"return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,577,* Returns a new period with the specified number of years.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,578,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,579,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,581,"* @param years  the amount of years to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,582,* @return the new period with the increased years
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,583,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,585,public Period withYears(int years) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,586,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,587,"getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,588,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,592,* Returns a new period with the specified number of months.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,593,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,594,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,596,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,597,* @return the new period with the increased months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,598,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,600,public Period withMonths(int months) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,601,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,602,"getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,603,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,607,* Returns a new period with the specified number of weeks.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,608,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,609,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,611,"* @param weeks  the amount of weeks to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,612,* @return the new period with the increased weeks
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,613,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,615,public Period withWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,616,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,617,"getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,618,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,622,* Returns a new period with the specified number of days.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,623,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,624,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,626,"* @param days  the amount of days to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,627,* @return the new period with the increased days
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,628,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,630,public Period withDays(int days) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,631,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,632,"getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,633,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,637,* Returns a new period with the specified number of hours.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,638,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,639,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,641,"* @param hours  the amount of hours to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,642,* @return the new period with the increased hours
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,643,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,645,public Period withHours(int hours) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,646,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,647,"getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,648,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,652,* Returns a new period with the specified number of minutes.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,653,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,654,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,656,"* @param minutes  the amount of minutes to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,657,* @return the new period with the increased minutes
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,658,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,660,public Period withMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,661,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,662,"getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,663,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,667,* Returns a new period with the specified number of seconds.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,668,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,669,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,671,"* @param seconds  the amount of seconds to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,672,* @return the new period with the increased seconds
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,673,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,675,public Period withSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,676,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,677,"getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,678,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,682,* Returns a new period with the specified number of millis.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,683,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,684,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,686,"* @param millis  the amount of millis to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,687,* @return the new period with the increased millis
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,688,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,690,public Period withMillis(int millis) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,691,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,692,"getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,693,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,698,* Returns a new period with the specified number of years added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,699,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,700,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,702,"* @param years  the amount of years to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,703,* @return the new period with the increased years
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,704,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,706,public Period plusYears(int years) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,707,if (years == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,708,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,710,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,711,"getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,712,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,716,* Returns a new period plus the specified number of months added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,717,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,718,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,720,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,721,* @return the new period plus the increased months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,722,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,724,public Period plusMonths(int months) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,725,if (months == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,726,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,728,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,729,"getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,730,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,734,* Returns a new period plus the specified number of weeks added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,735,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,736,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,738,"* @param weeks  the amount of weeks to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,739,* @return the new period plus the increased weeks
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,740,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,742,public Period plusWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,743,if (weeks == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,744,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,746,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,747,"getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,748,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,752,* Returns a new period plus the specified number of days added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,753,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,754,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,756,"* @param days  the amount of days to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,757,* @return the new period plus the increased days
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,758,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,760,public Period plusDays(int days) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,761,if (days == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,762,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,764,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,765,"getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,766,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,770,* Returns a new period plus the specified number of hours added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,771,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,772,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,774,"* @param hours  the amount of hours to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,775,* @return the new period plus the increased hours
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,776,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,778,public Period plusHours(int hours) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,779,if (hours == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,780,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,782,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,783,"getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,784,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,788,* Returns a new period plus the specified number of minutes added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,789,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,790,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,792,"* @param minutes  the amount of minutes to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,793,* @return the new period plus the increased minutes
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,794,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,796,public Period plusMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,797,if (minutes == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,798,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,800,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,801,"getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,802,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,806,* Returns a new period plus the specified number of seconds added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,807,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,808,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,810,"* @param seconds  the amount of seconds to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,811,* @return the new period plus the increased seconds
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,812,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,814,public Period plusSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,815,if (seconds == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,816,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,818,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,819,"getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,820,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,824,* Returns a new period plus the specified number of millis added.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,825,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,826,* This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,828,"* @param millis  the amount of millis to add, may be negative"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,829,* @return the new period plus the increased millis
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,830,* @throws UnsupportedOperationException if the field is not supported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,832,public Period plusMillis(int millis) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,833,if (millis == 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,834,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,836,int[] values = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,837,"getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,838,"return new Period(values, getPeriodType());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,59,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,86,static int YEAR_INDEX = 0;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,87,static int MONTH_INDEX = 1;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,88,static int WEEK_INDEX = 2;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,89,static int DAY_INDEX = 3;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,90,static int HOUR_INDEX = 4;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,91,static int MINUTE_INDEX = 5;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,92,static int SECOND_INDEX = 6;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,93,static int MILLI_INDEX = 7;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,516, Gets the years field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,518, @param period  the period to query
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,519," @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,521,ublic int getYears(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522,nt index = iIndices[0];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,523,eturn (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,527, Gets the months field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,527,* Gets the indexed field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,530," @return the number of months in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,530,* @param index  the index to use
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,531,"* @return the value of the field, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,532,ublic int getMonths(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,533,nt index = iIndices[1];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,534,eturn (index == -1 ? 0 : period.getValue(index));
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,533,"int getIndexedField(ReadablePeriod period, int index) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,534,int realIndex = iIndices[index];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,535,return (realIndex == -1 ? 0 : period.getValue(realIndex));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,538, Gets the weeks field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,539,* Sets the indexed field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,541," @return the number of weeks in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,543,ublic int getWeeks(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,544,nt index = iIndices[2];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,545,eturn (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,549, Gets the days field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,551, @param period  the period to query
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,552," @return the number of days in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,554,ublic int getDays(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,555,nt index = iIndices[3];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,556,eturn (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,561, Gets the hours field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,563, @param period  the period to query
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,564," @return the number of hours in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,566,ublic int getHours(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,567,nt index = iIndices[4];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,568,eturn (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,572, Gets the minutes field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,574, @param period  the period to query
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,575," @return the number of minutes in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,577,ublic int getMinutes(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,578,nt index = iIndices[5];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,579,eturn (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,583, Gets the seconds field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,585, @param period  the period to query
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,586," @return the number of seconds in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,588,ublic int getSeconds(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,589,nt index = iIndices[6];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,590,eturn (index == -1 ? 0 : period.getValue(index));
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,542,* @param index  the index to use
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,543,* @param values  the array to populate
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,544,* @param newValue  the value to set
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,545,* @throws UnsupportedOperationException if not supported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,547,"boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,548,int realIndex = iIndices[index];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,549,if (realIndex == -1) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,550,"throw new UnsupportedOperationException(""Field is not supported"");"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,552,values[realIndex] = newValue;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,553,return true;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,594, Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,557,* Adds to the indexed field part of the period.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,597," @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,599,ublic int getMillis(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,600,nt index = iIndices[7];
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,601,eturn (index == -1 ? 0 : period.getValue(index));
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,560,* @param index  the index to use
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,561,* @param values  the array to populate
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,562,* @param valueToAdd  the value to add
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,563,* @throws UnsupportedOperationException if not supported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,565,"boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,566,int realIndex = iIndices[index];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,567,if (realIndex == -1) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,568,"throw new UnsupportedOperationException(""Field is not supported"");"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,570,"values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,571,return true;
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,74, when paired with a time.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,74,* when paired with a time via an interval.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,137," Adds this period to the given instant, returning a new value."
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,138, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,139," The addition uses the chronology specified, or ISOChronology"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,140, in the default zone if it is null.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,141," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,142, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,144, @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,145," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,146," @param chrono  the chronology to use, null means ISO in the default zone"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,147, @return milliseconds value plus this period times scalar
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,148, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,150,"ong addTo(long instant, int scalar, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,153," Adds this period to the given instant, returning a new DateTime."
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,154, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,155," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,156, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,158, @param instant  the instant to add the period to
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,159," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,160, @return datetime with the original value plus this period times scalar
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,161, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,162, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,164,"ateTime addTo(ReadableInstant instant, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,167, Adds this period into the given mutable instant.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,168, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,169," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,170, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,172, @param instant  the instant to update with the added period
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,173," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,174, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,175, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,177,"oid addInto(ReadWritableInstant instant, int scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,57,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,58,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,59,mport org.joda.time.Duration;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,63,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,64,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,66,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,163," Adds this period to the given instant, returning a new value."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,164, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,165, The addition uses ISOChronology in the default zone.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,166," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,167, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,169, @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,170," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,171, @return milliseconds value plus this period times scalar
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,172, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,174,"ublic long addTo(long instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,175,"eturn addTo(instant, scalar, null);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,179," Adds this period to the given instant, returning a new value."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,180, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,181," The addition uses the chronology specified, or ISOChronology"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,182, in the default zone if it is null.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,183," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,184, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,186, @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,187," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,188," @param chrono  the chronology to use, null means ISO in the default zone"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,189, @return milliseconds value plus this period times scalar
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,190, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,192,"ublic long addTo(long instant, int scalar, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,193,f (scalar != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,194,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,195,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,196,ong value = getValue(i); // use long to allow for multiplication (fits OK)
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,197,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,198,"nstant = getFieldType(i).getField(chrono).add(instant, value * scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,202,eturn instant;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,206, Adds this period to the given instant using the chronology of the specified
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,207," instant (if present), returning a new DateTime."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,208, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,209," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,210, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,212," @param instant  the instant to add the period to, null means now"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,213," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,214, @return datetime with the original value plus this period times scalar
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,215, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,217,"ublic DateTime addTo(ReadableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,218,ong instantMillis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,219,"hronology chrono = DateTimeUtils.getInstantChronology(instant, null);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,220,"eturn new DateTime(addTo(instantMillis, scalar, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,224, Adds this period into the given mutable instant using the chronology of
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,225, the specified mutable instant (if present).
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,226, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,227," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,228, in a scalar of minus one.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,230," @param instant  the instant to update with the added period, must not be null"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,231," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,232, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,233, @throws ArithmeticException if the result of the calculation is too large
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,235,"ublic void addInto(ReadWritableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,236,f (instant == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,237,"hrow new IllegalArgumentException(""The instant must not be null"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,239,"nstant.setMillis(addTo(instant.getMillis(), scalar, instant.getChronology()));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,265, Gets the total millisecond duration of this period relative to a start
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,266, instant and chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,267, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,268, This method adds the period to the specifed instant.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,269, The difference between the start instant and the result of the add is the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,271," @param startInstant  the instant to add the period to, thus obtaining the duration"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,272, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,273, @return the total length of the period in milliseconds relative to the start instant
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,274, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,276,"ublic long toDurationMillisFrom(long startInstant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,277,"ong endInstant = addTo(startInstant, 1, chrono);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,278,"eturn FieldUtils.safeAdd(endInstant, -startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,282, Gets the total millisecond duration of this period relative to a start
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,283, instant and chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,284, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,285, This method adds the period to the specifed instant.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,286, The difference between the start instant and the result of the add is the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,288," @param startInstant  the instant to add the period to, thus obtaining the duration"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,289, @return the total length of the period in milliseconds relative to the start instant
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,290, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,292,ublic Duration toDurationFrom(ReadableInstant startInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,293,ong millis = DateTimeUtils.getInstantMillis(startInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,294,hronology chrono = DateTimeUtils.getInstantChronology(startInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,295,"eturn new Duration(toDurationMillisFrom(millis, chrono));"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,177,"hronology chrono = DateTimeUtils.getInstantChronology(start, null);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,178,"EndMillis = period.addTo(iStartMillis, 1, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,177,Chronology chrono = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,178,"iEndMillis = chrono.add(iStartMillis, period, 1);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,200,"hronology chrono = DateTimeUtils.getInstantChronology(end, null);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,201,"StartMillis = period.addTo(iEndMillis, -1, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,200,Chronology chrono = DateTimeUtils.getInstantChronology(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,201,"iStartMillis = chrono.add(iEndMillis, period, -1);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,60,import org.joda.time.Duration;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,99, Creates a period from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,100, <p>
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,101, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,102, the period type.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,104," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,105," @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,106," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,107, @throws IllegalArgumentException if period type is invalid
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,109,"rotected BasePeriod(long duration, PeriodType type, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,110,uper();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,111,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,112,Type = type;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,113,"etPeriodInternal(duration, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,163,"* Creates a period from the given millisecond duration, which is only really"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,164,* suitable for durations less than one day.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,165,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,166,* Only fields that are precise will be used.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,167,* Thus the largest precise field may have a large value.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,169,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,170,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,171,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,172,* @throws IllegalArgumentException if period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,174,"protected BasePeriod(long duration, PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,175,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,176,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,177,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,178,"setPeriodInternal(duration, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,206,* Constructor used when we trust ourselves.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,207,* Do not expose publically.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,209,"* @param values  the values to use, not null, not cloned"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,210,"* @param type  which set of fields this period supports, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,212,"protected BasePeriod(int[] values, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,213,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,214,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,215,iValues = values;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,275,* Gets the total millisecond duration of this period relative to a start instant.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,276,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,277,* This method adds the period to the specifed instant.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,278,* The difference between the start instant and the result of the add is the duration
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,280,"* @param startInstant  the instant to add the period to, thus obtaining the duration"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,281,* @return the total length of the period as a duration relative to the start instant
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,282,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,284,public Duration toDurationFrom(ReadableInstant startInstant) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,285,long startMillis = DateTimeUtils.getInstantMillis(startInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,286,Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,287,"long endMillis = chrono.add(startMillis, this, 1);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,288,"return new Duration(startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,65,import org.joda.time.ReadablePeriod;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,248,"* Adds the period to the instant, specifying the number of times to add."
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,250,* @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,251,"* @param period  the period to add, null means add nothing"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,252,* @param scalar  the number of times to add
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,253,* @return the updated instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,255,"public long add(long instant, ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,256,if (scalar != 0 && period != null) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,257,"for (int i = 0, isize = period.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,258,long value = period.getValue(i); // use long to allow for multiplication (fits OK)
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,259,if (value != 0) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,260,"instant = period.getFieldType(i).getField(this).add(instant, value * scalar);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,264,return instant;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,267,"ndInstant = period.addTo(startInstant, 1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,267,"endInstant = ISOChronology.getInstance().add(startInstant, period, 1); // TODO"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,271,"tartInstant = period.addTo(endInstant, -1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,271,"startInstant = ISOChronology.getInstance().add(endInstant, period, -1); // TODO"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,65,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,66,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,67,mport org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,68,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,69,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,300,ublic void testGetInstantChronology_RI_long() {
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,301,"ateTime dt = new DateTime(123L, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,302,"ssertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, CopticChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,303,"ssertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,305,nstant i = new Instant(123L);
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,306,"ssertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(i, CopticChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,307,"ssertEquals(null, DateTimeUtils.getInstantChronology(i, null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,309,"ssertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(null, CopticChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,310,"ssertEquals(null, DateTimeUtils.getInstantChronology(null, null));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,67,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,217,ublic void testAddTo1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,218,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,219,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,220,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,221,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,222,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,223,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,224,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,225,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,226,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,228,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,229,"ong added = test.addTo(TEST_TIME_NOW, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,230,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,233,ublic void testAddTo2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,234,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,235,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,236,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,237,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,238,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,239,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,240,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,241,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,242,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,244,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,245,"ong added = test.addTo(TEST_TIME_NOW, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,246,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,249,ublic void testAddTo3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,250,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,251,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,252,"ong added = test.addTo(TEST_TIME_NOW, 0);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,253,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,256,ublic void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,257,ong expected = TEST_TIME_NOW + 100L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,258,utablePeriod test = new MutablePeriod(100L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,259,"ong added = test.addTo(TEST_TIME_NOW, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,260,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,264,ublic void testAddToWithChronology1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,265,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,266,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,267,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,268,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,269,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,270,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,271,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,272,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,273,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,275,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,276,"ong added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,277,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,280,ublic void testAddToWithChronology2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,281,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,282,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,283,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,284,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,285,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,286,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,287,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,288,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,289,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,291,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,292,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,293,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,296,ublic void testAddToWithChronology3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,297,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,298,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,299,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,300,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,301,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,302,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,303,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,304,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,305,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,307,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,308,"ong added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,309,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,313,ublic void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,314,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,315,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,316,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,317,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,318,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,319,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,320,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,321,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,322,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,324,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,325,"ateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,326,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,327,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,330,ublic void testAddToRI2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,331,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,332,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,333,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,334,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,335,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,336,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,337,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,338,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,339,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,341,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,342,"ateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,343,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,344,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,347,ublic void testAddToRI3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,349,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,350,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,351,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,352,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,353,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,354,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,355,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,356,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,358,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,359,"ateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,360,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,361,"ssertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,364,ublic void testAddToRI4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,365,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,366,"xpected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,367,"xpected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,368,"xpected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,369,"xpected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,370,"xpected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,371,"xpected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,372,"xpected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,373,"xpected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,375,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,376,"ateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,377,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,378,"ssertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,381,ublic void testAddToRI5() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,382,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,383,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,384,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,385,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,386,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,387,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,388,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,389,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,390,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,392,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,393,"ateTime added = test.addTo(null, -2);  // null has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,394,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,395,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,399,ublic void testAddIntoRWI1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,400,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,401,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,402,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,403,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,404,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,405,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,406,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,407,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,408,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,410,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,411,utableDateTime mdt = new MutableDateTime();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,412,"est.addInto(mdt, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,413,"ssertEquals(expected, mdt.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,416,ublic void testAddIntoRWI2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,417,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,418,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,419,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,420,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,421,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,422,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,423,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,424,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,425,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,427,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,428,utableDateTime mdt = new MutableDateTime();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,429,"est.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,430,"ssertEquals(expected, mdt.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,433,ublic void testAddIntoRWI3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,434,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,435,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,436,"est.addInto(null, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,437,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,438, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,216,//    public void testAddTo1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,217,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,218,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,219,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,220,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,221,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,222,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,223,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,224,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,225,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,227,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,228,"//        long added = test.addTo(TEST_TIME_NOW, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,229,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,232,//    public void testAddTo2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,233,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,234,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,235,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,236,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,237,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,238,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,239,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,240,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,241,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,243,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,244,"//        long added = test.addTo(TEST_TIME_NOW, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,245,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,248,//    public void testAddTo3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,249,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,250,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,251,"//        long added = test.addTo(TEST_TIME_NOW, 0);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,252,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,255,//    public void testAddTo4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,256,//        long expected = TEST_TIME_NOW + 100L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,257,//        MutablePeriod test = new MutablePeriod(100L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,258,"//        long added = test.addTo(TEST_TIME_NOW, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,259,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,263,//    public void testAddToWithChronology1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,264,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,265,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,266,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,267,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,268,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,269,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,270,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,271,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,272,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,274,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,275,"//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,276,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,279,//    public void testAddToWithChronology2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,280,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,281,"//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,282,"//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,283,"//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,284,"//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,285,"//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,286,"//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,287,"//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,288,"//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,290,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,291,"//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,292,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,295,//    public void testAddToWithChronology3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,296,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,297,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,298,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,299,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,300,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,301,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,302,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,303,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,304,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,306,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,307,"//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,308,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,312,//    public void testAddToRI1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,313,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,314,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,315,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,316,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,317,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,318,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,319,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,320,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,321,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,323,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,324,"//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,325,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,326,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,329,//    public void testAddToRI2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,330,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,331,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,332,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,333,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,334,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,335,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,336,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,337,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,338,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,340,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,341,"//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,342,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,343,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,346,//    public void testAddToRI3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,347,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,"//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,349,"//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,350,"//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,351,"//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,352,"//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,353,"//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,354,"//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,355,"//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,357,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,358,"//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,359,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,360,"//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,363,//    public void testAddToRI4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,364,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,365,"//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,366,"//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,367,"//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,368,"//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,369,"//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,370,"//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,371,"//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,372,"//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,374,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,375,"//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,376,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,377,"//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,380,//    public void testAddToRI5() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,381,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,382,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,383,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,384,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,385,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,386,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,387,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,388,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,389,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,391,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,392,"//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,393,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,394,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,398,//    public void testAddIntoRWI1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,399,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,400,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,401,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,402,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,403,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,404,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,405,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,406,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,407,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,409,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,410,//        MutableDateTime mdt = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,411,"//        test.addInto(mdt, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,412,"//        assertEquals(expected, mdt.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,415,//    public void testAddIntoRWI2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,416,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,417,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,418,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,419,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,420,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,421,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,422,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,423,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,424,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,426,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,427,//        MutableDateTime mdt = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,428,"//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,429,"//        assertEquals(expected, mdt.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,432,//    public void testAddIntoRWI3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,433,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,434,//        try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,435,"//            test.addInto(null, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,436,//            fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,437,//        } catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,467,ublic void testToDurationMillisFrom() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,468,utablePeriod test = new MutablePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,469,"ssertEquals(123L, test.toDurationMillisFrom(0L, null));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,466,//    public void testToDurationMillisFrom() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,467,//        MutablePeriod test = new MutablePeriod(123L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,468,"//        assertEquals(123L, test.toDurationMillisFrom(0L, null));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,432,"ssertEquals(PeriodType.time(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,432,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,67,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,216,ublic void testAddTo1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,217,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,218,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,219,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,220,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,221,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,222,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,223,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,224,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,225,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,227,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,228,"ong added = test.addTo(TEST_TIME_NOW, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,229,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,232,ublic void testAddTo2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,233,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,234,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,235,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,236,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,237,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,238,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,239,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,240,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,241,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,243,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,244,"ong added = test.addTo(TEST_TIME_NOW, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,245,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,248,ublic void testAddTo3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,249,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,250,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,251,"ong added = test.addTo(TEST_TIME_NOW, 0);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,252,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,255,ublic void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,256,ong expected = TEST_TIME_NOW + 100L;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,257,eriod test = new Period(100L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,258,"ong added = test.addTo(TEST_TIME_NOW, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,259,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,263,ublic void testAddToWithChronology1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,264,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,265,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,266,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,267,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,268,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,269,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,270,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,271,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,272,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,274,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,275,"ong added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,276,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,279,ublic void testAddToWithChronology2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,280,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,281,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,282,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,283,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,284,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,285,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,286,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,287,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,288,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,290,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,291,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,292,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,295,ublic void testAddToWithChronology3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,296,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,297,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,298,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,299,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,300,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,301,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,302,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,303,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,304,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,306,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,307,"ong added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,308,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,312,ublic void testAddToRI1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,313,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,314,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,315,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,316,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,317,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,318,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,319,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,320,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,321,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,323,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,324,"ateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,325,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,326,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,329,ublic void testAddToRI2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,330,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,331,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,332,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,333,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,334,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,335,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,336,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,337,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,338,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,340,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,341,"ateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,342,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,343,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,346,ublic void testAddToRI3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,348,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,349,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,350,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,351,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,352,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,353,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,354,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,355,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,357,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,358,"ateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,359,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,360,"ssertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,363,ublic void testAddToRI4() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,364,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,365,"xpected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,366,"xpected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,367,"xpected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,368,"xpected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,369,"xpected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,370,"xpected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,371,"xpected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,372,"xpected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,374,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,375,"ateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,376,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,377,"ssertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,380,ublic void testAddToRI5() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,381,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,382,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,383,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,384,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,385,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,386,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,387,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,388,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,389,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,391,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,392,"ateTime added = test.addTo(null, -2);  // null has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,393,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,394,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,398,ublic void testAddIntoRWI1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,399,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,400,"xpected = ISOChronology.getInstance().years().add(expected, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,401,"xpected = ISOChronology.getInstance().months().add(expected, 2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,402,"xpected = ISOChronology.getInstance().weeks().add(expected, 3);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,403,"xpected = ISOChronology.getInstance().days().add(expected, 4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,404,"xpected = ISOChronology.getInstance().hours().add(expected, 5);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,405,"xpected = ISOChronology.getInstance().minutes().add(expected, 6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,406,"xpected = ISOChronology.getInstance().seconds().add(expected, 7);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,407,"xpected = ISOChronology.getInstance().millis().add(expected, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,409,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,410,utableDateTime mdt = new MutableDateTime();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,411,"est.addInto(mdt, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,412,"ssertEquals(expected, mdt.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,415,ublic void testAddIntoRWI2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,416,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,417,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,418,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,419,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,420,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,421,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,422,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,423,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,424,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,426,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,427,utableDateTime mdt = new MutableDateTime();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,428,"est.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,429,"ssertEquals(expected, mdt.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,432,ublic void testAddIntoRWI3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,433,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,434,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,435,"est.addInto(null, 1);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,436,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,437, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,215,//    public void testAddTo1() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,216,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,217,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,218,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,219,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,220,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,221,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,222,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,223,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,224,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,226,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,227,"//        long added = test.addTo(TEST_TIME_NOW, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,228,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,231,//    public void testAddTo2() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,232,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,233,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,234,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,235,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,236,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,237,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,238,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,239,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,240,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,242,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,243,"//        long added = test.addTo(TEST_TIME_NOW, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,244,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,247,//    public void testAddTo3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,248,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,249,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,250,"//        long added = test.addTo(TEST_TIME_NOW, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,251,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,254,//    public void testAddTo4() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,255,//        long expected = TEST_TIME_NOW + 100L;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,256,//        Period test = new Period(100L);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,257,"//        long added = test.addTo(TEST_TIME_NOW, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,258,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,262,//    public void testAddToWithChronology1() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,263,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,264,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,265,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,266,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,267,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,268,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,269,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,270,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,271,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,273,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,274,"//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,275,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,278,//    public void testAddToWithChronology2() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,279,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,280,"//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,281,"//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,282,"//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,283,"//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,284,"//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,285,"//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,286,"//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,287,"//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,289,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,290,"//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,291,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,294,//    public void testAddToWithChronology3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,295,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,296,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,297,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,298,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,299,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,300,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,301,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,302,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,303,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,305,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,306,"//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,307,"//        assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,311,//    public void testAddToRI1() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,312,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,313,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,314,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,315,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,316,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,317,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,318,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,319,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,320,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,322,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,323,"//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,324,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,325,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,328,//    public void testAddToRI2() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,329,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,330,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,331,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,332,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,333,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,334,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,335,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,336,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,337,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,339,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,340,"//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,341,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,342,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,345,//    public void testAddToRI3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,346,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,"//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,348,"//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,349,"//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,350,"//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,351,"//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,352,"//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,353,"//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,354,"//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,356,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,357,"//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,358,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,359,"//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,362,//    public void testAddToRI4() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,363,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,364,"//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,365,"//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,366,"//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,367,"//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,368,"//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,369,"//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,370,"//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,371,"//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,373,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,374,"//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,375,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,376,"//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,379,//    public void testAddToRI5() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,380,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,381,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,382,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,383,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,384,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,385,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,386,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,387,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,388,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,390,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,391,"//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,392,"//        assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,393,"//        assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,397,//    public void testAddIntoRWI1() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,398,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,399,"//        expected = ISOChronology.getInstance().years().add(expected, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,400,"//        expected = ISOChronology.getInstance().months().add(expected, 2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,401,"//        expected = ISOChronology.getInstance().weeks().add(expected, 3);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,402,"//        expected = ISOChronology.getInstance().days().add(expected, 4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,403,"//        expected = ISOChronology.getInstance().hours().add(expected, 5);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,404,"//        expected = ISOChronology.getInstance().minutes().add(expected, 6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,405,"//        expected = ISOChronology.getInstance().seconds().add(expected, 7);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,406,"//        expected = ISOChronology.getInstance().millis().add(expected, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,408,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,409,//        MutableDateTime mdt = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,410,"//        test.addInto(mdt, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,411,"//        assertEquals(expected, mdt.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,414,//    public void testAddIntoRWI2() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,415,//        long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,416,"//        expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,417,"//        expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,418,"//        expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,419,"//        expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,420,"//        expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,421,"//        expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,422,"//        expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,423,"//        expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,425,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,426,//        MutableDateTime mdt = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,427,"//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,428,"//        assertEquals(expected, mdt.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,431,//    public void testAddIntoRWI3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,432,"//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,433,//        try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,434,"//            test.addInto(null, 1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,435,//            fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,436,//        } catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,466,ublic void testToDurationMillisFrom() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,467,eriod test = new Period(123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,468,"ssertEquals(123L, test.toDurationMillisFrom(0L, null));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,465,//    public void testToDurationMillisFrom() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,466,//        Period test = new Period(123L);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,467,"//        assertEquals(123L, test.toDurationMillisFrom(0L, null));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,521,public void testPeriodStatics() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,522,Period test;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,523,test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,524,"assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,525,test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,526,"assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,527,test = Period.weeks(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,528,"assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,529,test = Period.days(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,530,"assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,531,test = Period.hours(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,532,"assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,533,test = Period.minutes(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,534,"assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,535,test = Period.seconds(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,536,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,537,test = Period.millis(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,538,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,542,public void testWith() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,543,Period test;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,544,test = Period.years(5).withYears(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,545,"assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,546,test = Period.months(5).withMonths(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,547,"assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,548,test = Period.weeks(5).withWeeks(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,549,"assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,550,test = Period.days(5).withDays(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,551,"assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,552,test = Period.hours(5).withHours(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,553,"assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,554,test = Period.minutes(5).withMinutes(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,555,"assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,556,test = Period.seconds(5).withSeconds(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,557,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,558,test = Period.millis(5).withMillis(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,559,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,563,public void testPlus() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,564,Period test;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,565,test = Period.years(1).plusYears(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,566,"assertEquals(test, new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,567,test = Period.months(1).plusMonths(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,568,"assertEquals(test, new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,569,test = Period.weeks(1).plusWeeks(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,570,"assertEquals(test, new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,571,test = Period.days(1).plusDays(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,572,"assertEquals(test, new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,573,test = Period.hours(1).plusHours(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,574,"assertEquals(test, new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,575,test = Period.minutes(1).plusMinutes(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,576,"assertEquals(test, new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,577,test = Period.seconds(1).plusSeconds(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,578,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,579,test = Period.millis(1).plusMillis(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,580,"assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,583,public void testPlusZero() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,584,"Period test, result;"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,585,test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,586,result = test.plusYears(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,587,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,588,test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,589,result = test.plusMonths(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,590,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,591,test = Period.weeks(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,592,result = test.plusWeeks(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,593,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,594,test = Period.days(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,595,result = test.plusDays(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,596,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,597,test = Period.hours(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,598,result = test.plusHours(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,599,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,600,test = Period.minutes(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,601,result = test.plusMinutes(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,602,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,603,test = Period.seconds(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,604,result = test.plusSeconds(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,605,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,606,test = Period.millis(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,607,result = test.plusMillis(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,608,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,136,public void testConstructor1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,137,Period test = new Period();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,138,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,139,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,140,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,141,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,142,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,143,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,144,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,145,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,146,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,385,"ssertEquals(PeriodType.time(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,399,"assertEquals(PeriodType.standard(), test.getPeriodType());"

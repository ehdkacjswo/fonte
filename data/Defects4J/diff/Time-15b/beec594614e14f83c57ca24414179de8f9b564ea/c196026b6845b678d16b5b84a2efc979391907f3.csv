is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,31, factory methods on {@link ChronologyType}. If you require full
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,32," control of the factory, then you should use the method on each subclass."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,31,* factory methods on the chronology subclass in the chrono package.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,36, DateTime dt = new DateTime(ChronologyType.coptic().getChronology());
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,35,* DateTime dt = new DateTime(CopticChronology.getInstance());
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,46,* <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,63,* @see org.joda.time.chrono.EthiopicChronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,79, @deprecated Use ChronologyType.iso().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,80,* @deprecated Use ISOChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,94, @deprecated Use ChronologyType.iso().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,95,* @deprecated Use ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,110, @deprecated Use ChronologyType.iso().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,111,* @deprecated Use ISOChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136, @deprecated Use ChronologyType.gj().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137,* @deprecated Use GJChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,161, @deprecated Use ChronologyType.gj().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,162,* @deprecated Use GJChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187, @deprecated Use ChronologyType.gj().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,188,* @deprecated Use GJChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,209, @deprecated Use ChronologyType.gregorian().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,210,* @deprecated Use GregorianChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,230, @deprecated Use ChronologyType.gregorian().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,231,* @deprecated Use GregorianChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,252, @deprecated Use ChronologyType.gregorian().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,253,* @deprecated Use GregorianChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,267, @deprecated Use ChronologyType.julian().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,268,* @deprecated Use JulianChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,281, @deprecated Use ChronologyType.julian().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,282,* @deprecated Use JulianChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,296, @deprecated Use ChronologyType.julian().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,297,* @deprecated Use JulianChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,311, @deprecated Use ChronologyType.buddhist().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,312,* @deprecated Use BuddhistChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,325, @deprecated Use ChronologyType.buddhist().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,326,* @deprecated Use BuddhistChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,340, @deprecated Use ChronologyType.buddhist().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,341,* @deprecated Use BuddhistChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,359, @deprecated Use ChronologyType.coptic().getChronology()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,360,* @deprecated Use CopticChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,377, @deprecated Use ChronologyType.coptic().getChronologyUTC()
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,378,* @deprecated Use CopticChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,396, @deprecated Use ChronologyType.coptic().getChronology(zone)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,397,* @deprecated Use CopticChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,404, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,405, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,406, This method should ideally never return null. However ChronologyType
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,407," was only added in v1.2, and any chronology written before then"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,408, will not correctly override this method to return the type.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,410," @return the chronology type, correct implementations never return null"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,411, @since 1.2
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,413,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,414,/ all subclasses should override this method
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,415,eturn null;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,6,  You may obtain a copy of the License at
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,14,  limitations under the License.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,16,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,18,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,19,mport java.util.Collections;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,20,mport java.util.HashMap;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,21,mport java.util.Map;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,22,mport java.util.Set;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,24,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,25,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,26,mport org.joda.time.chrono.EthiopicChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,27,mport org.joda.time.chrono.GJChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,28,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,29,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,30,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,33," Identifies a type of chronology, which represents the calendar system."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,34, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,35," Various chronologies are supported by Joda-Time, including ISO and"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,36, GregorianJulian. This class defines static methods to obtain the
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,37, different kinds of chronology that are supported. Each instance then
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,38, defines methods to obtain a Chronology by specifying the time zone.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,39," For example, to obtain the coptic chronology in the default zone:"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,40, <pre>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,41, Chronology c = ChronologyType.coptic().getChronology();
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,42, </pre>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,43, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,44, The provided chronology types are:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,45, <ul>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,46, <li>ISO - Based on the ISO8601 standard and suitable for use after about 1600
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,47, <li>GJ - Historically accurate calendar with Julian followed by Gregorian
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,48, <li>Gregorian - The Gregorian calendar system used for all time (proleptic)
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,49, <li>Julian - The Julian calendar system used for all time (proleptic)
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,50, <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,51, <li>Coptic - The Coptic calendar system which defines 30 day months
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,52, <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,53, </ul>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,54, Hopefully future releases will contain more chronologies.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,56, @see org.joda.time.chrono.ISOChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,57, @see org.joda.time.chrono.GJChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,58, @see org.joda.time.chrono.GregorianChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,59, @see org.joda.time.chrono.JulianChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,60, @see org.joda.time.chrono.BuddhistChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,61, @see org.joda.time.chrono.CopticChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,62, @see org.joda.time.chrono.EthiopicChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,64, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,65, @since 1.2
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,67,ublic abstract class ChronologyType implements Serializable {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,69,** Serialization version */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,70,rivate static final long serialVersionUID = 83923682285389L;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,72,** The map of id to type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,73,rivate static final Map cTypes = Collections.synchronizedMap(new HashMap());
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,75,** Ordinal values for standard chronology types. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,76,tatic final byte  // do not change - values matter for serialization
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,77,"SO = 1,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,78,"J = 2,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,79,"REGORIAN = 3,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,80,"ULIAN = 4,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,81,"UDDHIST = 5,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,82,"OPTIC = 6,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,83,THIOPIC = 7;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,85,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,86,"rivate static final ChronologyType ISO_TYPE = new StandardChronologyType(""ISO"", ISO);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,87,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,88,"rivate static final ChronologyType GJ_TYPE = new StandardChronologyType(""GJ"", GJ);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,89,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,90,"rivate static final ChronologyType GREGORIAN_TYPE = new StandardChronologyType(""Gregorian"", GREGORIAN);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,91,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,92,"rivate static final ChronologyType JULIAN_TYPE = new StandardChronologyType(""Julian"", JULIAN);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,93,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,94,"rivate static final ChronologyType BUDDHIST_TYPE = new StandardChronologyType(""Buddhist"", BUDDHIST);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,95,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,96,"rivate static final ChronologyType COPTIC_TYPE = new StandardChronologyType(""Coptic"", COPTIC);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,97,** The iso chronology type. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,98,"rivate static final ChronologyType ETHIOPIC_TYPE = new StandardChronologyType(""Ethiopic"", ETHIOPIC);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,100,** The id of the field. */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,101,rivate final String iID;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,105, Constructor.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,107, @param id  the id to use
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,109,rotected ChronologyType(String id) {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,110,uper();
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,111,ID = id;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,112,"Types.put(id, this);"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,117, Gets a ChronologyType by id.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,118, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,119, Note that this method will work with your own subclasses of
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,120," ChronologyType, so long as an instance of the subclass has been"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,121, class-loaded.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,123, @param id  the id to get
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,124," @return the chronology type, null if no known chronology"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,126,ublic static ChronologyType forID(String id) {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,127,eturn (ChronologyType) cTypes.get(id);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,131, Gets all the available ids supported.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,133, @return an unmodifiable Set of String ids
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,135,ublic static Set getAvailableIDs() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,136,eturn Collections.unmodifiableSet(cTypes.keySet());
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,141, Get the ISO chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,142, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,143, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,144," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,145," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,146, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,148, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,150,ublic static ChronologyType iso() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,151,eturn ISO_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,155, Get the GJ chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,156, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,157, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,158, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,159," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,160, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,161, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,162," Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,163," for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,164, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,165, This method uses the standard Julian to Gregorian cutover date of
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,166," October 15th 1582. If you require a cutover on a different date, then use"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,167, the factory methods on <code>GJChronology</code> itself.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,168, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,169," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,170," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,172, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,174,ublic static ChronologyType gj() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,175,eturn GJ_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,179, Get the Gregorian chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,180, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,181, {@link GregorianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,182, It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,183, thus it is NOT a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,184," For that purpose, you should use {@link #gj()}."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,185, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,186," The Gregorian calendar system defines a leap year every four years,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,187," except that every 100 years is not leap, but every 400 is leap."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,188, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,189," Technically, this chronology is almost identical to the ISO chronology,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,190," thus we recommend using ISOChronology instead, which is the default."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,192, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,194,ublic static ChronologyType gregorian() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,195,eturn GREGORIAN_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,199, Get the Julian chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,200, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,201, {@link JulianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,202, It uses the Julian calendar rules <i>for all time</i> (proleptic).
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,203, The Julian calendar system defines a leap year every four years.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,205, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,207,ublic static ChronologyType julian() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,208,eturn JULIAN_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,212, Get the Buddhist chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,213, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,214," {@link BuddhistChronology} defines all fields using standard meanings,"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,215, however the year is offset by 543. The chronology cannot be used before
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,216, year 1 in the Buddhist calendar.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,218, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,220,ublic static ChronologyType buddhist() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,221,eturn BUDDHIST_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,225, Get the Coptic chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,226, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,227, {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,228, The Coptic calendar system defines every fourth year as leap.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,229," The year is broken down into 12 months, each 30 days in length."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,230, An extra period at the end of the year is either 5 or 6 days in length
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,231, and is returned as a 13th month.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,232," Year 1 in the Coptic calendar began on August 29, 284 CE (Julian)."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,233, The chronology cannot be used before the first Coptic year.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,235, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,237,ublic static ChronologyType coptic() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,238,eturn COPTIC_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,242, Get the Ethiopic chronology type.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,243, <p>
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,244, {@link EthiopicChronology} defines fields sensibly for the Ethiopic calendar system.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,245, The Ethiopic calendar system defines every fourth year as leap.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,246," The year is broken down into 12 months, each 30 days in length."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,247, An extra period at the end of the year is either 5 or 6 days in length
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,248, and is returned as a 13th month.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,249," Year 1 in the Coptic calendar began on August 29, 8 CE (Julian)."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,250, The chronology cannot be used before the first Ethiopic year.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,252, @return the ChronologyType constant
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,254,ublic static ChronologyType ethiopic() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,255,eturn ETHIOPIC_TYPE;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,260, Get the id of the chronology.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,262, @return the id of the chronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,264,ublic String getID() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,265,eturn iID;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,269, Get an instance of the Chronology in the default time zone.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,271, @return the Chronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,273,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,274,eturn getChronology(null);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,278, Get an instance of the Chronology in the UTC time zone.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,280, @return the Chronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,282,ublic Chronology getChronologyUTC() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,283,eturn getChronology(DateTimeZone.UTC);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,287, Get an instance of the Chronology in the specified time zone.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,289," @param zone  the time zone, null means default"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,291,ublic abstract Chronology getChronology(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,294," Gets the chronology as a string, which is simply its id."
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,296, @return the id of the chronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,298,ublic String toString() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,299,eturn getID();
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,303,rivate static class StandardChronologyType extends ChronologyType {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,304,** Serialization version */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,305,rivate static final long serialVersionUID = -562289176239L;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,307,"** The ordinal of the standard field type, for switch statements */"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,308,rivate final byte iOrdinal;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,311, Constructor.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,313,"tandardChronologyType(String id, byte ordinal) {"
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,314,uper(id);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,315,Ordinal = ordinal;
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,318,** @inheritdoc */
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,319,ublic Chronology getChronology(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,320,witch (iOrdinal) {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,321,ase ISO:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,322,eturn ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,323,ase GJ:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,324,eturn GJChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,325,ase GREGORIAN:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,326,eturn GregorianChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,327,ase JULIAN:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,328,eturn JulianChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,329,ase BUDDHIST:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,330,eturn BuddhistChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,331,ase COPTIC:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,332,eturn CopticChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,333,ase ETHIOPIC:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,334,eturn EthiopicChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,335,efault:
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,336,/ Shouldn't happen.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,337,hrow new InternalError();
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,342, Ensure a singleton is returned.
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,344, @return the singleton type
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,346,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,347,eturn (ChronologyType) forID(getID());
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,321," Gets a copy of this instant with a different chronology, potentially"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,322, changing the day in unexpected ways.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,323, <p>
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,324, This method creates a new DateMidnight using the midnight millisecond value
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,325," and the new chronology. If the same or similar chronology is specified, but"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,326," with a different time zone, the day may change. This occurs because the new"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,327," DateMidnight rounds down the millisecond value to get to midnight, and the"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,328, time zone change may result in a rounding down to a different day.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,329, <p>
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,330," For example, changing time zone from London (+00:00) to Paris (+01:00) will"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,331," retain the same day, but changing from Paris to London will change the day."
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,332," (When its midnight in London its the same day in Paris, but when its midnight"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,333, in Paris its still the previous day in London)
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,334, <p>
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,335," To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,336, to change time zones.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,338," @param newChronologyType  the new chronology type, null means ISO"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,339, @return a copy of this datetime with a different chronology
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,341,ublic DateMidnight withChronologyType(ChronologyType newChronologyType) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,342,ewChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,343,eturn (newChronologyType == getChronologyType() ? this :
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,344,"ew DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,367, Gets a copy of this datetime with a different chronology.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,368, <p>
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,369, The returned object will be either be a new instance or <code>this</code>.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,370," Only the chronology will change, the millis and time zone are kept."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,372," @param newChronologyType  the new chronology type, null means ISO"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,373, @return a copy of this datetime with a different chronology
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,375,ublic DateTime withChronologyType(ChronologyType newChronologyType) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376,ewChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,377,eturn (newChronologyType == getChronologyType() ? this :
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,378,"ew DateTime(getMillis(), newChronologyType.getChronology(getZone())));"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,239, Gets the chronology type handling null.
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,240, <p>
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,241," If the chronology type is <code>null</code>, {@link ChronologyType#iso()}"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,242," will be returned. Otherwise, the chronology type is returned."
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,244," @param type  the chronology type to use, null means ISO"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,245," @return the chronology type, never null"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,247,ublic static final ChronologyType getChronologyType(ChronologyType type) {
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,248,f (type == null) {
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,249,eturn ChronologyType.iso();
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,251,eturn type;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,21,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,89,"Millis = converter.getInstantMillis(instant, ChronologyType.iso().getChronologyUTC());"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,90,"iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,220,eturn ChronologyType.iso().getChronologyUTC();
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,221,return ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,494, Set the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,495, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,496, This method does not affect the millis or the zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,497, The chronology is only changed if the type is different.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,499," @param type  the type to use, null means ISO"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,ublic void setChronologyType(ChronologyType type) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,502,ype = DateTimeUtils.getChronologyType(type);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,f (type != getChronologyType()) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,504,etChronology(type.getChronology(getZone()));
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,22,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,142,uper(ChronologyType.iso().getChronology(zone));
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,143,super(ISOChronology.getInstance(zone));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,22,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,101,uper(ChronologyType.iso().getChronology(zone));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,102,super(ISOChronology.getInstance(zone));
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,24,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,60, Gets the type of the chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,62, @return the type of the chronology
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,64,ublic ChronologyType getChronologyType() {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,65,eturn getChronology().getType();
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,21,mport org.joda.time.ChronologyType;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,89,Chronology = ChronologyType.iso().getChronology();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,89,iChronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,22,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,142, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,144, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,145, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,147,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,148,eturn ChronologyType.buddhist();
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,22,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,180, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,182, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,183, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,185,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,186,eturn ChronologyType.coptic();
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,22,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,180, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,182, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,184,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,185,eturn ChronologyType.ethiopic();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,24,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,301, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,303, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,304, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,306,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,307,eturn ChronologyType.gj();
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,22,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,165, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,167, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,168, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,170,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,171,eturn ChronologyType.gregorian();
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,26,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,128, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,130, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,131, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,133,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,134,eturn ChronologyType.iso();
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,22,mport org.joda.time.ChronologyType;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,179, Returns the ChronologyType constant for this Chronology.
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,181, @return the chronology type
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,182, @since 1.2
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,184,ublic ChronologyType getType() {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,185,eturn ChronologyType.julian();
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,19,mport org.joda.time.ChronologyType;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,23,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,66,eturn ChronologyType.iso().getChronology(zone);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,66,return ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,22,mport org.joda.time.ChronologyType;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,26,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,107,eturn ChronologyType.iso().getChronology(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,107,return ISOChronology.getInstance(zone);
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,38,uite.addTest(TestChronologyType.suite());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,14,  limitations under the License.
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,16,ackage org.joda.time;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,18,mport java.io.ByteArrayInputStream;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,19,mport java.io.ByteArrayOutputStream;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,20,mport java.io.ObjectInputStream;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,21,mport java.io.ObjectOutputStream;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,22,mport java.lang.reflect.Constructor;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,23,mport java.util.Set;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,25,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,26,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,28,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,29,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,30,mport org.joda.time.chrono.EthiopicChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,31,mport org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,32,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,33,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,34,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,37, This class is a Junit unit test for ChronologyType.
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,39, @author Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,41,ublic class TestChronologyType extends TestCase {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,43,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,45,ublic static void main(String[] args) {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,46,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,49,ublic static TestSuite suite() {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,50,eturn new TestSuite(TestChronologyType.class);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,53,ublic TestChronologyType(String name) {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,54,uper(name);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,57,rotected void setUp() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,60,rotected void tearDown() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,64,ublic void test_forName() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,65,"ssertSame(ChronologyType.iso(), ChronologyType.forID(""ISO""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,66,"ssertSame(null, ChronologyType.forID(""rubbish""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,67,"ssertSame(null, ChronologyType.forID(""""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,68,"ssertSame(null, ChronologyType.forID(null));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,72,ublic void test_getAvailableIDs() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,73,et set = ChronologyType.getAvailableIDs();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,74,"ssertEquals(7, set.size());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,75,"ssertEquals(true, set.contains(""ISO""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,76,"ssertEquals(true, set.contains(""GJ""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,77,"ssertEquals(true, set.contains(""Gregorian""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,78,"ssertEquals(true, set.contains(""Julian""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,79,"ssertEquals(true, set.contains(""Buddhist""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,80,"ssertEquals(true, set.contains(""Coptic""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,81,"ssertEquals(true, set.contains(""Ethiopic""));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,85,ublic void test_iso() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,86,"ssertEquals(ChronologyType.iso(), ChronologyType.iso());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,87,"ssertEquals(""ISO"", ChronologyType.iso().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,88,"ssertEquals(ISOChronology.getInstance(), ChronologyType.iso().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,89,"ssertEquals(ISOChronology.getInstanceUTC(), ChronologyType.iso().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,90,"ssertEquals(ISOChronology.getInstance(PARIS), ChronologyType.iso().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,91,"ssertEquals(""ISO"", ChronologyType.iso().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,92,ssertSerialization(ChronologyType.iso());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,95,ublic void test_gj() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,96,"ssertEquals(ChronologyType.gj(), ChronologyType.gj());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,97,"ssertEquals(""GJ"", ChronologyType.gj().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,98,"ssertEquals(GJChronology.getInstance(), ChronologyType.gj().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,99,"ssertEquals(GJChronology.getInstanceUTC(), ChronologyType.gj().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,100,"ssertEquals(GJChronology.getInstance(PARIS), ChronologyType.gj().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,101,"ssertEquals(""GJ"", ChronologyType.gj().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,102,ssertSerialization(ChronologyType.gj());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,105,ublic void test_gregorian() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,106,"ssertEquals(ChronologyType.gregorian(), ChronologyType.gregorian());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,107,"ssertEquals(""Gregorian"", ChronologyType.gregorian().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,108,"ssertEquals(GregorianChronology.getInstance(), ChronologyType.gregorian().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,109,"ssertEquals(GregorianChronology.getInstanceUTC(), ChronologyType.gregorian().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,110,"ssertEquals(GregorianChronology.getInstance(PARIS), ChronologyType.gregorian().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,111,"ssertEquals(""Gregorian"", ChronologyType.gregorian().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,112,ssertSerialization(ChronologyType.gregorian());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,115,ublic void test_julian() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,116,"ssertEquals(ChronologyType.julian(), ChronologyType.julian());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,117,"ssertEquals(""Julian"", ChronologyType.julian().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,118,"ssertEquals(JulianChronology.getInstance(), ChronologyType.julian().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,119,"ssertEquals(JulianChronology.getInstanceUTC(), ChronologyType.julian().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,120,"ssertEquals(JulianChronology.getInstance(PARIS), ChronologyType.julian().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,121,"ssertEquals(""Julian"", ChronologyType.julian().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,122,ssertSerialization(ChronologyType.julian());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,125,ublic void test_buddhist() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,126,"ssertEquals(ChronologyType.buddhist(), ChronologyType.buddhist());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,127,"ssertEquals(""Buddhist"", ChronologyType.buddhist().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,128,"ssertEquals(BuddhistChronology.getInstance(), ChronologyType.buddhist().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,129,"ssertEquals(BuddhistChronology.getInstanceUTC(), ChronologyType.buddhist().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,130,"ssertEquals(BuddhistChronology.getInstance(PARIS), ChronologyType.buddhist().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,131,"ssertEquals(""Buddhist"", ChronologyType.buddhist().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,132,ssertSerialization(ChronologyType.buddhist());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,135,ublic void test_coptic() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,136,"ssertEquals(ChronologyType.coptic(), ChronologyType.coptic());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,137,"ssertEquals(""Coptic"", ChronologyType.coptic().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,138,"ssertEquals(CopticChronology.getInstance(), ChronologyType.coptic().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,139,"ssertEquals(CopticChronology.getInstanceUTC(), ChronologyType.coptic().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,140,"ssertEquals(CopticChronology.getInstance(PARIS), ChronologyType.coptic().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,141,"ssertEquals(""Coptic"", ChronologyType.coptic().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,142,ssertSerialization(ChronologyType.coptic());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,145,ublic void test_ethiopic() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,146,"ssertEquals(ChronologyType.ethiopic(), ChronologyType.ethiopic());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,147,"ssertEquals(""Ethiopic"", ChronologyType.ethiopic().getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,148,"ssertEquals(EthiopicChronology.getInstance(), ChronologyType.ethiopic().getChronology());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,149,"ssertEquals(EthiopicChronology.getInstanceUTC(), ChronologyType.ethiopic().getChronologyUTC());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,150,"ssertEquals(EthiopicChronology.getInstance(PARIS), ChronologyType.ethiopic().getChronology(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,151,"ssertEquals(""Ethiopic"", ChronologyType.ethiopic().toString());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,152,ssertSerialization(ChronologyType.ethiopic());
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,155,ublic void test_other() throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,156,"ssertEquals(1, ChronologyType.class.getDeclaredClasses().length);"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,157,lass cls = ChronologyType.class.getDeclaredClasses()[0];
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,158,"ssertEquals(1, cls.getDeclaredConstructors().length);"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,159,onstructor con = cls.getDeclaredConstructors()[0];
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,160,"bject[] params = new Object[] { ""other"", new Byte((byte) 128) };"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,161,hronologyType type = (ChronologyType) con.newInstance(params);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,163,"ssertEquals(""other"", type.getID());"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,164,ry {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,165,ype.getChronology(PARIS);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,166,ail();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,167, catch (InternalError ex) {}
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,168,ssertSerialization(type);   // same because of ID map
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,172,rivate void assertSerialization(ChronologyType type) throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,173,hronologyType result = doSerialization(type);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,174,"ssertSame(type, result);"
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,177,rivate ChronologyType doSerialization(ChronologyType type) throws Exception {
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,178,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,179,bjectOutputStream oos = new ObjectOutputStream(baos);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,180,os.writeObject(type);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,181,yte[] bytes = baos.toByteArray();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,182,os.close();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,184,yteArrayInputStream bais = new ByteArrayInputStream(bytes);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,185,bjectInputStream ois = new ObjectInputStream(bais);
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,186,hronologyType result = (ChronologyType) ois.readObject();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,187,is.close();
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,188,eturn result;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,203,"ssertEquals(ChronologyType.iso(), test.getChronologyType());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,657,ublic void testWithChronologyType_ChronologyType() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,658,ateMidnight test = new DateMidnight(TEST_TIME1_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,659,ateMidnight result = test.withChronologyType(ChronologyType.gregorian());
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,660,"ssertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,662,"est = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,663,esult = test.withChronologyType(null);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,664,"ssertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,666,est = new DateMidnight(TEST_TIME1_UTC);
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,667,esult = test.withChronologyType(ChronologyType.iso());
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,668,"ssertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,355,ublic void testGetChronologyType_ChronologyType() {
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,356,"ssertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,357,"ssertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,214,"ssertEquals(ChronologyType.iso(), test.getChronologyType());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,721,ublic void testWithChronologyType_ChronologyType() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,722,"ateTime test = new DateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,723,ateTime result = test.withChronologyType(ChronologyType.gregorian());
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,724,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,725,"ssertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,727,"est = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,728,esult = test.withChronologyType(null);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,729,"ssertEquals(test.getMillis(), result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,730,"ssertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,732,est = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,733,esult = test.withChronologyType(ChronologyType.iso());
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,734,"ssertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,185,"ssertEquals(ChronologyType.iso(), test.getChronologyType());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,132,ublic void testSetChronologyType_ChronologyType1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,133,"utableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,134,est.setChronologyType(ChronologyType.gregorian());
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,135,"ssertEquals(TEST_TIME1, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,136,"ssertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,139,ublic void testSetChronologyType_ChronologyType2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,140,"utableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,141,est.setChronologyType(null);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,142,"ssertEquals(TEST_TIME1, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,143,"ssertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"

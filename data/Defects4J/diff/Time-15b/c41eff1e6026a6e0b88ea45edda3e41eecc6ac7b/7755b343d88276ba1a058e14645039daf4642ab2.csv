is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,34,import org.joda.time.format.DateTimeFormat;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,833," Note: After calculating millisLocal, some error may be introduced. At"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,834,"* NOTE: After calculating millisLocal, some error may be introduced. At"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,837,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,838,* This method will return an offset suitable for calculating an instant
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,839,"* after any DST gap. For example, consider a zone with a cutover"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,840,* from 01:00 to 01:59:<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,841,* Input: 00:00  Output: 00:00<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,842,* Input: 00:30  Output: 00:30<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,843,* Input: 01:00  Output: 02:00<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,844,* Input: 01:30  Output: 02:30<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,845,* Input: 02:00  Output: 02:00<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,846,* Input: 02:30  Output: 02:30<br />
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,847,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,848,"* NOTE: The behaviour of this method changed in v1.5, with the emphasis"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,849,* on returning a consistent result later along the time-line (shown above).
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,842,eturn getOffset(instantLocal - getOffset(instantLocal));
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,856,// get the offset at instantLocal (first estimate)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,857,int offsetLocal = getOffset(instantLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,858,// adjust instantLocal using the estimate and recalc the offset
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,859,int offsetAdjusted = getOffset(instantLocal - offsetLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,860,"// if the offsets differ, we must be near a DST boundary"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,861,if (offsetLocal != offsetAdjusted) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,862,// we need to ensure that time is always after the DST gap
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,863,"// this happens naturally for positive offsets, but not for negative"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,864,if (offsetLocal < 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,865,// if we just return offsetAdjusted then the time is pushed
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,866,"// back before the transition, whereas it should be"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,867,// on or after the transition
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,868,long nextLocal = nextTransition(instantLocal - offsetLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,869,long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,870,if (nextLocal != nextAdjusted) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,871,return offsetLocal;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,875,return offsetAdjusted;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,879,* Converts a standard UTC instant to a local instant with the same
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,880,* local time. This conversion is used before performing a calculation
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,881,* so that the calculation can be done using a simple local zone.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,883,* @param instantUTC  the UTC instant to convert to local
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,884,* @return the local instant with the same local time
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,885,* @throws ArithmeticException if the result overflows a long
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,887,public long convertUTCToLocal(long instantUTC) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,888,int offset = getOffset(instantUTC);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,889,long instantLocal = instantUTC + offset;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,890,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,891,if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,892,"throw new ArithmeticException(""Adding time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,894,return instantLocal;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,898,* Converts a local instant to a standard UTC instant with the same
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,899,* local time. This conversion is used after performing a calculation
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,900,* where the calculation was done using a simple local zone.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,902,* @param instantLocal  the local instant to convert to UTC
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,903,* @param strict  whether the conversion should reject non-existent local times
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,904,"* @return the UTC instant with the same local time,"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,905,* @throws ArithmeticException if the result overflows a long
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,906,* @throws IllegalArgumentException if the zone has no eqivalent local time
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,908,"public long convertLocalToUTC(long instantLocal, boolean strict) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,909,// get the offset at instantLocal (first estimate)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,910,int offsetLocal = getOffset(instantLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,911,// adjust instantLocal using the estimate and recalc the offset
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,912,int offset = getOffset(instantLocal - offsetLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,913,"// if the offsets differ, we must be near a DST boundary"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,914,if (offsetLocal != offset) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,915,// if strict then always check if in DST gap
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,916,// otherwise only check if zone in Western hemisphere (as the
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,917,// value of offset is already correct for Eastern hemisphere)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,918,if (strict || offsetLocal < 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,919,// determine if we are in the DST gap
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,920,long nextLocal = nextTransition(instantLocal - offsetLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,921,long nextAdjusted = nextTransition(instantLocal - offset);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,922,if (nextLocal != nextAdjusted) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,923,// yes we are in the DST gap
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,924,if (strict) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,925,// DST gap is not acceptable
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,926,"throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,927,"DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) +"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,928,""" ("" + getID() + "")"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,929,} else {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,930,"// DST gap is acceptable, but for the Western hemisphere"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,931,// the offset is wrong and will result in local times
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,932,// before the cutover so use the offsetLocal instead
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,933,offset = offsetLocal;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,938,// check for overflow
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,939,long instantUTC = instantLocal - offset;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,940,"// If there is a sign change, but the two values have different signs..."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,941,if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,942,"throw new ArithmeticException(""Subtracting time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,944,return instantUTC;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,36,* @param explain  an explanation
False,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,39,"umber lowerBound, Number upperBound) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,40,"Number lowerBound, Number upperBound, String explain) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,59,if (explain != null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,60,"buf.append("": "").append(explain);"
False,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,104,"uper(createMessage(fieldType.getName(), value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,108,"super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,120,* Constructor.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,122,* @param fieldType  type of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,123,* @param value  illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,124,* @param explain  an explanation
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,126,"public IllegalFieldValueException(DateTimeFieldType fieldType,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,127,"Number value, String explain) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,128,"super(createMessage(fieldType.getName(), value, null, null, explain));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,129,iDateTimeFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,130,iDurationFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,131,iFieldName = fieldType.getName();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,132,iNumberValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,133,iStringValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,134,iLowerBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,135,iUpperBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,136,iMessage = super.getMessage();
False,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,125,"uper(createMessage(fieldType.getName(), value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,149,"super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));"
False,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,146,"uper(createMessage(fieldName, value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,170,"super(createMessage(fieldName, value, lowerBound, upperBound, null));"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,113,rivate static final DateTimeField convertField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,114,eturn LenientDateTimeField.getInstance(field);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,113,private final DateTimeField convertField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,114,"return LenientDateTimeField.getInstance(field, getBase());"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,364,nt offset = this.iZone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,365,ong sum = instant + offset;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,366,"/ If there is a sign change, but the two values have the same sign..."
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,367,f ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,368,"hrow new ArithmeticException(""Adding time zone offset caused overflow"");"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,370,eturn sum;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,364,return iZone.convertUTCToLocal(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,412,eturn iField.get(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,406,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,407,return iField.get(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,416,"eturn iField.getAsText(addOffset(instant), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,411,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,412,"return iField.getAsText(localInstant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,420,"eturn iField.getAsShortText(addOffset(instant), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,416,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,417,"return iField.getAsShortText(localInstant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,432,nt offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,433,"nstant = iField.add(instant + offset, value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,434,eturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,429,if (iTimeField) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,430,int offset = getOffsetToAdd(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,431,"long localInstant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,432,return localInstant - offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,433,} else {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,434,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,435,"localInstant = iField.add(localInstant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,436,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,438,nt offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,439,"nstant = iField.add(instant + offset, value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,440,eturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,441,if (iTimeField) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,442,int offset = getOffsetToAdd(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,443,"long localInstant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,444,return localInstant - offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,445,} else {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,446,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,447,"localInstant = iField.add(localInstant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,448,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,444,nt offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,445,"nstant = iField.addWrapField(instant + offset, value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,446,eturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,453,if (iTimeField) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,454,int offset = getOffsetToAdd(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,455,"long localInstant = iField.addWrapField(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,456,return localInstant - offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,457,} else {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,458,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,459,"localInstant = iField.addWrapField(localInstant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,460,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,450,ong offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,452,"nstant = iField.set(instant + offset, value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,453,ong offsetFromLocal = getOffsetFromLocalToSubtract(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,454,nstant -= offsetFromLocal;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,456,f (offset != offsetFromLocal) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,457,f (get(instant) != value) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,458,hrow new IllegalFieldValueException
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,459,"iField.getType(), new Integer(value), null, null);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,465,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,466,"localInstant = iField.set(localInstant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,467,"long result = iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,468,if (get(result) != value) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,469,"throw new IllegalFieldValueException(iField.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,470,"""Illegal instant due to time zone offset transition: "" +"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,471,"DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(localInstant)) +"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,472,""" ("" + iZone.getID() + "")"");"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,463,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,474,return result;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,467,"nstant = iField.set(addOffset(instant), text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,468,/ Cannot verify that new value stuck because set may be lenient.
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,469,eturn instant - getOffsetFromLocalToSubtract(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,478,// cannot verify that new value stuck because set may be lenient
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,479,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,480,"localInstant = iField.set(localInstant, text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,481,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,495,eturn iField.isLeap(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,507,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,508,return iField.isLeap(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,499,eturn iField.getLeapAmount(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,512,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,513,return iField.getLeapAmount(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,507,nt offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,508,nstant = iField.roundFloor(instant + offset);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,509,eturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,521,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,522,localInstant = iField.roundFloor(localInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,523,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,513,nt offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,514,nstant = iField.roundCeiling(instant + offset);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,515,eturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,527,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,528,localInstant = iField.roundCeiling(localInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,529,"return iZone.convertLocalToUTC(localInstant, false);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,519,eturn iField.remainder(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,533,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,534,return iField.remainder(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,527,eturn iField.getMinimumValue(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,542,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,543,return iField.getMinimumValue(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,543,eturn iField.getMaximumValue(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,559,long localInstant = iZone.convertUTCToLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,560,return iField.getMaximumValue(localInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,572,rivate int getOffsetFromLocalToSubtract(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,573,nt offset = this.iZone.getOffsetFromLocal(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,574,ong diff = instant - offset;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,575,"/ If there is a sign change, but the two values have different signs..."
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,576,f ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,577,"hrow new ArithmeticException(""Subtracting time zone offset caused overflow"");"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,579,eturn offset;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,582,rivate long addOffset(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,583,nt offset = this.iZone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,584,ong sum = instant + offset;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,585,"/ If there is a sign change, but the two values have the same sign..."
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,586,f ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,587,"hrow new ArithmeticException(""Adding time zone offset caused overflow"");"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,589,eturn sum;
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,18,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,36,private final Chronology iBase;
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,40,ublic static DateTimeField getInstance(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,43,"public static DateTimeField getInstance(DateTimeField field, Chronology base) {"
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,50,eturn new LenientDateTimeField(field);
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,53,"return new LenientDateTimeField(field, base);"
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,53,rotected LenientDateTimeField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,56,"protected LenientDateTimeField(DateTimeField field, Chronology base) {"
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,58,iBase = base;
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,70,// lenient needs to handle time zone chronologies
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,71,// so we do the calculation using local milliseconds
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,72,long localInstant = iBase.getZone().convertUTCToLocal(instant);
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,67,"eturn add(instant, difference);"
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,74,"localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);"
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,75,"return iBase.getZone().convertLocalToUTC(localInstant, false);"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,116,suite.addTest(TestDateTimeZoneCutover.suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,21,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,22,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,23,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,26,* This class is a JUnit test for DateTimeZone.
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,28,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,30,public class TestDateTimeZoneCutover extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,32,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,33,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,36,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,37,return new TestSuite(TestDateTimeZoneCutover.class);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,40,public TestDateTimeZoneCutover(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,41,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,44,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,47,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,51,//------------------------ Bug [1710316] --------------------------------
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,53,// The behaviour of getOffsetFromLocal is defined in its javadoc
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,54,"// However, this definition doesn't work for all DateTimeField operations"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,56,/** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,57,private static long CUTOVER_GAZA = 1175378400000L;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,58,private static int OFFSET_GAZA = 7200000;  // +02:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,59,"private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,62,public void test_MockGazaIsCorrect() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,63,"DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,64,"assertEquals(""2007-03-31T23:59:59.999+02:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,65,"DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,66,"assertEquals(""2007-04-01T01:00:00.000+03:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,67,"DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,68,"assertEquals(""2007-04-01T01:00:00.001+03:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,71,public void test_getOffsetFromLocal_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,72,"doTest_getOffsetFromLocal_Gaza(-1, 23, 0, ""2007-03-31T23:00:00.000+02:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,73,"doTest_getOffsetFromLocal_Gaza(-1, 23, 30, ""2007-03-31T23:30:00.000+02:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,74,"doTest_getOffsetFromLocal_Gaza(0, 0, 0, ""2007-04-01T01:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,75,"doTest_getOffsetFromLocal_Gaza(0, 0, 30, ""2007-04-01T01:30:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,76,"doTest_getOffsetFromLocal_Gaza(0, 1, 0, ""2007-04-01T01:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,77,"doTest_getOffsetFromLocal_Gaza(0, 1, 30, ""2007-04-01T01:30:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,78,"doTest_getOffsetFromLocal_Gaza(0, 2, 0, ""2007-04-01T02:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,79,"doTest_getOffsetFromLocal_Gaza(0, 3, 0, ""2007-04-01T03:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,80,"doTest_getOffsetFromLocal_Gaza(0, 4, 0, ""2007-04-01T04:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,81,"doTest_getOffsetFromLocal_Gaza(0, 5, 0, ""2007-04-01T05:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,82,"doTest_getOffsetFromLocal_Gaza(0, 6, 0, ""2007-04-01T06:00:00.000+03:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,85,"private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,86,"DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,87,int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,88,"DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,89,"assertEquals(res.toString(), expected, res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,92,public void test_DateTime_roundFloor_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,93,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,94,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,95,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,96,"assertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,99,public void test_DateTime_roundCeiling_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,100,"DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,101,"assertEquals(""2007-03-31T20:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,102,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,103,"assertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,106,public void test_DateTime_setHourZero_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,107,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,108,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,109,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,110,dt.hourOfDay().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,111,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,112,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,113,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,117,public void test_DateTime_withHourZero_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,118,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,119,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,120,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,121,dt.withHourOfDay(0);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,122,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,123,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,124,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,128,public void test_DateTime_withDay_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,129,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,130,"assertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,131,DateTime res = dt.withDayOfMonth(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,132,"assertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,135,public void test_DateTime_minusHour_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,136,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,137,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,139,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,140,"assertEquals(""2007-04-01T01:00:00.000+03:00"", minus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,141,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,142,"assertEquals(""2007-03-31T23:00:00.000+02:00"", minus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,143,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,144,"assertEquals(""2007-03-31T22:00:00.000+02:00"", minus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,147,public void test_DateTime_plusHour_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,148,"DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,149,"assertEquals(""2007-03-31T16:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,151,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,152,"assertEquals(""2007-03-31T23:00:00.000+02:00"", plus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,153,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,154,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,155,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,156,"assertEquals(""2007-04-01T02:00:00.000+03:00"", plus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,159,public void test_DateTime_minusDay_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,160,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,161,"assertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,163,DateTime minus1 = dt.minusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,164,"assertEquals(""2007-04-01T01:00:00.000+03:00"", minus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,165,DateTime minus2 = dt.minusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,166,"assertEquals(""2007-03-31T00:00:00.000+02:00"", minus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,169,public void test_DateTime_plusDay_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,170,"DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,171,"assertEquals(""2007-03-31T00:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,173,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,174,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,175,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,176,"assertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,179,public void test_DateTime_plusDayMidGap_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,180,"DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,181,"assertEquals(""2007-03-31T00:30:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,183,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,184,"assertEquals(""2007-04-01T01:30:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,185,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,186,"assertEquals(""2007-04-02T00:30:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,189,public void test_DateTime_addWrapFieldDay_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,190,"DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,191,"assertEquals(""2007-04-30T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,193,DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,194,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,195,DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,196,"assertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,199,public void test_DateTime_withZoneRetainFields_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,200,"DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,201,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,203,DateTime res = dt.withZoneRetainFields(MOCK_GAZA);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,204,"assertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,207,public void test_MutableDateTime_withZoneRetainFields_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,208,"MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,209,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,211,dt.setZoneRetainFields(MOCK_GAZA);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,212,"assertEquals(""2007-04-01T01:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,215,public void test_LocalDate_new_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,216,"LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,217,"assertEquals(""2007-04-01"", date1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,219,"LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,220,"assertEquals(""2007-03-31"", date2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,223,public void test_LocalDate_toDateTimeAtMidnight_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,224,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,225,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,226,date.toDateTimeAtMidnight(MOCK_GAZA);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,227,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,228,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,229,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,233,public void test_LocalDate_toDateMidnight_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,234,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,235,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,236,date.toDateMidnight(MOCK_GAZA);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,237,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,238,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,239,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,243,public void test_DateTime_new_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,244,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,245,"new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,246,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,247,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,248,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,252,public void test_DateTime_newValid_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,253,"new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,254,"new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,255,"new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,256,"new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,257,"new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,258,"new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,259,"new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,260,"new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,263,public void test_DateTime_parse_Gaza() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,264,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,265,"new DateTime(""2007-04-01T00:00"", MOCK_GAZA);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,266,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,267,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,268,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,273,//------------------------ Bug [1710316] --------------------------------
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,275,/** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,276,private static long CUTOVER_TURK = 1175403600000L;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,277,private static int OFFSET_TURK = -18000000;  // -05:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,278,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,281,public void test_MockTurkIsCorrect() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,282,"DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,283,"assertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,284,"DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,285,"assertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,286,"DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,287,"assertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,290,public void test_getOffsetFromLocal_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,291,"doTest_getOffsetFromLocal_Turk(-1, 23, 0, ""2007-03-31T23:00:00.000-05:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,292,"doTest_getOffsetFromLocal_Turk(-1, 23, 30, ""2007-03-31T23:30:00.000-05:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,293,"doTest_getOffsetFromLocal_Turk(0, 0, 0, ""2007-04-01T01:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,294,"doTest_getOffsetFromLocal_Turk(0, 0, 30, ""2007-04-01T01:30:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,295,"doTest_getOffsetFromLocal_Turk(0, 1, 0, ""2007-04-01T01:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,296,"doTest_getOffsetFromLocal_Turk(0, 1, 30, ""2007-04-01T01:30:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,297,"doTest_getOffsetFromLocal_Turk(0, 2, 0, ""2007-04-01T02:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,298,"doTest_getOffsetFromLocal_Turk(0, 3, 0, ""2007-04-01T03:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,299,"doTest_getOffsetFromLocal_Turk(0, 4, 0, ""2007-04-01T04:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,300,"doTest_getOffsetFromLocal_Turk(0, 5, 0, ""2007-04-01T05:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,301,"doTest_getOffsetFromLocal_Turk(0, 6, 0, ""2007-04-01T06:00:00.000-04:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,304,"private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,305,"DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,306,int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,307,"DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,308,"assertEquals(res.toString(), expected, res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,311,public void test_DateTime_roundFloor_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,312,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,313,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,314,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,315,"assertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,318,public void test_DateTime_roundFloorNotDST_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,319,"DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,320,"assertEquals(""2007-04-02T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,321,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,322,"assertEquals(""2007-04-02T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,325,public void test_DateTime_roundCeiling_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,326,"DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,327,"assertEquals(""2007-03-31T20:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,328,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,329,"assertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,332,public void test_DateTime_setHourZero_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,333,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,334,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,335,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,336,dt.hourOfDay().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,337,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,338,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,339,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,343,public void test_DateTime_withHourZero_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,344,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,345,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,346,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,347,dt.withHourOfDay(0);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,348,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,349,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,350,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,354,public void test_DateTime_withDay_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,355,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,356,"assertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,357,DateTime res = dt.withDayOfMonth(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,358,"assertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,361,public void test_DateTime_minusHour_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,362,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,363,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,365,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,366,"assertEquals(""2007-04-01T01:00:00.000-04:00"", minus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,367,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,368,"assertEquals(""2007-03-31T23:00:00.000-05:00"", minus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,369,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,370,"assertEquals(""2007-03-31T22:00:00.000-05:00"", minus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,373,public void test_DateTime_plusHour_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,374,"DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,375,"assertEquals(""2007-03-31T16:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,377,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,378,"assertEquals(""2007-03-31T23:00:00.000-05:00"", plus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,379,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,380,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,381,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,382,"assertEquals(""2007-04-01T02:00:00.000-04:00"", plus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,385,public void test_DateTime_minusDay_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,386,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,387,"assertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,389,DateTime minus1 = dt.minusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,390,"assertEquals(""2007-04-01T01:00:00.000-04:00"", minus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,391,DateTime minus2 = dt.minusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,392,"assertEquals(""2007-03-31T00:00:00.000-05:00"", minus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,395,public void test_DateTime_plusDay_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,396,"DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,397,"assertEquals(""2007-03-31T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,399,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,400,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,401,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,402,"assertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,405,public void test_DateTime_plusDayMidGap_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,406,"DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,407,"assertEquals(""2007-03-31T00:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,409,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,410,"assertEquals(""2007-04-01T01:30:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,411,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,412,"assertEquals(""2007-04-02T00:30:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,415,public void test_DateTime_addWrapFieldDay_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,416,"DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,417,"assertEquals(""2007-04-30T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,419,DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,420,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,421,DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,422,"assertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,425,public void test_DateTime_withZoneRetainFields_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,426,"DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,427,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,429,DateTime res = dt.withZoneRetainFields(MOCK_TURK);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,430,"assertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,433,public void test_MutableDateTime_setZoneRetainFields_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,434,"MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,435,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,437,dt.setZoneRetainFields(MOCK_TURK);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,438,"assertEquals(""2007-04-01T01:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,441,public void test_LocalDate_new_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,442,"LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,443,"assertEquals(""2007-04-01"", date1.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,445,"LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,446,"assertEquals(""2007-03-31"", date2.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,449,public void test_LocalDate_toDateTimeAtMidnight_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,450,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,451,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,452,date.toDateTimeAtMidnight(MOCK_TURK);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,453,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,454,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,455,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,459,public void test_LocalDate_toDateMidnight_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,460,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,461,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,462,date.toDateMidnight(MOCK_TURK);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,463,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,464,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,465,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,469,public void test_DateTime_new_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,470,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,471,"new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,472,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,473,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,474,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,478,public void test_DateTime_newValid_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,479,"new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,480,"new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,481,"new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,482,"new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,483,"new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,484,"new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,485,"new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,488,public void test_DateTime_parse_Turk() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,489,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,490,"new DateTime(""2007-04-01T00:00"", MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,491,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,492,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,493,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,500,/** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,501,private static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,502,"private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(""America/New_York"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,503,"//  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,504,//  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,505,"//  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,506,//  System.out.println(y);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,509,public void test_NewYorkIsCorrect_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,510,"DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,511,"assertEquals(""2007-03-11T01:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,512,"DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,513,"assertEquals(""2007-03-11T03:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,514,"DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,515,"assertEquals(""2007-03-11T03:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,518,public void test_getOffsetFromLocal_NewYork_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,519,"doTest_getOffsetFromLocal(3, 11, 1, 0, ""2007-03-11T01:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,520,"doTest_getOffsetFromLocal(3, 11, 1,30, ""2007-03-11T01:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,522,"doTest_getOffsetFromLocal(3, 11, 2, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,523,"doTest_getOffsetFromLocal(3, 11, 2,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,525,"doTest_getOffsetFromLocal(3, 11, 3, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,526,"doTest_getOffsetFromLocal(3, 11, 3,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,527,"doTest_getOffsetFromLocal(3, 11, 4, 0, ""2007-03-11T04:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,528,"doTest_getOffsetFromLocal(3, 11, 5, 0, ""2007-03-11T05:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,529,"doTest_getOffsetFromLocal(3, 11, 6, 0, ""2007-03-11T06:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,530,"doTest_getOffsetFromLocal(3, 11, 7, 0, ""2007-03-11T07:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,531,"doTest_getOffsetFromLocal(3, 11, 8, 0, ""2007-03-11T08:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,534,public void test_DateTime_setHourAcross_NewYork_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,535,"DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,536,"assertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,537,DateTime res = dt.hourOfDay().setCopy(4);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,538,"assertEquals(""2007-03-11T04:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,541,public void test_DateTime_setHourForward_NewYork_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,542,"DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,543,"assertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,545,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,546,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,547,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,548,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,549,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,553,public void test_DateTime_setHourBack_NewYork_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,554,"DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,555,"assertEquals(""2007-03-11T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,557,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,558,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,559,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,560,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,561,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,566,/** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,567,private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,570,public void test_NewYorkIsCorrect_Autumn() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,571,"DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,572,"assertEquals(""2007-11-04T01:59:59.999-04:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,573,"DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,574,"assertEquals(""2007-11-04T01:00:00.000-05:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,575,"DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,576,"assertEquals(""2007-11-04T01:00:00.001-05:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,579,public void test_getOffsetFromLocal_NewYork_Autumn() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,580,"doTest_getOffsetFromLocal(11, 4, 0, 0, ""2007-11-04T00:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,581,"doTest_getOffsetFromLocal(11, 4, 0,30, ""2007-11-04T00:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,583,"doTest_getOffsetFromLocal(11, 4, 1, 0, ""2007-11-04T01:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,584,"doTest_getOffsetFromLocal(11, 4, 1,30, ""2007-11-04T01:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,586,"doTest_getOffsetFromLocal(11, 4, 2, 0, ""2007-11-04T02:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,587,"doTest_getOffsetFromLocal(11, 4, 2,30, ""2007-11-04T02:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,588,"doTest_getOffsetFromLocal(11, 4, 3, 0, ""2007-11-04T03:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,589,"doTest_getOffsetFromLocal(11, 4, 3,30, ""2007-11-04T03:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,590,"doTest_getOffsetFromLocal(11, 4, 4, 0, ""2007-11-04T04:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,591,"doTest_getOffsetFromLocal(11, 4, 5, 0, ""2007-11-04T05:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,592,"doTest_getOffsetFromLocal(11, 4, 6, 0, ""2007-11-04T06:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,593,"doTest_getOffsetFromLocal(11, 4, 7, 0, ""2007-11-04T07:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,594,"doTest_getOffsetFromLocal(11, 4, 8, 0, ""2007-11-04T08:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,597,public void test_DateTime_plusHour_NewYork_Autumm() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,598,"DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,599,"assertEquals(""2007-11-03T18:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,601,DateTime plus6 = dt.plusHours(6);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,602,"assertEquals(""2007-11-04T00:00:00.000-04:00"", plus6.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,603,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,604,"assertEquals(""2007-11-04T01:00:00.000-04:00"", plus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,605,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,606,"assertEquals(""2007-11-04T01:00:00.000-05:00"", plus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,607,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,608,"assertEquals(""2007-11-04T02:00:00.000-05:00"", plus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,611,public void test_DateTime_minusHour_NewYork_Autumm() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,612,"DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,613,"assertEquals(""2007-11-04T08:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,615,DateTime minus6 = dt.minusHours(6);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,616,"assertEquals(""2007-11-04T02:00:00.000-05:00"", minus6.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,617,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,618,"assertEquals(""2007-11-04T01:00:00.000-05:00"", minus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,619,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,620,"assertEquals(""2007-11-04T01:00:00.000-04:00"", minus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,621,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,622,"assertEquals(""2007-11-04T00:00:00.000-04:00"", minus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,626,/** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,627,private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,628,"private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(""Europe/Moscow"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,631,public void test_MoscowIsCorrect_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,632,"//      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,633,//      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,634,"//      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,635,//      System.out.println(y);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,636,"DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,637,"assertEquals(""2007-03-25T01:59:59.999+03:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,638,"DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,639,"assertEquals(""2007-03-25T03:00:00.000+04:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,640,"DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,641,"assertEquals(""2007-03-25T03:00:00.001+04:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,644,public void test_getOffsetFromLocal_Moscow_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,645,"doTest_getOffsetFromLocal(3, 25, 1, 0, ""2007-03-25T01:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,646,"doTest_getOffsetFromLocal(3, 25, 1,30, ""2007-03-25T01:30:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,648,"doTest_getOffsetFromLocal(3, 25, 2, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,649,"doTest_getOffsetFromLocal(3, 25, 2,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,651,"doTest_getOffsetFromLocal(3, 25, 3, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,652,"doTest_getOffsetFromLocal(3, 25, 3,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,653,"doTest_getOffsetFromLocal(3, 25, 4, 0, ""2007-03-25T04:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,654,"doTest_getOffsetFromLocal(3, 25, 5, 0, ""2007-03-25T05:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,655,"doTest_getOffsetFromLocal(3, 25, 6, 0, ""2007-03-25T06:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,656,"doTest_getOffsetFromLocal(3, 25, 7, 0, ""2007-03-25T07:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,657,"doTest_getOffsetFromLocal(3, 25, 8, 0, ""2007-03-25T08:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,660,public void test_DateTime_setHourAcross_Moscow_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,661,"DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,662,"assertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,663,DateTime res = dt.hourOfDay().setCopy(4);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,664,"assertEquals(""2007-03-25T04:00:00.000+04:00"", res.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,667,public void test_DateTime_setHourForward_Moscow_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,668,"DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,669,"assertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,671,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,672,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,673,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,674,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,675,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,679,public void test_DateTime_setHourBack_Moscow_Spring() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,680,"DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,681,"assertEquals(""2007-03-25T08:00:00.000+04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,683,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,684,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,685,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,686,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,687,// expected
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,692,/** America/New_York cutover from 02:59 to 02:00 on 2007-10-28 */
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,693,private static long CUTOVER_MOSCOW_AUTUMN = 1193526000000L;  // 2007-10-28T02:00:00.000+03:00
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,696,public void test_MoscowIsCorrect_Autumn() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,697,"DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,698,"assertEquals(""2007-10-28T02:59:59.999+04:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,699,"DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,700,"assertEquals(""2007-10-28T02:00:00.000+03:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,701,"DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,702,"assertEquals(""2007-10-28T02:00:00.001+03:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,705,"// broken, and getOffsetFromLocal has no obvious way to determine which is correct"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,706,//    public void test_getOffsetFromLocal_Moscow_Autumn() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,707,"//        doTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,708,"//        doTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,709,"//        doTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,710,"//        doTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,712,"//        doTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,713,"//        doTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,715,"//        doTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,716,"//        doTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,717,"//        doTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,718,"//        doTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,719,"//        doTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,720,"//        doTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,721,"//        doTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,724,public void test_DateTime_plusHour_Moscow_Autumm() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,725,"DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,726,"assertEquals(""2007-10-27T19:00:00.000+04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,728,DateTime plus6 = dt.plusHours(6);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,729,"assertEquals(""2007-10-28T01:00:00.000+04:00"", plus6.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,730,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,731,"assertEquals(""2007-10-28T02:00:00.000+04:00"", plus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,732,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,733,"assertEquals(""2007-10-28T02:00:00.000+03:00"", plus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,734,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,735,"assertEquals(""2007-10-28T03:00:00.000+03:00"", plus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,738,public void test_DateTime_minusHour_Moscow_Autumm() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,739,"DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,740,"assertEquals(""2007-10-28T09:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,742,DateTime minus6 = dt.minusHours(6);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,743,"assertEquals(""2007-10-28T03:00:00.000+03:00"", minus6.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,744,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,745,"assertEquals(""2007-10-28T02:00:00.000+03:00"", minus7.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,746,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,747,"assertEquals(""2007-10-28T02:00:00.000+04:00"", minus8.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,748,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,749,"assertEquals(""2007-10-28T01:00:00.000+04:00"", minus9.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,755,//    public void test_toDateMidnight_SaoPaolo() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,756,//        // RFE: 1684259
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,757,"//        DateTimeZone zone = DateTimeZone.forID(""America/Sao_Paulo"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,758,"//        LocalDate baseDate = new LocalDate(2006, 11, 5);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,759,//        DateMidnight dm = baseDate.toDateMidnight(zone);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,760,"//        assertEquals(""2006-11-05T00:00:00.000-03:00"", dm.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,761,//        DateTime dt = baseDate.toDateTimeAtMidnight(zone);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,762,"//        assertEquals(""2006-11-05T00:00:00.000-03:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,768,"private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,769,"DateTime dt = new DateTime(2007, month, day, hour, min, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,770,int offset = zone.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,771,"DateTime res = new DateTime(dt.getMillis() - offset, zone);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,772,"assertEquals(res.toString(), expected, res.toString());"

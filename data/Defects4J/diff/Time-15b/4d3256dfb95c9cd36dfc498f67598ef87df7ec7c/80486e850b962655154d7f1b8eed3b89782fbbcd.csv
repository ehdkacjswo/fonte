is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,189,"field.getType(), new Integer(value),"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,190,"ew Integer(field.getMinimumValue()), null);"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,189,"(field.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,190,"Integer.valueOf(field.getMinimumValue()), null);"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,194,"field.getType(), new Integer(value),"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,195,"ull, new Integer(field.getMaximumValue()));"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,194,"(field.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,195,"null, Integer.valueOf(field.getMaximumValue()));"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,204,"field.getType(), new Integer(value),"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,205,"ew Integer(field.getMinimumValue(partial, values)), null);"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,204,"(field.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,205,"Integer.valueOf(field.getMinimumValue(partial, values)), null);"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,209,"field.getType(), new Integer(value),"
False,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,210,"ull, new Integer(field.getMaximumValue(partial, values)));"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,209,"(field.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/chrono/BaseChronology.java,src/main/java/org/joda/time/chrono/BaseChronology.java,210,"null, Integer.valueOf(field.getMaximumValue(partial, values)));"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,707,"iGregorianField.getType(), new Integer(value), null, null);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,707,"(iGregorianField.getType(), Integer.valueOf(value), null, null);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,720,"iJulianField.getType(), new Integer(value), null, null);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,720,"(iJulianField.getType(), Integer.valueOf(value), null, null);"
False,src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,143,ntegers[i] = new Integer(i);
True,src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,143,integers[i] = Integer.valueOf(i);
False,src/main/java/org/joda/time/chrono/JulianChronology.java,src/main/java/org/joda/time/chrono/JulianChronology.java,81,"DateTimeFieldType.year(), new Integer(year), null, null);"
True,src/main/java/org/joda/time/chrono/JulianChronology.java,src/main/java/org/joda/time/chrono/JulianChronology.java,81,"(DateTimeFieldType.year(), Integer.valueOf(year), null, null);"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,469,"hrow new IllegalFieldValueException(iField.getType(), new Integer(value),"
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,469,"throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,153,public boolean equals(Object o) {
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,154,if (o instanceof DelegatedDurationField) {
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,155,return iField.equals(((DelegatedDurationField) o).iField);
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,158,return false;
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,161,public int hashCode() {
True,src/main/java/org/joda/time/field/DelegatedDurationField.java,src/main/java/org/joda/time/field/DelegatedDurationField.java,162,return iField.hashCode() ^ iType.hashCode();
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,216,"field.getType(), new Integer(value),"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,217,"ew Integer(lowerBound), new Integer(upperBound));"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,216,"(field.getType(), Integer.valueOf(value),"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,217,"Integer.valueOf(lowerBound), Integer.valueOf(upperBound));"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,234,"fieldType, new Integer(value),"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,235,"ew Integer(lowerBound), new Integer(upperBound));"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,234,"(fieldType, Integer.valueOf(value),"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,235,"Integer.valueOf(lowerBound), Integer.valueOf(upperBound));"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,251,"fieldName, new Integer(value),"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,252,"ew Integer(lowerBound), new Integer(upperBound));"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,251,"(fieldName, Integer.valueOf(value),"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,252,"Integer.valueOf(lowerBound), Integer.valueOf(upperBound));"
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,147,public boolean equals(Object o) {
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,148,if (o instanceof MillisDurationField) {
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,149,return getUnitMillis() == ((MillisDurationField) o).getUnitMillis();
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,152,return false;
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,155,public int hashCode() {
True,src/main/java/org/joda/time/field/MillisDurationField.java,src/main/java/org/joda/time/field/MillisDurationField.java,156,return (int)getUnitMillis();
False,src/main/java/org/joda/time/field/SkipDateTimeField.java,src/main/java/org/joda/time/field/SkipDateTimeField.java,92,"DateTimeFieldType.year(), new Integer(value), null, null);"
True,src/main/java/org/joda/time/field/SkipDateTimeField.java,src/main/java/org/joda/time/field/SkipDateTimeField.java,92,"(DateTimeFieldType.year(), Integer.valueOf(value), null, null);"
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,402,eturn withPivotYear(new Integer(pivotYear));
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,402,return withPivotYear(Integer.valueOf(pivotYear));
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1828,"rray = new Object[] {validValues, new Integer(maxLength)};"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1828,"array = new Object[] {validValues, Integer.valueOf(maxLength)};"
False,src/main/java/org/joda/time/format/PeriodFormatterBuilder.java,src/main/java/org/joda/time/format/PeriodFormatterBuilder.java,1722,osition += parsedForm.length();
True,src/main/java/org/joda/time/format/PeriodFormatterBuilder.java,src/main/java/org/joda/time/format/PeriodFormatterBuilder.java,1722,position += (parsedForm == null) ? 0 : parsedForm.length();
False,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,252,fYear ofYear = new OfYear
False,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,253,"mode, monthOfYear, dayOfMonth, dayOfWeek, advanceDayOfWeek, millisOfDay);"
True,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,253,OfYear ofYear = new OfYear
True,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,254,"(mode, monthOfYear, dayOfMonth, dayOfWeek, advanceDayOfWeek, millisOfDay);"
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,404,"uilder.writeTo(zone.iName, out);"
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,405,ut.close();
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,404,try {
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,405,"builder.writeTo(zone.iName, out);"
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,406,} finally {
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,407,out.close();
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,445,/ Sort and filter out any duplicates that match case.
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,446,"ap<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);"
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,447,imap.putAll(map);
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,448,"riteZoneInfoMap(dout, zimap);"
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,449,out.close();
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,448,try {
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,449,// Sort and filter out any duplicates that match case.
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,450,"Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);"
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,451,zimap.putAll(map);
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,452,"writeZoneInfoMap(dout, zimap);"
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,453,} finally {
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,454,dout.close();

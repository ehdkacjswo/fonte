is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,18,package org.apache.commons.math.stat.clustering;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,22,import java.util.List;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,25,* Cluster holding a set of {@link Clusterable} points.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,26,* @param <T> the type of points that can be clustered
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,28,* @since 2.0
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,30,public class Cluster<T extends Clusterable<T>> implements Serializable {
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,33,private static final long serialVersionUID = -1741417096265465690L;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,35,/** The points contained in this cluster. */
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,36,final List<T> points;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,38,/** Center of the cluster. */
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,39,final T center;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,42,* Build a cluster centered at a specified point.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,43,* @param center the point which is to be the center of this cluster
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,45,public Cluster(final T center) {
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,46,this.center = center;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,47,points = new ArrayList<T>();
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,51,* Add a point to this cluster.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,52,* @param point point to add
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,54,public void addPoint(final T point) {
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,55,points.add(point);
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,59,* Get the points contained in the cluster.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,60,* @return points contained in the cluster
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,62,public List<T> getPoints() {
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,63,return points;
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,67,* Get the point chosen to be the center of this cluster.
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,68,* @return chosen cluster center
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,70,public T getCenter() {
True,src/java/org/apache/commons/math/stat/clustering/Cluster.java,src/java/org/apache/commons/math/stat/clustering/Cluster.java,71,return center;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,18,package org.apache.commons.math.stat.clustering;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,21,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,24,* Interface for points that can be clustered together.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,25,* @param <T> the type of point that can be clustered
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,27,* @since 2.0
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,29,public interface Clusterable<T> extends Serializable {
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,32,* Returns the distance from the given point.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,34,* @param p the point to compute the distance from
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,35,* @return the distance from the given point
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,37,double distanceFrom(T p);
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,40,* Returns the centroid of the given Collection of points.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,42,* @param p the Collection of points to compute the centroid of
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,43,* @return the centroid of the given Collection of Points
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,45,T centroidOf(Collection<T> p);
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,18,package org.apache.commons.math.stat.clustering;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,20,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,25,* A simple implementation of {@link Clusterable} for points with integer coordinates.
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,27,* @since 2.0
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,29,public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint> {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,32,private static final long serialVersionUID = 3946024775784901369L;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,34,/** Point coordinates. */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,35,private final int[] point;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,38,* @param point the n-dimensional point in integer space
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,40,public EuclideanIntegerPoint(final int[] point) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,41,this.point = point;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,45,* Returns the n-dimensional point in integer space
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,47,public int[] getPoint() {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,48,return point;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,51,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,52,public double distanceFrom(final EuclideanIntegerPoint p) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,53,"return MathUtils.distance(point, p.getPoint());"
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,56,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,57,public EuclideanIntegerPoint centroidOf(final Collection<EuclideanIntegerPoint> points) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,58,int[] centroid = new int[getPoint().length];
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,59,for (EuclideanIntegerPoint p : points) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,60,for (int i = 0; i < centroid.length; i++) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,61,centroid[i] += p.getPoint()[i];
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,64,for (int i = 0; i < centroid.length; i++) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,65,centroid[i] /= points.size();
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,67,return new EuclideanIntegerPoint(centroid);
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,70,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,71,@Override
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,72,public boolean equals(final Object other) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,73,if (!(other instanceof EuclideanIntegerPoint)) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,74,return false;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,76,final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,77,if (point.length != otherPoint.length) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,78,return false;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,80,for (int i = 0; i < point.length; i++) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,81,if (point[i] != otherPoint[i]) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,82,return false;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,85,return true;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,88,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,89,@Override
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,90,public int hashCode() {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,91,int hashCode = 0;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,92,for (Integer i : point) {
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,93,hashCode += i.hashCode() * 13 + 7;
True,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,95,return hashCode;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,18,package org.apache.commons.math.stat.clustering;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,21,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,22,import java.util.List;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,23,import java.util.Random;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,26,* Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,27,"* @see <a href=""http://en.wikipedia.org/wiki/K-means%2B%2B"">K-means++ (wikipedia)</a>"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,29,* @since 2.0
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,31,public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,33,/** Random generator for choosing initial centers. */
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,34,private final Random random;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,36,/** Build a clusterer.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,37,* @param random random generator to use for choosing initial centers
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,39,public KMeansPlusPlusClusterer(final Random random) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,40,this.random = random;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,44,* Runs the K-means++ clustering algorithm.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,46,* @param points the points to cluster
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,47,* @param k the number of clusters to split the data into
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,48,* @param maxIterations the maximum number of iterations to run the algorithm
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,49,"*     for.  If negative, no maximum will be used"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,50,* @return a list of clusters containing the points
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,52,"public List<Cluster<T>> cluster(final Collection<T> points,"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,53,"final int k, final int maxIterations) {"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,54,// create the initial clusters
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,55,"List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,56,"assignPointsToClusters(clusters, points);"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,58,// iterate through updating the centers until we're done
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,59,final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,60,for (int count = 0; count < max; count++) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,61,boolean clusteringChanged = false;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,62,List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,63,for (final Cluster<T> cluster : clusters) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,64,final T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,65,if (!newCenter.equals(cluster.getCenter())) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,66,clusteringChanged = true;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,68,newClusters.add(new Cluster<T>(newCenter));
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,70,if (!clusteringChanged) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,71,return clusters;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,73,"assignPointsToClusters(newClusters, points);"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,74,clusters = newClusters;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,76,return clusters;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,80,* Adds the given points to the closest {@link Cluster}.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,82,* @param clusters the {@link Cluster}s to add the points to
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,83,* @param points the points to add to the given {@link Cluster}s
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,85,private static <T extends Clusterable<T>> void
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,86,"assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,87,for (final T p : points) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,88,"Cluster<T> cluster = getNearestCluster(clusters, p);"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,89,cluster.addPoint(p);
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,94,* Use K-means++ to choose the initial centers.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,96,* @param points the points to choose the initial centers from
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,97,* @param k the number of centers to choose
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,98,* @param random random generator to use
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,99,* @return the initial centers
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,101,private static <T extends Clusterable<T>> List<Cluster<T>>
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,102,"chooseInitialCenters(final Collection<T> points, final int k, final Random random) {"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,104,final List<T> pointSet = new ArrayList<T>(points);
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,105,final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,107,// Choose one center uniformly at random from among the data points.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,108,final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,109,resultSet.add(new Cluster<T>(firstPoint));
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,111,final double[] dx2 = new double[pointSet.size()];
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,112,while (resultSet.size() < k) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,113,"// For each data point x, compute D(x), the distance between x and"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,114,// the nearest center that has already been chosen.
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,115,int sum = 0;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,116,for (int i = 0; i < pointSet.size(); i++) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,117,final T p = pointSet.get(i);
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,118,"final Cluster<T> nearest = getNearestCluster(resultSet, p);"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,119,final double d = p.distanceFrom(nearest.getCenter());
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,120,sum += d * d;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,121,dx2[i] = sum;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,124,// Add one new data point as a center. Each point x is chosen with
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,125,// probability proportional to D(x)2
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,126,final double r = random.nextDouble() * sum;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,127,for (int i = 0 ; i < dx2.length; i++) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,128,if (dx2[i] >= r) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,129,final T p = pointSet.remove(i);
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,130,resultSet.add(new Cluster<T>(p));
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,131,break;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,136,return resultSet;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,141,* Returns the nearest {@link Cluster} to the given point
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,143,* @param clusters the {@link Cluster}s to search
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,144,* @param point the point to find the nearest {@link Cluster} for
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,145,* @return the nearest {@link Cluster} to the given point
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,147,private static <T extends Clusterable<T>> Cluster<T>
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,148,"getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {"
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,149,double minDistance = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,150,Cluster<T> minCluster = null;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,151,for (final Cluster<T> c : clusters) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,152,final double distance = point.distanceFrom(c.getCenter());
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,153,if (distance < minDistance) {
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,154,minDistance = distance;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,155,minCluster = c;
True,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,158,return minCluster;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,18,package org.apache.commons.math.stat.clustering;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,24,import java.util.List;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,25,import java.util.Random;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,27,import org.junit.Test;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,29,public class KMeansPlusPlusClustererTest {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,31,@Test
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,32,public void dimension2() {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,33,KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer =
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,34,new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l));
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,35,EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,37,// first expected cluster
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,38,"new EuclideanIntegerPoint(new int[] { -15,  3 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,39,"new EuclideanIntegerPoint(new int[] { -15,  4 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,40,"new EuclideanIntegerPoint(new int[] { -15,  5 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,41,"new EuclideanIntegerPoint(new int[] { -14,  3 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,42,"new EuclideanIntegerPoint(new int[] { -14,  5 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,43,"new EuclideanIntegerPoint(new int[] { -13,  3 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,44,"new EuclideanIntegerPoint(new int[] { -13,  4 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,45,"new EuclideanIntegerPoint(new int[] { -13,  5 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,47,// second expected cluster
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,48,"new EuclideanIntegerPoint(new int[] { -1,  0 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,49,"new EuclideanIntegerPoint(new int[] { -1, -1 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,50,"new EuclideanIntegerPoint(new int[] {  0, -1 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,51,"new EuclideanIntegerPoint(new int[] {  1, -1 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,52,"new EuclideanIntegerPoint(new int[] {  1, -2 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,54,// third expected cluster
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,55,"new EuclideanIntegerPoint(new int[] { 13,  3 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,56,"new EuclideanIntegerPoint(new int[] { 13,  4 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,57,"new EuclideanIntegerPoint(new int[] { 14,  4 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,58,"new EuclideanIntegerPoint(new int[] { 14,  7 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,59,"new EuclideanIntegerPoint(new int[] { 16,  5 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,60,"new EuclideanIntegerPoint(new int[] { 16,  6 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,61,"new EuclideanIntegerPoint(new int[] { 17,  4 }),"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,62,"new EuclideanIntegerPoint(new int[] { 17,  7 })"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,65,List<Cluster<EuclideanIntegerPoint>> clusters =
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,66,"transformer.cluster(Arrays.asList(points), 3, 10);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,68,"assertEquals(3, clusters.size());"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,69,boolean cluster1Found = false;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,70,boolean cluster2Found = false;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,71,boolean cluster3Found = false;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,72,for (Cluster<EuclideanIntegerPoint> cluster : clusters) {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,73,int[] center = cluster.getCenter().getPoint();
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,74,if (center[0] < 0) {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,75,cluster1Found = true;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,76,"assertEquals(8, cluster.getPoints().size());"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,77,"assertEquals(-14, center[0]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,78,"assertEquals( 4, center[1]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,79,} else if (center[1] < 0) {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,80,cluster2Found = true;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,81,"assertEquals(5, cluster.getPoints().size());"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,82,"assertEquals( 0, center[0]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,83,"assertEquals(-1, center[1]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,84,} else {
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,85,cluster3Found = true;
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,86,"assertEquals(8, cluster.getPoints().size());"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,87,"assertEquals(15, center[0]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,88,"assertEquals(5, center[1]);"
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,91,assertTrue(cluster1Found);
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,92,assertTrue(cluster2Found);
True,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,93,assertTrue(cluster3Found);

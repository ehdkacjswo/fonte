is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,26, A StatisticalSummary that aggregates statistics from several data sets or
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,26,* An aggregator for {@code SummaryStatistics} from several data sets or
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,37, </p>
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,37,* </p><p>
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,38,* A static {@link #aggregate(Collection)} method is also included that computes
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,39,* aggregate statistics directly from a Collection of SummaryStatistics instances.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,40,* </p><p>
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,41,* When {@link #createContributingStatistics()} is used to create SummaryStatistics
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,42,"* instances to be aggregated concurrently, the created instances'"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,43,* {@link SummaryStatistics#addValue(double)} methods must synchronize on the aggregating
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,44,"* instance maintained by this class.  In multithreaded environments, if the functionality"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,45,"* provided by {@link #aggregate(Collection)} is adequate, that method should be used"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,46,* to avoid unecessary computation and synchronization delays.</p>
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,48,rivate static final long serialVersionUID = -8207112444016386906L;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,57,private static final long serialVersionUID = -8207112444016386906L;
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,57, The SummaryStatistics in which aggregate statistics are accumulated
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,66,* The SummaryStatistics in which aggregate statistics are accumulated.
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,127,eturn statistics.getMax();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,136,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,137,return statistics.getMax();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,136,eturn statistics.getMean();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,147,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,148,return statistics.getMean();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,146,eturn statistics.getMin();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,159,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,160,return statistics.getMin();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,155,eturn statistics.getN();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,170,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,171,return statistics.getN();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,165,eturn statistics.getStandardDeviation();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,182,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,183,return statistics.getStandardDeviation();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,174,eturn statistics.getSum();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,193,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,194,return statistics.getSum();
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,184,eturn statistics.getVariance();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,205,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,206,return statistics.getVariance();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,211,* Returns the sum of the logs of all the aggregated data.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,213,* @return the sum of logs
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,214,* @see SummaryStatistics#getSumOfLogs()
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,216,public double getSumOfLogs() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,217,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,218,return statistics.getSumOfLogs();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,223,* Returns the geometric mean of all the aggregated data.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,225,* @return the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,226,* @see SummaryStatistics#getGeometricMean()
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,228,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,229,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,230,return statistics.getGeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,235,* Returns the sum of the squares of all the aggregated data.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,237,* @return The sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,238,* @see SummaryStatistics#getSumsq()
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,240,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,241,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,242,return statistics.getSumsq();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,247,"* Returns a statistic related to the Second Central Moment.  Specifically,"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,248,* what is returned is the sum of squared deviations from the sample mean
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,249,* among the all of the aggregated data.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,251,* @return second central moment statistic
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,252,* @see SummaryStatistics#getSecondMoment()
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,254,public double getSecondMoment() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,255,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,256,return statistics.getSecondMoment();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,261,* Return a {@link StatisticalSummaryValues} instance reporting current
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,262,* aggregate statistics.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,264,* @return Current values of aggregate statistics
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,266,public StatisticalSummary getSummary() {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,267,synchronized (statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,268,"return new StatisticalSummaryValues(getMean(), getVariance(), getN(),"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,269,"getMax(), getMin(), getSum());"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,81,* Verify that aggregating over a partition gives the same results
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,82,* as direct computation.
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,84,*  1) Randomly generate a dataset of 10-100 values
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,85,"*     from [-100, 100]"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,86,*  2) Divide the dataset it into 2-5 partitions
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,87,*  3) Create an AggregateSummaryStatistic and ContributingStatistics
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,88,*     for each partition
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,89,*  4) Compare results from the AggregateSummaryStatistic with values
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,90,*     returned by a single SummaryStatistics instance that is provided
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,91,*     the full dataset
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,93,public void testAggregationConsistency() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,95,// Generate a random sample and random partition
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,96,double[] totalSample = generateSample();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,97,double[][] subSamples = generatePartition(totalSample);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,98,int nSamples = subSamples.length;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,100,// Create aggregator and total stats for comparison
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,101,AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,102,SummaryStatistics totalStats = new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,104,// Create array of component stats
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,105,SummaryStatistics componentStats[] = new SummaryStatistics[nSamples];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,107,for (int i = 0; i < nSamples; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,109,// Make componentStats[i] a contributing statistic to aggregate
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,110,componentStats[i] = aggregate.createContributingStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,112,// Add values from subsample
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,113,for (int j = 0; j < subSamples[i].length; j++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,114,componentStats[i].addValue(subSamples[i][j]);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,118,// Compute totalStats directly
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,119,for (int i = 0; i < totalSample.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,120,totalStats.addValue(totalSample[i]);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,124,* Compare statistics in totalStats with aggregate.
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,125,* Note that guaranteed success of this comparison depends on the
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,126,* fact that <aggregate> gets values in exactly the same order
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,127,* as <totalStats>.
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,130,"assertEquals(totalStats.getSummary(), aggregate.getSummary());"
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,179, Verifies that two StatisticalSummaryValues report the same values up
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,233,* Verifies that a StatisticalSummary and a StatisticalSummaryValues are equal up

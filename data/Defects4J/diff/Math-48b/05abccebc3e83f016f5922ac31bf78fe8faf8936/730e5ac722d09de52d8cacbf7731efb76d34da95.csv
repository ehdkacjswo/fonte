is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1255,"SuppressWarnings(""unchecked"")"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1257,ry {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1258,"ile test = File.createTempFile(""DFM"","".ser"");"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1259,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1260,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1261,ut.writeObject(m);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1262,ut.close();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1263,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1264,enseFieldMatrix<Fraction> nm = (DenseFieldMatrix<Fraction>)in.readObject();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1265,n.close();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1266,est.delete();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1267,"ssertEquals(m,nm);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1269, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1270,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1271, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1272,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1256,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1257,"assertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,28,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1166,ry {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1167,"ile test = File.createTempFile(""DRM"","".ser"");"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1168,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1169,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1170,ut.writeObject(m);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1171,ut.close();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1172,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1173,enseRealMatrix nm = (DenseRealMatrix)in.readObject();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1174,n.close();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1175,est.delete();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1176,"ssertEquals(m,nm);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1178, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1179,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1180, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1181,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1167,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1168,"assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,942,"SuppressWarnings(""unchecked"")"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,944,ry {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,945,"ile test = File.createTempFile(""FMI"","".ser"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,946,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,947,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,948,ut.writeObject(m);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,949,ut.close();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,950,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,951,ieldMatrixImpl<Fraction> nm = (FieldMatrixImpl<Fraction>)in.readObject();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,952,n.close();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,953,est.delete();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,954,"ssertEquals(m,nm);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,956, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,957,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,958, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,959,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,943,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,944,"assertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,34,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,621,"SuppressWarnings(""unchecked"")"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,623,ry {
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,624,"ile test = File.createTempFile(""FVI"","".ser"");"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,625,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,626,ieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,627,ut.writeObject(v);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,628,ut.close();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,629,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,630,ieldVectorImpl<Fraction> nv = (FieldVectorImpl<Fraction>)in.readObject();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,631,n.close();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,632,est.delete();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,633,"ssertEquals(v,nv);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,635, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,636,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,637, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,638,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,623,FieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,624,"assertEquals(v,TestUtils.serializeAndRecover(v));"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,945,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,946,"ile test = File.createTempFile(""RMI"","".ser"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,947,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,948,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,949,ut.writeObject(m);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,950,ut.close();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,951,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,952,ealMatrixImpl nm = (RealMatrixImpl)in.readObject();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,953,n.close();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,954,est.delete();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,955,"ssertEquals(m,nm);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,957, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,958,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,959, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,960,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,945,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,946,"assertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,27,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1179,ry {
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1180,"ile test = File.createTempFile(""RVI"","".ser"");"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1181,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1182,"ealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1183,ut.writeObject(v);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1184,ut.close();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1185,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1186,ealVectorImpl nv = (RealVectorImpl)in.readObject();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1187,n.close();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1188,est.delete();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1189,"ssertEquals(v,nv);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1191, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1192,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1193, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1194,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1182,"RealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1183,"assertEquals(v,TestUtils.serializeAndRecover(v));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,30,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,652,ry {
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,653,"ile test = File.createTempFile(""OMRM"","".ser"");"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,654,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,655,penMapRealMatrix m = createSparseMatrix(testData);
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,656,ut.writeObject(m);
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,657,ut.close();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,658,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,659,penMapRealMatrix nm = (OpenMapRealMatrix)in.readObject();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,660,n.close();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,661,est.delete();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,662,"ssertEquals(m,nm);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,664, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,665,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,666, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,667,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,653,OpenMapRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,654,"assertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,27,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1103,ry {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1104,"ile test = File.createTempFile(""OMV"","".ser"");"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1105,bjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1106,"penMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1107,ut.writeObject(v);
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1108,ut.close();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1109,bjectInputStream in = new ObjectInputStream(new FileInputStream(test));
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1110,penMapRealVector nv = (OpenMapRealVector)in.readObject();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1111,n.close();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1112,est.delete();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1113,"ssertEquals(v,nv);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1115, catch (IOException e) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1116,"ail(""IOException: ""+e);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1117, catch (ClassNotFoundException e) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1118,"ail(""Can't happen: ""+e);"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1106,"OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1107,"assertEquals(v,TestUtils.serializeAndRecover(v));"

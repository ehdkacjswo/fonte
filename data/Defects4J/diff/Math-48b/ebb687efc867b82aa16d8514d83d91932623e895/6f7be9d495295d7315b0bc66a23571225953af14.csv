is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,27,import org.apache.commons.math.fraction.BigFractionField;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,362,eturn new Array2DRowFieldMatrix<BigFraction>(Hdata);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,363,"return new Array2DRowFieldMatrix<BigFraction>(BigFractionField.getInstance(), Hdata);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,541,"eturn new ArrayFieldVector<T>(getRow(row), false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,541,"return new ArrayFieldVector<T>(field, getRow(row), false);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,560,"eturn new ArrayFieldVector<T>(getColumn(column), false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,560,"return new ArrayFieldVector<T>(field, getColumn(column), false);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,705,"eturn new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,705,"return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,722,"eturn new ArrayFieldVector<T>(out, false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,722,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,750,"eturn new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,750,"return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,767,"eturn new ArrayFieldVector<T>(out, false);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,767,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,263,"eturn new Array2DRowFieldMatrix<T>(outData, false);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,263,"return new Array2DRowFieldMatrix<T>(getField(), outData, false);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,295,"eturn new Array2DRowFieldMatrix<T>(outData, false);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,295,"return new Array2DRowFieldMatrix<T>(getField(), outData, false);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,202,* Construct a vector from part of a array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,204,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,205,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,206,* @param pos Position of the first entry.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,207,* @param size Number of entries to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,208,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,209,* @throws NumberIsTooLargeException if the size of {@code d} is less
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,210,* than {@code pos + size}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,212,"public ArrayFieldVector(Field<T> field, T[] d, int pos, int size) {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,213,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,214,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,216,if (d.length < pos + size) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,217,"throw new NumberIsTooLargeException(pos + size, d.length, true);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,219,this.field = field;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,220,data = buildArray(size);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,221,"System.arraycopy(d, pos, data, 0, size);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,654,"eturn projection(new ArrayFieldVector<T>(v, false));"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,677,"return projection(new ArrayFieldVector<T>(getField(), v, false));"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,988,"eturn new ArrayFieldVector<T>(outData, false);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,988,"return new ArrayFieldVector<T>(getField(), outData, false);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1020,"eturn new ArrayFieldVector<T>(outData, false);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1020,"return new ArrayFieldVector<T>(getField(), outData, false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,336,"eturn new ArrayFieldVector<T>(bp, false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,336,"return new ArrayFieldVector<T>(field, bp, false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,349,"eturn new ArrayFieldVector<T>(solve(b.getDataRef()), false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,349,"return new ArrayFieldVector<T>(field, solve(b.getDataRef()), false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,403,"eturn new Array2DRowFieldMatrix<T>(bp, false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,403,"return new Array2DRowFieldMatrix<T>(field, bp, false);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,33,import org.apache.commons.math.exception.ZeroException;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,184,"eturn new Array2DRowFieldMatrix<T>(d, false);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,185,"return new Array2DRowFieldMatrix<T>(field, d, false);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,246,* @throws ZeroException if {@code data} has 0 elements
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,250,"eturn new ArrayFieldVector<T>(data, true);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,252,if (data.length == 0) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,253,throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,255,"return new ArrayFieldVector<T>(data[0].getField(), data, true);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,271,rrayFieldVector<Fraction> v3 = new ArrayFieldVector<Fraction>(vec1);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,271,"ArrayFieldVector<Fraction> v3 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), vec1);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,275,"rrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4, 3, 2);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,275,"ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), vec4, 3, 2);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,59,ieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,59,FieldMatrix<Fraction> matrix =
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,60,"new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,75,// we don't use FractionField.getInstance() for testing purposes
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,88,ieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,90,"FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,95,atrix = new Array2DRowFieldMatrix<Fraction>(testDataMinus);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,97,"matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testDataMinus);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,112,atrix = new Array2DRowFieldMatrix<Fraction>(singular);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,114,"matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,119,atrix = new Array2DRowFieldMatrix<Fraction>(bigSingular);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,121,"matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,131,ieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,133,"FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,144,ieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,146,"FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,156,ieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,158,"FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,213,ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(testData));
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,215,"new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,215,u = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(singular));
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,217,"lu = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,217,u = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(bigSingular));
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,219,"lu = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,225,ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(testData));
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,226,ieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,227,"new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,228,"FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,231,ieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,233,"FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,236,ieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,238,"FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,266,ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(luData));
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,267,ieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,268,"new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), luData));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,269,"FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,272,ieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,274,"FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,277,ieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,279,"FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] {"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,96,"ssert.assertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,96,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), fractionColMatrix),"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,207,"ssertClose(""inverse multiply"", m.multiply(new Array2DRowFieldMatrix<Fraction>(testDataInv)), identity,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,207,"assertClose(""inverse multiply"", m.multiply(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testDataInv)), identity,"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,22,mport org.apache.commons.math.linear.DecompositionSolver;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,23,import org.apache.commons.math.linear.LUDecompositionImpl;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,24,import org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,184,"ecompositionSolver solver = new DecompositionSolver(new RealMatrixImpl(jTj, false));"
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,185,ealMatrix inverse = solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,185,RealMatrix inverse =
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,"new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(jTj, false))).getInverse();"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,22,mport org.apache.commons.math.linear.DecompositionSolver;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,23,import org.apache.commons.math.linear.LUDecompositionImpl;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,24,import org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,156,ecompositionSolver solver = new DecompositionSolver(a);
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,157,"ealVector dX = solver.solve(b, solver.luDecompose());"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,157,RealVector dX = new LUSolver(new LUDecompositionImpl(a)).solve(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,22,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,25, Class handling decomposition algorithms that can solve A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,26, <p>This class is the entry point for decomposition algorithms like
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,27," {@link QRDecomposition}, {@link LUDecomposition}, {@link"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,28, SingularValueDecomposition} or {@link EigenDecomposition}. All these
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,29, algorithms decompose an A matrix has a product of several specific matrices
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,30, from which they can solve A &times; X = B in least squares sense: they find X
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,24,* Interface handling decomposition algorithms that can solve A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,25,* <p>Decomposition algorithms decompose an A matrix has a product of several specific
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,26,* matrices from which they can solve A &times; X = B in least squares sense: they find X
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,41,ublic class DecompositionSolver implements Serializable {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,37,public interface DecompositionSolver extends Serializable {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,44,rivate static final long serialVersionUID = 182675257956465253L;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,46,** Matrix to decompose. */
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,47,rivate final RealMatrix matrix;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,50, Build a decomposition solver for a matrix.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,51, @param matrix matrix to decompose
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,53,ublic DecompositionSolver(final RealMatrix matrix) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,54,his.matrix = matrix;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,58, Decompose a matrix using eigendecomposition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,59, <p>The split tolerance is set by default to {@link MathUtils#SAFE_MIN}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,60, @exception InvalidMatrixException if matrix does not fulfill
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61, the decomposition requirements (for example non-square matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,62, for {@link LUDecomposition})
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,64,ublic EigenDecomposition eigenDecompose()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,65,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,66,"eturn new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,70, Decompose a matrix using eigendecomposition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,71, @param splitTolerance tolerance on the off-diagonal elements relative to the
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,72, geometric mean to split the tridiagonal matrix (a suggested value is
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,73, {@link MathUtils#SAFE_MIN})
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74, @exception InvalidMatrixException if matrix does not fulfill
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,75, the decomposition requirements (for example non-square matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,76, for {@link LUDecomposition})
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,78,ublic EigenDecomposition eigenDecompose(final double splitTolerance)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,79,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,80,"eturn new EigenDecompositionImpl(matrix, splitTolerance);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,83,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,84, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,85, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,86, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,88, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,89, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,90, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,92,"ublic double[] solve(final double[] b, final EigenDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,93,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,95,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,96,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,99,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,100,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,101,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,102,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,105,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,106,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,107,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,108,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,109,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,110,p[j] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,114,eturn bp;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,118,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,119, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,120, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,121, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,122, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,123, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,124, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,125, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,127,"ublic RealVector solve(final RealVector b, final EigenDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,128,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,130,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,131,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,134,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,135,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,136,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,137,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,140,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,141,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,142,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,143,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,144,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,145,p[j] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,149,"eturn new RealVectorImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,153,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,154, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,155, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,156, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,157, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,158, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,159, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,160, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,162,"ublic RealMatrix solve(final RealMatrix b, final EigenDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,163,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,165,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,166,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,169,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,170,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,171,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,172,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,175,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,176,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,177,or (int k = 0; k < nColB; ++k) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,178,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,179,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,180,ouble s = 0;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,181,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,182," += v.getEntry(j) * b.getEntry(j, k);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,184, /= eigenvalues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,185,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,186,p[j][k] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,191,"eturn new RealMatrixImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,196, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,197, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,198, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,199, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,201,ublic double getDeterminant(final EigenDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,202,ouble determinant = 1;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,203,or (double lambda : decomposition.getEigenvalues()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,204,eterminant *= lambda;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,206,eturn determinant;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,210, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,211, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,212, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,214,ublic boolean isNonSingular(final EigenDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,215,or (double lambda : decomposition.getEigenvalues()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,216,f (lambda == 0) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,217,eturn false;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,220,eturn true;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,223,** Get the inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,224, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,225, @return inverse matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,226, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,228,ublic RealMatrix getInverse(final EigenDecomposition decomposition)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,229,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,231,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,232,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,235,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,236,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,237,inal double[][] invData = new double[m][m];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,239,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,240,inal double[] invI = invData[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,241,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,242,ouble invIJ = 0;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,243,or (int k = 0; k < m; ++k) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,244,inal RealVector vK = decomposition.getEigenvector(k);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,245,nvIJ += vK.getEntry(i) * vK.getEntry(j) / eigenvalues[k];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,247,nvI[j] = invIJ;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,250,"eturn new RealMatrixImpl(invData, false);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,255, Decompose a matrix using singular value composition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,256, @exception InvalidMatrixException if matrix does not fulfill
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,257, the decomposition requirements (for example non-square matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,258, for {@link LUDecomposition})
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,260,ublic SingularValueDecomposition singularDecompose()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,261,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,262,eturn new SingularValueDecompositionImpl(matrix);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,265,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,266, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,267, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,268, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,269, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,270, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,271, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,272, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,274,"ublic double[] solve(final double[] b, final SingularValueDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,275,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,277,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,278,f (b.length != singularValues.length) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,279,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,282,inal double[] w = decomposition.getUT().operate(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,283,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,284,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,285,f (si == 0) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,286,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,288,[i] /= si;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,290,eturn decomposition.getV().operate(w);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,294,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,295, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,296, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,297, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,298, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,299, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,300, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,301, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,303,"ublic RealVector solve(final RealVector b, final SingularValueDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,304,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,306,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,307,f (b.getDimension() != singularValues.length) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,308,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,311,inal RealVector w = decomposition.getUT().operate(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,312,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,313,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,314,f (si == 0) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,315,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,317,".set(i, w.getEntry(i) / si);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,319,eturn decomposition.getV().operate(w);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,323,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,324, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,325, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,326, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,327, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,328, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,329, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,330, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,332,"ublic RealMatrix solve(final RealMatrix b, final SingularValueDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,333,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,335,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,336,f (b.getRowDimension() != singularValues.length) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,337,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,340,inal RealMatrixImpl w = (RealMatrixImpl) decomposition.getUT().multiply(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,341,inal double[][] wData = w.getDataRef();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,342,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,343,inal double si  = singularValues[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,344,f (si == 0) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,345,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,347,inal double inv = 1.0 / si;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,348,inal double[] wi = wData[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,349,or (int j = 0; j < b.getColumnDimension(); ++j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,350,i[j] *= inv;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,353,eturn decomposition.getV().multiply(w);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,358, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,359, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,360, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,362,ublic boolean isNonSingular(final SingularValueDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,363,eturn decomposition.getRank() == decomposition.getSingularValues().length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,366,** Get the inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,367, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,368, @return inverse matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,369, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,371,ublic RealMatrix getInverse(final SingularValueDecomposition decomposition)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,372,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,374,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,375,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,378,"eturn solve(MatrixUtils.createRealIdentityMatrix(decomposition.getSingularValues().length),"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,379,ecomposition);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,384, Decompose a matrix using QR decomposition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,386,ublic QRDecomposition qrDecompose() {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,387,eturn new QRDecompositionImpl(matrix);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,390,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,391, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,392, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,39,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,40,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,41,* decomposition algorithm.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,394, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,399,"ublic double[] solve(final double[] b, final QRDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,400,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,402,f (decomposition.getR().getRowDimension() != b.length) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,403,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,405,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,406,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,409,"/ solve Q.y = b, using the fact Q is orthogonal"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,410,inal double[] y = decomposition.getQT().operate(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,412,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,413,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,414,inal double[] x = new double[r.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,415,"ystem.arraycopy(y, 0, x, 0, r.getRowDimension());"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,416,or (int i = r.getRowDimension() - 1; i >= 0; --i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,417,"[i] /= r.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,418,inal double lastX = x[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,419,or (int j = i - 1; j >= 0; --j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,420,"[j] -= lastX * r.getEntry(j, i);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,424,eturn x;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,47,double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,48,"throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,428,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,429, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,430, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,50,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,51,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,52,* decomposition algorithm.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,432, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,437,"ublic RealVector solve(final RealVector b, final QRDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,438,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,439,"eturn new RealVectorImpl(solve(b.getData(), decomposition), false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,58,RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,59,"throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,442,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,443, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,444, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,62,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,63,* decomposition algorithm.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,446, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,451,"ublic RealMatrix solve(final RealMatrix b, final QRDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,452,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,454,f (decomposition.getR().getRowDimension() != b.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,455,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,457,f (!isNonSingular(decomposition)) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,458,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,461,"/ solve Q.y = b, using the fact Q is orthogonal"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,462,inal RealMatrix y = decomposition.getQT().multiply(b);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,464,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,465,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,466,inal double[][] xData =
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,467,ew double[r.getColumnDimension()][b.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,468,or (int i = 0; i < r.getRowDimension(); ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,469,inal double[] xi = xData[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,470,or (int k = 0; k < xi.length; ++k) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,471,"i[k] = y.getEntry(i, k);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,474,or (int i = r.getRowDimension() - 1; i >= 0; --i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,475,"inal double rii = r.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,476,inal double[] xi = xData[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,477,or (int k = 0; k < xi.length; ++k) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,478,i[k] /= rii;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,479,inal double lastX = xi[k];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,480,or (int j = i - 1; j >= 0; --j) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,481,"Data[j][k] -= lastX * r.getEntry(j, i);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,486,"eturn new RealMatrixImpl(xData, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,69,RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,70,"throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,492, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,493, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,495,ublic boolean isNonSingular(final QRDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,496,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,497,"inal int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,498,or (int i = 0; i < p; ++i) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,499,"f (r.getEntry(i, i) == 0) {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,500,eturn false;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,503,eturn true;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,506,** Get the inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,507, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,508, @return inverse matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,509, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,511,ublic RealMatrix getInverse(final QRDecomposition decomposition)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,512,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,513,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,514,"inal int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,515,"eturn solve(MatrixUtils.createRealIdentityMatrix(p), decomposition);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,519, Decompose a matrix using LU decomposition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,520, @exception InvalidMatrixException if matrix is non-square)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,522,ublic LUDecomposition luDecompose()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,523,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,524,eturn new LUDecompositionImpl(matrix);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,528, Decompose a matrix using LU decomposition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,529, @param singularityThreshold threshold (based on partial row norm)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,530, under which a matrix is considered singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,531, @exception InvalidMatrixException if matrix is non-square)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,533,ublic LUDecomposition luDecompose(final double singularityThreshold)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,534,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,535,"eturn new LUDecompositionImpl(matrix, singularityThreshold);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,538,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,539, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,540, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,541, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,542, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,543, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,544, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,545, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,547,"ublic double[] solve(final double[] b, final LUDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,548,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,550,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,551,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,552,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,553,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,555,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,556,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,559,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,561,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,562,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,563,p[row] = b[pivot[row]];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,566,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,567,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,568,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,569,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,570,"p[i] -= bp[col] * l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,574,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,575,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,576,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,577,"p[col] /= u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,578,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,579,"p[i] -= bp[col] * u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,583,eturn bp;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,588,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,589, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,590, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,591, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,592, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,593, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,594, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,595, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,597,"ublic RealVector solve(final RealVector b, final LUDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,598,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,600,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,601,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,602,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,603,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,605,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,606,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,609,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,611,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,612,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,613,p[row] = b.getEntry(pivot[row]);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,616,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,617,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,618,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,619,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,620,"p[i] -= bp[col] * l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,624,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,625,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,626,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,627,"p[col] /= u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,628,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,629,"p[i] -= bp[col] * u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,633,"eturn new RealVectorImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,637,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,638, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,639, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,640, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,641, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,642, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,643, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,644, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,646,"ublic RealMatrix solve(final RealMatrix b, final LUDecomposition decomposition)"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,647,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,649,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,650,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,651,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,652,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,654,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,655,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,658,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,660,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,661,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,662,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,663,inal double[] bpRow = bp[row];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,664,inal int pRow = pivot[row];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,665,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,666,"pRow[col] = b.getEntry(pRow, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,670,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,671,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,672,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,673,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,674,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,675,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,676,"inal double luICol = l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,677,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,678,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,683,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,684,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,685,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,686,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,687,"inal double luDiag = u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,688,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,689,pCol[j] /= luDiag;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,691,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,692,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,693,"inal double luICol = u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,694,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,695,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,700,"eturn new RealMatrixImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,706, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,707, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,708, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,709, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,711,ublic double getDeterminant(final LUDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,712,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,713,eturn 0;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,714, else {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,715,inal int m = decomposition.getPivot().length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,716,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,717,ouble determinant = decomposition.evenPermutation() ? 1 : -1;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,718,or (int i = 0; i < m; i++) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,719,"eterminant *= u.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,721,eturn determinant;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,726, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,727, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,730,ublic boolean isNonSingular(final LUDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,731,eturn !decomposition.isSingular();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,76,boolean isNonSingular();
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,734,** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,78,/** Get the inverse (or pseudo-inverse) of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,739,ublic RealMatrix getInverse(final LUDecomposition decomposition)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,740,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,741,inal int m = decomposition.getPivot().length;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,742,"eturn solve(MatrixUtils.createRealIdentityMatrix(m), decomposition);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,83,RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,84,throws InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,22,* Solver using eigen decomposition to solve A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,23,"* <p>This class finds only exact linear solution, i.e. when"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,24,* ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,27,* @since 2.0
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,29,public class EigenSolver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,32,private static final long serialVersionUID = 4339008311386325953L;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,34,/** Underlying decomposition. */
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,35,private final EigenDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,38,* Simple constructor.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,39,* @param decomposition decomposition to use
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,41,public EigenSolver(final EigenDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,42,this.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,45,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,46,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,47,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,48,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,49,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,50,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,51,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,53,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,54,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,56,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,57,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,60,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,61,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,62,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,63,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,66,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,67,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,68,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,69,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,70,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,71,bp[j] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,75,return bp;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,79,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,80,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,81,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,82,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,83,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,84,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,85,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,87,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,88,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,90,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,91,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,94,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,95,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,96,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,97,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,100,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,101,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,102,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,103,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,104,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,105,bp[j] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,109,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,113,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,114,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,115,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,116,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,117,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,118,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,119,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,121,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,122,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,124,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,125,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,128,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,129,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,130,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,131,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,134,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,135,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,136,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,137,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,138,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,139,double s = 0;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,140,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,141,"s += v.getEntry(j) * b.getEntry(j, k);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,143,s /= eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,144,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,145,bp[j][k] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,150,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,155,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,156,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,157,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,159,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,160,double determinant = 1;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,161,for (double lambda : decomposition.getEigenvalues()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,162,determinant *= lambda;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,164,return determinant;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,168,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,169,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,171,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,172,for (double lambda : decomposition.getEigenvalues()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,173,if (lambda == 0) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,174,return false;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,177,return true;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,180,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,181,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,182,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,184,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,185,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,187,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,188,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,191,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,192,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,193,final double[][] invData = new double[m][m];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,195,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,196,final double[] invI = invData[i];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,197,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,198,double invIJ = 0;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,199,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,200,final RealVector vK = decomposition.getEigenvector(k);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,201,invIJ += vK.getEntry(i) * vK.getEntry(j) / eigenvalues[k];
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,203,invI[j] = invIJ;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,206,"return new RealMatrixImpl(invData, false);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,22,* Solver using LU decomposition to solve A &times; X = B for square matrices A.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,23,"* <p>This class finds only exact linear solution, i.e. when"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,24,* ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,27,* @since 2.0
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,29,public class LUSolver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,32,private static final long serialVersionUID = -8775006035077527661L;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,34,/** Underlying decomposition. */
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,35,private final LUDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,38,* Simple constructor.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,39,* @param decomposition decomposition to use
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,41,public LUSolver(final LUDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,42,this.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,45,/** Solve the linear equation A &times; X = B for square matrices A.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,46,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,47,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,48,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,49,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,50,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,51,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,53,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,54,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,56,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,57,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,58,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,59,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,61,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,62,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,65,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,67,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,68,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,69,bp[row] = b[pivot[row]];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,72,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,73,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,74,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,75,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,76,"bp[i] -= bp[col] * l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,80,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,81,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,82,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,83,"bp[col] /= u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,84,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,85,"bp[i] -= bp[col] * u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,89,return bp;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,94,/** Solve the linear equation A &times; X = B for square matrices A.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,95,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,96,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,97,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,98,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,99,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,100,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,102,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,103,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,105,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,106,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,107,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,108,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,110,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,111,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,114,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,116,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,117,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,118,bp[row] = b.getEntry(pivot[row]);
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,121,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,122,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,123,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,124,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,125,"bp[i] -= bp[col] * l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,129,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,130,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,131,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,132,"bp[col] /= u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,133,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,134,"bp[i] -= bp[col] * u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,138,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,142,/** Solve the linear equation A &times; X = B for square matrices A.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,143,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,144,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,145,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,146,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,147,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,148,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,150,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,151,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,153,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,154,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,155,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,156,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,158,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,159,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,162,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,164,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,165,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,166,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,167,final double[] bpRow = bp[row];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,168,final int pRow = pivot[row];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,169,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,170,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,174,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,175,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,176,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,177,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,178,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,179,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,180,"final double luICol = l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,181,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,182,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,187,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,188,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,189,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,190,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,191,"final double luDiag = u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,192,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,193,bpCol[j] /= luDiag;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,195,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,196,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,197,"final double luICol = u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,198,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,199,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,204,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,209,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,210,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,211,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,213,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,214,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,215,return 0;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,216,} else {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,217,final int m = decomposition.getPivot().length;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,218,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,219,double determinant = decomposition.evenPermutation() ? 1 : -1;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,220,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,221,"determinant *= u.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,223,return determinant;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,228,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,229,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,231,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,232,return !decomposition.isSingular();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,235,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,236,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,237,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,239,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,240,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,241,final int m = decomposition.getPivot().length;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,242,return solve(MatrixUtils.createRealIdentityMatrix(m));
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,22,* Class using QR decomposition to solve A &times; X = B in least square sense
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,23,* for any matrices A.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,24,* <p>This class solve A &times; X = B in least squares sense: it finds X
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,25,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,28,* @since 2.0
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,30,public class QRSolver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,33,private static final long serialVersionUID = -579465076068393818L;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,35,/** Underlying decomposition. */
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,36,private final QRDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,39,* Simple constructor.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,40,* @param decomposition decomposition to use
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,42,public QRSolver(final QRDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,43,this.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,46,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,47,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,48,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,49,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,50,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,51,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,52,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,54,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,55,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,57,if (decomposition.getR().getRowDimension() != b.length) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,58,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,60,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,61,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,64,"// solve Q.y = b, using the fact Q is orthogonal"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,65,final double[] y = decomposition.getQT().operate(b);
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,67,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,68,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,69,final double[] x = new double[r.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,70,"System.arraycopy(y, 0, x, 0, r.getRowDimension());"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,71,for (int i = r.getRowDimension() - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,72,"x[i] /= r.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,73,final double lastX = x[i];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,74,for (int j = i - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,75,"x[j] -= lastX * r.getEntry(j, i);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,79,return x;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,83,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,84,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,85,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,86,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,87,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,88,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,89,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,91,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,92,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,93,"return new RealVectorImpl(solve(b.getData()), false);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,96,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,97,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,98,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,99,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,100,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,101,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,102,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,104,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,105,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,107,if (decomposition.getR().getRowDimension() != b.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,108,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,110,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,111,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,114,"// solve Q.y = b, using the fact Q is orthogonal"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,115,final RealMatrix y = decomposition.getQT().multiply(b);
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,117,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,118,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,119,final double[][] xData =
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,120,new double[r.getColumnDimension()][b.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,121,for (int i = 0; i < r.getRowDimension(); ++i) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,122,final double[] xi = xData[i];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,123,for (int k = 0; k < xi.length; ++k) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,124,"xi[k] = y.getEntry(i, k);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,127,for (int i = r.getRowDimension() - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,128,"final double rii = r.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,129,final double[] xi = xData[i];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,130,for (int k = 0; k < xi.length; ++k) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,131,xi[k] /= rii;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,132,final double lastX = xi[k];
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,133,for (int j = i - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,134,"xData[j][k] -= lastX * r.getEntry(j, i);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,139,"return new RealMatrixImpl(xData, false);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,144,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,145,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,147,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,148,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,149,"final int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,150,for (int i = 0; i < p; ++i) {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,151,"if (r.getEntry(i, i) == 0) {"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,152,return false;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,155,return true;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,158,/** Get the pseudo-inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,159,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,160,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,162,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,163,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,164,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,165,"final int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,166,return solve(MatrixUtils.createRealIdentityMatrix(p));
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,57,rivate static final long serialVersionUID = 4970229902484487012L;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,57,private static final long serialVersionUID = -391443069570048115L;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,62,** Cached decomposition solver.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,62,/** Cached LU solver.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65,rivate DecompositionSolver ds;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,67,** Cached LU decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,68," @deprecated as of release 2.0, since all methods using this are deprecated"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,70,rivate LUDecomposition lu;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65,private LUSolver lu;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,92,s = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,87,lu = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,110,s = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,105,lu = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,150,s = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,145,lu = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,549,s = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,544,lu = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,634,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,635,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,636,u = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,629,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,630,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638,eturn ds.getInverse(lu);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,632,return lu.getInverse();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,644,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,645,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,646,u = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,639,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,648,eturn ds.getDeterminant(lu);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,641,return lu.getDeterminant();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,659,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,660,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,661,u = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,663,eturn !ds.isNonSingular(lu);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,652,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,653,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,655,return !lu.isNonSingular();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,795,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,796,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,797,u = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,787,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,788,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,799,"eturn ds.solve(b, lu);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,790,return lu.solve(b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,805,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,806,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,807,u = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,796,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,797,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,809,"eturn ds.solve(b, lu);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,799,return lu.solve(b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,833,f (ds == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,834,s = new DecompositionSolver(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,835,u = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,823,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,824,"lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,22,* Class using singular value decomposition decomposition to solve A &times;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,23,* X = B in least square sense for any matrices A.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,24,* <p>This class solve A &times; X = B in least squares sense: it finds X
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,25,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,27,"* @version $Revision: 723496 $ $Date: 2008-12-05 00:48:18 +0100 (ven., 05 déc. 2008) $"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,28,* @since 2.0
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,30,public class SingularValueSolver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,33,private static final long serialVersionUID = -33167987924870528L;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,35,/** Underlying decomposition. */
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,36,private final SingularValueDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,39,* Simple constructor.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,40,* @param decomposition decomposition to use
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,42,public SingularValueSolver(final SingularValueDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,43,this.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,46,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,47,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,48,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,49,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,50,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,51,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,52,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,54,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,55,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,57,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,58,if (b.length != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,59,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,62,final double[] w = decomposition.getUT().operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,63,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,64,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,65,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,66,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,68,w[i] /= si;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,70,return decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,74,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,75,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,76,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,77,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,78,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,79,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,80,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,82,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,83,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,85,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,86,if (b.getDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,87,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,90,final RealVector w = decomposition.getUT().operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,91,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,92,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,93,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,94,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,96,"w.set(i, w.getEntry(i) / si);"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,98,return decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,102,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,103,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,104,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,105,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,106,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,107,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,108,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,110,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,111,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,113,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,114,if (b.getRowDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,115,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,118,final RealMatrixImpl w = (RealMatrixImpl) decomposition.getUT().multiply(b);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,119,final double[][] wData = w.getDataRef();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,120,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,121,final double si  = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,122,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,123,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,125,final double inv = 1.0 / si;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,126,final double[] wi = wData[i];
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,127,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,128,wi[j] *= inv;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,131,return decomposition.getV().multiply(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,136,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,137,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,139,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,140,return decomposition.getRank() == decomposition.getSingularValues().length;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,143,/** Get the pseudo-inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,144,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,145,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,147,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,148,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,150,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,151,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,154,return solve(MatrixUtils.createRealIdentityMatrix(decomposition.getSingularValues().length));
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,mport org.apache.commons.math.linear.DecompositionSolver;
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,import org.apache.commons.math.linear.LUDecompositionImpl;
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,20,import org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,81,ecompositionSolver solver = new DecompositionSolver(Omega);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,82,megaInverse = solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,82,OmegaInverse = new LUSolver(new LUDecompositionImpl(Omega)).getInverse();
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,98,ecompositionSolver solver = new DecompositionSolver(XTOIX);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,99,eturn solver.getInverse(solver.luDecompose()).multiply(XT).multiply(OI).multiply(Y);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,98,RealMatrix inverse = new LUSolver(new LUDecompositionImpl(XTOIX)).getInverse();
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,99,return inverse.multiply(XT).multiply(OI).multiply(Y);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,112,ecompositionSolver solver = new DecompositionSolver(XTOIX);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,113,eturn solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,112,return new LUSolver(new LUDecompositionImpl(XTOIX)).getInverse();
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,19,mport org.apache.commons.math.linear.DecompositionSolver;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,20,import org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,112,ecompositionSolver solver = new DecompositionSolver(XTX);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,113,eturn solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,112,return new LUSolver(new LUDecompositionImpl(XTX)).getInverse();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,49,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,49,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,59,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,59,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,71,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,71,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,85,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,85,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,136,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,136,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,147,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,147,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,164,"ew DecompositionSolver(createTestMatrix(r, bigValues)).eigenDecompose();"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,164,"new EigenDecompositionImpl(createTestMatrix(r, bigValues), MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,174,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,174,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,185,igenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,185,"EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,195,ealMatrix v = new DecompositionSolver(matrix).eigenDecompose().getV();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,195,"RealMatrix v = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getV();"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,201,** test non invertible matrix */
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,202,ublic void testNonInvertible() {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,203,andom r = new Random(9994100315209l);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,204,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,205,"ew DecompositionSolver(createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 }));"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,206,igenDecomposition ed = ds.eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,207,ssertFalse(ds.isNonSingular(ed));
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,208,ry {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,209,s.getInverse(ed);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,210,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,211, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,212,/ expected behavior
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,213, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,214,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,218,** test invertible matrix */
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,219,ublic void testInvertible() {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,220,andom r = new Random(9994100315209l);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,221,ealMatrix m =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,222,"reateTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 });"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,223,ecompositionSolver ds = new DecompositionSolver(m);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,224,igenDecomposition ed = ds.eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,225,ssertTrue(ds.isNonSingular(ed));
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,226,ealMatrix inverse = ds.getInverse(ed);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,227,ealMatrix error =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,228,.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()));
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,229,"ssertEquals(0, error.getNorm(), 4.0e-15);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,236,igenDecomposition ed = new DecompositionSolver(m).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,205,"EigenDecomposition ed = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,243,** test solve dimension errors */
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,244,ublic void testSolveDimensionErrors() {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,245,ecompositionSolver ds = new DecompositionSolver(matrix);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,246,igenDecomposition  ed = ds.eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,247,ealMatrix b = new RealMatrixImpl(new double[2][2]);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,248,ry {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,249,"s.solve(b, ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,250,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,251, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,252,/ expected behavior
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,253, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,254,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,256,ry {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,257,"s.solve(b.getColumn(0), ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,258,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,259, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,260,/ expected behavior
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,261, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,262,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,264,ry {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,265,"s.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,266,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,267, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,268,/ expected behavior
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,269, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,270,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,274,** test solve */
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,275,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,276,ealMatrix m = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,277," 91,  5, 29, 32, 40, 14 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,278,"  5, 34, -1,  0,  2, -1 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,279," 29, -1, 12,  9, 21,  8 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,280," 32,  0,  9, 14,  9,  0 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,281," 40,  2, 21,  9, 51, 19 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,282," 14, -1,  8,  0, 19, 14 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,284,ecompositionSolver ds = new DecompositionSolver(m);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,285,igenDecomposition  ed = ds.eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,286,"ssertEquals(184041, ds.getDeterminant(ed), 2.0e-8);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,287,ealMatrix b = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,288," 1561, 269, 188 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,289,"   69, -21,  70 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,290,"  739, 108,  63 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,291,"  324,  86,  59 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,292," 1624, 194, 107 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,293,"  796,  69,  36 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,295,ealMatrix xRef = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,296," 1,   2, 1 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,297," 2,  -1, 2 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,298," 4,   2, 3 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,299," 8,  -1, 0 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,300," 16,  2, 0 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,301," 32, -1, 0 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,304,/ using RealMatrix
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,305,"ssertEquals(0, ds.solve(b, ed).subtract(xRef).getNorm(), 2.0e-12);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,307,/ using double[]
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,308,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,309,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,310,"ew RealVectorImpl(ds.solve(b.getColumn(i), ed)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,311,.0e-11);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,314,/ using RealMatrixImpl
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,315,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,316,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,317,"s.solve(b.getColumnVector(i), ed).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,318,.0e-11);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,321,/ using RealMatrix with an alternate implementation
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,322,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,323,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,324,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,325,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,326,"s.solve(v, ed).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,327,.0e-11);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,341,igenDecomposition ed = new DecompositionSolver(repeated).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,221,"EigenDecomposition ed = new EigenDecompositionImpl(repeated, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,355,igenDecomposition ed = new DecompositionSolver(distinct).eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,"EigenDecomposition ed = new EigenDecompositionImpl(distinct, MathUtils.SAFE_MIN);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,445,"rivate RealMatrix createTestMatrix(final Random r, final double[] eigenValues) {"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,325,"static RealMatrix createTestMatrix(final Random r, final double[] eigenValues) {"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,20,import java.util.Random;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,26,import org.apache.commons.math.util.MathUtils;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,28,public class EigenSolverTest extends TestCase {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,30,private double[] refValues;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,31,private RealMatrix matrix;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,33,public EigenSolverTest(String name) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,34,super(name);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,37,public static Test suite() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,38,TestSuite suite = new TestSuite(EigenSolverTest.class);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,39,"suite.setName(""EigenSolver Tests"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,40,return suite;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,43,/** test non invertible matrix */
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,44,public void testNonInvertible() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,45,Random r = new Random(9994100315209l);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,46,RealMatrix m =
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,47,"EigenDecompositionImplTest.createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 });"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,48,"EigenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,49,assertFalse(es.isNonSingular());
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,50,try {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,51,es.getInverse();
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,52,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,53,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,54,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,55,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,56,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,60,/** test invertible matrix */
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,61,public void testInvertible() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,62,Random r = new Random(9994100315209l);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,63,RealMatrix m =
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,64,"EigenDecompositionImplTest.createTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 });"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,65,"EigenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,66,assertTrue(es.isNonSingular());
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,67,RealMatrix inverse = es.getInverse();
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,68,RealMatrix error =
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,69,m.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,70,"assertEquals(0, error.getNorm(), 4.0e-15);"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,73,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,74,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,75,"EigenSolver es = new EigenSolver(new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,76,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,77,try {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,78,es.solve(b);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,79,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,80,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,81,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,82,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,83,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,85,try {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,86,es.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,87,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,88,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,89,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,90,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,91,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,93,try {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,94,es.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,95,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,96,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,97,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,98,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,99,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,103,/** test solve */
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,104,public void testSolve() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,105,RealMatrix m = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,106,"{ 91,  5, 29, 32, 40, 14 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,107,"{  5, 34, -1,  0,  2, -1 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,108,"{ 29, -1, 12,  9, 21,  8 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,109,"{ 32,  0,  9, 14,  9,  0 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,110,"{ 40,  2, 21,  9, 51, 19 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,111,"{ 14, -1,  8,  0, 19, 14 }"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,113,"EigenSolver  es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,114,"assertEquals(184041, es.getDeterminant(), 2.0e-8);"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,115,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,116,"{ 1561, 269, 188 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,117,"{   69, -21,  70 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,118,"{  739, 108,  63 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,119,"{  324,  86,  59 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,120,"{ 1624, 194, 107 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,121,"{  796,  69,  36 }"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,123,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,124,"{ 1,   2, 1 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,125,"{ 2,  -1, 2 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,126,"{ 4,   2, 3 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,127,"{ 8,  -1, 0 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,128,"{ 16,  2, 0 },"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,129,"{ 32, -1, 0 }"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,132,// using RealMatrix
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,133,"assertEquals(0, es.solve(b).subtract(xRef).getNorm(), 2.0e-12);"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,135,// using double[]
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,136,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,137,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,138,"new RealVectorImpl(es.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,139,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,142,// using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,143,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,144,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,145,"es.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,146,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,149,// using RealMatrix with an alternate implementation
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,150,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,151,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,152,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,153,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,154,"es.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,155,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,160,public void setUp() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,161,refValues = new double[] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,162,"2.003, 2.002, 2.001, 1.001, 1.000, 0.001"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,164,"matrix = EigenDecompositionImplTest.createTestMatrix(new Random(35992629946426l), refValues);"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,167,public void tearDown() {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,168,refValues = null;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,169,matrix    = null;
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,91,** test threshold impact */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,92,ublic void testThreshold() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,inal RealMatrix matrix = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,94," 1.0, 2.0, 3.0},"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,95," 2.0, 5.0, 3.0},"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,96," 4.000001, 9.0, 9.0}"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,97,", false);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,98,ecompositionSolver solver = new DecompositionSolver(matrix);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,ssertFalse(solver.isNonSingular(solver.luDecompose(1.0e-5)));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,100,ssertTrue(solver.isNonSingular(solver.luDecompose(1.0e-10)));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,229,** test solve dimension errors */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,230,ublic void testSolveDimensionErrors() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,231,ecompositionSolver solver =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,232,"ew DecompositionSolver(new RealMatrixImpl(testData, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,233,ealMatrix b = new RealMatrixImpl(new double[2][2]);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,234,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,235,"olver.solve(b, solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,236,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,237, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,238,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,239, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,240,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,242,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,243,"olver.solve(b.getColumn(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,244,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,245, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,246,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,247, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,248,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,250,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,251,"olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,252,olver.luDecompose());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,253,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,254, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,255,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,256, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,257,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,261,** test solve singularity errors */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,262,ublic void testSolveSingularityErrors() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,263,ecompositionSolver solver =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,264,"ew DecompositionSolver(new RealMatrixImpl(singular, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,265,ealMatrix b = new RealMatrixImpl(new double[2][2]);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,266,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,267,"olver.solve(b, solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,268,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,269, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,270,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,271, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,272,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,274,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,275,"olver.solve(b.getColumn(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,276,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,277, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,278,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,279, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,280,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,282,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,283,"olver.solve(b.getColumnVector(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,284,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,285, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,286,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,287, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,288,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,290,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,291,"olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,292,olver.luDecompose());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,293,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,294, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,295,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,296, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,297,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,301,** test solve */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,302,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,303,ecompositionSolver solver =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,304,"ew DecompositionSolver(new RealMatrixImpl(testData, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,305,UDecomposition lu = solver.luDecompose();
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,306,ealMatrix b = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,307," 1, 0 }, { 2, -5 }, { 3, 1 }"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,309,ealMatrix xRef = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,310," 19, -71 }, { -6, 22 }, { -2, 9 }"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,313,/ using RealMatrix
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,314,"ssertEquals(0, solver.solve(b, lu).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,316,/ using double[]
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,317,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,318,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,319,"ew RealVectorImpl(solver.solve(b.getColumn(i), lu)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,320,.0e-13);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,323,/ using RealVectorImpl
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,324,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,325,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,326,"olver.solve(b.getColumnVector(i), lu).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,327,.0e-13);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,330,/ using RealVector with an alternate implementation
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,331,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,332,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,333,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,334,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,335,"olver.solve(v, lu).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,336,.0e-13);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,421,** test determinant */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,422,ublic void testDeterminant() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,423,"ssertEquals( -1, getDeterminant(new RealMatrixImpl(testData, false)), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,424,"ssertEquals(-10, getDeterminant(new RealMatrixImpl(luData, false)), 1.0e-14);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,425,"ssertEquals(  0, getDeterminant(new RealMatrixImpl(singular, false)), 1.0e-17);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,426,"ssertEquals(  0, getDeterminant(new RealMatrixImpl(bigSingular, false)), 1.0e-10);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,429,rivate double getDeterminant(RealMatrix m) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,430,ecompositionSolver ds = new DecompositionSolver(m);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,431,eturn ds.getDeterminant(ds.luDecompose());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,24,public class LUSolverTest extends TestCase {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,25,private double[][] testData = {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,26,"{ 1.0, 2.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,27,"{ 2.0, 5.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,28,"{ 1.0, 0.0, 8.0}"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,30,private double[][] luData = {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,31,"{ 2.0, 3.0, 3.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,32,"{ 0.0, 5.0, 7.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,33,"{ 6.0, 9.0, 8.0 }"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,36,// singular matrices
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,37,private double[][] singular = {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,38,"{ 2.0, 3.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,39,"{ 2.0, 3.0 }"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,41,private double[][] bigSingular = {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,42,"{ 1.0, 2.0,   3.0,    4.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,43,"{ 2.0, 5.0,   3.0,    4.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,44,"{ 7.0, 3.0, 256.0, 1930.0 },"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,45,"{ 3.0, 7.0,   6.0,    8.0 }"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,46,}; // 4th row = 1st + 2nd
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,48,public LUSolverTest(String name) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,49,super(name);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,52,public static Test suite() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,53,TestSuite suite = new TestSuite(LUSolverTest.class);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,54,"suite.setName(""LUSolver Tests"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,55,return suite;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,58,/** test threshold impact */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,59,public void testThreshold() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,60,final RealMatrix matrix = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,61,"{ 1.0, 2.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,62,"{ 2.0, 5.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,63,"{ 4.000001, 9.0, 9.0}"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,64,"}, false);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,65,"assertFalse(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-5)).isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,66,"assertTrue(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-10)).isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,69,/** test singular */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,70,public void testSingular() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,71,LUSolver lu =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,72,"new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,73,assertTrue(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,74,"lu = new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(singular, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,75,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,76,"lu = new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(bigSingular, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,77,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,80,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,81,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,82,LUSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,83,"new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,84,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,85,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,86,solver.solve(b);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,87,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,88,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,89,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,90,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,91,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,93,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,94,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,95,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,96,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,97,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,98,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,99,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,101,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,102,solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,103,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,104,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,105,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,106,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,107,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,111,/** test solve singularity errors */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,112,public void testSolveSingularityErrors() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,113,LUSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,114,"new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(singular, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,115,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,116,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,117,solver.solve(b);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,118,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,119,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,120,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,121,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,122,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,124,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,125,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,126,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,127,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,128,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,129,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,130,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,132,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,133,solver.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,134,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,135,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,136,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,137,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,138,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,140,try {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,141,solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,142,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,143,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,144,// expected behavior
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,145,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,146,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,150,/** test solve */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,151,public void testSolve() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,152,LUSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,153,"new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,154,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,155,"{ 1, 0 }, { 2, -5 }, { 3, 1 }"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,157,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,158,"{ 19, -71 }, { -6, 22 }, { -2, 9 }"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,161,// using RealMatrix
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,162,"assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,164,// using double[]
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,165,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,166,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,167,"new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,168,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,171,// using RealVectorImpl
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,172,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,173,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,174,"solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,175,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,178,// using RealVector with an alternate implementation
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,179,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,180,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,181,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,182,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,183,"solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,184,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,189,/** test determinant */
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,190,public void testDeterminant() {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,191,"assertEquals( -1, getDeterminant(new RealMatrixImpl(testData, false)), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,192,"assertEquals(-10, getDeterminant(new RealMatrixImpl(luData, false)), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,193,"assertEquals(  0, getDeterminant(new RealMatrixImpl(singular, false)), 1.0e-17);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,194,"assertEquals(  0, getDeterminant(new RealMatrixImpl(bigSingular, false)), 1.0e-10);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,197,private double getDeterminant(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,198,return new LUSolver(new LUDecompositionImpl(m)).getDeterminant();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,199,** test rank */
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,200,ublic void testRank() {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,201,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,"ew DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,ssertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,205,"s = new DecompositionSolver(new RealMatrixImpl(testData3x3Singular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,206,ssertFalse(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,208,"s = new DecompositionSolver(new RealMatrixImpl(testData3x4, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,209,ssertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,211,"s = new DecompositionSolver(new RealMatrixImpl(testData4x3, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,212,ssertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,216,** test solve dimension errors */
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,217,ublic void testSolveDimensionErrors() {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,218,ecompositionSolver solver =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,219,"ew DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,220,ealMatrix b = new RealMatrixImpl(new double[2][2]);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,221,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,222,"olver.solve(b, solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,223,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,224, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,225,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,226, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,227,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,229,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,230,"olver.solve(b.getColumn(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,231,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,232, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,233,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,234, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,235,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,237,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,238,"olver.solve(b.getColumnVector(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,239,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,240, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,241,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,242, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,243,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,247,** test solve rank errors */
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,248,ublic void testSolveRankErrors() {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,249,ecompositionSolver solver =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,250,"ew DecompositionSolver(new RealMatrixImpl(testData3x3Singular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,251,ealMatrix b = new RealMatrixImpl(new double[3][2]);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,252,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,253,"olver.solve(b, solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,254,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,255, catch (InvalidMatrixException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,256,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,257, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,258,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,260,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,261,"olver.solve(b.getColumn(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,262,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,263, catch (InvalidMatrixException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,264,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,265, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,266,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,268,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,269,"olver.solve(b.getColumnVector(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,270,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,271, catch (InvalidMatrixException iae) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,272,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,273, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,274,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,278,** test solve */
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,279,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,280,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,281,"ew DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,282,RDecomposition qr = ds.qrDecompose();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,283,ealMatrix b = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,284," -102, 12250 }, { 544, 24500 }, { 167, -36750 }"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,286,ealMatrix xRef = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,287," 1, 2515 }, { 2, 422 }, { -3, 898 }"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,290,/ using RealMatrix
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,291,"ssertEquals(0, ds.solve(b, qr).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,293,/ using double[]
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,294,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,295,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,296,"ew RealVectorImpl(ds.solve(b.getColumn(i), qr)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,297,.0e-13);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,300,/ using RealVectorImpl
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,301,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,302,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,303,"s.solve(b.getColumnVector(i), qr).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,304,.0e-13);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,307,/ using RealVector with an alternate implementation
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,308,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,309,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,310,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,311,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,312,"s.solve(v, qr).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,313,.0e-13);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,320,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,321,"ew DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,322,RDecomposition qr = ds.qrDecompose();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,201,QRDecomposition qr =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,"new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,24,public class QRSolverTest extends TestCase {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,25,double[][] testData3x3NonSingular = {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,26,"{ 12, -51, 4 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,27,"{ 6, 167, -68 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,28,"{ -4, 24, -41 }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,30,double[][] testData3x3Singular = {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,31,"{ 1, 4, 7, },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,32,"{ 2, 5, 8, },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,33,"{ 3, 6, 9, }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,35,double[][] testData3x4 = {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,36,"{ 12, -51, 4, 1 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,37,"{ 6, 167, -68, 2 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,38,"{ -4, 24, -41, 3 }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,40,double[][] testData4x3 = {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,41,"{ 12, -51, 4, },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,42,"{ 6, 167, -68, },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,43,"{ -4, 24, -41, },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,44,"{ -5, 34, 7, }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,46,public QRSolverTest(String name) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,47,super(name);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,50,public static Test suite() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,51,TestSuite suite = new TestSuite(QRSolverTest.class);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,52,"suite.setName(""QRSolver Tests"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,53,return suite;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,56,/** test rank */
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,57,public void testRank() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,58,QRSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,59,"new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,60,assertTrue(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,62,"solver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,63,assertFalse(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,65,"solver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x4, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,66,assertTrue(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,68,"solver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData4x3, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,69,assertTrue(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,73,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,74,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,75,QRSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,76,"new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,77,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,78,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,79,solver.solve(b);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,80,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,81,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,82,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,83,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,84,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,86,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,87,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,88,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,89,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,90,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,91,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,92,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,94,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,95,solver.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,96,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,97,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,98,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,99,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,100,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,104,/** test solve rank errors */
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,105,public void testSolveRankErrors() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,106,QRSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,107,"new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,108,RealMatrix b = new RealMatrixImpl(new double[3][2]);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,109,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,110,solver.solve(b);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,111,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,112,} catch (InvalidMatrixException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,113,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,114,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,115,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,117,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,118,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,119,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,120,} catch (InvalidMatrixException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,121,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,122,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,123,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,125,try {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,126,solver.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,127,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,128,} catch (InvalidMatrixException iae) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,129,// expected behavior
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,130,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,131,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,135,/** test solve */
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,136,public void testSolve() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,137,QRSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,138,"new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,139,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,140,"{ -102, 12250 }, { 544, 24500 }, { 167, -36750 }"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,142,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,143,"{ 1, 2515 }, { 2, 422 }, { -3, 898 }"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,146,// using RealMatrix
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,147,"assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,149,// using double[]
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,150,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,151,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,152,"new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,153,1.0e-13);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,156,// using RealVectorImpl
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,157,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,158,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,159,"solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,160,1.0e-13);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,163,// using RealVector with an alternate implementation
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,164,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,165,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,166,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,167,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,168,"solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,169,1.0e-13);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,ecompositionSolver ds1 = new DecompositionSolver(m);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,ealMatrix mIT = ds1.getInverse(ds1.luDecompose()).transpose();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,266,ecompositionSolver ds2 = new DecompositionSolver(m.transpose());
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,267,ealMatrix mTI = ds2.getInverse(ds2.luDecompose());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,RealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,RealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,357,ecompositionSolver ds1 = new DecompositionSolver(p);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,358,ealMatrix pInverse = ds1.getInverse(ds1.luDecompose());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,355,RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,366,ecompositionSolver ds2 = new DecompositionSolver(coefficients);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,367,"ouble[] solution = ds2.solve(constants, ds2.luDecompose());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,132,** test solve dimension errors */
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,133,ublic void testSolveDimensionErrors() {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,134,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,"ew DecompositionSolver(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,ingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,137,ealMatrix b = new RealMatrixImpl(new double[3][2]);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,138,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,139,"s.solve(b, svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,140,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,141, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,142,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,143, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,144,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,146,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,147,"s.solve(b.getColumn(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,148,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,149, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,150,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,151, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,152,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,154,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,155,"s.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,156,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,157, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,158,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,159, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,160,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,164,** test solve singularity errors */
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,165,ublic void testSolveSingularityErrors() {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,166,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167,ew DecompositionSolver(new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,168," 1.0, 0.0 },"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,169," 0.0, 0.0 }"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,170,", false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,171,ingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,172,ealMatrix b = new RealMatrixImpl(new double[2][2]);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,173,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,174,"s.solve(b, svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,175,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,176, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,177,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,178, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,179,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,181,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,182,"s.solve(b.getColumn(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,183,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,184, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,185,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,186, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,187,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,189,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,190,"s.solve(b.getColumnVector(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,191,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,192, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,193,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,194, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,195,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,197,ry {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,198,"s.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,199,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,200, catch (InvalidMatrixException ime) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,201,/ expected behavior
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,202, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,203,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,207,** test solve */
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,208,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,209,ecompositionSolver ds =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,210,"ew DecompositionSolver(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,211,ingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,212,ealMatrix b = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,213," 1, 2, 3 }, { 0, -5, 1 }"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,215,ealMatrix xRef = new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,216," -8.0 / 25.0, -263.0 / 75.0, -29.0 / 75.0 },"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,217," 19.0 / 25.0,   78.0 / 25.0,  49.0 / 25.0 }"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,220,/ using RealMatrix
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,221,"ssertEquals(0, ds.solve(b, svd).subtract(xRef).getNorm(), normTolerance);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,223,/ using double[]
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,224,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,225,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,226,"ew RealVectorImpl(ds.solve(b.getColumn(i), svd)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,227,.0e-13);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,230,/ using RealMatrixImpl
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,231,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,232,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,233,"s.solve(b.getColumnVector(i), svd).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,234,.0e-13);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,237,/ using RealMatrix with an alternate implementation
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,238,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,239,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,240,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,241,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,242,"s.solve(v, svd).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,243,.0e-13);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,302,"ew DecompositionSolver(new RealMatrixImpl(testNonSquare, false)).singularDecompose();"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,186,"new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,24,public class SingularValueSolverTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,26,private double[][] testSquare = {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,27,"{ 24.0 / 25.0, 43.0 / 25.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,28,"{ 57.0 / 25.0, 24.0 / 25.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,31,private static final double normTolerance = 10e-14;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,33,public SingularValueSolverTest(String name) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,34,super(name);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,37,public static Test suite() {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,38,TestSuite suite = new TestSuite(SingularValueSolverTest.class);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,39,"suite.setName(""SingularValueSolver Tests"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,40,return suite;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,43,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,44,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,45,SingularValueSolver solver =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,46,"new SingularValueSolver(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)));"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,47,RealMatrix b = new RealMatrixImpl(new double[3][2]);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,48,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,49,solver.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,50,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,51,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,52,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,53,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,54,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,56,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,57,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,58,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,59,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,60,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,61,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,62,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,64,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,65,solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,66,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,67,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,68,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,69,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,70,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,74,/** test solve singularity errors */
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,75,public void testSolveSingularityErrors() {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,76,RealMatrix m =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,77,new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,78,"{ 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,79,"{ 0.0, 0.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,80,"}, false);"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,81,SingularValueSolver solver = new SingularValueSolver(new SingularValueDecompositionImpl(m));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,82,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,83,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,84,solver.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,85,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,86,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,87,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,88,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,89,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,91,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,92,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,93,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,94,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,95,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,96,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,97,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,99,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,100,solver.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,101,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,102,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,103,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,104,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,105,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,107,try {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,108,solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,109,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,110,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,111,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,112,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,113,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,117,/** test solve */
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,118,public void testSolve() {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,119,SingularValueSolver solver =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,120,"new SingularValueSolver(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)));"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,121,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,122,"{ 1, 2, 3 }, { 0, -5, 1 }"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,124,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,125,"{ -8.0 / 25.0, -263.0 / 75.0, -29.0 / 75.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,126,"{ 19.0 / 25.0,   78.0 / 25.0,  49.0 / 25.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,129,// using RealMatrix
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,130,"assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,132,// using double[]
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,133,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,134,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,135,"new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,136,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,139,// using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,140,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,141,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,142,"solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,143,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,146,// using RealMatrix with an alternate implementation
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,147,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,148,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,149,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,150,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,151,"solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,152,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,157,/** test condition number */
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,158,public void testConditionNumber() {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,159,SingularValueDecompositionImpl svd =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,160,"new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,161,"assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);"

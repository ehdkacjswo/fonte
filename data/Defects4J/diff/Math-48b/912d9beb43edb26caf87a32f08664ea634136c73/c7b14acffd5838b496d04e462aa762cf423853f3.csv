is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,127,"eturn new Complex(real + rhs.getReal(),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,127,"return createComplex(real + rhs.getReal(),"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,149,"eturn new Complex(real, -imaginary);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,149,"return createComplex(real, -imaginary);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,204,"eturn new Complex(real/c, imaginary/c);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,204,"return createComplex(real/c, imaginary/c);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,208,"eturn new Complex((real * q + imaginary) / denominator,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,208,"return createComplex((real * q + imaginary) / denominator,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,212,"eturn new Complex(imaginary/d, -real/c);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,212,"return createComplex(imaginary/d, -real/c);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,216,"eturn new Complex((imaginary * q + real) / denominator,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,216,"return createComplex((imaginary * q + real) / denominator,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,352,"eturn new Complex(real * rhs.real - imaginary * rhs.imaginary,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,352,"return createComplex(real * rhs.real - imaginary * rhs.imaginary,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,369,"eturn new Complex(-real, -imaginary);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,369,"return createComplex(-real, -imaginary);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,395,"eturn new Complex(real - rhs.getReal(),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,395,"return createComplex(real - rhs.getReal(),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,400,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,401,"* <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,402,* inverse cosine</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,403,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,404,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,405,* <code> acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,406,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,407,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,408,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,410,* @return the inverse cosine of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,411,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,413,public Complex acos() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,414,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,415,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,418,return this.add(this.sqrt1z().multiply(Complex.I)).log()
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,419,.multiply(Complex.I.negate());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,423,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,424,"* <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,425,* inverse sine</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,426,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,427,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,428,* <code> asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz)) </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,429,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,430,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,431,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,433,* @return the inverse sine of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,434,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,436,public Complex asin() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,437,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,438,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,441,return sqrt1z().add(this.multiply(Complex.I)).log()
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,442,.multiply(Complex.I.negate());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,446,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,447,"* <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,448,* inverse tangent</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,449,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,450,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,451,* <code> atan(z) = (i/2) log((i + z)/(i - z)) </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,452,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,453,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,454,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,456,* @return the inverse tangent of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,457,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,459,public Complex atan() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,460,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,461,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,464,return this.add(Complex.I).divide(Complex.I.subtract(this)).log()
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,465,".multiply(Complex.I.divide(createComplex(2.0, 0.0)));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,469,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,470,"* <a href=""http://mathworld.wolfram.com/Cosine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,471,* cosine</a>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,472,* of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,473,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,474,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,475,* <code> cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,476,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,477,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,478,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,479,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,480,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,481,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,482,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,483,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,484,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,485,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,486,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,487,* cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,488,* cos(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,489,* cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,491,* @return the cosine of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,492,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,494,public Complex cos() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,495,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,496,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,499,"return createComplex(Math.cos(real) * MathUtils.cosh(imaginary),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,500,-Math.sin(real) * MathUtils.sinh(imaginary));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,504,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,505,"* <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,506,* hyperbolic cosine</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,507,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,508,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,509,* <code> cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,510,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,511,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,512,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,513,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,514,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,515,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,516,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,517,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,518,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,519,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,520,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,521,* cosh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,522,* cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,523,* cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,525,* @return the hyperbolic cosine of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,526,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,528,public Complex cosh() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,529,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,530,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,533,"return createComplex(MathUtils.cosh(real) * Math.cos(imaginary),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,534,MathUtils.sinh(real) * Math.sin(imaginary));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,538,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,539,"* <a href=""http://mathworld.wolfram.com/ExponentialFunction.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,540,* exponential function</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,541,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,542,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,543,* <code> exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,544,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,545,"* {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,546,* {@link java.lang.Math#sin}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,547,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,548,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,549,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,550,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,551,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,552,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,553,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,554,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,555,* exp(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,556,* exp(INFINITY + i) = INFINITY + INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,557,* exp(-INFINITY + i) = 0 + 0i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,558,* exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,560,* @return <i>e</i><sup><code>this</code></sup>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,561,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,563,public Complex exp() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,564,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,565,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,568,double expReal = Math.exp(real);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,569,"return createComplex(expReal *  Math.cos(imaginary), expReal * Math.sin(imaginary));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,573,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,574,"* <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,575,* natural logarithm</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,576,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,577,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,578,* <code> log(a + bi) = ln(|a + bi|) + arg(a + bi)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,579,"* where ln on the right hand side is {@link java.lang.Math#log},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,580,"* <code>|a + bi|</code> is the modulus, {@link Complex#abs},  and"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,581,"* <code>arg(a + bi) = {@link java.lang.Math#atan2}(b, a)</code>"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,582,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,583,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,584,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,585,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,586,* Infinite (or critical) values in real or imaginary parts of the input may
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,587,* result in infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,588,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,589,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,590,* log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,591,* log(INFINITY + i) = INFINITY + 0i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,592,* log(-INFINITY + i) = INFINITY + &pi;i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,593,* log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,594,* log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,595,* log(0 + 0i) = -INFINITY + 0i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,596,* </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,598,* @return ln of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,599,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,601,public Complex log() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,602,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,603,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,606,"return createComplex(Math.log(abs()),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,607,"Math.atan2(imaginary, real));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,611,* Returns of value of this complex number raised to the power of <code>x</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,612,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,613,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,614,* <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,615,* where <code>exp</code> and <code>log</code> are {@link #exp} and
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,616,"* {@link #log}, respectively."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,617,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,618,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,619,"* input argument is <code>NaN</code> or infinite, or if <code>y</code>"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,620,* equals {@link Complex#ZERO}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,622,* @param x the exponent.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,623,* @return <code>this</code><sup><code>x</code></sup>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,624,* @throws NullPointerException if x is null
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,625,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,627,public Complex pow(Complex x) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,628,if (x == null) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,629,throw new NullPointerException();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,631,return this.log().multiply(x).exp();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,635,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,636,"* <a href=""http://mathworld.wolfram.com/Sine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,637,* sine</a>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,638,* of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,639,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,640,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,641,* <code> sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,642,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,643,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,644,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,645,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,646,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,647,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,648,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,649,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,650,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,651,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,652,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,653,* sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,654,* sin(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,655,* sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,657,* @return the sine of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,658,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,660,public Complex sin() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,661,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,662,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,665,"return createComplex(Math.sin(real) * MathUtils.cosh(imaginary),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,666,Math.cos(real) * MathUtils.sinh(imaginary));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,670,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,671,"* <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,672,* hyperbolic sine</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,673,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,674,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,675,* <code> sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,676,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,677,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,678,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,679,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,680,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,681,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,682,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,683,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,684,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,685,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,686,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,687,* sinh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,688,* sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,689,* sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,691,* @return the hyperbolic sine of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,692,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,694,public Complex sinh() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,695,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,696,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,699,"return createComplex(MathUtils.sinh(real) * Math.cos(imaginary),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,700,MathUtils.cosh(real) * Math.sin(imaginary));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,704,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,705,"* <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,706,* square root</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,707,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,708,* Implements the following algorithm to compute <code>sqrt(a + bi)</code>:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,709,* <ol><li>Let <code>t = sqrt((|a| + |a + bi|) / 2)</code></li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,710,* <li><pre>if <code> a &#8805; 0</code> return <code>t + (b/2t)i</code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,711,*  else return <code>|b|/2t + sign(b)t i </code></pre></li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,712,* </ol>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,713,* where <ul>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,714,* <li><code>|a| = {@link Math#abs}(a)</code></li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,715,* <li><code>|a + bi| = {@link Complex#abs}(a + bi) </code></li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,716,* <li><code>sign(b) =  {@link MathUtils#indicator}(b) </code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,717,* </ul>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,718,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,719,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,720,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,721,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,722,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,723,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,724,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,725,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,726,* sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,727,* sqrt(INFINITY + i) = INFINITY + 0i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,728,* sqrt(-INFINITY + i) = 0 + INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,729,* sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,730,* sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,731,* </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,733,* @return the square root of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,734,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,736,public Complex sqrt() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,737,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,738,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,741,if (real == 0.0 && imaginary == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,742,"return createComplex(0.0, 0.0);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,745,double t = Math.sqrt((Math.abs(real) + abs()) / 2.0);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,746,if (real >= 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,747,"return createComplex(t, imaginary / (2.0 * t));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,748,} else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,749,"return createComplex(Math.abs(imaginary) / (2.0 * t),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,750,MathUtils.indicator(imaginary) * t);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,755,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,756,"* <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,757,* square root</a> of 1 - <code>this</code><sup>2</sup> for this complex
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,758,* number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,759,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,760,* Computes the result directly as
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,761,* <code>sqrt(Complex.ONE.subtract(z.multiply(z)))</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,762,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,763,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,764,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,765,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,766,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,767,* infinite or NaN values returned in parts of the result.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,769,* @return the square root of 1 - <code>this</code><sup>2</sup>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,770,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,772,public Complex sqrt1z() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,773,"return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,777,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,778,"* <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,779,* tangent</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,780,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,781,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,782,* <code>tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,783,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,784,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,785,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,786,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,787,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,788,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,789,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,790,* Infinite (or critical) values in real or imaginary parts of the input may
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,791,* result in infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,792,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,793,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,794,* tan(1 &plusmn; INFINITY i) = 0 + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,795,* tan(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,796,* tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,797,* tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,799,* @return the tangent of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,800,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,802,public Complex tan() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,803,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,804,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,807,double real2 = 2.0 * real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,808,double imaginary2 = 2.0 * imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,809,double d = Math.cos(real2) + MathUtils.cosh(imaginary2);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,811,"return createComplex(Math.sin(real2) / d, MathUtils.sinh(imaginary2) / d);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,815,* Compute the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,816,"* <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,817,* hyperbolic tangent</a> of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,818,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,819,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,820,* <code>tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,821,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,822,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,823,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,824,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,825,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,826,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,827,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,828,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,829,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,830,* Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,831,* <code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,832,* tanh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,833,* tanh(&plusmn;INFINITY + i) = NaN + 0 i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,834,* tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,835,* tanh(0 + (&pi;/2)i) = NaN + INFINITY i</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,837,* @return the hyperbolic tangent of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,838,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,840,public Complex tanh() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,841,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,842,return Complex.NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,845,double real2 = 2.0 * real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,846,double imaginary2 = 2.0 * imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,847,double d = MathUtils.cosh(real2) + Math.cos(imaginary2);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,849,"return createComplex(MathUtils.sinh(real2) / d, Math.sin(imaginary2) / d);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,853,* Create a complex number given the real and imaginary parts.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,855,* @param real the real part
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,856,* @param imaginary the imaginary part
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,857,* @return a new complex number instance
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,858,* @since 1.2
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,860,"protected Complex createComplex(double real, double imaginary) {"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,861,"return new Complex(real, imaginary);"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,63,* @deprecated use Complex.acos()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,65,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,66,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,69,eturn Complex.I.negate().multiply(log(z.add(
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,70,omplex.I.multiply(sqrt1z(z)))));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,66,return z.acos();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,83,* @deprecated use Complex.asin()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,89,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,90,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,93,eturn Complex.I.negate().multiply(log(sqrt1z(z).add(
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,94,omplex.I.multiply(z))));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,86,return z.asin();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,103,* @deprecated use Complex.atan()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,113,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,114,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,117,eturn Complex.I.multiply(
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,118,og(Complex.I.add(z).divide(Complex.I.subtract(z))))
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,119,"divide(new Complex(2.0, 0.0));"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,106,return z.atan();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,135,* @deprecated use Complex.cos()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,150,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,151,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,154,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,155,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,157,"eturn new Complex(Math.cos(a) * MathUtils.cosh(b),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,158,Math.sin(a) * MathUtils.sinh(b));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,138,return z.cos();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,167,* @deprecated use Complex.cosh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,189,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,190,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,193,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,194,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,196,"eturn new Complex(MathUtils.cosh(a) * Math.cos(b),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,197,athUtils.sinh(a) * Math.sin(b));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,170,return z.cosh();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,200,* @deprecated use Complex.exp()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,229,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,230,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,233,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,234,ouble expA = Math.exp(z.getReal());
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,235,"eturn new Complex(expA *  Math.cos(b), expA * Math.sin(b));"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,203,return z.exp();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,235,* @deprecated use Complex.log()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,269,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,270,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,273,"eturn new Complex(Math.log(z.abs()),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,274,"ath.atan2(z.getImaginary(), z.getReal()));"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,238,return z.log();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,290,* @deprecated use Complex.pow(x)
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,328,eturn exp(x.multiply(log(y)));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,293,return y.pow(x);
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,323,* @deprecated use Complex.sin()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,360,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,361,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,364,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,365,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,367,"eturn new Complex(Math.sin(a) * MathUtils.cosh(b),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,368,ath.cos(a) * MathUtils.sinh(b));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,326,return z.sin();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,354,* @deprecated use Complex.sinh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,398,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,399,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,402,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,403,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,405,"eturn new Complex(MathUtils.sinh(a) * Math.cos(b),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,406,athUtils.cosh(a) * Math.sin(b));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,357,return z.sinh();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,393,* @deprecated use Complex.sqrt()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,444,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,445,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,448,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,449,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,450,f (a == 0.0 && b == 0.0) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,451,"eturn new Complex(0.0, 0.0);"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,454,ouble t = Math.sqrt((Math.abs(a) + z.abs()) / 2.0);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,455,f (a >= 0.0) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,456,"eturn new Complex(t, b / (2.0 * t));"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,457, else {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,458,"eturn new Complex(Math.abs(b) / (2.0 * t),"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,459,athUtils.indicator(b) * t);
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,396,return z.sqrt();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,417,* @deprecated use Complex.sqrt1z()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,483,eturn sqrt(Complex.ONE.subtract(z.multiply(z)));
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,420,return z.sqrt1z();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,449,* @deprecated use Complex.tan()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,514,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,515,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,518,ouble a2 = 2.0 * z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,519,ouble b2 = 2.0 * z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,520,ouble d = Math.cos(a2) + MathUtils.cosh(b2);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,522,"eturn new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / d);"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,452,return z.tan();
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,481,* @deprecated use Complex.tanh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,553,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,554,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,557,ouble a2 = 2.0 * z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,558,ouble b2 = 2.0 * z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,559,ouble d = MathUtils.cosh(a2) + Math.cos(b2);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,561,"eturn new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / d);"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,484,return z.tanh();
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,32,private double pi = Math.PI;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,36,"private Complex infZero = new Complex(inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,37,"private Complex infNaN = new Complex(inf, nan);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,38,"private Complex infNegInf = new Complex(inf, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,39,"private Complex infInf = new Complex(inf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,41,"private Complex negInfZero = new Complex(neginf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,42,"private Complex negInfOne = new Complex(neginf, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,43,"private Complex negInfNaN = new Complex(neginf, nan);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,46,"private Complex zeroInf = new Complex(0, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,47,"private Complex zeroNaN = new Complex(0, nan);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,48,"private Complex nanInf = new Complex(nan, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,49,"private Complex nanNegInf = new Complex(nan, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,50,"private Complex nanZero = new Complex(nan, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,294,public void testAcos() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,295,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,296,"Complex expected = new Complex(0.936812, -2.30551);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,297,"TestUtils.assertEquals(expected, z.acos(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,298,"TestUtils.assertEquals(new Complex(Math.acos(0), 0),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,299,"Complex.ZERO.acos(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,302,public void testAcosInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,303,"TestUtils.assertSame(Complex.NaN, oneInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,304,"TestUtils.assertSame(Complex.NaN, oneNegInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,305,"TestUtils.assertSame(Complex.NaN, infOne.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,306,"TestUtils.assertSame(Complex.NaN, negInfOne.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,307,"TestUtils.assertSame(Complex.NaN, infInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,308,"TestUtils.assertSame(Complex.NaN, infNegInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,309,"TestUtils.assertSame(Complex.NaN, negInfInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,310,"TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,313,public void testAcosNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,314,assertTrue(Complex.NaN.acos().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,317,public void testAsin() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,318,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,319,"Complex expected = new Complex(0.633984, 2.30551);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,320,"TestUtils.assertEquals(expected, z.asin(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,323,public void testAsinNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,324,assertTrue(Complex.NaN.asin().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,327,public void testAsinInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,328,"TestUtils.assertSame(Complex.NaN, oneInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,329,"TestUtils.assertSame(Complex.NaN, oneNegInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,330,"TestUtils.assertSame(Complex.NaN, infOne.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,331,"TestUtils.assertSame(Complex.NaN, negInfOne.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,332,"TestUtils.assertSame(Complex.NaN, infInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,333,"TestUtils.assertSame(Complex.NaN, infNegInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,334,"TestUtils.assertSame(Complex.NaN, negInfInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,335,"TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,339,public void testAtan() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,340,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,341,"Complex expected = new Complex(1.44831, 0.158997);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,342,"TestUtils.assertEquals(expected, z.atan(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,345,public void testAtanInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,346,"TestUtils.assertSame(Complex.NaN, oneInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,347,"TestUtils.assertSame(Complex.NaN, oneNegInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,348,"TestUtils.assertSame(Complex.NaN, infOne.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,349,"TestUtils.assertSame(Complex.NaN, negInfOne.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,350,"TestUtils.assertSame(Complex.NaN, infInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,351,"TestUtils.assertSame(Complex.NaN, infNegInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,352,"TestUtils.assertSame(Complex.NaN, negInfInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,353,"TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,356,public void testAtanNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,357,assertTrue(Complex.NaN.atan().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,358,assertTrue(Complex.I.atan().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,361,public void testCos() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,362,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,363,"Complex expected = new Complex(-27.03495, -3.851153);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,364,"TestUtils.assertEquals(expected, z.cos(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,367,public void testCosNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,368,assertTrue(Complex.NaN.cos().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,371,public void testCosInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,372,"TestUtils.assertSame(infNegInf, oneInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,373,"TestUtils.assertSame(infInf, oneNegInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,374,"TestUtils.assertSame(Complex.NaN, infOne.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,375,"TestUtils.assertSame(Complex.NaN, negInfOne.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,376,"TestUtils.assertSame(Complex.NaN, infInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,377,"TestUtils.assertSame(Complex.NaN, infNegInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,378,"TestUtils.assertSame(Complex.NaN, negInfInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,379,"TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,382,public void testCosh() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,383,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,384,"Complex expected = new Complex(-6.58066, -7.58155);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,385,"TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,388,public void testCoshNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,389,assertTrue(Complex.NaN.cosh().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,392,public void testCoshInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,393,"TestUtils.assertSame(Complex.NaN, oneInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,394,"TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,395,"TestUtils.assertSame(infInf, infOne.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,396,"TestUtils.assertSame(infNegInf, negInfOne.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,397,"TestUtils.assertSame(Complex.NaN, infInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,398,"TestUtils.assertSame(Complex.NaN, infNegInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,399,"TestUtils.assertSame(Complex.NaN, negInfInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,400,"TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,403,public void testExp() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,404,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,405,"Complex expected = new Complex(-13.12878, -15.20078);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,406,"TestUtils.assertEquals(expected, z.exp(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,407,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,408,"Complex.ZERO.exp(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,409,"Complex iPi = Complex.I.multiply(new Complex(pi,0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,410,"TestUtils.assertEquals(Complex.ONE.negate(),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,411,"iPi.exp(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,414,public void testExpNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,415,assertTrue(Complex.NaN.exp().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,418,public void testExpInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,419,"TestUtils.assertSame(Complex.NaN, oneInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,420,"TestUtils.assertSame(Complex.NaN, oneNegInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,421,"TestUtils.assertSame(infInf, infOne.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,422,"TestUtils.assertSame(Complex.ZERO, negInfOne.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,423,"TestUtils.assertSame(Complex.NaN, infInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,424,"TestUtils.assertSame(Complex.NaN, infNegInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,425,"TestUtils.assertSame(Complex.NaN, negInfInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,426,"TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,429,public void testLog() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,430,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,431,"Complex expected = new Complex(1.60944, 0.927295);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,432,"TestUtils.assertEquals(expected, z.log(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,435,public void testLogNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,436,assertTrue(Complex.NaN.log().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,439,public void testLogInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,440,"TestUtils.assertEquals(new Complex(inf, pi / 2),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,441,"oneInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,442,"TestUtils.assertEquals(new Complex(inf, -pi / 2),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,443,"oneNegInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,444,"TestUtils.assertEquals(infZero, infOne.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,445,"TestUtils.assertEquals(new Complex(inf, pi),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,446,"negInfOne.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,447,"TestUtils.assertEquals(new Complex(inf, pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,448,"infInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,449,"TestUtils.assertEquals(new Complex(inf, -pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,450,"infNegInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,451,"TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,452,"negInfInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,453,"TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,454,"negInfNegInf.log(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,457,public void testLogZero() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,458,"TestUtils.assertSame(negInfZero, Complex.ZERO.log());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,461,public void testPow() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,462,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,463,"Complex y = new Complex(5, 6);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,464,"Complex expected = new Complex(-1.860893, 11.83677);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,465,"TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,468,public void testPowNaNBase() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,469,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,470,assertTrue(Complex.NaN.pow(x).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,473,public void testPowNaNExponent() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,474,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,475,assertTrue(x.pow(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,478,public void testPowInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,479,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,480,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,481,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,482,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,483,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,484,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,485,"TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,486,"TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,487,"TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,488,"TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,489,"TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,490,"TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,491,"TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,492,"TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,493,"TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,494,"TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,495,"TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,496,"TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,497,"TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,498,"TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,499,"TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,500,"TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,503,public void testPowZero() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,504,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,505,Complex.ZERO.pow(Complex.ONE));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,506,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,507,Complex.ZERO.pow(Complex.ZERO));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,508,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,509,Complex.ZERO.pow(Complex.I));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,510,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,511,"Complex.ONE.pow(Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,512,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,513,"Complex.I.pow(Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,514,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,515,"new Complex(-1, 3).pow(Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,518,public void testpowNull() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,519,try {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,520,Complex.ONE.pow(null);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,521,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,522,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,523,// expected
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,527,public void testSin() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,528,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,529,"Complex expected = new Complex(3.853738, -27.01681);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,530,"TestUtils.assertEquals(expected, z.sin(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,533,public void testSinInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,534,"TestUtils.assertSame(infInf, oneInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,535,"TestUtils.assertSame(infNegInf, oneNegInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,536,"TestUtils.assertSame(Complex.NaN, infOne.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,537,"TestUtils.assertSame(Complex.NaN, negInfOne.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,538,"TestUtils.assertSame(Complex.NaN, infInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,539,"TestUtils.assertSame(Complex.NaN, infNegInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,540,"TestUtils.assertSame(Complex.NaN, negInfInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,541,"TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,544,public void testSinNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,545,assertTrue(Complex.NaN.sin().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,548,public void testSinh() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,549,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,550,"Complex expected = new Complex(-6.54812, -7.61923);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,551,"TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,554,public void testSinhNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,555,assertTrue(Complex.NaN.sinh().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,558,public void testSinhInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,559,"TestUtils.assertSame(Complex.NaN, oneInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,560,"TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,561,"TestUtils.assertSame(infInf, infOne.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,562,"TestUtils.assertSame(negInfInf, negInfOne.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,563,"TestUtils.assertSame(Complex.NaN, infInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,564,"TestUtils.assertSame(Complex.NaN, infNegInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,565,"TestUtils.assertSame(Complex.NaN, negInfInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,566,"TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,569,public void testSqrtRealPositive() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,570,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,571,"Complex expected = new Complex(2, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,572,"TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,575,public void testSqrtRealZero() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,576,"Complex z = new Complex(0.0, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,577,"Complex expected = new Complex(1.41421, 1.41421);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,578,"TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,581,public void testSqrtRealNegative() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,582,"Complex z = new Complex(-3.0, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,583,"Complex expected = new Complex(1, 2);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,584,"TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,587,public void testSqrtImaginaryZero() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,588,"Complex z = new Complex(-3.0, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,589,"Complex expected = new Complex(0.0, 1.73205);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,590,"TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,593,public void testSqrtImaginaryNegative() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,594,"Complex z = new Complex(-3.0, -4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,595,"Complex expected = new Complex(1.0, -2.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,596,"TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,599,public void testSqrtPolar() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,600,double r = 1;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,601,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,602,r += i;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,603,double theta = 0;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,604,for (int j =0; j < 11; j++) {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,605,theta += pi /12;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,606,"Complex z = ComplexUtils.polar2Complex(r, theta);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,607,"Complex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,608,"TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,613,public void testSqrtNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,614,assertTrue(Complex.NaN.sqrt().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,617,public void testSqrtInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,618,"TestUtils.assertSame(infNaN, oneInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,619,"TestUtils.assertSame(infNaN, oneNegInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,620,"TestUtils.assertSame(infZero, infOne.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,621,"TestUtils.assertSame(zeroInf, negInfOne.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,622,"TestUtils.assertSame(infNaN, infInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,623,"TestUtils.assertSame(infNaN, infNegInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,624,"TestUtils.assertSame(nanInf, negInfInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,625,"TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,628,public void testSqrt1z() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,629,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,630,"Complex expected = new Complex(4.08033, -2.94094);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,631,"TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,634,public void testSqrt1zNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,635,assertTrue(Complex.NaN.sqrt1z().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,638,public void testTan() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,639,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,640,"Complex expected = new Complex(-0.000187346, 0.999356);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,641,"TestUtils.assertEquals(expected, z.tan(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,644,public void testTanNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,645,assertTrue(Complex.NaN.tan().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,648,public void testTanInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,649,"TestUtils.assertSame(zeroNaN, oneInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,650,"TestUtils.assertSame(zeroNaN, oneNegInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,651,"TestUtils.assertSame(Complex.NaN, infOne.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,652,"TestUtils.assertSame(Complex.NaN, negInfOne.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,653,"TestUtils.assertSame(Complex.NaN, infInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,654,"TestUtils.assertSame(Complex.NaN, infNegInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,655,"TestUtils.assertSame(Complex.NaN, negInfInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,656,"TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,659,public void testTanCritical() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,660,"TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,661,"TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,664,public void testTanh() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,665,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,666,"Complex expected = new Complex(1.00071, 0.00490826);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,667,"TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,670,public void testTanhNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,671,assertTrue(Complex.NaN.tanh().isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,674,public void testTanhInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,675,"TestUtils.assertSame(Complex.NaN, oneInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,676,"TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,677,"TestUtils.assertSame(nanZero, infOne.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,678,"TestUtils.assertSame(nanZero, negInfOne.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,679,"TestUtils.assertSame(Complex.NaN, infInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,680,"TestUtils.assertSame(Complex.NaN, infNegInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,681,"TestUtils.assertSame(Complex.NaN, negInfInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,682,"TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,685,public void testTanhCritical() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,686,"TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/ConvergenceException.java,src/main/java/org/apache/commons/math/exception/ConvergenceException.java,26, @since 3.0
True,src/main/java/org/apache/commons/math/exception/ConvergenceException.java,src/main/java/org/apache/commons/math/exception/ConvergenceException.java,26,* @since 2.2
False,src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java,src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java,29, @since 3.0
True,src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java,src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java,29,* @since 2.2
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,89,"EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,25,import org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,26,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,27,import org.apache.commons.math.stat.descriptive.moment.Variance;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,38,/** Strategies to use for replacing an empty cluster. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,39,public static enum EmptyClusterStrategy {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,41,/** Split the cluster with largest distance variance. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,42,"LARGEST_VARIANCE,"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,44,/** Split the cluster with largest number of points. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,45,"LARGEST_POINTS_NUMBER,"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,47,/** Create a cluster around the point farthest from its centroid. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,48,"FARTHEST_POINT,"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,50,/** Generate an error. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,51,ERROR
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,58,/** Selected strategy for empty clusters. */
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,59,private final EmptyClusterStrategy emptyStrategy;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,62,* <p>
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,63,* The default strategy for handling empty clusters that may appear during
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,64,* algorithm iterations is to split the cluster with largest distance variance.
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,65,* </p>
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,41,his.random = random;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,69,"this(random, EmptyClusterStrategy.LARGEST_VARIANCE);"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,72,/** Build a clusterer.
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,73,* @param random random generator to use for choosing initial centers
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,74,* @param emptyStrategy strategy to use for handling empty clusters that
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,75,* may appear during algorithm iterations
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,76,* @since 2.2
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,78,"public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,79,this.random        = random;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,80,this.emptyStrategy = emptyStrategy;
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,65,inal T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,66,f (!newCenter.equals(cluster.getCenter())) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,104,final T newCenter;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,105,if (cluster.getPoints().isEmpty()) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,106,switch (emptyStrategy) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,107,case LARGEST_VARIANCE :
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,108,newCenter = getPointFromLargestVarianceCluster(clusters);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,109,break;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,110,case LARGEST_POINTS_NUMBER :
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,111,newCenter = getPointFromLargestNumberCluster(clusters);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,112,break;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,113,case FARTHEST_POINT :
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,114,newCenter = getFarthestPoint(clusters);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,115,break;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,116,default :
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,117,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,120,} else {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,121,newCenter = cluster.getCenter().centroidOf(cluster.getPoints());
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,122,if (!newCenter.equals(cluster.getCenter())) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,123,clusteringChanged = true;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,201,* Get a random point from the {@link Cluster} with the largest distance variance.
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,203,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,204,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,205,* @return a random point from the selected cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,207,private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,209,double maxVariance = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,210,Cluster<T> selected = null;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,211,for (final Cluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,212,if (!cluster.getPoints().isEmpty()) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,214,// compute the distance variance of the current cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,215,final T center = cluster.getCenter();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,216,final Variance stat = new Variance();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,217,for (final T point : cluster.getPoints()) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,218,stat.increment(point.distanceFrom(center));
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,220,final double variance = stat.getResult();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,222,// select the cluster with the largest variance
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,223,if (variance > maxVariance) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,224,maxVariance = variance;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,225,selected = cluster;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,231,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,232,if (selected == null) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,233,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,236,// extract a random point from the cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,237,final List<T> selectedPoints = selected.getPoints();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,238,return selectedPoints.remove(random.nextInt(selectedPoints.size()));
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,243,* Get a random point from the {@link Cluster} with the largest number of points
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,245,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,246,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,247,* @return a random point from the selected cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,249,private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,251,int maxNumber = 0;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,252,Cluster<T> selected = null;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,253,for (final Cluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,255,// get the number of points of the current cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,256,final int number = cluster.getPoints().size();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,258,// select the cluster with the largest number of points
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,259,if (number > maxNumber) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,260,maxNumber = number;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,261,selected = cluster;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,266,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,267,if (selected == null) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,268,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,271,// extract a random point from the cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,272,final List<T> selectedPoints = selected.getPoints();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,273,return selectedPoints.remove(random.nextInt(selectedPoints.size()));
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,278,* Get the point farthest to its cluster center
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,280,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,281,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,282,* @return point farthest to its cluster center
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,284,private T getFarthestPoint(final Collection<Cluster<T>> clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,286,double maxDistance = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,287,Cluster<T> selectedCluster = null;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,288,int selectedPoint = -1;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,289,for (final Cluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,291,// get the farthest point
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,292,final T center = cluster.getCenter();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,293,final List<T> points = cluster.getPoints();
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,294,for (int i = 0; i < points.size(); ++i) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,295,final double distance = points.get(i).distanceFrom(center);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,296,if (distance > maxDistance) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,297,maxDistance     = distance;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,298,selectedCluster = cluster;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,299,selectedPoint   = i;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,305,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,306,if (selectedCluster == null) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,307,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,310,return selectedCluster.getPoints().remove(selectedPoint);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,120,@Test
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,121,public void testCertainSpace() {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,122,KMeansPlusPlusClusterer.EmptyClusterStrategy[] strategies = {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,123,"KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,124,"KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,125,KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,127,for (KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,128,KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,129,"new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l), strategy);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,130,int numberOfVariables = 27;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,131,// initialise testvalues
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,132,int position1 = 1;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,133,int position2 = position1 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,134,int position3 = position2 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,135,int position4 = position3 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,136,// testvalues will be multiplied
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,137,int multiplier = 1000000;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,139,EuclideanIntegerPoint[] breakingPoints = new EuclideanIntegerPoint[numberOfVariables];
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,140,// define the space which will break the cluster algorithm
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,141,for (int i = 0; i < numberOfVariables; i++) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,142,"int points[] = { position1, position2, position3, position4 };"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,143,// multiply the values
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,144,for (int j = 0; j < points.length; j++) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,145,points[j] = points[j] * multiplier;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,147,EuclideanIntegerPoint euclideanIntegerPoint = new EuclideanIntegerPoint(points);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,148,breakingPoints[i] = euclideanIntegerPoint;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,149,position1 = position1 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,150,position2 = position2 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,151,position3 = position3 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,152,position4 = position4 + numberOfVariables;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,155,for (int n = 2; n < 27; ++n) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,156,List<Cluster<EuclideanIntegerPoint>> clusters =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,157,"transformer.cluster(Arrays.asList(breakingPoints), n, 100);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,158,"Assert.assertEquals(n, clusters.size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,159,int sum = 0;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,160,for (Cluster<EuclideanIntegerPoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,161,sum += cluster.getPoints().size();
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,163,"Assert.assertEquals(numberOfVariables, sum);"

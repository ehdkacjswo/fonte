is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,37,"ublic double value(double x, double y)"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,37,"double value(double x, double y)"
False,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,38,"ublic double value(double x, double y, double z)"
True,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,38,"double value(double x, double y, double z)"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,23,mport org.apache.commons.math.exception.NonMonotonousSequenceException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,89, @throws NonMonotonousSequenceException if {@code x} or {@code y} are not strictly
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,90, increasing.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,88,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,89,* if {@code x} or {@code y} are not strictly increasing.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,349,/** Number of points. */
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,351,rivate final double[][] a = new double[N][N];
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,352,** Partial derivatives */
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,353,ivariateRealFunction partialDerivativeX = null;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,354,ivariateRealFunction partialDerivativeY = null;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,355,ivariateRealFunction partialDerivativeXX = null;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,356,ivariateRealFunction partialDerivativeYY = null;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,357,ivariateRealFunction partialDerivativeXY = null;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,353,private final double[][] a;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,355,/** First partial derivative along x. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,356,private BivariateRealFunction partialDerivativeX;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,358,/** First partial derivative along y. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,359,private BivariateRealFunction partialDerivativeY;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,361,/** Second partial derivative along x. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,362,private BivariateRealFunction partialDerivativeXX;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,364,/** Second partial derivative along y. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,365,private BivariateRealFunction partialDerivativeYY;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,367,/** Second crossed partial derivative. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,368,private BivariateRealFunction partialDerivativeXY;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,371,* Simple constructor.
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,362,ublic BicubicSplineFunction(double[] aV) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,374,public BicubicSplineFunction(double[] a) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,375,this.a = new double[N][N];
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,365,[i][j] = aV[i + N * j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,378,this.a[i][j] = a[i + N * j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,28,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,37, @throws NonMonotonousSequenceException if {@code x} is not sorted in
False,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,38, strict increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,38,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,39,* if {@code x} is not sorted in strict increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,import org.apache.commons.math.util.MathUtils.Order;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,58,"athUtils.checkOrder(xval, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,59,"athUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,59,"MathUtils.checkOrder(xval, Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,60,"MathUtils.checkOrder(yval, Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,38,/** Fitter for x. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,41,/** Fitter for y. */
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,62, @throws NonMonotonousSequenceException if {@code x} is not sorted in
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,63, strict increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,62,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,63,* if {@code x} is not sorted in strict increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,129,* @param dFdZ Values of the partial derivative of function with respect
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,130,* to z on every grid point.
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,158,f (xLen == 0 || yLen == 0 || z.length == 0
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,159,| f.length == 0 || f[0].length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,160,if (xLen == 0 || yLen == 0 || z.length == 0 || f.length == 0 || f[0].length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,425,/** Number of points. */
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,425,rivate static final short N2 = N * N;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,436,[i][j][k] = aV[i + N * j + N2 * k];
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,437,a[i][j][k] = aV[i + N * (j + N * k)];
False,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,42, @throws NoDataException if any of the arrays has zero length.
False,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,43, @throws DimensionMismatchException if the array lengths are inconsistent.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,42,* @throws org.apache.commons.math.exception.NoDataException if any of the arrays has zero length.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,43,* @throws org.apache.commons.math.exception.DimensionMismatchException if the array lengths are inconsistent.
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,43, @param arguments Arguments. The first element must be the requested
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,44, value that raised the exception.
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,43,* @param wrong wrong number
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,44,* @param arguments Arguments.
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,58, @param arguments Arguments. The first element must be the requested
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,59, value that raised the exception.
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,58,* @param wrong wrong number
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,59,* @param arguments Arguments.
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,47,* @param boundIsAllowed if true the maximum is included in the allowed range.
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,60,* @param boundIsAllowed if true the maximum is included in the allowed range.
False,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,65,boundIsAllowed ?
False,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,66,ocalizedFormats.NUMBER_TOO_LARGE :
False,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,67,"ocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED),"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,67,boundIsAllowed ?
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,68,LocalizedFormats.NUMBER_TOO_LARGE :
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,69,"LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,"
False,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,68,boundIsAllowed ?
False,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,69,ocalizedFormats.NUMBER_TOO_SMALL :
False,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,70,"ocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED),"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,68,boundIsAllowed ?
True,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,69,LocalizedFormats.NUMBER_TOO_SMALL :
True,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java,70,"LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,890,f(next.getValue() == 0){
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,891,dvance(next);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,890,if (next.getValue() == 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,891,advance(next);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,917,nt index = next.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,918,f(index < 0){
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,919,hrow new NoSuchElementException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,921,urrent.setIndex(index);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,922,dvance(next);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,923,eturn current;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,917,int index = next.getIndex();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,918,if (index < 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,919,throw new NoSuchElementException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,921,current.setIndex(index);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,922,advance(next);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,923,return current;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,31,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,289, the object implementing the {@link FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,288,* the object implementing the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,302, the object implementing the {@link FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,301,* the object implementing the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,79,/** Main set dimension. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,80,protected int mainSetDimension;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,88,** Main set dimension. */
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,89,rotected int mainSetDimension;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,30,* @param <T> the type of the objective function to be optimized
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,47,his.point = (point == null ? null : point.clone());
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,47,this.point = (point == null) ? null : point.clone();
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,60,his.point = (copyArray ?
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,61,point == null ? null : point.clone()) :
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,62,oint);
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,60,this.point = copyArray ?
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,61,((point == null) ? null : point.clone()) :
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,62,point;
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,70,eturn (point == null ? null : point.clone());
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,70,return (point == null) ? null : point.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,47,his.point = (point == null ? null : point.clone());
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,48,his.value = (value == null ? null : value.clone());
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,47,this.point = (point == null) ? null : point.clone();
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,48,this.value = (value == null) ? null : value.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,60,his.point = (copyArray ?
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,61,point == null ? null : point.clone()) :
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,62,oint);
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,63,his.value = (copyArray ?
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,64,value == null ? null : value.clone()) :
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,65,alue);
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,60,this.point = copyArray ?
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,61,((point == null) ? null : point.clone()) :
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,62,point;
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,63,this.value = copyArray ?
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,64,((value == null) ? null : value.clone()) :
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,65,value;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,72,eturn (point == null ? null : point.clone());
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,72,return (point == null) ? null : point.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,88,eturn (value == null ? null : value.clone());
True,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,88,return (value == null) ? null : value.clone();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,f (startConfiguration == null
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264,| startConfiguration.length != startPoint.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,if ((startConfiguration == null) ||
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264,(startConfiguration.length != startPoint.length)) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,28,mport org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,41,** Number of gradient evaluations. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,42,rivate int gradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,43,** Objective function gradient. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,44,rivate MultivariateVectorialFunction gradient;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,58,/** Number of gradient evaluations. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,59,private int gradientEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,61,/** Objective function gradient. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,62,private MultivariateVectorialFunction gradient;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,65," The convergence check is set to a {@link SimpleScalarValueChecker},"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66,"* The convergence check is set to a {@link org.apache.commons.math.optimization.SimpleScalarValueChecker},"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,23,mport org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,37," The convergence check is set to a {@link SimpleScalarValueChecker},"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,36,"* The convergence check is set to a {@link org.apache.commons.math.optimization.SimpleScalarValueChecker},"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,233, @param qrRankingThreshold threshold for QR ranking
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,233,* @param threshold threshold for QR ranking
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,235,ublic void setQRRankingThreshold(final double qrRankingThreshold) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,236,his.qrRankingThreshold = qrRankingThreshold;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,235,public void setQRRankingThreshold(final double threshold) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,236,this.qrRankingThreshold = threshold;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,21,import org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,111,witch (goal) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,112,ase MINIMIZE:
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,113,eturn (fVal < fX ? current : previous);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,114,ase MAXIMIZE:
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,115,eturn (fVal > fX ? current : previous);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,112,if (goal == GoalType.MINIMIZE) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,113,return (fVal < fX) ? current : previous;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,114,} else {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,115,return (fVal > fX) ? current : previous;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,203,* @throws OptimizationException if function cannot be evaluated at some test point
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,204,* or algorithm fails to converge
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,228, catch (Exception e) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,230,} catch (FunctionEvaluationException e) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,231,throw new OptimizationException(e);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,232,} catch (MaxIterationsExceededException e) {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,261,* @throws MaxIterationsExceededException if the maximum iteration count
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,262,* is exceeded.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,263,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,264,* the function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,30,* @since 2.2
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,33,/** Tolerance to avoid division by zero. */
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,115,* @throws MaxIterationsExceededException if the maximum iteration count
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,116,* is exceeded.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,117,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,118,* the function.
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,120,inal boolean isMinim = (goal == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,127,final boolean isMinim = goal == GoalType.MINIMIZE;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,242, @param func Function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,249,* @param f Function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,252,* @throws FunctionEvaluationException if function cannot be evaluated at x
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,50, Perform the optimization.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,52, @return the optimum.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,49,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,95,"ouble a, b;"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,91,double a;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,92,double b;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,143,f (p > q * (a - x)
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,144,& p < q * (b - x)
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,145,& Math.abs(p) < Math.abs(0.5 * q * r)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,140,if (p > q * (a - x) &&
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,141,p < q * (b - x) &&
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,142,Math.abs(p) < Math.abs(0.5 * q * r)) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,151,f (u - a < tol2
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,152,| b - u < tol2) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,148,if (u - a < tol2 || b - u < tol2) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,213,f (fu <= fw
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,214,| w == x) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,209,if (fu <= fw || w == x) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,219, else if (fu <= fv
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,220,| v == x
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,221,| v == w) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,214,} else if (fu <= fv || v == x || v == w) {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,832, @throws NumberIsTooLargException if {@code k > n}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,832,* @throws NumberIsTooLargeException if {@code k > n}.
False,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,35,** Simple constructor. */
True,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,35,/** Simple constructor.
True,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,src/main/java/org/apache/commons/math/util/DummyLocalizable.java,36,* @param source source text
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,496,inal boolean isEqual = (Math.abs(xInt - yInt) <= maxUlps);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,496,final boolean isEqual = Math.abs(xInt - yInt) <= maxUlps;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,43,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,44,* @since 2.2
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,80, Create an iterator (see {@link MultidimensionalCounter#iterator()}.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,82,* Create an iterator
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,83,* @see #iterator()
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,140, {@link MultidimensionalCounter#MultidimensionalCounter(int[])
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,143,* {@link #MultidimensionalCounter(int[])
False,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,273,inal int index = i + N * j;

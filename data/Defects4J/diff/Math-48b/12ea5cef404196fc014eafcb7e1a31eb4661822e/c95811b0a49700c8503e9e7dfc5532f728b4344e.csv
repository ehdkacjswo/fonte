is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,196,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,218,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,240,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,266,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,279,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,301,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,323,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,345,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,369,* @return built exception
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,144,* @param f the function to solve
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,267,* @param f the function to solve
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,75,* @param f the function to solve
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,93,* @param f the function to solve
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,35,/** Number of elements. */
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,38,/** Exponent parameter of the distribution. */
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,41, @param n the number of elements
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42, @param s the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,46,* @param numberOfElements the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,47,* @param exponent the exponent
False,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,19,ublic interface Fitness extends Comparable {
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,20,* Interface used to compare chromosomes.
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,21,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,22,* @since 2.0
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,24,public interface Fitness extends Comparable<Fitness> {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,105,    <li>Get nextGeneration polulation to fill from <code>current</code>
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,105,*    <li>Get nextGeneration population to fill from <code>current</code>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,79, @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189, @param main the main diagonal of the matrix
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190, @param secondary the secondary diagonal of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189,* @param main the main diagonal of the matrix (will be copied)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190,* @param secondary the secondary diagonal of the matrix (will be copied)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,201,his.main      = main;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,202,his.secondary = secondary;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,201,this.main      = main.clone();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,202,this.secondary = secondary.clone();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,"eturn new Solver(realEigenvalues, eigenvectors);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,"return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,377,** Eigenvalues. */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,rivate final double[] eigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,377,/** Real part of the realEigenvalues. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,private double[] realEigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,/** Imaginary part of the realEigenvalues. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,381,private double[] imagEigenvalues;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,385, @param realEigenvalues realEigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,388,* @param realEigenvalues real parts of the eigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,389,* @param imagEigenvalues imaginary parts of the eigenvalues
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,388,"rivate Solver(final double[] eigenvalues, final RealVectorImpl[] eigenvectors) {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,389,his.eigenvalues  = eigenvalues;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,390,his.eigenvectors = eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,392,"private Solver(final double[] realEigenvalues, final double[] imagEigenvalues,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,393,final RealVectorImpl[] eigenvectors) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,394,this.realEigenvalues = realEigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,395,this.imagEigenvalues = imagEigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,396,this.eigenvectors    = eigenvectors;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,inal int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,414,final int m = realEigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,417,inal double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423,final double s = v.dotProduct(b) / realEigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,442,inal int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,448,final int m = realEigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,451,inal double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,457,final double s = v.dotProduct(b) / realEigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,476,inal int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,final int m = realEigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,491, /= eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,s /= realEigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,507,or (double lambda : eigenvalues) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,508,f (lambda == 0) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,513,for (int i = 0; i < realEigenvalues.length; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,514,if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,526,inal int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,532,final int m = realEigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,535,nvIJ += vK[i] * vK[j] / eigenvalues[k];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,541,invIJ += vK[i] * vK[j] / realEigenvalues[k];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,821,inal int fourN1  = 4 * (n - 1);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,822,ouble sumDiag    = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,826,inal double qi = work[fourI];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,828,umDiag    += qi;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,831,inal double qi = work[fourN1];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,832,umDiag += qi;
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,47,ealMatrix getR() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,47,RealMatrix getR();
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,28,ublic interface RealMatrix {
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,30,public interface RealMatrix extends Serializable {
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,38,* @return a new matrix of the same type as the instance
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,55,ouble[] mainTridiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,55,private double[] mainTridiagonal;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,58,ouble[] secondaryTridiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,58,private double[] secondaryTridiagonal;
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,25,ublic interface RandomData {
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,26,public interface RandomData extends Serializable {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,47,** serializable version identifier */
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,47,/** Serializable version identifier. */
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,569, Performs a multi-dimensional Fourier transform on a given
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,570," array, using {@link #inversetransform2(Complex[])} and"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,569,* Performs a multi-dimensional Fourier transform on a given array.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,570,* Use {@link #inversetransform2(Complex[])} and
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,577, @param forward inverseTransform2 is preformed if this is false
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,578,* @param forward inverseTransform2 is preformed if this is false
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,579,* @return transform of mdca as a Multi-Dimensional Complex Array id est Complex[][][][]
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,594,* Performs one dimension of a multi-dimensional Fourier transform.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,596,* @param mdcm input matrix
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,597,* @param forward inverseTransform2 is preformed if this is false
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,598,* @param d index of the dimension to process
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,599,* @param subVector recursion subvector
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,600,* @throws MathException if any dimension is not a power of two
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,633, not designed for synchronized access
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,643,* Complex matrix implementation.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,644,* Not designed for synchronized access
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,652,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,655,/** Size in all dimensions. */
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,658,/** Storage array. */
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,661,/** Simple constructor.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,662,* @param multiDimensionalComplexArray array containing the matrix elements
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,693,* Get a matrix element.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,694,* @param vector indices of the element
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,695,* @return matrix element
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,675,ector.length != dimensionSize.length) {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,676,"hrow new IllegalArgumentException(""Number of dimensions must """
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,677," ""match"");"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,699,(vector != null && vector.length != dimensionSize.length)) {
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,700,"throw new IllegalArgumentException(""Number of dimensions must match"");"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,712,* Set a matrix element.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,713,* @param magnitude magnitude of the element
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,714,* @param vector indices of the element
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,715,* @return the previous value
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,690,ector.length != dimensionSize.length) {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,691,"hrow new IllegalArgumentException(""Number of dimensions must """
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,692," ""match"");"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,719,(vector != null && vector.length != dimensionSize.length)) {
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,720,"throw new IllegalArgumentException(""Number of dimensions must match"");"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,737,* Get the size in all dimensions.
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,738,* @return size in all dimensions
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,745,* Get the underlying storage array
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,746,* @return underlying storage array
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,752,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,764,* @param mdcm array where to copy data
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,457,inal int referenceCount;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,457,private final int referenceCount;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,254, @param original
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,254,* @param original array to copy
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,849,oolean result = true;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,850,esizableDoubleArray other = (ResizableDoubleArray) object;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,851,esult = result && (other.initialCapacity == initialCapacity);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,852,esult = result && (other.contractionCriteria == contractionCriteria);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,853,esult = result && (other.expansionFactor == expansionFactor);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,854,esult = result && (other.expansionMode == expansionMode);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,855,esult = result && (other.numElements == numElements);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,856,esult = result && (other.startIndex == startIndex);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,857,f (!result) {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,858,eturn false;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,859, else {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,860,"eturn Arrays.equals(internalArray, other.internalArray);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,849,synchronized(this) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,850,synchronized(object) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,851,boolean result = true;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,852,ResizableDoubleArray other = (ResizableDoubleArray) object;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,853,result = result && (other.initialCapacity == initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,854,result = result && (other.contractionCriteria == contractionCriteria);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,855,result = result && (other.expansionFactor == expansionFactor);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,856,result = result && (other.expansionMode == expansionMode);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,857,result = result && (other.numElements == numElements);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,858,result = result && (other.startIndex == startIndex);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,859,if (!result) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,860,return false;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,861,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,862,"return Arrays.equals(internalArray, other.internalArray);"

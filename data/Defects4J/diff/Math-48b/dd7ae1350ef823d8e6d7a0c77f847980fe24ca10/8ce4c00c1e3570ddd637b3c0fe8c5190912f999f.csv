is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,342,// org.apache.commons.math.transform.FastHadamardTransformer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,343,"{ ""{0} is not a power of 2"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,344,"""{0} n''est pas une puissance de 2"" },"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,17,package org.apache.commons.math.transform;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,24,"* Implements the <a href=""http://www.archive.chipcenter.com/dsp/DSP000517F1.html"">Fast Hadamard Transform</a> (FHT)."
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,25,* Transformation of an input vector x to the output vector y.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,27,* @since 2.0
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,29,public class FastHadamardTransformer implements Serializable {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,32,private static final long serialVersionUID = 5044269102877526860L;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,35,* Wrapper method for fht() for double vectors
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,37,* @param x input vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,38,* @return y output vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,39,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,41,public double[] transform(double x[]) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,42,return fht(x);
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,47,* The FHT (Fast Hadamard Transformation) which uses only subtraction and addition.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,48,* <br>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,49,* Requires <b>Nlog2N = n2</b><sup>n</sup> additions.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,50,* <br>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,51,* <br>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,52,* <b><u>Short Table of manual calculation for N=8:</u></b>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,53,* <ol>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,54,* <li><b>x</b> is the input vector we want to transform</li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,55,* <li><b>y</b> is the output vector which is our desired result</li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,56,* <li>a and b are just helper rows</li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,57,* </ol>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,58,* <pre>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,59,* <code>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,61,* | <b>x</b>  |    <b>a</b>     |    <b>b</b>    |    <b>y</b>     |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,63,* | x<sub>0</sub> | a<sub>0</sub>=x<sub>0</sub>+x<sub>1</sub> | b<sub>0</sub>=a<sub>0</sub>+a<sub>1</sub> | y<sub>0</sub>=b<sub>0</sub>+b<sub>1</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,65,* | x<sub>1</sub> | a<sub>1</sub>=x<sub>2</sub>+x<sub>3</sub> | b<sub>0</sub>=a<sub>2</sub>+a<sub>3</sub> | y<sub>0</sub>=b<sub>2</sub>+b<sub>3</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,67,* | x<sub>2</sub> | a<sub>2</sub>=x<sub>4</sub>+x<sub>5</sub> | b<sub>0</sub>=a<sub>4</sub>+a<sub>5</sub> | y<sub>0</sub>=b<sub>4</sub>+b<sub>5</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,69,* | x<sub>3</sub> | a<sub>3</sub>=x<sub>6</sub>+x<sub>7</sub> | b<sub>0</sub>=a<sub>6</sub>+a<sub>7</sub> | y<sub>0</sub>=b<sub>6</sub>+b<sub>7</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,71,* | x<sub>4</sub> | a<sub>0</sub>=x<sub>0</sub>-x<sub>1</sub> | b<sub>0</sub>=a<sub>0</sub>-a<sub>1</sub> | y<sub>0</sub>=b<sub>0</sub>-b<sub>1</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,73,* | x<sub>5</sub> | a<sub>1</sub>=x<sub>2</sub>-x<sub>3</sub> | b<sub>0</sub>=a<sub>2</sub>-a<sub>3</sub> | y<sub>0</sub>=b<sub>2</sub>-b<sub>3</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,75,* | x<sub>6</sub> | a<sub>2</sub>=x<sub>4</sub>-x<sub>5</sub> | b<sub>0</sub>=a<sub>4</sub>-a<sub>5</sub> | y<sub>0</sub>=b<sub>4</sub>-b<sub>5</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,77,* | x<sub>7</sub> | a<sub>3</sub>=x<sub>6</sub>-x<sub>7</sub> | b<sub>0</sub>=a<sub>6</sub>-a<sub>7</sub> | y<sub>0</sub>=b<sub>6</sub>-b<sub>7</sub> |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,79,* </code>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,80,* </pre>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,82,* <b><u>How it works</u></b>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,83,* <ol>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,84,* <li>Construct a matrix with N rows and n+1 columns<br>   <b>hadm[n+1][N]</b>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,85,* <br><i>(If I use [x][y] it always means [row-offset][column-offset] of a Matrix with n rows and m columns. Its entries go from M[0][0] to M[n][m])</i></li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,86,* <li>Place the input vector <b>x[N]</b> in the first column of the matrix <b>hadm</b></li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,87,* <li>The entries of the submatrix D<sub>top</sub> are calculated as follows.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,88,* <br>D<sub>top</sub> goes from entry [0][1] to [N/2-1][n+1].
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,89,* <br>The columns of D<sub>top</sub> are the pairwise mutually exclusive sums of the previous column
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,90,* </li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,91,* <li>The entries of the submatrix D<sub>bottom</sub> are calculated as follows.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,92,* <br>D<sub>bottom</sub> goes from entry [N/2][1] to [N][n+1].
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,93,* <br>The columns of D<sub>bottom</sub> are the pairwise differences of the previous column
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,94,* </li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,95,* <li>How D<sub>top</sub> and D<sub>bottom</sub> you can understand best with the example for N=8 above.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,96,* <li>The output vector y is now in the last column of <b>hadm</b></li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,97,* <li><i>Algorithm from: http://www.archive.chipcenter.com/dsp/DSP000517F1.html</i></li>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,98,* </ol>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,99,* <br>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,100,* <b><u>Visually</u></b>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,101,* <pre>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,103,*        |   0    | 1 | 2 | 3 | ... |n+1|
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,105,* |0     | x<sub>0</sub>     |       /\            |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,106,* |1     | x<sub>1</sub>     |       ||            |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,107,* |2     | x<sub>2</sub>     |   <= D<sub>top</sub>  =>       |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,109,* |N/2-1 | x<sub>N/2-1</sub>  |       \/            |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,111,* |N/2   | x<sub>N/2</sub>   |       /\            |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,112,* |N/2+1 | x<sub>N/2+1</sub>  |       ||            |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,113,* |N/2+2 | x<sub>N/2+2</sub>  |  <= D<sub>bottom</sub>  =>      | which is in the last column of the matrix
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,115,* |N     | x<sub>N/2</sub>   |        \/           |
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,117,* </pre>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,119,* @param x input vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,120,* @return y output vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,121,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,123,protected double[] fht(double x[]) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,125,// n is the row count of the input vector x
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,126,int n = x.length;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,128,// n has to be of the form n = 2^p !!
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,129,int p    = 0;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,130,int twoP = 1;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,131,while (twoP < n) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,132,++p;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,133,twoP *= 2;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,135,if (n != twoP) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,136,"throw MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2"","
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,137,new Object[] { n });
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,140,// Instead of creating a matrix with p+1 columns and n rows
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,141,// we will use two single dimension arrays which we will use in an alternating way.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,142,double[] yPrevious = new double[n];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,143,double[] yCurrent  = x.clone();
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,145,// iterate from left to right (column)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,146,for (int j = 0; j < p; j++) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,148,// switch columns
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,149,final double[] yTmp = yCurrent;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,150,yCurrent  = yPrevious;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,151,yPrevious = yTmp;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,153,// iterate from top to bottom (row)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,154,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,155,if (i < n / 2) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,156,// D<sub>top</sub>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,157,// The top part works with addition
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,158,yCurrent[i] = yPrevious[i*2] + yPrevious[i*2 +1];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,159,} else {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,160,// D<sub>bottom</sub>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,161,// The bottom part works with subtraction
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,162,yCurrent[i] = yPrevious[(i-n/2)*2] - yPrevious[(i-n/2)*2 +1];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,167,// return the last computed output vector y
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,168,return yCurrent;
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,17,package org.apache.commons.math.transform;
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,22,* JUnit Test for HadamardTransformerTest
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,23,* @see org.apache.commons.math.transform.FastHadamardTransformer
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,25,public final class FastHadamardTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,28,* Test of transformer for the a 8-point FHT (means n=8)
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,30,public void test8Points() {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,31,"checkTransform(new double[] { 1.0, 4.0, -2.0, 3.0, 0.0, 1.0, 4.0, -1.0 },"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,32,"new double[] { 10.0, -4.0, 2.0, -4.0, 2.0, -12.0, 6.0, 8.0 });"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,36,* Test of transformer for the a 4-points FHT (means n=4)
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,38,public void test4Points() {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,39,"checkTransform(new double[] { 1.0, 2.0, 3.0, 4.0 },"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,40,"new double[] { 10.0, -2.0, -4.0, 0.0 });"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,44,* Test of transformer for wrong number of points
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,46,public void test3Points() {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,47,try {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,48,new FastHadamardTransformer().transform(new double[3]);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,49,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,50,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,51,// expected
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,55,"private void checkTransform(double[]x, double[] y) {"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,56,// Initiate the transformer
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,57,FastHadamardTransformer transformer = new FastHadamardTransformer();
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,59,// transform input vector x to output vector
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,60,double result[] = transformer.transform(x);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,62,for (int i=0;i<result.length;i++) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,63,// compare computed results to precomputed results
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,64,"assertEquals(y[i], result[i]);"

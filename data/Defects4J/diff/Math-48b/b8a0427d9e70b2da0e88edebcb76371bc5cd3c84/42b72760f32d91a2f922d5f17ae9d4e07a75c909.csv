is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,18,package org.apache.commons.math.analysis.function;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,21,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,22,import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,25,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,28,"* <a href=""http://en.wikipedia.org/wiki/Harmonic_oscillator"">"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,29,*  simple harmonic oscillator</a> function.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,31,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,32,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,34,public class HarmonicOscillator implements DifferentiableUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,35,/** Amplitude. */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,36,private final double amplitude;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,37,/** Angular requency. */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,38,private final double omega;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,39,/** Phase. */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,40,private final double phase;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,43,* Harmonic oscillator function.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,45,* @param amplitude Amplitude.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,46,* @param omega Angular frequency.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,47,* @param phase Phase.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,49,"public HarmonicOscillator(double amplitude,"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,50,"double omega,"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,51,double phase) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,52,this.amplitude = amplitude;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,53,this.omega = omega;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,54,this.phase = phase;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,57,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,58,public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,59,"return value(omega * x + phase, amplitude);"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,62,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,63,public UnivariateRealFunction derivative() {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,64,return new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,65,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,66,public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,67,return -amplitude * omega * FastMath.sin(omega * x + phase);
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,73,* Parametric function where the input array contains the parameters of
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,74,"* the harmonic oscillator function, ordered as follows:"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,75,* <ul>
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,76,*  <li>Amplitude</li>
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,77,*  <li>Angular frequency</li>
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,78,*  <li>Phase</li>
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,79,* </ul>
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,81,public static class Parametric implements ParametricUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,83,* Computes the value of the harmonic oscillator at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,85,* @param x Value for which the function must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,86,"* @param param Values of norm, mean and standard deviation."
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,87,* @return the value of the function.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,88,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,89,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,90,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,92,"public double value(double x,"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,93,double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,94,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,95,"return HarmonicOscillator.value(x * param[1] + param[2], param[0]);"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,99,* Computes the value of the gradient at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,100,* The components of the gradient vector are the partial
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,101,* derivatives of the function with respect to each of the
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,102,"* <em>parameters</em> (amplitude, angular frequency and phase)."
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,104,* @param x Value at which the gradient must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,105,"* @param param Values of amplitude, angular frequency and phase."
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,106,* @return the gradient vector at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,107,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,108,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,109,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,111,"public double[] gradient(double x, double[] param) {"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,112,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,114,final double amplitude = param[0];
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,115,final double omega = param[1];
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,116,final double phase = param[2];
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,118,final double xTimesOmegaPlusPhase = omega * x + phase;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,119,"final double a = HarmonicOscillator.value(xTimesOmegaPlusPhase, 1);"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,120,final double p = -amplitude * FastMath.sin(xTimesOmegaPlusPhase);
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,121,final double w = p * x;
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,123,"return new double[] { a, w, p };"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,127,* Validates parameters to ensure they are appropriate for the evaluation of
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,128,"* the {@link #value(double,double[])} and {@link #gradient(double,double[])}"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,129,* methods.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,131,"* @param param Values of norm, mean and standard deviation."
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,132,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,133,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,134,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,136,private void validateParameters(double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,137,if (param == null) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,138,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,140,if (param.length != 3) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,141,"throw new DimensionMismatchException(param.length, 3);"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,147,* @param xTimesOmegaPlusPhase {@code omega * x + phase}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,148,* @param amplitude Amplitude.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,149,* @return the value of the harmonic oscillator function at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,151,"private static double value(double xTimesOmegaPlusPhase,"
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,152,double amplitude) {
True,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java,153,return amplitude * FastMath.cos(xTimesOmegaPlusPhase);
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,18,package org.apache.commons.math.analysis.function;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,22,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,24,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,30,* Test for class {@link HarmonicOscillator}.
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,32,public class HarmonicOscillatorTest {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,33,private final double EPS = Math.ulp(1d);
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,35,@Test
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,36,public void testSomeValues() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,37,final double a = -1.2;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,38,final double w = 0.34;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,39,final double p = 5.6;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,40,"final UnivariateRealFunction f = new HarmonicOscillator(a, w, p);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,42,final double d = 0.12345;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,43,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,44,final double v = i * d;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,45,"Assert.assertEquals(a * FastMath.cos(w * v + p), f.value(v), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,49,@Test
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,50,public void testDerivative() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,51,final double a = -1.2;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,52,final double w = 0.34;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,53,final double p = 5.6;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,54,"final HarmonicOscillator f = new HarmonicOscillator(a, w, p);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,55,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,57,final double d = 0.12345;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,58,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,59,final double v = i * d;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,60,"Assert.assertEquals(-a * w * FastMath.sin(w * v + p), dfdx.value(v), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,64,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,65,public void testParametricUsage1() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,66,final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,67,"g.value(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,70,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,71,public void testParametricUsage2() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,72,final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,73,"g.value(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,76,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,77,public void testParametricUsage3() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,78,final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,79,"g.gradient(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,82,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,83,public void testParametricUsage4() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,84,final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,85,"g.gradient(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,88,@Test
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,89,public void testParametricValue() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,90,final double amplitude = 2;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,91,final double omega = 3;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,92,final double phase = 4;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,93,"final HarmonicOscillator f = new HarmonicOscillator(amplitude, omega, phase);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,95,final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,96,"Assert.assertEquals(f.value(-1), g.value(-1, new double[] {amplitude, omega, phase}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,97,"Assert.assertEquals(f.value(0), g.value(0, new double[] {amplitude, omega, phase}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,98,"Assert.assertEquals(f.value(2), g.value(2, new double[] {amplitude, omega, phase}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,101,@Test
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,102,public void testParametricGradient() {
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,103,final double amplitude = 2;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,104,final double omega = 3;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,105,final double phase = 4;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,106,final HarmonicOscillator.Parametric f = new HarmonicOscillator.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,108,final double x = 1;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,109,"final double[] grad = f.gradient(1, new double[] {amplitude, omega, phase});"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,110,final double xTimesOmegaPlusPhase = omega * x + phase;
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,111,final double a = FastMath.cos(xTimesOmegaPlusPhase);
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,112,"Assert.assertEquals(a, grad[0], EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,113,final double w = -amplitude * x * FastMath.sin(xTimesOmegaPlusPhase);
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,114,"Assert.assertEquals(w, grad[1], EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,115,final double p = -amplitude * FastMath.sin(xTimesOmegaPlusPhase);
True,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math/analysis/function/HarmonicOscillatorTest.java,116,"Assert.assertEquals(p, grad[2], EPS);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,68,rotected boolean clearOnEval = true;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,70,rotected boolean init = true;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,77,"ublic double evaluate(double[] d, int start, int length) {"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,79,f (clearOnEval)
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,73,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,74,"if (this.test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,82,or (int i = start; i < start + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,83,ncrement(d[i]);
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,76,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,77,increment(values[i]);
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,90, Implement this delegated internalClear()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,91, to cleanup the state of your implementation on clear().
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,93,rotected abstract void internalClear();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,96, This implementation is finalized so the implementor does not have to manage
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,97, clearing its state. They just need to implement their delegated internalClear()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,98, to cleanup the state of their implementation on clear().
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,100, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,102,ublic final void clear(){
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,103,nit = true;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,104,nternalClear();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,108, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#isClearOnEval()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,110,ublic boolean isClearOnEval() {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,111,eturn clearOnEval;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,115, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#setClearOnEval(boolean)
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,117,ublic void setClearOnEval(boolean b) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,118,learOnEval = b;
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,72,ublic double evaluate(double[] d) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,73,"eturn evaluate(d, 0, d.length);"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,72,public double evaluate(double[] values) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,73,"return evaluate(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,77, Subclasses of AbstractUnivariateStatistc need to implementation this method.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,77,* Subclasses of AbstractUnivariateStatistc need to implement this method.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,80,"ublic abstract double evaluate(double[] d, int start, int length);"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,80,"public abstract double evaluate(double[] values, int begin, int length);"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,89,"rotected void test(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,89,"protected boolean test(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,100,if (values.length == 0 || length == 0)
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,101,return false;
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,103,return true;
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,93,ublic boolean isClearOnEval();
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,94,//public boolean isClearOnEval();
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,103,ublic void setClearOnEval(boolean b);
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,104,//public void setClearOnEval(boolean b);
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,81,"ublic double evaluate(double[] d, int begin, int length);"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,81,"public double evaluate(double[] values, int begin, int length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,68,ublic class FourthMoment extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,70,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,71,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,73,** first moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,74,rotected double m1 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,76,** second moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,77,rotected double m2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,79,** third moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,80,rotected double m3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,60,public class FourthMoment extends ThirdMoment {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,125, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,127,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,128, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,129,1 = m2 = m3 = m4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,105,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,107,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,108,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,109,m4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,62,ublic class GeometricMean extends SumOfLogs {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,63,public class GeometricMean extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,64,rotected double geomean = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,65,private SumOfLogs sumLog = new SumOfLogs();
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,66,rotected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,67,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,69,private int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,73,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,74,eomean = Math.exp( sumLog / (double)n );
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,75,eturn geomean;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,76,sumLog.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,77,value = Math.exp( sumLog.increment(d) / (double)n );
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,78,return value;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,82,eturn geomean;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,85,return value;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,86, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,88,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,89,eomean = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,89,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,91,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,92,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,93,sumLog.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,98,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,100,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,101,"return Math.exp(sumLog.evaluate(values, begin, length) / (double) length );"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,61,rotected double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,61,private double kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,88, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,90,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,91,uper.internalClear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,88,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,90,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,91,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,96,* Returns the kurtosis for this collection of values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,97,"* measure of the ""peakedness"" of a distribution."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,98,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,99,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,100,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,101,* @return the kurtosis of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,103,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,104,"test(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,106,// Initialize the kurtosis
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,107,double kurt = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,109,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,110,"double mean = super.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,112,"// Calc the std, this is implemented here instead of using the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,113,// standardDeviation method eliminate a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,114,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,115,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,116,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,117,"accum += Math.pow((values[i] - mean), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,118,accum2 += (values[i] - mean);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,121,double stdDev =
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,122,Math.sqrt(
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,123,"(accum - (Math.pow(accum2, 2) / ((double) length)))"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,124,/ (double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,126,// Sum the ^4 of the distance from the mean divided by the
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,127,// standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,128,double accum3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,129,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,130,"accum3 += Math.pow((values[i] - mean) / stdDev, 4.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,133,// Get N
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,134,double n = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,136,double coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,137,"double termTwo = ((3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,139,// Calculate kurtosis
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,140,kurt = (coefficientOne * accum3) - termTwo;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,142,return kurt;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,57,import org.apache.commons.math.stat.univariate.summary.Sum;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,64,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,66,protected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,67,rivate double m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,69,protected double m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,71,private Sum sum = new Sum();
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,74,1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,78,m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,89,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,90,m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,91,n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,91, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,93,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,94,1 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,95, = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,102,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,104,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,105,"if(test(values,begin,length))"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,106,"return sum.evaluate(values, begin, length) / ((double) length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,107,return Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,62,.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,62,ublic class SecondMoment extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,64,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,65,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,67,** first moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,68,rotected double m1 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,68,public class SecondMoment extends Mean {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,78,2 = m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,78,m1 = m2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,85,1 += v;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,86,2 += (n - 1) * dev * v;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,86,m2 += ((double)(n - 1)) * dev * v;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,87,m1 += v;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,92, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,93,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,94,ublic double getValue() {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,95,eturn m2;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,95,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,96,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,97,m2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,99, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,101,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,101,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,102,2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,103, = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,103,public double getValue() {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,104,return m2;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,62,rotected double skewness = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,62,private double skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,90, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,92,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,93,uper.internalClear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,92,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,93,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,98,* Returns the skewness of a collection of values.  Skewness is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,99,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,100,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,101,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,102,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,103,* @return the skewness of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,105,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,107,"test(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,109,// Initialize the skewness
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,110,double skew = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,112,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,113,"double mean = super.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,115,"// Calc the std, this is implemented here instead of using the"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,116,// standardDeviation method eliminate a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,117,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,118,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,119,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,120,"accum += Math.pow((values[i] - mean), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,121,accum2 += (values[i] - mean);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,123,double stdDev =
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,124,Math.sqrt(
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,125,"(accum - (Math.pow(accum2, 2) / ((double) length)))"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,126,/ (double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,128,// Calculate the skew as the sum the cubes of the distance
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,129,// from the mean divided by the standard deviation.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,130,double accum3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,131,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,132,"accum3 += Math.pow((values[i] - mean) / stdDev, 3.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,135,// Get N
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,136,double n = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,138,// Calculate skewness
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,139,skew = (n / ((n - 1) * (n - 2))) * accum3;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,141,return skew;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,56,import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,60,ublic class StandardDeviation extends Variance {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,62,public class StandardDeviation extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,62,rotected double std = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,64,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,66,private Variance var = new Variance();
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,68,td = Math.sqrt(super.increment(d));
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,69,eturn std;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,72,var.increment(d);
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,73,value = Math.sqrt(var.getValue());
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,74,return value;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,76,eturn std;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,81,return value;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,80, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,82,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,83,uper.internalClear();
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,84,td = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,85,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,87,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,88,var.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,89,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,92,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,93,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,95,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,96,"double tmp = var.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,97,return tmp != 0.0 ? Math.sqrt(tmp) : 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,62,ublic class ThirdMoment extends AbstractStorelessUnivariateStatistic{
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,64,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,65,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,67,** first moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,68,rotected double m1 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,70,** second moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,71,rotected double m2 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,60,public class ThirdMoment extends SecondMoment{
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,111, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,101,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,113,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,114, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,115,1 = m2 = m3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,103,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,104,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,105,m3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62,.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62,rotected double variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,70,private double variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,69,ariance = (n <= 1) ? 0.0 : m2 / (double) (n - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,78,variance = (n < 1) ? 0.0 : m2 / (double)(n - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,81, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,91,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,83,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,84,uper.internalClear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,93,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,94,super.clear();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,98,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,99,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,101,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,102,double var = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,103,if (values.length == 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,104,var = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,105,} else if (values.length > 1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,106,"double m = super.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,107,double accum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,108,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,109,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,110,"accum += Math.pow((values[i] - m), 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,111,accum2 += (values[i] - m);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,113,var =
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,114,"(accum - (Math.pow(accum2, 2) / ((double) length)))"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,115,/ (double) (length - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,117,return var;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,62,.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,63,ouble value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,69,private double value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,79,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,81,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,82,value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,80, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,92,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,93,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,82,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,83,alue = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,95,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,96,double max = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,97,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,98,max = values[begin];
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,99,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,100,max = (max > values[i]) ? max : values[i];
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,103,return max;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,62,.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,63,ouble value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,69,private double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,69,"eturn value = Double.isNaN(value) ? d : Math.min(value, d);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,75,"value = Double.isNaN(value) ? d : Math.min(value, d);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,76,return value;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,80,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,82,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,83,value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,80, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,94,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,82,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,83,alue = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,96,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,97,double min = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,98,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,99,min = values[begin];
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,100,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,101,min = (min < values[i]) ? min : values[i];
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,104,return min;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,89, @param d Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,89,* @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,94,"ublic double evaluate(double[] d, double p) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,95,"eturn evaluate(d, 0,d.length, p);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,94,"public double evaluate(double[] values, double p) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,95,"return evaluate(values, 0,values.length, p);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,101,"ublic double evaluate(double[] d, int start, int length) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,102,"eturn evaluate(d, start, length, percentile);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,101,"public double evaluate(double[] values, int start, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,102,"return evaluate(values, start, length, percentile);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,109, @param d Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,109,* @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116,"ublic double evaluate(double[] d, int start, int length, double p) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116,"public double evaluate(double[] values, int begin, int length, double p) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,118,"est(d,start,length);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,118,"test(values,begin,length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,128,eturn d[start]; // always return single value for n = 1
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,128,return values[begin]; // always return single value for n = 1
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,135,"ystem.arraycopy(d, start,sorted, 0, length);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,135,"System.arraycopy(values, begin,sorted, 0, length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,161, @param d a value between 0 <= p <= 100
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,161,* @param p a value between 0 <= p <= 100
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,72,ouble product = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,72,private double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,78,f (init) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,79,nit = false;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,80,roduct = d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,78,if (Double.isNaN(value)) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,79,value = d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,82,roduct *= d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,81,value *= d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,85,eturn product;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,84,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,92,eturn product;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,91,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,96, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,95,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,98,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,99,roduct = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,97,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,98,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,102,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,104,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,105,double product = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,106,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,107,product = 1.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,108,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,109,product *= values[i];
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,112,return product;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,73,rotected double sum = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,73,private double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,79,f (init) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,80,nit = false;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,81,um = d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,79,if (Double.isNaN(value )) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,80,value  = d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,83,um += d;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,82,value  += d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,85,eturn sum;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,84,return value ;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,92,eturn sum;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,91,return value;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,95,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,97,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,98,value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,96, @see org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic#internalClear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,102,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,98,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,99,um = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,104,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,105,double sum = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,106,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,107,sum = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,108,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,109,sum += values[i];
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,112,return sum;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,71, The currently running sumLog
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,71,* The currently running value
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,73,rotected double sumLog = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,73,private double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,79,f (init) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,80,umLog = Math.log(d);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,81,nit = false;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,79,if (Double.isNaN(value )) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,80,value = Math.log(d);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,83,umLog += Math.log(d);
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,82,value += Math.log(d);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,86,eturn sumLog;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,85,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,93,eturn sumLog;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,92,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,99,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,100,umLog = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,98,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,99,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,103,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,105,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,106,double sumLog = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,107,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,108,sumLog = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,109,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,110,sumLog += Math.log(values[i]);
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,113,return sumLog;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,73,rotected double sumSq = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,73,private double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,79,f (init) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,80,nit = false;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,81,umSq = d * d;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,79,if (Double.isNaN(value )) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,80,value = d * d;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,83,umSq += d * d;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,82,value += d * d;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,85,eturn sumSq;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,84,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,92,eturn sumSq;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,91,return value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,98,rotected void internalClear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,99,umSq = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,97,public void clear() {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,98,value = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,102,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,104,"public double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,105,double sumSq = Double.NaN;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,106,"if (test(values, begin, length)) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,107,sumSq = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,108,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,109,"sumSq += Math.pow(values[i], 2.0);"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,112,return sumSq;

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,22,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,29,mport org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math.optimization.VectorialDifferentiableOptimizer;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,31,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,41,ublic abstract class AbstractLeastSquaresOptimizer implements VectorialDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,42,public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,80,rivate VectorialDifferentiableObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,81,private DifferentiableMultivariateVectorialFunction f;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,83,/** Objective function derivatives. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,84,private MultivariateMatrixFunction jF;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,88,** Current variables set. */
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,89,rotected double[] variables;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,92,/** Current point. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,93,protected double[] point;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,159, @exception ObjectiveException if the function jacobian
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,163,* @exception FunctionEvaluationException if the function jacobian
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,162,rotected void updateJacobian() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,166,protected void updateJacobian() throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,164,"acobian = f.jacobian(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,168,jacobian = jF.value(point);
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,166,"hrow new ObjectiveException(""dimension mismatch {0} != {1}"","
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,167,"acobian.length, rows);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,170,"throw new FunctionEvaluationException(point, ""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,171,"jacobian.length, rows);"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180, @exception ObjectiveException if the function cannot be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,184,* @exception FunctionEvaluationException if the function cannot be evaluated
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,184,hrows ObjectiveException {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,188,throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,187,bjective = f.objective(variables);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,191,objective = f.value(point);
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,189,"hrow new ObjectiveException(""dimension mismatch {0} != {1}"","
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,190,"bjective.length, rows);"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,193,"throw new FunctionEvaluationException(point, ""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,194,"objective.length, rows);"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,237, @exception ObjectiveException if the function jacobian cannot
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,241,* @exception FunctionEvaluationException if the function jacobian cannot
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,243,"hrows ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,247,"throws FunctionEvaluationException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,276, @exception ObjectiveException if the function jacobian cannot b evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,280,* @exception FunctionEvaluationException if the function jacobian cannot b evaluated
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,282,"hrows ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,286,"throws FunctionEvaluationException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,298,"ublic VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,302,"public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,301,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,305,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,319,jF             = f.jacobian();
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,317,his.variables = startPoint.clone();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,322,this.point     = startPoint.clone();
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,322,ols      = variables.length;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,327,cols      = point.length;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,333, @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,338,* @exception FunctionEvaluationException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,339,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,344,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,26,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,66,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,66,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,78,"urrent = new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,78,"current = new VectorialPointValuePair(point, objective);"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,117,ariables[i] += dX[i];
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,117,point[i] += dX[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,mport org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,30, (i.e. systems having more variables than equations). Over-determined systems
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,31, are solved by ignoring the variables which have the smallest impact according
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,30,* (i.e. systems having more point than equations). Over-determined systems
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,31,* are solved by ignoring the point which have the smallest impact according
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,107,** Number of solved variables. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,107,/** Number of solved point. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,213,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,213,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223,/ local variables
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223,// local point
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,258,/ scale the variables according to the norms of the columns
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,258,// scale the point according to the norms of the columns
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,266,ouble xk = dk * variables[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,266,double xk = dk * point[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,294,"eturn new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,294,"return new VectorialPointValuePair(point, objective);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,308,ldX[pj] = variables[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,308,oldX[pj] = point[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,323,ariables[pj] = oldX[pj] + lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,323,point[pj] = oldX[pj] + lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,387,ouble xK = diag[k] * variables[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,387,double xK = diag[k] * point[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,396,ariables[pj] = oldX[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,396,point[pj] = oldX[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,408,"eturn new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,408,"return new VectorialPointValuePair(point, objective);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,28,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,29,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,30,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,31,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,30,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,33,mport org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,105,"ublic void testTrivial() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,107,"public void testTrivial() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,118,"ublic void testColumnsPermutation() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,120,"public void testColumnsPermutation() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,138,"ublic void testNoDependency() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,140,"public void testNoDependency() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,159,"ublic void testOneSet() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,161,"public void testOneSet() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,178,"ublic void testTwoSets() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,180,"public void testTwoSets() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,225,"ublic void testIllConditioned() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,227,"public void testIllConditioned() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,306,"ublic void testRedundantEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,308,"public void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,325,"ublic void testInconsistentEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,327,"public void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,340,"ublic void testInconsistentSizes() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,342,"public void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,369, catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,371,} catch (FunctionEvaluationException oe) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,399,"ublic void testCircleFitting() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,401,"public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,420,"ublic void testCircleFittingBadInit() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,422,"public void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,480,rivate static class LinearProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,482,private static class LinearProblem implements DifferentiableMultivariateVectorialFunction {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,482,rivate static final long serialVersionUID = 703247177355019415L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,484,private static final long serialVersionUID = -8804268799379350190L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,490,"ublic double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,491,eturn factors.getData();
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,492,public double[] value(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,493,return factors.operate(variables);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,494,ublic double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,495,eturn factors.operate(variables);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,496,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,497,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,498,private static final long serialVersionUID = 1037082026387842358L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,499,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,500,return factors.getColumn(i);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,505,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,506,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,507,private static final long serialVersionUID = -3268626996728727146L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,508,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,509,return factors.getRow(i);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,500,rivate static class Circle implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,514,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,515,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,516,private static final long serialVersionUID = -8387467946663627585L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,517,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,518,return factors.getData();
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,502,rivate static final long serialVersionUID = -4711170319243817874L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,525,private static class Circle implements DifferentiableMultivariateVectorialFunction {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,527,private static final long serialVersionUID = -7165774454925027042L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,526,"ublic double[][] jacobian(double[] variables, double[] value)"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,527,"hrows ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,550,private double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,556,ublic double[] objective(double[] variables)
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,557,"hrows ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,579,public double[] value(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,593,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,594,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,595,private static final long serialVersionUID = -2884159755283203273L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,596,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,597,double[][] m = jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,598,double[] partial = new double[m.length];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,599,for (int j = 0; j < partial.length; ++j) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,600,partial[i] = m[i][j];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,602,return partial;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,607,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,608,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,609,private static final long serialVersionUID = -43357217231860547L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,610,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,611,return jacobian(point)[i];
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,616,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,617,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,618,private static final long serialVersionUID = -4340046230875165095L;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,619,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,620,return jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,30,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,31,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,34,mport org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,106,"ublic void testTrivial() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,108,"public void testTrivial() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,125,"ublic void testQRColumnsPermutation() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,127,"public void testQRColumnsPermutation() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,143,"ublic void testNoDependency() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,145,"public void testNoDependency() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,162,"ublic void testOneSet() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,164,"public void testOneSet() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,179,"ublic void testTwoSets() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,181,"public void testTwoSets() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,204,"ublic void testNonInversible() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,206,"public void testNonInversible() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,226,"ublic void testIllConditioned() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,228,"public void testIllConditioned() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,260,"ublic void testMoreEstimatedParametersSimple() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,262,"public void testMoreEstimatedParametersSimple() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,275,"ublic void testMoreEstimatedParametersUnsorted() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,277,"public void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,296,"ublic void testRedundantEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,298,"public void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,313,"ublic void testInconsistentEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,315,"public void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,326,"ublic void testInconsistentSizes() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,328,"public void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,353, catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,355,} catch (FunctionEvaluationException oe) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,375,"rivate void checkEstimate(VectorialDifferentiableObjectiveFunction problem,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,377,"private void checkEstimate(DifferentiableMultivariateVectorialFunction problem,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,391, catch (ObjectiveException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,393,} catch (FunctionEvaluationException ee) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,398,"ublic void testCircleFitting() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,400,"public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,448,"ublic void testCircleFittingBadInit() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,450,"public void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,501,"ublic void testMath199() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,503,"public void testMath199() throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,520,rivate static class LinearProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,522,private static class LinearProblem implements DifferentiableMultivariateVectorialFunction {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,530,"ublic double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,531,eturn factors.getData();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,532,public double[] value(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,533,return factors.operate(variables);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,534,ublic double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,535,eturn factors.operate(variables);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,536,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,537,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,538,private static final long serialVersionUID = 4868131119285501303L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,539,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,540,return factors.getColumn(i);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,545,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,546,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,547,private static final long serialVersionUID = 6280336674474631774L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,548,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,549,return factors.getRow(i);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,554,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,555,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,556,private static final long serialVersionUID = 556396458721526234L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,557,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,558,return factors.getData();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,540,rivate static class Circle implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,565,private static class Circle implements DifferentiableMultivariateVectorialFunction {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,566,"ublic double[][] jacobian(double[] variables, double[] value)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,567,"hrows ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,591,private double[][] jacobian(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,570,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,594,"Point2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,596,ublic double[] objective(double[] variables)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,597,"hrows ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,620,public double[] value(double[] variables)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,621,"throws FunctionEvaluationException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,635,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,636,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,637,private static final long serialVersionUID = -2884159755283203273L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,638,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,639,double[][] m = jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,640,double[] partial = new double[m.length];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,641,for (int j = 0; j < partial.length; ++j) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,642,partial[i] = m[i][j];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,644,return partial;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,649,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,650,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,651,private static final long serialVersionUID = -43357217231860547L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,652,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,653,return jacobian(point)[i];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,658,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,659,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,660,private static final long serialVersionUID = -4340046230875165095L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,661,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,662,return jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,613,rivate static class QuadraticProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,669,private static class QuadraticProblem implements DifferentiableMultivariateVectorialFunction {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,615,rivate static final long serialVersionUID = -247096133023967957L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,671,private static final long serialVersionUID = 7072187082052755854L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,629,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,685,private double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,639,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,695,public double[] value(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,703,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,704,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,705,private static final long serialVersionUID = 2371658898687841192L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,706,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,707,double[][] m = jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,708,double[] partial = new double[m.length];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,709,for (int j = 0; j < partial.length; ++j) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,710,partial[i] = m[i][j];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,712,return partial;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,717,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,718,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,719,private static final long serialVersionUID = 6863958501785879369L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,720,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,721,return jacobian(point)[i];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,726,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,727,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,728,private static final long serialVersionUID = -8673650298627399464L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,729,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,730,return jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,22,mport org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,26,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,27,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,28,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,29,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,24,mport org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,28,mport junit.framework.*;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,523, catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,526,} catch (FunctionEvaluationException fe) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,529,mplements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,532,implements DifferentiableMultivariateVectorialFunction {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,600,"ublic abstract double[][] jacobian(double[] variables, double[] value);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,603,public MultivariateVectorialFunction partialDerivative(final int i) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,604,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,605,private static final long serialVersionUID = 2192585229396907068L;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,606,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,607,double[][] m = jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,608,double[] partial = new double[m.length];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,609,for (int j = 0; j < partial.length; ++j) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,610,partial[i] = m[i][j];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,612,return partial;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,617,public MultivariateVectorialFunction gradient(final int i) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,618,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,619,private static final long serialVersionUID = -5562016064510078300L;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,620,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,621,return jacobian(point)[i];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,626,public MultivariateMatrixFunction jacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,627,return new MultivariateMatrixFunction() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,628,private static final long serialVersionUID = -2435076097232923678L;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,629,public double[][] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,630,return jacobian(point);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,635,public abstract double[][] jacobian(double[] variables);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,602,ublic abstract double[] objective(double[] variables);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,637,public abstract double[] value(double[] variables);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,617,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,652,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,629,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,664,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,655,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,690,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,666,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,701,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,690,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,725,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,709,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,744,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,732,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,767,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,737,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,772,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,754,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,789,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,767,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,802,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,801,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,836,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,814,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,849,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,844,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,879,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,852,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,887,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,875,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,910,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,890,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,925,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,928,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,963,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,945,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,980,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,984,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1019,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,999,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1034,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1031,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1066,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1063,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1098,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1103,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1138,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1118,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1153,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1145,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1180,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1156,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1191,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1181,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1216,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1199,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1234,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1237,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1272,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1266,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1301,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1310,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1345,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1343,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1378,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1372,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1407,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1389,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1424,public double[] value(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1425,"ublic double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1460,public double[][] jacobian(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1461,ublic double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1496,public double[] value(double[] variables) {

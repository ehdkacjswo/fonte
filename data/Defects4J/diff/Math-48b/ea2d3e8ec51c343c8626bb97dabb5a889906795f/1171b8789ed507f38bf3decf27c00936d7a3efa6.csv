is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,24,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,25,import org.apache.commons.math.fraction.FractionConversionException;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,26,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,42,protected Fraction[] fractionRow =
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,43,"{new Fraction(1),new Fraction(2),new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,48,protected Fraction[][] fractionRowMatrix =
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,49,"{{new Fraction(1), new Fraction(2), new Fraction(3)}};"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,54,protected Fraction[] fractionCol =
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,55,"{new Fraction(0),new Fraction(4),new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,61,protected Fraction[][] fractionColMatrix =
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,62,"{{new Fraction(0)},{new Fraction(4)},{new Fraction(6)}};"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,98,public void testcreateFieldMatrix() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,99,"assertEquals(new FieldMatrixImpl<Fraction>(asFraction(testData)),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,100,MatrixUtils.createFieldMatrix(asFraction(testData)));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,101,"assertEquals(new FieldMatrixImpl<Fraction>(fractionColMatrix),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,102,MatrixUtils.createFieldMatrix(fractionColMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,103,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,104,"MatrixUtils.createFieldMatrix(asFraction(new double[][] {{1}, {1,2}}));  // ragged"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,105,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,106,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,107,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,109,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,110,"MatrixUtils.createFieldMatrix(asFraction(new double[][] {{}, {}}));  // no columns"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,111,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,112,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,113,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,115,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,116,MatrixUtils.createFieldMatrix((Fraction[][])null);  // null
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,117,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,118,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,119,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,123,@Deprecated
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,172,public void testCreateRowFieldMatrix() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,173,"assertEquals(MatrixUtils.createRowFieldMatrix(asFraction(row)),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,174,new FieldMatrixImpl<Fraction>(asFraction(rowMatrix)));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,175,"assertEquals(MatrixUtils.createRowFieldMatrix(fractionRow),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,176,new FieldMatrixImpl<Fraction>(fractionRowMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,177,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,178,MatrixUtils.createRowFieldMatrix(new Fraction[] {});  // empty
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,179,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,180,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,181,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,183,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,184,MatrixUtils.createRowFieldMatrix((Fraction[]) null);  // null
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,185,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,186,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,187,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,191,@Deprecated
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,230,public void testCreateColumnFieldMatrix() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,231,"assertEquals(MatrixUtils.createColumnFieldMatrix(asFraction(col)),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,232,new FieldMatrixImpl<Fraction>(asFraction(colMatrix)));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,233,"assertEquals(MatrixUtils.createColumnFieldMatrix(fractionCol),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,234,new FieldMatrixImpl<Fraction>(fractionColMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,236,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,237,MatrixUtils.createColumnFieldMatrix(new Fraction[] {});  // empty
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,238,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,239,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,240,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,242,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,243,MatrixUtils.createColumnFieldMatrix((Fraction[]) null);  // null
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,244,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,245,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,246,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,250,@Deprecated
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,302,protected void checkIdentityFieldMatrix(FieldMatrix<Fraction> m) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,303,for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,304,for (int j =0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,305,if (i == j) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,306,"assertEquals(m.getEntry(i, j), Fraction.ONE);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,307,} else {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,308,"assertEquals(m.getEntry(i, j), Fraction.ZERO);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,314,public void testcreateFieldIdentityMatrix() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,315,"checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 3));"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,316,"checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 2));"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,317,"checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 1));"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,318,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,319,MatrixUtils.createRealIdentityMatrix(0);
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,320,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,321,// expected
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,325,public static final Fraction[][] asFraction(double[][] data) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,326,Fraction d[][] = new Fraction[data.length][];
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,327,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,328,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,329,double[] dataI = data[i];
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,330,Fraction[] dI  = new Fraction[dataI.length];
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,331,for (int j = 0; j < dataI.length; ++j) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,332,dI[j] = new Fraction(dataI[j]);
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,334,d[i] = dI;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,336,} catch (FractionConversionException fce) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,337,fail(fce.getMessage());
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,339,return d;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,342,public static final Fraction[] asFraction(double[] data) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,343,Fraction d[] = new Fraction[data.length];
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,344,try {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,345,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,346,d[i] = new Fraction(data[i]);
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,348,} catch (FractionConversionException fce) {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,349,fail(fce.getMessage());
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,351,return d;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,355,* Verifies that the matrix is an identity matrix
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,357,@Deprecated
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,370,@Deprecated

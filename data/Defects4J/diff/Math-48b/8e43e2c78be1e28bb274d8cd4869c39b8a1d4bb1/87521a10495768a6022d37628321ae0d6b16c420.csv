is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,23,* Class transforming any matrix to bi-diagonal shape.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,24,* <p>Any m &times; n matrix A can be written as the product of three matrices:
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,25,"* A = U &times; B &times; V<sup>T</sup> with U an m &times; m orthogonal matrix,"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,26,"* B an m &times; n bi-diagonal matrix (lower diagonal if m &lt; n, upper diagonal"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,27,"* otherwise), and V an n &times; n orthogonal matrix.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,28,"* <p>Transformation to bi-diagonal shape is often not a goal by itself, but it is"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,29,* an intermediate step in more general decomposition algorithms like {@link
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,30,* SingularValueDecomposition Singular Value Decomposition}. This class is therefore
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,31,* intended for internal use by the library and is not public. As a consequence of
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,32,"* this explicitly limited scope, many methods directly returns references to"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,33,"* internal arrays, not copies.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,35,* @since 2.0
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,37,class BiDiagonalTransformer implements Serializable {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,39,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,40,private static final long serialVersionUID = 8935390784125343332L;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,42,/** Householder vectors. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,43,private final double householderVectors[][];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,45,/** Main diagonal. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,46,private final double[] main;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,48,/** Secondary diagonal. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,49,private final double[] secondary;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,51,/** Cached value of U. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,52,private RealMatrix cachedU;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,54,/** Cached value of B. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,55,private RealMatrix cachedB;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,57,/** Cached value of V. */
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,58,private RealMatrix cachedV;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,61,* Build the transformation to bi-diagonal shape of a matrix.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,62,* @param matrix The matrix to transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,64,public BiDiagonalTransformer(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,65,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,67,final int m = matrix.getRowDimension();
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,68,final int n = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,69,"final int p = Math.min(m, n);"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,70,householderVectors = matrix.getData();
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,71,main      = new double[p];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,72,secondary = new double[p - 1];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,73,cachedU   = null;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,74,cachedB   = null;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,75,cachedV   = null;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,77,// transform matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,78,if (m >= n) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,79,transformToUpperBiDiagonal();
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,80,} else {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,81,transformToLowerBiDiagonal();
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,87,* Returns the matrix U of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,88,"* <p>U is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,89,* @return the U matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,91,public RealMatrix getU() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,93,if (cachedU == null) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,95,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,96,final int n = householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,97,final int p = main.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,98,final int diagOffset    = (m >= n) ? 0 : 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,99,final double[] diagonal = (m >= n) ? main : secondary;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,100,final double[][] uData  = new double[m][m];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,102,// fill up the part of the matrix not affected by Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,103,for (int k = m - 1; k >= p; --k) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,104,uData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,107,// build up first part of the matrix by applying Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,108,for (int k = p - 1; k >= diagOffset; --k) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,109,final double[] hK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,110,uData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,111,if (hK[k - diagOffset] != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,112,for (int j = k; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,113,double alpha = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,114,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,115,alpha -= uData[i][j] * householderVectors[i][k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,117,alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,119,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,120,uData[i][j] -= alpha * householderVectors[i][k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,125,if (diagOffset > 0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,126,uData[0][0] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,129,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,130,"cachedU = new RealMatrixImpl(uData, false);"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,134,// return the cached matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,135,return cachedU;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,140,* Returns the bi-diagonal matrix B of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,141,* @return the B matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,143,public RealMatrix getB() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,145,if (cachedB == null) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,147,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,148,final int n = householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,149,double[][] bData = new double[m][n];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,150,for (int i = 0; i < main.length; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,151,bData[i][i] = main[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,152,if (i < main.length - 1) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,153,if (m < n) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,154,bData[i + 1][i] = secondary[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,155,} else {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,156,bData[i][i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,161,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,162,"cachedB = new RealMatrixImpl(bData, false);"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,166,// return the cached matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,167,return cachedB;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,172,* Returns the matrix V of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,173,"* <p>V is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,174,* @return the V matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,176,public RealMatrix getV() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,178,if (cachedV == null) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,180,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,181,final int n = householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,182,final int p = main.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,183,final int diagOffset    = (m >= n) ? 1 : 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,184,final double[] diagonal = (m >= n) ? secondary : main;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,185,final double[][] vData  = new double[n][n];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,187,// fill up the part of the matrix not affected by Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,188,for (int k = n - 1; k >= p; --k) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,189,vData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,192,// build up first part of the matrix by applying Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,193,for (int k = p - 1; k >= diagOffset; --k) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,194,final double[] hK = householderVectors[k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,195,vData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,196,if (hK[k] != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,197,for (int j = k; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,198,double beta = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,199,for (int i = k; i < n; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,200,beta -= vData[i][j] * hK[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,202,beta /= diagonal[k - diagOffset] * hK[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,204,for (int i = k; i < n; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,205,vData[i][j] -= beta * hK[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,210,if (diagOffset > 0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,211,vData[0][0] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,214,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,215,"cachedV = new RealMatrixImpl(vData, false);"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,219,// return the cached matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,220,return cachedV;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,225,* Get the Householder vectors of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,226,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,227,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,228,* @return the main diagonal elements of the B matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,230,double[][] getHouseholderVectorsRef() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,231,return householderVectors;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,235,* Get the main diagonal elements of the matrix B of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,236,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,237,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,238,* @return the main diagonal elements of the B matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,240,double[] getMainDiagonalRef() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,241,return main;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,245,* Get the secondary diagonal elements of the matrix B of the transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,246,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,247,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,248,* @return the secondary diagonal elements of the B matrix
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,250,double[] getSecondaryDiagonalRef() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,251,return secondary;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,255,* Check if the matrix is transformed to upper bi-diagonal.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,256,* @return true if the matrix is transformed to upper bi-diagonal
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,258,boolean isUpperBiDiagonal() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,259,return householderVectors.length >=  householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,263,* Transform original matrix to upper bi-diagonal form.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,264,* <p>Transformation is done using alternate Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,265,* on columns and rows.</p>
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,267,private void transformToUpperBiDiagonal() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,269,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,270,final int n = householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,271,for (int k = 0; k < n; k++) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,273,//zero-out a column
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,274,double xNormSqr = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,275,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,276,final double c = householderVectors[i][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,277,xNormSqr += c * c;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,279,final double a = (householderVectors[k][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,280,main[k] = a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,281,if (a != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,282,householderVectors[k][k] -= a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,283,for (int j = k + 1; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,284,double alpha = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,285,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,286,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,287,alpha -= uvI[j] * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,289,alpha /= a * householderVectors[k][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,290,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,291,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,292,uvI[j] -= alpha * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,297,if (k < n - 1) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,298,//zero-out a row
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,299,final double[] uvK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,300,xNormSqr = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,301,for (int j = k + 1; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,302,final double c = uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,303,xNormSqr += c * c;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,305,final double b = (uvK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,306,secondary[k] = b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,307,if (b != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,308,uvK[k + 1] -= b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,309,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,310,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,311,double beta = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,312,for (int j = k + 1; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,313,beta -= uvI[j] * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,315,beta /= b * uvK[k + 1];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,316,for (int j = k + 1; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,317,uvI[j] -= beta * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,327,* Transform original matrix to lower bi-diagonal form.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,328,* <p>Transformation is done using alternate Householder transforms
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,329,* on rows and columns.</p>
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,331,private void transformToLowerBiDiagonal() {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,333,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,334,final int n = householderVectors[0].length;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,335,for (int k = 0; k < m; k++) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,337,//zero-out a row
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,338,final double[] uvK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,339,double xNormSqr = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,340,for (int j = k; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,341,final double c = uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,342,xNormSqr += c * c;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,344,final double a = (uvK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,345,main[k] = a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,346,if (a != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,347,uvK[k] -= a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,348,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,349,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,350,double alpha = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,351,for (int j = k; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,352,alpha -= uvI[j] * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,354,alpha /= a * householderVectors[k][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,355,for (int j = k; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,356,uvI[j] -= alpha * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,361,if (k < m - 1) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,362,//zero-out a column
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,363,xNormSqr = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,364,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,365,final double c = householderVectors[i][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,366,xNormSqr += c * c;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,368,final double b = (householderVectors[k + 1][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,369,secondary[k] = b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,370,if (b != 0.0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,371,householderVectors[k + 1][k] -= b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,372,for (int j = k + 1; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,373,double beta = 0;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,374,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,375,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,376,beta -= uvI[j] * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,378,beta /= b * householderVectors[k + 1][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,379,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,380,final double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,381,uvI[j] -= beta * uvI[k];
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,24,public class BiDiagonalTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,26,private double[][] testSquare = {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,27,"{ 24.0 / 25.0, 43.0 / 25.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,28,"{ 57.0 / 25.0, 24.0 / 25.0 }"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,31,private double[][] testNonSquare = {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,32,"{  -540.0 / 625.0,  963.0 / 625.0, -216.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,33,"{ -1730.0 / 625.0, -744.0 / 625.0, 1008.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,34,"{  -720.0 / 625.0, 1284.0 / 625.0, -288.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,35,"{  -360.0 / 625.0,  192.0 / 625.0, 1756.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,38,public BiDiagonalTransformerTest(String name) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,39,super(name);
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,42,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,43,"checkdimensions(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,44,"checkdimensions(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,45,"checkdimensions(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,48,private void checkdimensions(RealMatrix matrix) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,49,final int m = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,50,final int n = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,51,BiDiagonalTransformer transformer = new BiDiagonalTransformer(matrix);
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,52,"assertEquals(m, transformer.getU().getRowDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,53,"assertEquals(m, transformer.getU().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,54,"assertEquals(m, transformer.getB().getRowDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,55,"assertEquals(n, transformer.getB().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,56,"assertEquals(n, transformer.getV().getRowDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,57,"assertEquals(n, transformer.getV().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,61,public void testAEqualUSVt() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,62,"checkAEqualUSVt(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,63,"checkAEqualUSVt(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,64,"checkAEqualUSVt(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,67,private void checkAEqualUSVt(RealMatrix matrix) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,68,BiDiagonalTransformer transformer = new BiDiagonalTransformer(matrix);
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,69,RealMatrix u = transformer.getU();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,70,RealMatrix b = transformer.getB();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,71,RealMatrix v = transformer.getV();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,72,double norm = u.multiply(b).multiply(v.transpose()).subtract(matrix).getNorm();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,73,"assertEquals(0, norm, 1.0e-14);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,76,public void testUOrthogonal() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,77,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getU());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,78,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getU());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,79,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getU());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,82,public void testVOrthogonal() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,83,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getV());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,84,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getV());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,85,"checkOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getV());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,88,private void checkOrthogonal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,89,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,90,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,91,"assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,94,public void testBBiDiagonal() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,95,"checkBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getB());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,96,"checkBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getB());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,97,"checkBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getB());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,100,private void checkBiDiagonal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,101,final int rows = m.getRowDimension();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,102,final int cols = m.getColumnDimension();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,103,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,104,for (int j = 0; j < cols; ++j) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,105,if (rows < cols) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,106,if ((i < j) || (i > j + 1)) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,107,"assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,109,} else {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,110,if ((i < j - 1) || (i > j)) {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,111,"assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,118,public void testMatricesValues() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,119,BiDiagonalTransformer transformer =
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,120,"new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,121,final double s17 = Math.sqrt(17.0);
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,122,RealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,123,"{  -8 / (5 * s17), 19 / (5 * s17) },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,124,"{ -19 / (5 * s17), -8 / (5 * s17) }"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,126,RealMatrix bRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,127,"{ -3 * s17 / 5, 32 * s17 / 85 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,128,"{      0.0,     -5 * s17 / 17 }"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,130,RealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,131,"{ 1.0,  0.0 },"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,132,"{ 0.0, -1.0 }"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,135,// check values against known references
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,136,RealMatrix u = transformer.getU();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,137,"assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,138,RealMatrix b = transformer.getB();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,139,"assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,140,RealMatrix v = transformer.getV();
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,141,"assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,143,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,144,assertTrue(u == transformer.getU());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,145,assertTrue(b == transformer.getB());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,146,assertTrue(v == transformer.getV());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,150,public void testUpperOrLower() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,151,"assertTrue(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).isUpperBiDiagonal());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,152,"assertTrue(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).isUpperBiDiagonal());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,153,"assertFalse(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).isUpperBiDiagonal());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,156,public static Test suite() {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,157,return new TestSuite(BiDiagonalTransformerTest.class);

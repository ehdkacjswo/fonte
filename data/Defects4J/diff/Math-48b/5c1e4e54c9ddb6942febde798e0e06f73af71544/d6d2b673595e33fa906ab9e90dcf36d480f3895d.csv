is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,21,import java.io.ObjectInputStream;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,47,/ TODO: Add Serializable documentation
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,48,/ TODO: Check Serializable implementation
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,81,rivate final boolean isNaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,81,private final transient boolean isNaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,86,rivate final boolean isInfinite;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,86,private final transient boolean isInfinite;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,976,* Deserialize a Complex Object.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,977,* @param ois The stream to deserialize from.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,978,* @throws IOException If there is an error reading the stream.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,979,* @throws ClassNotFoundException If this class cannot be found.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,981,"private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,982,ois.defaultReadObject();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,984,try {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,985,"final java.lang.reflect.Field fNaN = getClass().getDeclaredField(""isNaN"");"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,986,fNaN.setAccessible(true);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,987,"fNaN.set(this, Double.isNaN(real) || Double.isNaN(imaginary));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,988,"final java.lang.reflect.Field fInf = getClass().getDeclaredField(""isInfinite"");"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,989,fInf.setAccessible(true);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,990,"fInf.set(this, !isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary)));"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,991,} catch (IllegalAccessException iae) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,992,IOException ioe = new IOException();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,993,ioe.initCause(iae);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,994,throw ioe;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,995,} catch (NoSuchFieldException nsfe) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,996,IOException ioe = new IOException();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,997,ioe.initCause(nsfe);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,998,throw ioe;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,906,public void testSerial() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,907,"Complex z = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,908,"assertEquals(z, TestUtils.serializeAndRecover(z));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,909,Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,910,"assertEquals(nanZero, ncmplx);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,911,assertTrue(ncmplx.isNaN());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,912,Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,913,"assertEquals(infInf, infcmplx);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,914,assertTrue(infcmplx.isInfinite());

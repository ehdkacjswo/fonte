is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/BetaDistribution.java,src/java/org/apache/commons/math/distribution/BetaDistribution.java,24, See http://en.wikipedia.org/wiki/Beta_distribution
True,src/java/org/apache/commons/math/distribution/BetaDistribution.java,src/java/org/apache/commons/math/distribution/BetaDistribution.java,24,"* @see <a href=""http://en.wikipedia.org/wiki/Beta_distribution"">Beta_distribution</a>"
True,src/java/org/apache/commons/math/distribution/BetaDistribution.java,src/java/org/apache/commons/math/distribution/BetaDistribution.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/BetaDistribution.java,src/java/org/apache/commons/math/distribution/BetaDistribution.java,26,* @since 2.0
True,src/java/org/apache/commons/math/distribution/BetaDistribution.java,src/java/org/apache/commons/math/distribution/BetaDistribution.java,57,* @exception MathException if probability density cannot be computed
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,33,* @since 2.0
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,62," Modify the shape parameter, alpha."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,64, @param alpha the new shape parameter.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,63,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,72," Access the shape parameter, alpha"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,74, @return alpha.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,69,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,81," Modify the shape parameter, beta."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,83, @param beta the new scale parameter.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,74,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,91," Access the shape parameter, beta"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,93, @return beta.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,80,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,109, Return the probability density for a particular point.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,111, @param x The point at which the density should be computed.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,112, @return The pdf at point x.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,94,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,136," For this distribution, X, this method returns x such that P(X &lt; x) = p."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,138, @param p the cumulative probability.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,139, @return x.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,140, @throws org.apache.commons.math.MathException
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,141,          if the inverse cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,142,          computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,116,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,155," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,156, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,157, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,159, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,160, @return initial domain value
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,127,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,167," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,168, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,169, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,171, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,172," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,173,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,132,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,180," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,181, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,182, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,184, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,185," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,186,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,137,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,193, For a random variable X whose values are distributed according
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,194," to this distribution, this method returns P(X &le; x).  In other words,"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,195," this method represents the  (cumulative) distribution function, or"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,196," CDF, for this distribution."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,198, @param x the value at which the distribution function is evaluated.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,199, @return the probability that a random variable with this
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,200,         distribution takes a value less than or equal to <code>x</code>
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,201, @throws org.apache.commons.math.MathException
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,202,          if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,203,          computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,142,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,216, For a random variable X whose values are distributed according
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,217," to this distribution, this method returns P(x0 &le; X &le; x1)."
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,219, @param x0 the (inclusive) lower bound
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,220, @param x1 the (inclusive) upper bound
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,221, @return the probability that a random variable with this distribution
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,222,"         will take a value between <code>x0</code> and <code>x1</code>,"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,223,         including the endpoints
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,224, @throws org.apache.commons.math.MathException
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,225,                                  if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,226,                                  computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,227, @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,153,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,25,"* @param <P> the type of the point at which density is to be computed, this"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,26,* may be for example <code>Double</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,38,/** &sqrt;(2 &pi;) */
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,39,private static final double SQRT2PI = Math.sqrt(2 * Math.PI);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,rivate static final double SQRT2PI = Math.sqrt(2 * Math.PI);
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43, @param matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43,* @param matrix matrix to decompose
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,96,* @param i index of the eigenvalue (counting from 0)
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,107,* @param i index of the eigenvector (counting from 0)
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,78,* @param other Gershgorin circles union to swallow
False,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,84,** Comparator class for sorting intervals. */
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,85,/** Compare another Gershgorin circles union in interval start order.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,86,* @param other Gershgorin circles union to compare to instance
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,87,"* @return a negative, zero or positive value depending on the other"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,88,"* union starting before, at same location or after instance"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352, @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352,* has not been called
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,* @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,59, @param matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,59,* @param matrix matrix to decompose
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,51,"/** Replace sample data, overriding any previous sample."
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,52,* @param y y values of the sample
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,53,* @param x x values of the sample
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,54,* @param covariance array representing the covariance matrix

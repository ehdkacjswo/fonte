is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,27, @version $Revision: 1.4 $ $Date: 2004/10/25 02:23:29 $
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,27,* @version $Revision: 1.5 $ $Date: 2004/10/25 03:13:31 $
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,154,igMatrixImpl m3 = new BigMatrixImpl();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,155,3.setData(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,161,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,162,2.setData(m.getData());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,163,"ssertClose(""getData"",m2,m,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,164,/ no dangling reference...
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,165,"2.setEntry(1,1,2000d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,166,igMatrixImpl m3 = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,167,"ssertClose(""no getData side effect"",m,m3,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,168,3 = (BigMatrixImpl) m.copy();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,169,"ouble[][] stompMe = {{1d,2d,3d}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,170,3.setDataRef(asBigDecimal(stompMe));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,171,"ssertClose(""no copy side effect"",m,new BigMatrixImpl(testData),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,172,ntryTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,159,BigMatrixImpl m2 = new BigMatrixImpl(m.getData());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,160,"assertEquals(m2,m);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,479,ublic void testEntryMutators() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,480,igMatrix m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,481,"ssertEquals(""get entry"",m.getEntry(0,1).doubleValue(),2d,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,482,".setEntry(0,1,100d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,483,"ssertEquals(""get entry"",m.getEntry(0,1).doubleValue(),100d,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,484,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,485,"ouble x = m.getEntry(-1,2).doubleValue();"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,487, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,490,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,491,".setEntry(1,3,200d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,493, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,496,".setEntry(1, 2, ""0.1"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,497,".setEntry(1, 1, 0.1d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,498,"ssertFalse(m.getEntry(1, 2).equals(m.getEntry(1, 1)));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,499,"ssertTrue(m.getEntry(1, 2).equals(new BigDecimal(""0.1"")));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,500,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,501,".setEntry(1, 2, ""not a number"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,502,"ail(""Expecting NumberFormatException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,503, catch (NumberFormatException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,701,"rotected void splitLU(BigMatrix lu, BigMatrix lower, BigMatrix upper) throws InvalidMatrixException {"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,702,f (!lu.isSquare() || !lower.isSquare() || !upper.isSquare() ||
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,703,ower.getRowDimension() != upper.getRowDimension()
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,704,| lower.getRowDimension() != lu.getRowDimension()) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,660,"protected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,661,if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,662,lowerData.length != upperData.length
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,663,|| lowerData.length != lu.getRowDimension()) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,711,"ower.setEntry(i, j, lu.getEntry(i, j));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,712,"pper.setEntry(i, j, 0d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,670,"lowerData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,671,upperData[i][j] = new BigDecimal(0);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,714,"ower.setEntry(i, j, 1d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,715,"pper.setEntry(i, j, lu.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,673,lowerData[i][j] = new BigDecimal(1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,674,"upperData[i][j] = lu.getEntry(i, j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,717,"ower.setEntry(i, j, 0d);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,718,"pper.setEntry(i, j, lu.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,676,lowerData[i][j] = new BigDecimal(0);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,677,"upperData[i][j] = lu.getEntry(i, j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,730,"igMatrix out = new BigMatrixImpl(n, n);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,689,int m = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,690,BigDecimal out[][] = new BigDecimal[m][n];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,732,or (int j = 0; j < n; j++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,733,"ut.setEntry(i, j, matrix.getEntry(permutation[i], j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,692,for (int j = 0; j < m; j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,693,"out[i][j] = matrix.getEntry(permutation[i], j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,736,eturn out;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,696,return new BigMatrixImpl(out);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,742,"igMatrix lower = new BigMatrixImpl(n, n);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,743,"igMatrix upper = new BigMatrixImpl(n, n);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,744,"plitLU(lu, lower, upper);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,702,BigDecimal[][] lowerData = new BigDecimal[n][n];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,703,BigDecimal[][] upperData = new BigDecimal[n][n];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,704,"splitLU(lu, lowerData, upperData);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,705,BigMatrix lower =new BigMatrixImpl(lowerData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,706,BigMatrix upper = new BigMatrixImpl(upperData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,747,"ssertClose(""lu decomposition does not work"", permuted, lower.multiply(upper), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,709,"assertClose(""lu decomposition does not work"", permuted,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,710,"lower.multiply(upper), normTolerance);"

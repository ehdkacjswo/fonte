is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,22,mport java.text.Format;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,26,import org.apache.commons.math.util.CompositeFormat;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,30," be replaced with 'j', and the number format for both real and imaginary parts"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,31, can be configured.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,30,"* be replaced with 'j' (or anything else), and the number format for both real"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,31,* and imaginary parts can be configured.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,36,ublic class ComplexFormat extends Format implements Serializable {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,36,public class ComplexFormat extends CompositeFormat {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,39,rivate static final long serialVersionUID = -6337346779577272306L;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,41,** The default imaginary character. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,39,private static final long serialVersionUID = -3343698360149467646L;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,41,/** The default imaginary character. */
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,76,"ublic ComplexFormat(NumberFormat realFormat,"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,77,umberFormat imaginaryFormat) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,76,"public ComplexFormat(NumberFormat realFormat, NumberFormat imaginaryFormat) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,117, This static method calls formatComplex() on a default instance of
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,116,* Get the set of locales for which complex formats are available.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,117,* <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,118,* @return available complex format locales.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,120,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,121,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,125,* This static method calls {@link #format(Object)} on a default instance of
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,123,ublic static String formatComplex( Complex c ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,124,eturn getInstance().format( c );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,131,public static String formatComplex(Complex c) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,132,return getInstance().format(c);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,185,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,186,"Cannot format given Object as a Date"");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,193,"throw new IllegalArgumentException(""Cannot format given Object as a Complex"");"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,193," Formats a double value to produce a string.  In general, the value is"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,194, formatted using the formatting rules of <code>format</code>.  There are
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,195, three exceptions to this:
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,196, <ol>
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,197, <li>NaN is formatted as '(NaN)'</li>
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,198, <li>Positive infinity is formatted as '(Infinity)'</li>
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,199, <li>Negative infinity is formatted as '(-Infinity)'</li>
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,200, </ol>
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,202, @param value the double to format.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,203, @param format the format used.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,204, @param toAppendTo where the text is to be appended
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,205," @param pos On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,206,            offsets of the alignment field
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,207, @return the value passed in as toAppendTo.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,209,"rivate StringBuffer formatDouble(double value, NumberFormat format,"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,210,"tringBuffer toAppendTo, FieldPosition pos) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,211,f( Double.isNaN(value) || Double.isInfinite(value) ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,212,oAppendTo.append('(');
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,213,oAppendTo.append(value);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,214,oAppendTo.append(')');
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,215, else {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,216,"ormat.format(value, toAppendTo, pos);"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,218,eturn toAppendTo;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,222, Get the set of locales for which complex formats are available.  This
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,223, is the same set as the {@link NumberFormat} set.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,224, @return available complex format locales.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,226,ublic static Locale[] getAvailableLocales() {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,227,eturn NumberFormat.getAvailableLocales();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,231, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,232, {@link NumberFormat#getInstance()} with the only customizing is the
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,233," maximum number of fraction digits, which is set to 2."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,234, @return the default number format.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,236,rivate static NumberFormat getDefaultNumberFormat() {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,237,eturn getDefaultNumberFormat(Locale.getDefault());
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,241, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,242, {@link NumberFormat#getInstance(java.util.Locale)} with the only
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,243," customizing is the maximum number of fraction digits, which is set to 2."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,244, @param locale the specific locale used by the format.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,245, @return the default number format specific to the given locale.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,247,rivate static NumberFormat getDefaultNumberFormat(Locale locale) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,248,umberFormat nf = NumberFormat.getInstance(locale);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,249,f.setMaximumFractionDigits(2);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,250,eturn nf;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,273,ublic static ComplexFormat getInstance() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,219,public static CompositeFormat getInstance() {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,308,"\"""", parsePosition.getErrorIndex());"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,254,"""\"""", parsePosition.getErrorIndex());"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,331,/ character examined.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,368,/ character examined.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,374,nt n = getImaginaryCharacter().length();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,375,tartIndex = pos.getIndex();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,376,nt endIndex = startIndex + n;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,377,f ((startIndex >= source.length()) ||
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,378,endIndex > source.length()) ||
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,379,"ource.substring(startIndex, endIndex).compareTo("
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,380,etImaginaryCharacter()) != 0) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,381,"/ set index back to initial, error index should be the start index"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,382,/ character examined.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,383,os.setIndex(initialIndex);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,384,os.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,318,"if (!parseFixedstring(source, getImaginaryCharacter(), pos)) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,387,os.setIndex(endIndex);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,393, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,395, @param source the string to parse
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,396," @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,397,        holds the index of the next non-whitespace character.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,399,"rivate void parseAndIgnoreWhitespace(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,400,"arseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,401,os.setIndex(pos.getIndex() - 1);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,405, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,407, @param source the string to parse
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,408, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,409, @return the first non-whitespace character.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,411,"rivate char parseNextCharacter(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,412,nt index = pos.getIndex();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,413,nt n = source.length();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,414,har ret = 0;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,416,f (index < n) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,417,har c;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,418,o {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,419, = source.charAt(index++);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,420, while (Character.isWhitespace(c) && index < n);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,421,os.setIndex(index);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,423,f (index < n) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,424,et = c;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,428,eturn ret;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,432, Parses <code>source</code> for a special double values.  These values
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,433," include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,435, @param source the string to parse
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,436, @param value the special value to parse.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,437, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,438, @return the special number.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,440,"rivate Number parseNumber(String source, double value, ParsePosition pos) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,441,umber ret = null;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,443,tringBuffer sb = new StringBuffer();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,444,b.append('(');
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,445,b.append(value);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,446,b.append(')');
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,448,nt n = sb.length();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,449,nt startIndex = pos.getIndex();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,450,nt endIndex = startIndex + n;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,451,f (endIndex < source.length()) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,452,"f (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,453,et = Double.valueOf(value);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,454,os.setIndex(endIndex);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,458,eturn ret;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,462," Parses <code>source</code> for a number.  This method can parse normal,"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,463, numeric values as well as special values.  These special values include
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,464," Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,466, @param source the string to parse
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,467," @param format the number format used to parse normal, numeric values."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,468, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,469, @return the parsed number.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,471,"rivate Number parseNumber(String source, NumberFormat format, ParsePosition pos) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,472,nt startIndex = pos.getIndex();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,473,"umber number = format.parse(source, pos);"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,474,nt endIndex = pos.getIndex();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,476,/ check for error parsing number
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,477,f (startIndex == endIndex) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,478,/ try parsing special numbers
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,479,"ouble[] special = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,480,or (int i = 0; i < special.length; ++i) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,481,"umber = parseNumber(source, special[i], pos);"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,482,f (number != null) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,483,reak;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,488,eturn number;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,17,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,20,import java.text.Format;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,21,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,22,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,23,import java.util.Locale;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,26,"* Base class for formatters of composite objects (complex numbers, vectors ...)."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,28,* @author Apache Software Foundation
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,31,public abstract class CompositeFormat extends Format {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,34,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,35,* {@link NumberFormat#getInstance()} with the only customizing is the
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,36,"* maximum number of fraction digits, which is set to 2."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,37,* @return the default number format.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,39,protected static NumberFormat getDefaultNumberFormat() {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,40,return getDefaultNumberFormat(Locale.getDefault());
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,44,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,45,* {@link NumberFormat#getInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,46,"* customizing is the maximum number of fraction digits, which is set to 2."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,47,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,48,* @return the default number format specific to the given locale.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,50,protected static NumberFormat getDefaultNumberFormat(final Locale locale) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,51,final NumberFormat nf = NumberFormat.getInstance(locale);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,52,nf.setMaximumFractionDigits(2);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,53,return nf;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,57,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,59,* @param source the string to parse
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,60,"* @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,61,*        holds the index of the next non-whitespace character.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,63,"protected void parseAndIgnoreWhitespace(final String source,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,64,final ParsePosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,65,"parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,66,pos.setIndex(pos.getIndex() - 1);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,70,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,72,* @param source the string to parse
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,73,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,74,* @return the first non-whitespace character.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,76,"protected char parseNextCharacter(final String source,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,77,final ParsePosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,78,int index = pos.getIndex();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,79,final int n = source.length();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,80,char ret = 0;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,82,if (index < n) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,83,char c;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,84,do {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,85,c = source.charAt(index++);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,86,} while (Character.isWhitespace(c) && index < n);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,87,pos.setIndex(index);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,89,if (index < n) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,90,ret = c;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,94,return ret;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,98,* Parses <code>source</code> for a special double values.  These values
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,99,"* include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,101,* @param source the string to parse
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,102,* @param value the special value to parse.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,103,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,104,* @return the special number.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,106,"private Number parseNumber(final String source, final double value,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,107,final ParsePosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,108,Number ret = null;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,110,StringBuffer sb = new StringBuffer();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,111,sb.append('(');
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,112,sb.append(value);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,113,sb.append(')');
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,115,final int n = sb.length();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,116,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,117,final int endIndex = startIndex + n;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,118,if (endIndex < source.length()) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,119,"if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,120,ret = Double.valueOf(value);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,121,pos.setIndex(endIndex);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,125,return ret;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,129,"* Parses <code>source</code> for a number.  This method can parse normal,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,130,* numeric values as well as special values.  These special values include
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,131,"* Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,133,* @param source the string to parse
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,134,"* @param format the number format used to parse normal, numeric values."
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,135,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,136,* @return the parsed number.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,138,"protected Number parseNumber(final String source, final NumberFormat format,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,139,final ParsePosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,140,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,141,"Number number = format.parse(source, pos);"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,142,final int endIndex = pos.getIndex();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,144,// check for error parsing number
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,145,if (startIndex == endIndex) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,146,// try parsing special numbers
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,147,final double[] special = {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,148,"Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,150,for (int i = 0; i < special.length; ++i) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,151,"number = parseNumber(source, special[i], pos);"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,152,if (number != null) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,153,break;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,158,return number;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,162,* Parse <code>source</code> for an expected fixed string.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,163,* @param source the string to parse
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,164,* @param expected expected string
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,165,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,166,* @return true if the expected string was there
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,168,"protected boolean parseFixedstring(final String source, final String expected,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,169,final ParsePosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,171,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,172,final int endIndex = startIndex + expected.length();
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,173,if ((startIndex >= source.length()) ||
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,174,(endIndex > source.length()) ||
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,175,"(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,176,"// set index back to start, error index should be the start index"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,177,pos.setIndex(startIndex);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,178,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,179,return false;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,182,// the string was here
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,183,pos.setIndex(endIndex);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,184,return true;
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,189,"* Formats a double value to produce a string.  In general, the value is"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,190,* formatted using the formatting rules of <code>format</code>.  There are
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,191,* three exceptions to this:
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,192,* <ol>
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,193,* <li>NaN is formatted as '(NaN)'</li>
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,194,* <li>Positive infinity is formatted as '(Infinity)'</li>
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,195,* <li>Negative infinity is formatted as '(-Infinity)'</li>
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,196,* </ol>
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,198,* @param value the double to format.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,199,* @param format the format used.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,200,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,201,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,202,*            offsets of the alignment field
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,203,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,205,"protected StringBuffer formatDouble(final double value, final NumberFormat format,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,206,"final StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,207,final FieldPosition pos) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,208,if( Double.isNaN(value) || Double.isInfinite(value) ) {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,209,toAppendTo.append('(');
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,210,toAppendTo.append(value);
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,211,toAppendTo.append(')');
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,212,} else {
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,213,"format.format(value, toAppendTo, pos);"
True,src/java/org/apache/commons/math/util/CompositeFormat.java,src/java/org/apache/commons/math/util/CompositeFormat.java,215,return toAppendTo;
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,25,import org.apache.commons.math.util.CompositeFormat;
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,29,omplexFormat complexFormat = null;
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,31,CompositeFormat complexFormat = null;
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,336,omplexFormat cf = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,338,CompositeFormat cf = ComplexFormat.getInstance(getLocale());
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,344,omplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,346,CompositeFormat cf = new ComplexFormat();

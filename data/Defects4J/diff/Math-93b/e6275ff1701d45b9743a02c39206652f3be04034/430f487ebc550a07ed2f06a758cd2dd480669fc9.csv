is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,41,"mplements StepInterpolator, Cloneable {"
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,41,implements StepInterpolator {
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,166,* <p>The copied instance is guaranteed to be independent from the
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,167,* original one. Both can be used with different settings for
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,168,* interpolated time without any side effect.</p>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,169,"* @return a deep copy of the instance, which can be used independently."
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,170,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,171,* step finalization that throws one
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,172,* @see #setInterpolatedTime(double)
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,174,public StepInterpolator copy() throws DerivativeException {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,167, <p>The copied interpolator should have been finalized before the
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,168," copy, otherwise the copy will not be able to perform correctly any"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,169, interpolation and will throw a {@link NullPointerException}
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,170, later. Since we don't want this constructor to throw the
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,171, exceptions finalization may involve and since we don't want this
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,172," method to modify the state of the copied interpolator,"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,173," finalization is <strong>not</strong> done automatically, it"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,174, remains under user control.</p>
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,176, <p>The copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,177, original arrays of the instance.</p>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,176,// finalize the step before performing copy
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,177,finalizeStep();
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,179, <p>This method has been redeclared as public instead of protected.</p>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,179,// create the new independent instance
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,180,return doCopy();
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,181, @return a copy of the instance.
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,184,ublic Object clone() {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,185,ry {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,186,eturn super.clone();
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,187, catch (CloneNotSupportedException cnse) {
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,188,/ should never happen
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,189,eturn null;
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,184,/** Really copy the finalized instance.
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,185,* <p>This method is called by {@link #copy()} after the
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,186,* step has been finalized. It must perform a deep copy
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,187,* to have an new instance completely independent for the
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,188,* original instance.
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,190,protected abstract StepInterpolator doCopy();
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,72, Clone the instance.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,73, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,74, original arrays of the instance
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,75, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,71,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,77,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,73,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,95,* @exception DerivativeException if some step interpolators from
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,96,* the appended model cannot be copied
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,99,ublic void append(ContinuousOutputModel model) {
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,101,public void append(ContinuousOutputModel model)
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,102,throws DerivativeException {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,130,bstractStepInterpolator ai = (AbstractStepInterpolator) iter.next();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,131,teps.add(ai.clone());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,133,steps.add(((AbstractStepInterpolator) iter.next()).copy());
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,179,i.finalizeStep();
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,180,teps.add(ai.clone());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,181,steps.add(ai.copy());
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,81, Clone the instance.
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,82, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,83, original arrays of the instance
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,84, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,80,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,86,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,82,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,49,Tmp      = null;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,90,"/ the step has been finalized, we don't need this anymore"
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,91,Tmp = null;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,96, Clone the instance.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,97, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,98, original arrays of the instance
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,99, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,91,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,101,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,93,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,138,Tmp = new double[dimension];
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,218,if (currentState == null) {
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,219,// we are finalizing an uninitialized instance
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,220,return;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,224,double[] yTmp = new double[currentState.length];
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,314,** Temporary state vector. */
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,315,rivate double[] yTmp;
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,410,rivate static final long serialVersionUID = 4165537490327432186L;
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,403,private static final long serialVersionUID = 7152276390558450974L;
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,64,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,65,* @param interpolator interpolator to copy from. The copy is a deep
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,66,* copy: its arrays are separated from the original arrays of the
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,67,* instance
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,69,public DummyStepInterpolator(DummyStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,70,super(interpolator);
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,73,/** Really copy the finalized instance.
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,75,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,76,return new DummyStepInterpolator(this);
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,65, Clone the instance.
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,66, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,67, original arrays of the instance
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,68, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,64,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,70,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,src/java/org/apache/commons/math/ode/EulerStepInterpolator.java,66,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,70, Clone the instance.
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,71, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,72, original arrays of the instance
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,73, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,69,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,75,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,71,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,223, Clone the instance.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,224, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,225, original arrays of the instance
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,226, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,222,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,228,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,224,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,56, Clone the instance.
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,57, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,58, original arrays of the instance
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,59, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,55,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,61,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,57,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,67, Clone the instance.
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,68, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,69, original arrays of the instance
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,70, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,66,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,72,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,68,protected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,182,ungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.clone();
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,182,RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,175,ungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.clone();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,175,RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,65, <p>Setting the time outside of the current step is now allowed
False,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,66," (it was not allowed up to version 5.4 of Mantissa), but should be"
False,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,67, used with care since the accuracy of the interpolator will
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,65,"* <p>Setting the time outside of the current step is now allowed, but"
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,66,* should be used with care since the accuracy of the interpolator will
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,70,* <p>Setting the time changes the instance internal state. If a
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,71,"* specific state must be preserved, a copy of the instance must be"
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,72,* created using {@link #copy()}.</p>
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,97,/** Copy the instance.
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,98,* <p>The copied instance is guaranteed to be independent from the
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,99,* original one. Both can be used with different settings for
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,100,* interpolated time without any side effect.</p>
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,101,"* @return a deep copy of the instance, which can be used independently."
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,102,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,103,* step finalization that throws one
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,104,* @see #setInterpolatedTime(double)
True,src/java/org/apache/commons/math/ode/StepInterpolator.java,src/java/org/apache/commons/math/ode/StepInterpolator.java,106,public StepInterpolator copy() throws DerivativeException;
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,72, Clone the instance.
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,73, the copy is a deep copy: its arrays are separated from the
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,74, original arrays of the instance
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,75, @return a copy of the instance
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,71,/** Really copy the finalized instance.
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,77,ublic Object clone() {
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,73,protected StepInterpolator doCopy() {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,88,public void testClone()
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,89,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,90,TestProblem3 pb = new TestProblem3(0.9);
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,91,double minStep = 0;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,92,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,93,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,94,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,95,"DormandPrince54Integrator integ = new DormandPrince54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,96,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,97,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,98,integ.setStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,99,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,100,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,101,StepInterpolator cloned = interpolator.copy();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,102,double tA = cloned.getPreviousTime();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,103,double tB = cloned.getCurrentTime();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,104,double halfStep = Math.abs(tB - tA) / 2;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,105,"assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,106,"assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,107,for (int i = 0; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,108,double t = (i * tB + (9 - i) * tA) / 9;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,109,interpolator.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,110,assertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,111,cloned.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,112,"assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,113,double[] referenceState = interpolator.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,114,double[] cloneState     = cloned.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,115,for (int j = 0; j < referenceState.length; ++j) {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,116,"assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,120,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,121,return true;
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,123,public void reset() {
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,126,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,127,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54StepInterpolatorTest.java,128,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,88,public void testClone()
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,89,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,90,TestProblem3 pb = new TestProblem3(0.9);
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,91,double minStep = 0;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,92,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,93,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,94,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,95,"DormandPrince853Integrator integ = new DormandPrince853Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,96,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,97,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,98,integ.setStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,99,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,100,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,101,StepInterpolator cloned = interpolator.copy();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,102,double tA = cloned.getPreviousTime();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,103,double tB = cloned.getCurrentTime();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,104,double halfStep = Math.abs(tB - tA) / 2;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,105,"assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,106,"assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,107,for (int i = 0; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,108,double t = (i * tB + (9 - i) * tA) / 9;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,109,interpolator.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,110,assertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,111,cloned.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,112,"assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,113,double[] referenceState = interpolator.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,114,double[] cloneState     = cloned.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,115,for (int j = 0; j < referenceState.length; ++j) {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,116,"assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,120,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,121,return true;
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,123,public void reset() {
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,126,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,127,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853StepInterpolatorTest.java,128,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,89,public void testClone()
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,90,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,91,TestProblem3 pb = new TestProblem3(0.9);
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,92,double minStep = 0;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,93,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,94,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,95,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,96,"GraggBulirschStoerIntegrator integ = new GraggBulirschStoerIntegrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,97,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,98,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,99,integ.setStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,100,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,101,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,102,StepInterpolator cloned = interpolator.copy();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,103,double tA = cloned.getPreviousTime();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,104,double tB = cloned.getCurrentTime();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,105,double halfStep = Math.abs(tB - tA) / 2;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,106,"assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,107,"assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,108,for (int i = 0; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,109,double t = (i * tB + (9 - i) * tA) / 9;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,110,interpolator.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,111,assertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,112,cloned.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,113,"assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,114,double[] referenceState = interpolator.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,115,double[] cloneState     = cloned.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,116,for (int j = 0; j < referenceState.length; ++j) {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,117,"assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,121,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,122,return true;
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,124,public void reset() {
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,127,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,128,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolatorTest.java,129,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,88,public void testClone()
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,89,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,90,TestProblem3 pb = new TestProblem3(0.9);
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,91,double minStep = 0;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,92,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,93,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,94,double scalRelativeTolerance = scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,95,"HighamHall54Integrator integ = new HighamHall54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,96,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,97,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,98,integ.setStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,99,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,100,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,101,StepInterpolator cloned = interpolator.copy();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,102,double tA = cloned.getPreviousTime();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,103,double tB = cloned.getCurrentTime();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,104,double halfStep = Math.abs(tB - tA) / 2;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,105,"assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,106,"assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,107,for (int i = 0; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,108,double t = (i * tB + (9 - i) * tA) / 9;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,109,interpolator.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,110,assertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,111,cloned.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,112,"assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,113,double[] referenceState = interpolator.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,114,double[] cloneState     = cloned.getInterpolatedState();
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,115,for (int j = 0; j < referenceState.length; ++j) {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,116,"assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,120,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,121,return true;
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,123,public void reset() {
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,126,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,127,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,src/test/org/apache/commons/math/ode/HighamHall54StepInterpolatorTest.java,128,"pb.getFinalTime(), new double[pb.getDimension()]);"

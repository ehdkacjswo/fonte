is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,25,import java.util.ConcurrentModificationException;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,28,import java.util.NoSuchElementException;
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,38,rivate static final long serialVersionUID = 8560172512507661982L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,40,private static final long serialVersionUID = -143052521750625264L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,313,* Constructs a new <code>ConcurrentModificationException</code> with specified formatted detail message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,314,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,315,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,316,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,318,"public static ConcurrentModificationException createConcurrentModificationException(final String pattern,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,319,final Object[] arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,320,"return new ConcurrentModificationException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,322,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,323,private static final long serialVersionUID = 6134247282754009421L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,325,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,326,public String getLocalizedMessage() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,327,"return buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,334,* Constructs a new <code>NoSuchElementException</code> with specified formatted detail message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,335,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,336,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,337,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,339,"public static NoSuchElementException createNoSuchElementException(final String pattern,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,340,final Object[] arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,341,"return new NoSuchElementException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,343,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,344,private static final long serialVersionUID = 7304273322489425799L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,346,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,347,public String getLocalizedMessage() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,348,"return buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,205,"{ ""{0}x{1} and {2}x{3} matrices are not addition compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,206,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,207,"{ ""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,208,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,209,"{ ""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,210,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,222," ""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,223,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,224," ""{0}x{1} and {2}x{3} matrices are not addition compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,225,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,226," ""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,227,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,334,"exposant {0} invalide (doit \u00eatre positif)"" }"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,334,"""exposant {0} invalide (doit \u00eatre positif)"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,336,// org.apache.commons.math.util.OpenIntToDoubleHashMap
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,337,"{ ""map has been modified while iterating"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,338,"""la table d''adressage a \u00e9t\u00e9 modifi\u00e9e pendant l''it\u00e9ration"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,339,"{ ""iterator exhausted"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,340,"""it\u00e9ration achev\u00e9e"" }"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,18,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,21,import java.util.ConcurrentModificationException;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,22,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,27,* Open addressed map from int to double.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,28,* <p>This class provides a dedicated map from integers to doubles with a
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,29,* much smaller memory overhead than standard <code>java.util.Map</code>.</p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,30,* <p>This class is not synchronized. The specialized iterators returned by
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,31,* {@link #iterator()} are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,32,* <code>ConcurrentModificationException</code> when they detect the map has been
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,33,* modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,35,* @since 2.0
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,37,public class OpenIntToDoubleHashMap implements Serializable {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,39,/** Serializable version identifier */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,40,private static final long serialVersionUID = -3646337053166149105L;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,42,/** Load factor for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,43,private static final float LOAD_FACTOR = 0.5f;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,45,/** Default starting size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,46,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,48,private static final int DEFAULT_EXPECTED_SIZE = 16;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,50,/** Multiplier for size growth when map fills up.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,51,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,53,private static final int RESIZE_MULTIPLIER = 2;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,55,/** Number of bits to perturb the index when probing for collision resolution. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,56,private static final int PERTURB_SHIFT = 5;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,58,/** Status indicator for free table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,59,protected static final byte FREE    = 0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,61,/** Status indicator for full table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,62,protected static final byte FULL    = 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,64,/** Status indicator for removed table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,65,protected static final byte REMOVED = 2;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,67,/** Keys table. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,68,private int[] keys;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,70,/** Values table. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,71,private double[] values;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,73,/** States table. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,74,private byte[] states;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,76,/** Current size of the map. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,77,private int size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,79,/** Bit mask for hash values. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,80,private int mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,82,/** Modifications count. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,83,private transient int count;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,86,* Build an empty map with default size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,88,public OpenIntToDoubleHashMap() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,89,this(DEFAULT_EXPECTED_SIZE);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,93,* Build an empty map with specified size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,94,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,96,public OpenIntToDoubleHashMap(final int expectedSize) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,97,final int capacity = computeCapacity(expectedSize);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,98,keys   = new int[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,99,values = new double[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,100,states = new byte[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,101,mask   = capacity - 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,105,* Copy constructor.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,106,* @param source map to copy
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,108,public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,109,final int length = source.keys.length;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,110,keys = new int[length];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,111,"System.arraycopy(source.keys, 0, keys, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,112,values = new double[length];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,113,"System.arraycopy(source.values, 0, values, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,114,states = new byte[length];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,115,"System.arraycopy(source.states, 0, states, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,116,size  = source.size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,117,mask  = source.mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,118,count = source.count;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,122,* Compute the capacity needed for a given size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,123,* @param expectedSize expected size of the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,124,* @return capacity to use for the specified size
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,126,private static int computeCapacity(final int expectedSize) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,127,if (expectedSize == 0) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,128,return 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,130,final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,131,final int powerOfTwo = Integer.highestOneBit(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,132,if (powerOfTwo == capacity) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,133,return capacity;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,135,return nextPowerOfTwo(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,139,* Find the smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,140,* @param i input value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,141,* @return smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,143,private static int nextPowerOfTwo(final int i) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,144,return Integer.highestOneBit(i) << 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,148,* Get the stored value associated with the given key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,149,* @param key key associated with the data
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,150,* @return data associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,152,public double get(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,154,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,155,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,156,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,157,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,160,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,161,return 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,164,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,165,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,166,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,167,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,168,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,172,return 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,177,* Check if a value is associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,178,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,179,* @return true if a value is associated with key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,181,public boolean containsKey(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,183,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,184,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,185,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,186,return true;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,189,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,190,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,193,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,194,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,195,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,196,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,197,return true;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,201,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,206,* Get an iterator over map elements.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,207,* <p>The specialized iterators returned are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,208,* <code>ConcurrentModificationException</code> when they detect the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,209,* has been modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,210,* @return iterator over the map elements
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,212,public Iterator iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,213,return new Iterator();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,217,* Perturb the hash for starting probing.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,218,* @param hash initial hash
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,219,* @return perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,221,private static int perturb(final int hash) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,222,return hash & 0x7fffffff;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,226,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,227,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,228,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,230,private int findInsertionIndex(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,231,"return findInsertionIndex(keys, states, key, mask);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,235,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,236,* @param keys keys table
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,237,* @param states states table
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,238,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,239,* @param mask bit mask for hash values
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,240,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,242,"private static int findInsertionIndex(final int[] keys, final byte[] states,"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,243,"final int key, final int mask) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,244,final int hash = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,245,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,246,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,247,return index;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,248,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,249,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,252,int perturb = perturb(hash);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,253,int j = index;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,254,if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,255,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,256,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,257,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,258,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,260,if (states[index] != FULL || keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,261,break;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,266,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,267,return index;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,268,} else if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,269,"// due to the loop exit condition,"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,270,// if (states[index] == FULL) then keys[index] == key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,271,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,274,final int firstRemoved = index;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,275,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,276,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,277,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,279,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,280,return firstRemoved;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,281,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,282,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,285,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,292,* Compute next probe for collision resolution
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,293,* @param perturb perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,294,* @param j previous probe
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,295,* @return next probe
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,297,"private static int probe(final int perturb, final int j) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,298,return (j << 2) + j + perturb + 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,302,* Change the index sign
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,303,* @param index initial index
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,304,* @return changed index
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,306,private static int changeIndexSign(final int index) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,307,return -index - 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,311,* Get the number of elements stored in the map.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,312,* @return number of elements stored in the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,314,public int size() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,315,return size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,319,* Remove the value associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,320,* @param key key to which the value is associated
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,321,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,323,public double remove(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,325,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,326,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,327,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,328,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,331,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,332,return 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,335,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,336,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,337,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,338,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,339,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,343,return 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,348,* Check if the tables contain an element associated with specified key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,349,* at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,350,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,351,* @param index index to check
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,352,* @return true if an element is associated with key at index
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,354,"private boolean containsKey(final int key, final int index) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,355,return (key != 0 || states[index] == FULL) && keys[index] == key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,359,* Remove an element at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,360,* @param index index of the element to remove
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,361,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,363,private double doRemove(int index) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,364,keys[index]   = 0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,365,states[index] = REMOVED;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,366,final double previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,367,values[index] = 0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,368,--size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,369,++count;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,370,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,374,* Put a value associated with a key in the map.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,375,* @param key key to which value is associated
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,376,* @param value value to put in the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,377,* @return previous value associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,379,"public double put(final int key, final double value) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,380,int index = findInsertionIndex(key);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,381,double previous = 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,382,boolean newMapping = true;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,383,if (index < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,384,index = changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,385,previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,386,newMapping = false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,388,keys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,389,states[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,390,values[index] = value;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,391,if (newMapping) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,392,++size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,393,if (shouldGrowTable()) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,394,growTable();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,398,++count;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,399,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,404,* Grow the tables.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,406,private void growTable() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,408,final int oldLength      = states.length;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,409,final int[] oldKeys      = keys;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,410,final double[] oldValues = values;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,411,final byte[] oldStates   = states;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,413,final int newLength = RESIZE_MULTIPLIER * oldLength;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,414,final int[] newKeys = new int[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,415,final double[] newValues = new double[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,416,final byte[] newStates = new byte[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,417,final int newMask = newLength - 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,418,for (int i = 0; i < oldLength; ++i) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,419,if (oldStates[i] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,420,final int key = oldKeys[i];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,421,"final int index = findInsertionIndex(newKeys, newStates, key, newMask);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,422,newKeys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,423,newValues[index] = oldValues[i];
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,424,newStates[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,428,mask   = newMask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,429,keys   = newKeys;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,430,values = newValues;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,431,states = newStates;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,436,* Check if tables should grow due to increased size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,437,* @return true if  tables should grow
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,439,private boolean shouldGrowTable() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,440,return size > (mask + 1) * LOAD_FACTOR;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,444,* Compute the hash value of a key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,445,* @param key key to hash
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,446,* @return hash value of the key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,448,private static int hashOf(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,449,final int h = key ^ ((key >>> 20) ^ (key >>> 12));
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,450,return h ^ (h >>> 7) ^ (h >>> 4);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,453,/** Iterator class for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,454,public class Iterator {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,456,/** Reference modification count. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,457,final int referenceCount;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,459,/** Index of next element. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,460,private int index;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,463,* Simple constructor.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,465,private Iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,466,referenceCount = count;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,467,index = -1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,468,goToNext();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,472,* Check if there is a next element in the map.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,473,* @return true if there is a next element
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,475,public boolean hasNext() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,476,return index >= 0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,480,* Get the next entry.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,481,* @return next entry
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,482,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,483,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,485,public Entry next()
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,486,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,487,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,488,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"","
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,489,null);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,491,if (index < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,492,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"", null);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,494,"final Entry entry = new Entry(keys[index], values[index]);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,495,goToNext();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,496,return entry;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,500,* Find next index.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,502,private void goToNext() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,503,try {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,504,while (states[++index] != FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,505,// nothing to do
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,507,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,508,index = -1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,514,/** Entry class for the map.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,515,"* <p>Entry elements are built on the fly only during iteration,"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,516,* copying values. So changes in the map are <strong>not</strong>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,517,* reflected on already built entries.</p>
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,519,public static class Entry {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,521,/** Key. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,522,private final int key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,524,/** Value. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,525,private final double value;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,528,* Simple constructor.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,529,* @param key entry key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,530,* @param value entry value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,532,"private Entry(final int key, final double value) {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,533,this.key   = key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,534,this.value = value;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,538,* Get the key.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,539,* @return entry key
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,541,public int key() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,542,return key;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,546,* Get the value.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,547,* @return entry value
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,549,public double value() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,550,return value;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,17,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,19,import java.util.ConcurrentModificationException;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,20,import java.util.HashMap;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,22,import java.util.Map;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,23,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,24,import java.util.Random;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,30,* Test cases for the {@link OpenIntToDoubleHashMap}.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,32,public class OpenIntToDoubleHashMapTest extends TestCase {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,34,"private Map<Integer, Double> javaMap = new HashMap<Integer, Double>();"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,36,@Override
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,37,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,38,"javaMap.put(50, 100.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,39,"javaMap.put(75, 75.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,40,"javaMap.put(25, 500.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,41,"javaMap.put(Integer.MAX_VALUE, Double.MAX_VALUE);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,42,"javaMap.put(0, -1.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,43,"javaMap.put(1, 0.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,44,"javaMap.put(33, -0.1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,45,"javaMap.put(23234234, -242343.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,46,"javaMap.put(23321, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,47,"javaMap.put(-4444, 332.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,48,"javaMap.put(-1, -2323.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,49,"javaMap.put(Integer.MIN_VALUE, 44.0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,51,/* Add a few more to cause the table to rehash */
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,52,javaMap.putAll(generate());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,56,"private Map<Integer, Double> generate() {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,57,"Map<Integer, Double> map = new HashMap<Integer, Double>();"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,58,Random r = new Random();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,59,for (int i = 0; i < 2000; ++i)
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,60,"map.put(r.nextInt(), r.nextDouble());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,61,return map;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,64,private OpenIntToDoubleHashMap createFromJavaMap() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,65,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,66,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,67,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,69,return map;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,72,public void testPutAndGetWith0ExpectedSize() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,73,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap(0);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,74,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,77,public void testPutAndGetWithExpectedSize() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,78,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap(500);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,79,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,82,public void testPutAndGet() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,83,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,84,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,87,private void assertPutAndGet(OpenIntToDoubleHashMap map) {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,88,"assertPutAndGet(map, 0, new HashSet<Integer>());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,91,"private void assertPutAndGet(OpenIntToDoubleHashMap map, int mapSize,"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,92,Set<Integer> keysInMap) {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,93,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,94,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,95,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,96,if (!keysInMap.contains(mapEntry.getKey()))
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,97,++mapSize;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,98,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,99,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,103,public void testPutAbsentOnExisting() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,104,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,105,int size = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,106,"for (Map.Entry<Integer, Double> mapEntry : generateAbsent().entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,107,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,108,"assertEquals(++size, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,109,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,113,public void testPutOnExisting() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,114,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,115,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,116,"map.put(mapEntry.getKey(), mapEntry.getValue());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,117,"assertEquals(javaMap.size(), map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,118,"assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,122,public void testGetAbsent() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,123,"Map<Integer, Double> generated = generateAbsent();"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,124,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,126,"for (Map.Entry<Integer, Double> mapEntry : generated.entrySet())"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,127,"assertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,130,public void testGetFromEmpty() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,131,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,132,"assertEquals(0.0, map.get(5));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,133,"assertEquals(0.0, map.get(0));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,134,"assertEquals(0.0, map.get(50));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,137,public void testRemove() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,138,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,139,int mapSize = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,140,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,141,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,142,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,143,"assertEquals(--mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,144,"assertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,147,/* Ensure that put and get still work correctly after removals */
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,148,assertPutAndGet(map);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,151,/* This time only remove some entries */
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,152,public void testRemove2() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,153,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,154,int mapSize = javaMap.size();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,155,int count = 0;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,156,Set<Integer> keysInMap = new HashSet<Integer>(javaMap.keySet());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,157,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,158,keysInMap.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,159,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,160,"assertEquals(--mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,161,"assertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,162,if (count++ > 5)
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,163,break;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,166,/* Ensure that put and get still work correctly after removals */
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,167,"assertPutAndGet(map, mapSize, keysInMap);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,170,public void testRemoveFromEmpty() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,171,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,172,"assertEquals(0.0, map.remove(50));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,175,public void testRemoveAbsent() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,176,"Map<Integer, Double> generated = generateAbsent();"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,178,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,179,int mapSize = map.size();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,181,"for (Map.Entry<Integer, Double> mapEntry : generated.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,182,map.remove(mapEntry.getKey());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,183,"assertEquals(mapSize, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,184,"assertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,189,* Returns a map with at least 100 elements where each element is absent from javaMap.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,191,"private Map<Integer, Double> generateAbsent() {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,192,"Map<Integer, Double> generated = new HashMap<Integer, Double>();"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,193,do {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,194,generated.putAll(generate());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,195,for (Integer key : javaMap.keySet())
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,196,generated.remove(key);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,197,} while (generated.size() < 100);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,198,return generated;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,201,public void testCopy() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,202,OpenIntToDoubleHashMap copy =
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,203,new OpenIntToDoubleHashMap(createFromJavaMap());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,204,"assertEquals(javaMap.size(), copy.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,206,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet())"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,207,"assertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,210,public void testContainsKey() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,211,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,212,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,213,assertTrue(map.containsKey(mapEntry.getKey()));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,215,"for (Map.Entry<Integer, Double> mapEntry : generateAbsent().entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,216,assertFalse(map.containsKey(mapEntry.getKey()));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,218,"for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,219,int key = mapEntry.getKey();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,220,assertTrue(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,221,map.remove(key);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,222,assertFalse(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,226,public void testIterator() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,227,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,228,OpenIntToDoubleHashMap.Iterator iterator = map.iterator();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,229,for (int i = 0; i < map.size(); ++i) {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,230,assertTrue(iterator.hasNext());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,231,OpenIntToDoubleHashMap.Entry entry = iterator.next();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,232,int key = entry.key();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,233,assertTrue(map.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,234,"assertEquals(javaMap.get(key), map.get(key), 0);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,235,assertTrue(javaMap.containsKey(key));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,237,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,238,try {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,239,iterator.next();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,240,} catch (NoSuchElementException nsee) {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,241,// expected
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,245,public void testConcurrentModification() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,246,OpenIntToDoubleHashMap map = createFromJavaMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,247,OpenIntToDoubleHashMap.Iterator iterator = map.iterator();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,248,"map.put(3, 3);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,249,try {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,250,iterator.next();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,251,} catch (ConcurrentModificationException cme) {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,252,// expected
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,257,* Regression test for a bug in findInsertionIndex where the hashing in the second probing
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,258,* loop was inconsistent with the first causing duplicate keys after the right sequence
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,259,* of puts and removes.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,261,public void testPutKeysWithCollisions() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,262,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,263,int key1 = -1996012590;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,264,double value1 = 1.0;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,265,"map.put(key1, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,266,int key2 = 835099822;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,267,"map.put(key2, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,268,int key3 = 1008859686;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,269,"map.put(key3, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,270,"assertEquals(value1, map.get(key3));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,271,"assertEquals(3, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,273,map.remove(key2);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,274,double value2 = 2.0;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,275,"map.put(key3, value2);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,276,"assertEquals(value2, map.get(key3));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,277,"assertEquals(2, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,281,* Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,282,* different manner.
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,284,public void testPutKeysWithCollision2() {
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,285,OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,286,int key1 = 837989881;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,287,double value1 = 1.0;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,288,"map.put(key1, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,289,int key2 = 476463321;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,290,"map.put(key2, value1);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,291,"assertEquals(2, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,292,"assertEquals(value1, map.get(key2));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,294,map.remove(key1);
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,295,double value2 = 2.0;
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,296,"map.put(key2, value2);"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,297,"assertEquals(1, map.size());"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,298,"assertEquals(value2, map.get(key2));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,29,tatic final long serialVersionUID = -3657394299929217890L;
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,29,private static final long serialVersionUID = -3657394299929217890L;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,29,tatic final long serialVersionUID = -317289374378977972L;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,29,private static final long serialVersionUID = -317289374378977972L;
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,tatic final long serialVersionUID = -7958299004965931723L;
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,private static final long serialVersionUID = -7958299004965931723L;
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,34,tatic final long serialVersionUID = -8594613561393443827L;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,34,private static final long serialVersionUID = -8594613561393443827L;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,32,tatic final long serialVersionUID = 7137520585963699578L;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,32,private static final long serialVersionUID = 7137520585963699578L;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,33,tatic final long serialVersionUID = 3350616277306882875L;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,33,private static final long serialVersionUID = 3350616277306882875L;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,19,import java.io.IOException;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,33,tatic final long serialVersionUID = 2606474895443431607L;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,34,private static final long serialVersionUID = 2606474895443431607L;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,36,rivate UnivariateRealFunction derivative;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,37,private transient UnivariateRealFunction derivative;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,103,* Custom deserialization to initialize transient deriviate field.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,105,* @param in serialized object input stream
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,106,* @throws IOException if IO error occurs
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,107,* @throws ClassNotFoundException if instantiation error occurs
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,109,private void readObject(java.io.ObjectInputStream in)
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,110,"throws IOException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,111,in.defaultReadObject();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,112,derivative = ((DifferentiableUnivariateRealFunction) f).derivative();
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,31,tatic final long serialVersionUID = 3322454535052136809L;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,31,private static final long serialVersionUID = 3322454535052136809L;
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,55,"ublic class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,55,public class PolynomialSplineFunction
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,56,"implements DifferentiableUnivariateRealFunction, Serializable {"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,58,tatic final long serialVersionUID = 7011031166416885789L;
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,59,private static final long serialVersionUID = 7011031166416885789L;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,43,tatic final long serialVersionUID = 1984971194738974867L;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,43,private static final long serialVersionUID = 1984971194738974867L;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,19," Computes a natural (a.k.a. ""free"", ""unclamped"") cubic spline interpolation for the data set."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,19,"* Computes a natural (also known as ""free"", ""unclamped"") cubic spline interpolation for the data set."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,33,tatic final long serialVersionUID = 1112491292565386596L;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,33,private static final long serialVersionUID = 1112491292565386596L;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,ouble f1 = f.value(lower);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269,ouble f2 = f.value(upper);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,270,eturn ((f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0));
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,double f1 = f.value(lower);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269,double f2 = f.value(upper);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,270,return ((f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0));
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,25,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26,* Implementations of arithmetic operations handle <code>NaN</code> and
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,27,* infinite values according to the rules for {@link java.lang.Double}
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,28,"* arithmetic, applying definitional formulas and returning <code>NaN</code> or"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,29,* infinite values in real or imaginary parts as these arise in computation.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,30,* See individual method javadocs for details.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,31,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,32,* {@link #equals} identifies all values with <code>NaN</code> in either real
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,33,"* or imaginary part - e.g., <pre>"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,34,* <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre>
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,32,tatic final long serialVersionUID = -6530173849413811929L;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,42,private static final long serialVersionUID = -6530173849413811929L;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,34,"** The square root of -1. A number representing ""0.0 + 1.0i"".*/"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,44,"/** The square root of -1. A number representing ""0.0 + 1.0i"" */"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,37,** A complex number analogous to {@link java.lang.Double#NaN} */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,47,"/** A complex number representing ""NaN + NaNi"" */"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,43,** The imaginary part. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,53,"/** A complex number representing ""0.0 + 0.0i"" */"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,54,"public static final Complex ZERO = new Complex(0.0, 0.0);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,56,/** The imaginary part */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,46,** The real part. */
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,59,/** The real part */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,52, @param real the real part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,53, @param imaginary the imaginary part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,65,* @param real the real part
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,66,* @param imaginary the imaginary part
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,76,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,77,* Returns <code>NaN</code> if either real or imaginary part is
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,78,* <code>NaN</code> and <code>Double.POSITIVE_INFINITY</code> if
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,79,"* neither part is <code>NaN</code>, but at least one part takes an infinite"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,80,* value.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,64, @return the absolute value.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,82,* @return the absolute value
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,89,if (isInfinite()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,90,return Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,110,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,111,* Uses the definitional formula
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,112,* <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,113,* (a + bi) + (c + di) = (a+c) + (b+d)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,114,* </pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,115,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,116,"* If either this or <code>rhs</code> has a NaN value in either part,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,117,* {@link #NaN} is returned; otherwise Inifinite and NaN values are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,118,* returned in the parts of the result according to the rules for
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,119,* {@link java.lang.Double} arithmetic.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,88, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,89, @return the complex number sum.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,121,* @param rhs the other complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,122,* @return the complex number sum
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,123,* @throws NullPointerException if <code>rhs</code> is null
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,91,ublic Complex add(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,92,f (isNaN() || rhs.isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,93,eturn NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,125,public Complex add(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,101, Return the conjugate of this complex number.  The conjugate of
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,102," ""A + Bi"" is ""A - Bi"".  Complex.NaN is returned if either the real or imaginary part of"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,103, this Complex number equals Double.NaN.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,131,* Return the conjugate of this complex number. The conjugate of
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,132,"* ""A + Bi"" is ""A - Bi""."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,133,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,134,* {@link #NaN} is returned if either the real or imaginary
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,135,* part of this Complex number equals <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,136,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,137,"* If the imaginary part is infinite, and the real part is not NaN,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,138,* the returned value has infinite imaginary part of the opposite
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,139,* sign - e.g. the conjugate of <code>1 + POSITIVE_INFINITY i</code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,140,* is <code>1 - NEGATIVE_INFINITY i</code>
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,117, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,118, @return the complex number quotient.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,153,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,154,* Implements the definitional formula
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,155,* <pre><code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,156,*    a + bi          ac + bd + (bc - ad)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,158,*    c + di               c<sup>2</sup> + d<sup>2</sup>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,159,* </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,160,* but uses
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,161,"* <a href=""http://doi.acm.org/10.1145/1039813.1039814"">"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,162,* prescaling of operands</a> to limit the effects of overflows and
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,163,* underflows in the computation.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,164,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,165,* Infinite and NaN values are handled / returned according to the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,166,"* following rules, applied in the order presented:"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,167,* <ul>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,168,"* <li>If either this or <code>rhs</code> has a NaN value in either part,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,169,*  {@link #NaN} is returned.</li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,170,"* <li>If <code>rhs</code> equals {@link #ZERO}, {@link #NaN} is returned."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,171,* </li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,172,"* <li>If this and <code>rhs</code> are both infinite,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,173,* {@link #NaN} is returned.</li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,174,"* <li>If this is finite (i.e., has no infinite or NaN parts) and"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,175,"*  <code>rhs</code> is infinite (one or both parts infinite),"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,176,* {@link #ZERO} is returned.</li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,177,"* <li>If this is infinite and <code>rhs</code> is finite, NaN values are"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,178,* returned in the parts of the result if the {@link java.lang.Double}
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,179,* rules applied to the definitional formula force NaN results.</li>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,180,* </ul>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,182,* @param rhs the other complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,183,* @return the complex number quotient
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,184,* @throws NullPointerException if <code>rhs</code> is null
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,128,"hrow new ArithmeticException(""Error: division by zero."");"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,194,return NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,197,if (rhs.isInfinite() && !isInfinite()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,198,return ZERO;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,159," to Double.NaN, the complex number is equal to"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,229,"* to <code>Double.NaN</code>, the complex number is equal to"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,165,         not equal to this Complex instance.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,235,*         not equal to this Complex instance
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,213, @return the imaginary part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,283,* @return the imaginary part
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,222, @return the real part.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,292,* @return the real part
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,229, Returns true if this complex number is the special Not-a-Number (NaN)
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,230, value.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,299,* Returns true if either or both parts of this complex number is NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,300,* false otherwise
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,232, @return true if the value represented by this object is NaN; false
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,233,         otherwise.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,302,* @return  true if either or both parts of this complex number is NaN;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,303,* false otherwise
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,310,* Returns true if either the real or imaginary part of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,311,* takes an infinite value (either <code>Double.POSITIVE_INFINITY</code> or
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,312,* <code>Double.NEGATIVE_INFINITY</code>) and neither part
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,313,* is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,315,* @return true if one or both parts of this complex number are infinite
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,316,* and neither part is <code>NaN</code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,318,public boolean isInfinite() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,319,return !isNaN() &&
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,320,(Double.isInfinite(real) || Double.isInfinite(imaginary));
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,242, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,243, @return the complex number product.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,325,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,326,* Implements the definitional formula:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,327,* <pre><code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,328,* (a + bi)(c + di) = (ac - bd) + (ad + bc)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,329,* </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,330,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,331,* Returns {@link #NaN} if either this or <code>rhs</code> has one or more
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,332,* NaN parts.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,333,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,334,* Returns NaN or infinite values in components of the result per the
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,335,* definitional formula and and the rules for {@link java.lang.Double}
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,336,* arithmetic.  Examples:
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,337,* <pre><code>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,338,*  (1 + i) (INF + i)  =  INF + INFi
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,339,*  (1 + INFi) (1 - INFi) = INF + NaNi
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,340,*  (-INF + -INFi)(1 + NaNi) = NaN + NaNi
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,341,*  </code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,343,* @param rhs the other complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,344,* @return the complex number product
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,345,* @throws NullPointerException if <code>rhs</code> is null
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,250,ouble p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,251,ouble ac = real * rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,252,ouble bd = imaginary * rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,253,"eturn new Complex(ac - bd, p - ac - bd);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,351,"return new Complex(real * rhs.real - imaginary * rhs.imaginary,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,352,real * rhs.imaginary + imaginary * rhs.real);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,357,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,358,* Returns <code>Complex.NaN</code> if either real or imaginary
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,359,* part of this Complex number equals <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,259, @return the negation of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,361,* @return the negation of this complex number
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,273, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,274, @return the complex number difference.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,374,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,375,* Uses the definitional formula
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,376,* <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,377,* (a + bi) - (c + di) = (a-c) + (b-d)i
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,378,* </pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,379,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,380,"* If either this or <code>rhs</code> has a NaN value in either part,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,381,* {@link #NaN} is returned; otherwise inifinite and NaN values are
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,382,* returned in the parts of the result according to the rules for
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,383,* {@link java.lang.Double} arithmetic.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,385,* @param rhs the other complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,386,* @return the complex number difference
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,387,* @throws NullPointerException if <code>rhs</code> is null
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,38,tatic final long serialVersionUID = -6337346779577272306L;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,38,private static final long serialVersionUID = -6337346779577272306L;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,2,* Copyright 2003-2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,22, Implementations of various transcendental functions for
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,23, {@link org.apache.commons.math.complex.Complex} arguments.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,22,* Static implementations of common
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,23,* {@link org.apache.commons.math.complex.Complex}-valued functions.  Included
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,24,"* are trigonometric, exponential, log, power and square root functions."
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,25,*<p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31,* See individual method javadocs for the computational formulas used.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,32,"* In general, NaN values in either real or imaginary parts of input arguments"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,33,"* result in {@link Complex#NaN} returned.  Otherwise, infinite or NaN values"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,34,* are returned as they arise in computing the real functions specified in the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,35,* computational formulas.  Null arguments result in NullPointerExceptions.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,43," Compute the <a href=""http://mathworld.wolfram.com/InverseCosine.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,49,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,50,"* <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,45, @param z the value whose inverse cosine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,46, @return the inverse cosine of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,52,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,53,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,54,* <code> acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,55,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,56,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,57,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,59,* @param z the value whose inverse cosine is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,60,* @return the inverse cosine of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,61,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,58," Compute the <a href=""http://mathworld.wolfram.com/InverseSine.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,73,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,74,"* <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,76,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,77,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,78,* <code> asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz)) </code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,79,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,80,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,81,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,85,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,73," Compute the <a href=""http://mathworld.wolfram.com/InverseTangent.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,97,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,98,"* <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,75, @param z the value whose inverse tangent is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,76, @return the inverse tangent of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,100,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,101,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,102,* <code> atan(z) = (i/2) log((i + z)/(i - z)) </code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,103,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,104,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,105,* input argument is <code>NaN</code> or infinite.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,107,* @param z the value whose inverse tangent is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,108,* @return the inverse tangent of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,109,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,90," Compute the <a href=""http://mathworld.wolfram.com/Cosine.html"">cosine</a>"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,122,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,123,"* <a href=""http://mathworld.wolfram.com/Cosine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,124,* cosine</a>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,92, @param z the value whose cosine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,93, @return the cosine of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,126,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,127,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,128,* <code> cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,129,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,130,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,131,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,132,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,133,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,134,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,135,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,136,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,137,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,138,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,139,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,140,* cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,141,* cos(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,142,* cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,144,* @param z the value whose cosine is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,145,* @return the cosine of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,146,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,108," Compute the <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,161,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,162,"* <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,164,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,165,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,166,* <code> cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,167,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,168,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,169,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,170,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,171,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,172,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,173,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,174,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,175,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,176,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,177,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,178,* cosh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,179,* cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,180,* cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,181,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,182,* Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,127," <a href=""http://mathworld.wolfram.com/ExponentialFunction.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,201,"* <a href=""http://mathworld.wolfram.com/ExponentialFunction.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,129, @param z the value.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,130, @return <i>e</i><sup><code>z</code></sup>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,203,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,204,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,205,* <code> exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,206,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,207,"* {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,208,* {@link java.lang.Math#sin}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,209,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,210,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,211,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,212,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,213,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,214,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,215,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,216,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,217,* exp(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,218,* exp(INFINITY + i) = INFINITY + INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,219,* exp(-INFINITY + i) = 0 + 0i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,220,* exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,221,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,222,* Throws <code>NullPointerException</code> if z is null.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,224,* @param z the value
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,225,* @return <i>e</i><sup><code>z</code></sup>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,139,ouble sinB = Math.sin(b);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,140,ouble cosB = Math.cos(b);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,141,"eturn new Complex(expA * cosB, expA * sinB);"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,234,"return new Complex(expA *  Math.cos(b), expA * Math.sin(b));"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,145," Compute the <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,238,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,239,"* <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,241,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,242,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,243,* <code> log(a + bi) = ln(|a + bi|) + arg(a + bi)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,244,"* where ln on the right hand side is {@link java.lang.Math#log},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,245,"* <code>|a + bi|</code> is the modulus, {@link Complex#abs},  and"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,246,"* <code>arg(a + bi) = {@link java.lang.Math#atan2}(b, a)</code>"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,247,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,248,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,249,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,250,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,251,* Infinite (or critical) values in real or imaginary parts of the input may
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,252,* result in infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,253,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,254,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,255,* log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,256,* log(INFINITY + i) = INFINITY + 0i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,257,* log(-INFINITY + i) = INFINITY + &pi;i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,258,* log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,259,* log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,260,* log(0 + 0i) = -INFINITY + 0i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,261,* </code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,262,* Throws <code>NullPointerException</code> if z is null.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,277,* Creates a complex number from the given polar representation.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,278,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,279,"* The value returned is <code>r&middot;e<sup>i&middot;theta</sup></code>,"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,280,* computed as <code>r&middot;cos(theta) + r&middot;sin(theta)i</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,281,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,282,"* If either <code>r</code> or <code>theta</code> is NaN, or"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,283,"* <code>theta</code> is infinite, {@link Complex#NaN} is returned."
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,284,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,285,"* If <code>r</code> is infinite and <code>theta</code> is finite,"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,286,"* infinite or NaN values may be returned in parts of the result, following"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,287,* the rules for double arithmetic.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,288,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,289,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,290,"* polar2Complex(INFINITY, &pi;/4) = INFINITY + INFINITY i"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,291,"* polar2Complex(INFINITY, 0) = INFINITY + NaN i"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,292,"* polar2Complex(INFINITY, -&pi;/4) = INFINITY - INFINITY i"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,293,"* polar2Complex(INFINITY, 5&pi;/4) = -INFINITY - INFINITY i </code></pre>"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,295,* @param r the modulus of the complex number to create
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,296,* @param theta  the argument of the complex number to create
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,297,* @return <code>r&middot;e<sup>i&middot;theta</sup></code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,298,* @throws IllegalArgumentException  if r is negative
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,299,* @since 1.1
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,301,"public static Complex polar2Complex(double r, double theta) {"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,302,if (r < 0) {
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,303,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,304,"(""Complex modulus must not be negative"");"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,306,"return new Complex(r * Math.cos(theta), r * Math.sin(theta));"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,311,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,312,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,313,* <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,314,* where <code>exp</code> and <code>log</code> are {@link #exp} and
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,315,"* {@link #log}, respectively."
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,316,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,317,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,318,"* input argument is <code>NaN</code> or infinite, or if <code>y</code>"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,319,* equals {@link Complex#ZERO}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,164, @return <code>y</code><sup><code>z</code></sup>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,323,* @return <code>y</code><sup><code>x</code></sup>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,324,* @throws NullPointerException if either x or y is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,171," Compute the <a href=""http://mathworld.wolfram.com/Sine.html"">sine</a>"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,331,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,332,"* <a href=""http://mathworld.wolfram.com/Sine.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,333,* sine</a>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,335,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,336,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,337,* <code> sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,338,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,339,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,340,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,341,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,342,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,343,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,344,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,345,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,346,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,347,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,348,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,349,* sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,350,* sin(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,351,* sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,353,* Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,189," Compute the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,371,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,372,"* <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,191, @param z the value whose hyperbolic sine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,192, @return the hyperbolic sine of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,374,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,375,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,376,* <code> sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,377,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,378,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,379,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,380,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,381,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,382,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,383,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,384,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,385,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,386,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,387,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,388,* sinh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,389,* sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,390,* sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,392,* @param z the value whose hyperbolic sine is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,393,* @return the hyperbolic sine of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,394,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,207," Compute the <a href=""http://mathworld.wolfram.com/SquareRoot.html"">squre"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,208, root</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,209, @param z the value whose square root is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,210, @return the square root of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,409,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,410,"* <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,411,* square root</a> for the given complex argument.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,412,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,413,* Implements the following algorithm to compute <code>sqrt(a + bi)</code>:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,414,* <ol><li>Let <code>t = sqrt((|a| + |a + bi|) / 2)</code></li>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,415,* <li><pre>if <code> a &#8805; 0</code> return <code>t + (b/2t)i</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,416,*  else return <code>|b|/2t + sign(b)t i </code></pre></li>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,417,* </ol>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,418,* where <ul>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,419,* <li><code>|a| = {@link Math#abs}(a)</code></li>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,420,* <li><code>|a + bi| = {@link Complex#abs}(a + bi) </code></li>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,421,* <li><code>sign(b) =  {@link MathUtils#indicator}(b) </code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,422,* </ul>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,423,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,424,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,425,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,426,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,427,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,428,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,429,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,430,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,431,* sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,432,* sqrt(INFINITY + i) = INFINITY + 0i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,433,* sqrt(-INFINITY + i) = 0 + INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,434,* sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,435,* sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,436,* </code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,438,* @param z the value whose square root is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,439,* @return the square root of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,440,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,233," Compute the <a href=""http://mathworld.wolfram.com/SquareRoot.html"">squre"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,234, root of 1 - <code>z</code><sup>2</sup> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,235, @param z the value.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,236, @return the square root of 1 - <code>z</code><sup>2</sup>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,463,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,464,"* <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,465,* square root</a> of 1 - <code>z</code><sup>2</sup> for the given complex
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,466,* argument.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,467,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,468,* Computes the result directly as
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,469,* <code>sqrt(Complex.ONE.subtract(z.multiply(z)))</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,470,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,471,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,472,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,473,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,474,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,475,* infinite or NaN values returned in parts of the result.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,477,* @param z the value
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,478,* @return the square root of 1 - <code>z</code><sup>2</sup>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,479,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,243," Compute the <a href=""http://mathworld.wolfram.com/Tangent.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,486,* Compute the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,487,"* <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,245, @param z the value whose tangent is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,246, @return the tangent of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,489,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,490,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,491,* <code>tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,492,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,493,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,494,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,495,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,496,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,497,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,498,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,499,* Infinite (or critical) values in real or imaginary parts of the input may
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,500,* result in infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,501,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,502,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,503,* tan(1 &plusmn; INFINITY i) = 0 + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,504,* tan(&plusmn;INFINITY + i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,505,* tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,506,* tan(&plusmn;&pi/2 + 0 i) = &plusmn;INFINITY + NaN i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,508,* @param z the value whose tangent is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,509,* @return the tangent of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,510,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,262," <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"">"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,526,"* <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,264, @param z the value whose hyperbolic tangent is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,265, @return the hyperbolic tangent of <code>z</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,528,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,529,* Implements the formula: <pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,530,* <code>tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,531,* where the (real) functions on the right-hand side are
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,532,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,533,* {@link MathUtils#cosh} and {@link MathUtils#sinh}.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,534,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,535,* Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,536,* input argument is <code>NaN</code>.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,537,* <p>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,538,* Infinite values in real or imaginary parts of the input may result in
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,539,* infinite or NaN values returned in parts of the result.<pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,540,* Examples:
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,541,* <code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,542,* tanh(1 &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,543,* tanh(&plusmn;INFINITY + i) = NaN + 0 i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,544,* tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,545,* tanh(0 + (&pi/2)i) = NaN + INFINITY i</code></pre>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,547,* @param z the value whose hyperbolic tangent is to be returned
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,548,* @return the hyperbolic tangent of <code>z</code>
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,549,* @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,38,tatic final long serialVersionUID = -38038050983108802L;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,38,private static final long serialVersionUID = -38038050983108802L;
False,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,31,tatic final long serialVersionUID = -38038050983108802L;
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,31,private static final long serialVersionUID = -38038050983108802L;
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,34,tatic final long serialVersionUID = -1146319659338487221L;
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,34,private static final long serialVersionUID = -1146319659338487221L;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,34,tatic final long serialVersionUID = 6751309484392813623L;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,34,private static final long serialVersionUID = 6751309484392813623L;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,32,tatic final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,32,private static final long serialVersionUID = 8589540077390120676L;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32,tatic final long serialVersionUID = -8352658048349159782L;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32,private static final long serialVersionUID = -8352658048349159782L;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23, The default implementation of {@link ExponentialDistribution}
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23,* The default implementation of {@link ExponentialDistribution}.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,31,tatic final long serialVersionUID = 2401296428283614780L;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,31,private static final long serialVersionUID = 2401296428283614780L;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,34,tatic final long serialVersionUID = -8516354193418641566L;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,34,private static final long serialVersionUID = -8516354193418641566L;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,24, The default implementation of {@link GammaDistribution}
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,24,* The default implementation of {@link GammaDistribution}.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,32,tatic final long serialVersionUID = -3239549463135430361L;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,32,private static final long serialVersionUID = -3239549463135430361L;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,33,tatic final long serialVersionUID = -436928820673516179L;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,33,private static final long serialVersionUID = -436928820673516179L;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,"number of successes must be less than or equal to "" +"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"population size"");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,"""number of successes must be less than or equal to "" +"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"""population size"");"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263,ublic double upperCumulativeProbability(int x) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,264,ouble ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263,public double upperCumulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,264,double ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,276,"et = innerCumulativeProbability(domain[1], x, -1, n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,276,"ret = innerCumulativeProbability(domain[1], x, -1, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296,"nt x0, int x1, int dx, int n, int m, int k)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296,"int x0, int x1, int dx, int n, int m, int k)"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298,"ouble ret = probability(n, m, k, x0);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,hile (x0 != x1) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,300,0 += dx;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"et += probability(n, m, k, x0);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,303,eturn ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298,"double ret = probability(n, m, k, x0);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,while (x0 != x1) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,300,x0 += dx;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"ret += probability(n, m, k, x0);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,303,return ret;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,34,tatic final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,34,private static final long serialVersionUID = 8589540077390120676L;
False,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,25, Implementation for the {@link PoissonDistribution}
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,25,* Implementation for the {@link PoissonDistribution}.
False,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,33,tatic final long serialVersionUID = -3349935121172596109L;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,33,private static final long serialVersionUID = -3349935121172596109L;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,34,tatic final long serialVersionUID = -5852615386664158222L;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,34,private static final long serialVersionUID = -5852615386664158222L;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,32,tatic final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,32,private static final long serialVersionUID = 8589540077390120676L;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,tatic final long serialVersionUID = 65382027393090L;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,private static final long serialVersionUID = 65382027393090L;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,40,tatic final long serialVersionUID = -6337346779577272306L;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,40,private static final long serialVersionUID = -6337346779577272306L;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,34,tatic final long serialVersionUID = -6337346779577272307L;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,34,private static final long serialVersionUID = -6337346779577272307L;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,22, Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,22,* Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,51,tatic final long serialVersionUID = -1011428905656140431L;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,51,private static final long serialVersionUID = -1011428905656140431L;
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,28,tatic final long serialVersionUID = 5318837237354354107L;
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,28,private static final long serialVersionUID = 5318837237354354107L;
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,27,tatic final long serialVersionUID = -1341109412864309526L;
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,27,private static final long serialVersionUID = -1341109412864309526L;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,24, Implementation for RealMatrix using a double[][] array to store entries and
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,24,* Implementation of RealMatrix using a double[][] array to store entries and
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,53,tatic final long serialVersionUID = 4237564493130426188L;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,53,private static final long serialVersionUID = 4237564493130426188L;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,tatic final long serialVersionUID = -6773236347582113490L;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,private static final long serialVersionUID = -6773236347582113490L;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,ummaryStatistics sampleStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,private SummaryStatistics sampleStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,ufferedReader inputStream;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,private BufferedReader inputStream;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,383, @return
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,383,* @return the index of the bin containing the value
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,456, Returns the array of upper bounds for the bins.  Bins are: <br/>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,456,* Returns (a fresh copy of) the array of upper bounds for the bins.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,457,Bins are: <br/>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,463,eturn upperBounds;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,464,int len = upperBounds.length;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,465,double[] out = new double[len];
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,466,"System.arraycopy(upperBounds, 0, out, 0, len);"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,467,return out;
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,21, Random data generation utilities
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,21,* Random data generation utilities.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84,tatic final long serialVersionUID = -626730818244969716L;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84,private static final long serialVersionUID = -626730818244969716L;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,43,tatic final long serialVersionUID = -3845586908418844111L;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,43,private static final long serialVersionUID = -3845586908418844111L;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,23, Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,23,* Abstract implementation of the {@link StorelessUnivariateStatistic} interface.
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,37,tatic final long serialVersionUID = -44915725420072521L;
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,37,private static final long serialVersionUID = -44915725420072521L;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,37,tatic final long serialVersionUID = -8007759382851708045L;
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,37,private static final long serialVersionUID = -8007759382851708045L;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,42,tatic final long serialVersionUID = 5188298269533339922L;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,42,private static final long serialVersionUID = 5188298269533339922L;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,31,tatic final long serialVersionUID = -1868088725461221010L;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,31,private static final long serialVersionUID = -1868088725461221010L;
False,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,30,tatic final long serialVersionUID = -5108854841843722536L;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,30,private static final long serialVersionUID = -5108854841843722536L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,31,tatic final long serialVersionUID = -6400596334135654825L;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,31,private static final long serialVersionUID = -6400596334135654825L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,37,tatic final long serialVersionUID = 8787174276883311692L;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,37,private static final long serialVersionUID = 8787174276883311692L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,51,tatic final long serialVersionUID = -803343206421984070L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,51,private static final long serialVersionUID = -803343206421984070L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,55,tatic final long serialVersionUID = 4763990447117157611L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,55,private static final long serialVersionUID = 4763990447117157611L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,48,tatic final long serialVersionUID = -8178734905303459453L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,48,private static final long serialVersionUID = -8178734905303459453L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,43,tatic final long serialVersionUID = 2784465764798260919L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,43,private static final long serialVersionUID = 2784465764798260919L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,53,tatic final long serialVersionUID = -1296043746617791564L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,53,private static final long serialVersionUID = -1296043746617791564L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,47,tatic final long serialVersionUID = 3942403127395076445L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,47,private static final long serialVersionUID = 3942403127395076445L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,42,tatic final long serialVersionUID = 7101857578996691352L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,42,private static final long serialVersionUID = 7101857578996691352L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,43,tatic final long serialVersionUID = 5728716329662425188L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,43,private static final long serialVersionUID = 5728716329662425188L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,48,tatic final long serialVersionUID = -7818711964045118679L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,48,private static final long serialVersionUID = -7818711964045118679L;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,53,tatic final long serialVersionUID = -9111962718267217978L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,53,private static final long serialVersionUID = -9111962718267217978L;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,40,tatic final long serialVersionUID = -5593383832225844641L;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,40,private static final long serialVersionUID = -5593383832225844641L;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,35,tatic final long serialVersionUID = -3961477041290915687L;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,35,private static final long serialVersionUID = -3961477041290915687L;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,42,tatic final long serialVersionUID = -2941995784909003131L;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,42,private static final long serialVersionUID = -2941995784909003131L;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,68,tatic final long serialVersionUID = -8091216485095130416L;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,68,private static final long serialVersionUID = -8091216485095130416L;
False,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,38,tatic final long serialVersionUID = 2824226005990582538L;
True,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,38,private static final long serialVersionUID = 2824226005990582538L;
False,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,38,tatic final long serialVersionUID = -8231831954703408316L;
True,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,38,private static final long serialVersionUID = -8231831954703408316L;
False,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,46,tatic final long serialVersionUID = -370076995648386763L;
True,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,46,private static final long serialVersionUID = -370076995648386763L;
False,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,38,tatic final long serialVersionUID = 1460986908574398008L;
True,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,38,private static final long serialVersionUID = 1460986908574398008L;
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,57,tatic final long serialVersionUID = -3004689053607543335L;
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,57,private static final long serialVersionUID = -3004689053607543335L;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,40,tatic final long serialVersionUID = 1768555336266158242L;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,40,private static final long serialVersionUID = 1768555336266158242L;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,131,ouble p0 = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,132,"ouble p1 = getA(0, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,133,ouble q0 = 0.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,134,ouble q1 = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135,ouble c = p1 / q1;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136,nt n = 0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137,ouble relativeError = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138,hile (n < maxIterations && relativeError > epsilon) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139,+n;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140,"ouble a = getA(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,141,"ouble b = getB(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142,ouble p2 = a * p1 + b * p0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143,ouble q2 = a * q1 + b * q0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144,f (Double.isInfinite(p2) || Double.isInfinite(q2)) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145,/ need to scale
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146,f (a != 0.0) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,147,2 = p1 + (b / a * p0);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,2 = q1 + (b / a * q0);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149, else if (b != 0) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,150,2 = (a / b * p1) + p0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,2 = (a / b * q1) + q0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152, else {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,/ can not scale an convergent is unbounded.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,154,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,"Continued fraction convergents diverged to +/- "" +"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,"infinity."");"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,159,ouble r = p2 / q2;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,elativeError = Math.abs(r / c - 1.0);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,162,/ prepare for next iteration
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,163, = p2 / q2;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,164,0 = p1;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165,1 = p2;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166,0 = q1;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167,1 = q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,131,double p0 = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,132,"double p1 = getA(0, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,133,double q0 = 0.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,134,double q1 = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135,double c = p1 / q1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136,int n = 0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137,double relativeError = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138,while (n < maxIterations && relativeError > epsilon) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139,++n;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140,"double a = getA(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,141,"double b = getB(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142,double p2 = a * p1 + b * p0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143,double q2 = a * q1 + b * q0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144,if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145,// need to scale
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146,if (a != 0.0) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,147,p2 = p1 + (b / a * p0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,q2 = q1 + (b / a * q0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149,} else if (b != 0) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,150,p2 = (a / b * p1) + p0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,q2 = (a / b * q1) + q0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152,} else {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,// can not scale an convergent is unbounded.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,154,throw new ConvergenceException(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,"""Continued fraction convergents diverged to +/- "" +"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,"""infinity."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,159,double r = p2 / q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,relativeError = Math.abs(r / c - 1.0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,162,// prepare for next iteration
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,163,c = p2 / q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,164,p0 = p1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165,p1 = p2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166,q0 = q1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167,q1 = q2;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,f (n >= maxIterations) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,if (n >= maxIterations) {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,34,tatic final long serialVersionUID = 4019938025047800455L;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,34,private static final long serialVersionUID = 4019938025047800455L;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,74,tatic final long serialVersionUID = -3485529955529426875L;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,74,private static final long serialVersionUID = -3485529955529426875L;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,36,tatic final long serialVersionUID = -942772950698439883L;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,36,private static final long serialVersionUID = -942772950698439883L;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,46,"* Verifies that expected and actual are within delta, or are both NaN or"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,47,* infinities of the same sign.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,60,"* Verifies that the two arguments are exactly the same, either"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,61,"* both NaN or infinities of same sign, or identical floating point values."
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,63,"public static void assertSame(double expected, double actual) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,64,"assertEquals(expected, actual, 0);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,68,* Verifies that real and imaginary parts of the two complex arguments
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,69,* are exactly the same.  Also ensures that NaN / infinite components match.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,71,"public static void assertSame(Complex expected, Complex actual) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,72,"assertSame(expected.getReal(), actual.getReal());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,73,"assertSame(expected.getImaginary(), actual.getImaginary());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,77,* Verifies that real and imaginary parts of the two complex arguments
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,78,* differ by at most delta.  Also ensures that NaN / infinite components match.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,97,f (fo != null) {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,98,ry {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,99,o.close();
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,100, catch (IOException ex) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,119,if (fo != null) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,120,try {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,121,fo.close();
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,122,} catch (IOException ex) {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,104,f (fi != null) {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,105,ry {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,106,i.close();
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,107, catch (IOException ex) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,126,if (fi != null) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,127,try {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,128,fi.close();
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,129,} catch (IOException ex) {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,114,mp.delete();
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,136,tmp.delete();
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,131,"ublic static void assertRelativelyEquals(double expected, double actual, double relativeError) {"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,132,"ssertRelativelyEquals(null, expected, actual, relativeError);"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,135,"ublic static void assertRelativelyEquals(String msg, double expected, double actual, double relativeError) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,153,"public static void assertRelativelyEquals(double expected, double actual, double relativeError) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,154,"assertRelativelyEquals(null, expected, actual, relativeError);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,157,"public static void assertRelativelyEquals(String msg, double expected, double actual, double relativeError) {"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,139,"ssert.assertTrue(msg, Double.isNaN(expected));"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,161,"Assert.assertTrue(msg, Double.isNaN(expected));"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,134,"ssertEquals(0.0, (expected.subtract(result[2])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,134,"assertEquals(0.0, (expected.subtract(result[3])).abs(), tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,139,"ssertEquals(0.0, (expected.subtract(result[3])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,139,"assertEquals(0.0, (expected.subtract(result[4])).abs(), tolerance);"
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,144,"ssertEquals(0.0, (expected.subtract(result[4])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,144,"assertEquals(0.0, (expected.subtract(result[2])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,21,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,92,* Test Serialization and Recovery
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,94,public void testSerialization() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,95,DifferentiableUnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,96,double result;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,98,NewtonSolver solver = new NewtonSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,99,NewtonSolver solver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,101,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,102,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,103,"assertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,105,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,106,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,107,"assertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,109,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,110,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,111,"assertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,113,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,114,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,115,"assertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,117,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,118,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,119,"assertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,121,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,122,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,123,"assertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,125,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,126,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,127,"assertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,129,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,130,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,131,"assertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,133,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,134,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,135,"assertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,137,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,138,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,139,"assertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,141,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,142,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,143,"assertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,145,/* Test Reset */
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,146,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,147,f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,148,solver = new NewtonSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,150,double oldValue = solver.getRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,151,solver.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,152,solver.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,153,"assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,155,solver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,157,"assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,159,solver2.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,160,solver2.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,162,"assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,29,tatic final long serialVersionUID = -8866263034920607152L;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,29,private static final long serialVersionUID = -8866263034920607152L;
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,26,private double inf = Double.POSITIVE_INFINITY;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,27,private double neginf = Double.NEGATIVE_INFINITY;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,28,private double nan = Double.NaN;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,29,"private Complex oneInf = new Complex(1, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,30,"private Complex oneNegInf = new Complex(1, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,31,"private Complex infOne = new Complex(inf, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,32,"private Complex negInfInf = new Complex(neginf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,33,"private Complex negInfNegInf = new Complex(neginf, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,34,"private Complex oneNaN = new Complex(1, nan);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,36," = new Complex(Double.NaN, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,46,"z = new Complex(nan, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,60,"Complex z = new Complex(inf, nan);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,61,assertTrue(Double.isNaN(z.abs()));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,64,public void testAbsInfinite() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,65,"Complex z = new Complex(inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,66,"assertEquals(inf, z.abs(), 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,67,"z = new Complex(0, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,68,"assertEquals(inf, z.abs(), 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,69,"z = new Complex(inf, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,70,"assertEquals(inf, z.abs(), 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,85,"z = new Complex(1, nan);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,86,Complex w = x.add(z);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,87,"assertEquals(w.real, 4.0, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,88,assertTrue(Double.isNaN(w.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,91,public void testAddInfinite() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,92,"Complex x = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,93,"Complex z = new Complex(inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,94,Complex w = x.add(z);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,95,"assertEquals(w.imaginary, 1, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,96,"assertEquals(inf, w.real, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,98,"x = new Complex(neginf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,99,assertTrue(Double.isNaN(x.add(z).real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,114,public void testConjugateInfiinite() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,115,"Complex z = new Complex(0, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,116,"assertEquals(neginf, z.conjugate().imaginary, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,117,"z = new Complex(0, neginf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,118,"assertEquals(inf, z.conjugate().imaginary, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,129,public void testDivideInfinite() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,130,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,131,"Complex w = new Complex(neginf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,132,assertTrue(x.divide(w).equals(Complex.ZERO));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,134,Complex z = w.divide(x);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,135,assertTrue(Double.isNaN(z.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,136,"assertEquals(inf, z.imaginary, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,138,"w = new Complex(inf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,139,z = w.divide(x);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,140,assertTrue(Double.isNaN(z.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,141,"assertEquals(inf, z.real, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,143,"w = new Complex(1, inf);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,144,z = w.divide(w);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,145,assertTrue(Double.isNaN(z.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,146,assertTrue(Double.isNaN(z.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,155,public void testDivideNaNInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,156,Complex z = oneInf.divide(Complex.ONE);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,157,assertTrue(Double.isNaN(z.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,158,"assertEquals(inf, z.imaginary, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,160,z = negInfNegInf.divide(oneNaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,161,assertTrue(Double.isNaN(z.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,162,assertTrue(Double.isNaN(z.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,164,z = negInfInf.divide(Complex.ONE);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,165,assertTrue(Double.isNaN(z.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,166,assertTrue(Double.isNaN(z.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,183,public void testMultiplyNaNInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,184,"Complex z = new Complex(1,1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,185,Complex w = z.multiply(infOne);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,186,"assertEquals(w.real, inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,187,"assertEquals(w.imaginary, inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,189,w = oneInf.multiply(oneNegInf);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,190,"assertEquals(w.real, inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,191,assertTrue(Double.isNaN(w.imaginary));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,193,w = negInfNegInf.multiply(oneNaN);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,194,assertTrue(Double.isNaN(w.real));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,195,assertTrue(Double.isNaN(w.imaginary));
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,28,private double inf = Double.POSITIVE_INFINITY;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,29,private double negInf = Double.NEGATIVE_INFINITY;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,30,private double nan = Double.NaN;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,31,private double pi = Math.PI;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,33,"private Complex oneInf = new Complex(1, inf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,34,"private Complex oneNegInf = new Complex(1, negInf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,35,"private Complex infOne = new Complex(inf, 1);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,36,"private Complex negInfOne = new Complex(negInf, 1);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,37,"private Complex negInfInf = new Complex(negInf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,38,"private Complex infNegInf = new Complex(inf, negInf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,39,"private Complex infInf = new Complex(inf, inf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,40,"private Complex negInfNegInf = new Complex(negInf, negInf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,41,"private Complex oneNaN = new Complex(1, nan);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,42,"private Complex infNaN = new Complex(inf, nan);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,43,"private Complex negInfNaN = new Complex(negInf, nan);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,44,"private Complex nanInf = new Complex(nan, inf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,45,"private Complex nanNegInf = new Complex(nan, negInf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,46,"private Complex zeroNaN = new Complex(0, nan);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,47,"private Complex nanZero = new Complex(nan, 0);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,48,"private Complex infZero = new Complex(inf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,49,"private Complex zeroInf = new Complex(0, inf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,50,"private Complex zeroNegInf = new Complex(0, negInf);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,51,"private Complex negInfZero = new Complex(negInf, 0);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,53,private ComplexFormat fmt = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,59,"TestUtils.assertEquals(new Complex(Math.acos(0), 0),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,60,"ComplexUtils.acos(Complex.ZERO), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,63,public void testAcosInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,64,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,65,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,66,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,67,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,68,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,69,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,70,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,71,"TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,78,public void testAcosNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,79,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,80,Complex z = ComplexUtils.acos(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,81,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,82,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,83,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,97,public void testAsinInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,98,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,99,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,100,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,101,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,102,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,103,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,104,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,105,"TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,108,public void testAsinNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,109,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,110,Complex z = ComplexUtils.asin(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,111,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,112,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,113,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,123,public void testAtanInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,124,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,125,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,126,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,127,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,128,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,129,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,130,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,131,"TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,136,assertTrue(ComplexUtils.atan(Complex.I).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,139,public void testAtanNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,140,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,141,Complex z = ComplexUtils.atan(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,142,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,143,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,144,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,154,public void testCosNaN() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,155,assertTrue(ComplexUtils.cos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,158,public void testCosInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,159,"TestUtils.assertSame(infNegInf, ComplexUtils.cos(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,160,"TestUtils.assertSame(infInf, ComplexUtils.cos(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,161,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,162,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,163,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,164,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,165,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,166,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,169,public void testCosNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,170,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,171,Complex z = ComplexUtils.cos(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,172,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,173,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,174,// expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,74,ublic void testCosNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,75,ssertTrue(ComplexUtils.cos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,188,public void testCoshInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,189,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,190,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,191,"TestUtils.assertSame(infInf, ComplexUtils.cosh(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,192,"TestUtils.assertSame(infNegInf, ComplexUtils.cosh(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,193,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,194,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,195,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,196,"TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,199,public void testCoshNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,200,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,201,Complex z = ComplexUtils.cosh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,202,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,203,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,204,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,212,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,213,"ComplexUtils.exp(Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,214,"Complex iPi = Complex.I.multiply(new Complex(pi,0));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,215,"TestUtils.assertEquals(Complex.ONE.negate(),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,216,"ComplexUtils.exp(iPi), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,223,public void testExpInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,224,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,225,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,226,"TestUtils.assertSame(infInf, ComplexUtils.exp(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,227,"TestUtils.assertSame(Complex.ZERO, ComplexUtils.exp(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,228,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,229,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,230,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,231,"TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,234,public void testExpNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,235,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,236,Complex z = ComplexUtils.exp(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,237,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,238,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,239,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,253,public void testLogInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,254,"TestUtils.assertEquals(new Complex(inf, pi / 2),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,255,"ComplexUtils.log(oneInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,256,"TestUtils.assertEquals(new Complex(inf, -pi / 2),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,257,"ComplexUtils.log(oneNegInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,258,"TestUtils.assertEquals(infZero, ComplexUtils.log(infOne), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,259,"TestUtils.assertEquals(new Complex(inf, pi),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,260,"ComplexUtils.log(negInfOne), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,261,"TestUtils.assertEquals(new Complex(inf, pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,262,"ComplexUtils.log(infInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,263,"TestUtils.assertEquals(new Complex(inf, -pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,264,"ComplexUtils.log(infNegInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,265,"TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,266,"ComplexUtils.log(negInfInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,267,"TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,268,"ComplexUtils.log(negInfNegInf), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,271,public void testLogZero() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,272,"TestUtils.assertSame(negInfZero, ComplexUtils.log(Complex.ZERO));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,275,public void testlogNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,276,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,277,Complex z = ComplexUtils.log(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,278,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,279,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,280,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,284,public void testPolar2Complex() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,285,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,286,"ComplexUtils.polar2Complex(1, 0), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,287,"TestUtils.assertEquals(Complex.ZERO,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,288,"ComplexUtils.polar2Complex(0, 1), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,289,"TestUtils.assertEquals(Complex.ZERO,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,290,"ComplexUtils.polar2Complex(0, -1), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,291,"TestUtils.assertEquals(Complex.I,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,292,"ComplexUtils.polar2Complex(1, pi/2), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,293,"TestUtils.assertEquals(Complex.I.negate(),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,294,"ComplexUtils.polar2Complex(1, -pi/2), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,295,double r = 0;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,296,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,297,r += i;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,298,double theta = 0;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,299,for (int j =0; j < 20; j++) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,300,theta += pi / 6;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,301,"TestUtils.assertEquals(altPolar(r, theta),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,302,"ComplexUtils.polar2Complex(r, theta), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,304,theta = -2 * pi;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,305,for (int j =0; j < 20; j++) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,306,theta -= pi / 6;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,307,"TestUtils.assertEquals(altPolar(r, theta),"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,308,"ComplexUtils.polar2Complex(r, theta), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,313,"protected Complex altPolar(double r, double theta) {"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,314,return ComplexUtils.exp(Complex.I.multiply
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,315,"(new Complex(theta, 0))).multiply(new Complex(r, 0));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,318,public void testPolar2ComplexIllegalModulus() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,319,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,320,"Complex z = ComplexUtils.polar2Complex(-1, 0);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,321,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,322,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,323,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,327,public void testPolar2ComplexNaN() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,328,"TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(nan, 1));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,329,"TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, nan));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,330,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,331,"ComplexUtils.polar2Complex(nan, nan));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,334,public void testPolar2ComplexInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,335,"TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, inf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,336,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,337,"ComplexUtils.polar2Complex(1, negInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,338,"TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(inf, inf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,339,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,340,"ComplexUtils.polar2Complex(inf, negInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,341,"TestUtils.assertSame(infInf, ComplexUtils.polar2Complex(inf, pi/4));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,342,"TestUtils.assertSame(infNaN, ComplexUtils.polar2Complex(inf, 0));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,343,"TestUtils.assertSame(infNegInf, ComplexUtils.polar2Complex(inf, -pi/4));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,344,"TestUtils.assertSame(negInfInf, ComplexUtils.polar2Complex(inf, 3*pi/4));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,345,"TestUtils.assertSame(negInfNegInf, ComplexUtils.polar2Complex(inf, 5*pi/4));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,365,public void testPowInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,366,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,367,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,368,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,369,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,370,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,371,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,372,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,373,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infOne, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,374,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfOne, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,375,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,376,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,377,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfInf, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,378,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,379,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,380,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,381,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,382,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,383,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,384,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,385,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,386,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,387,"TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,390,public void testPowZero() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,391,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,392,"ComplexUtils.pow(Complex.ZERO, Complex.ONE));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,393,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,394,"ComplexUtils.pow(Complex.ZERO, Complex.ZERO));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,395,"TestUtils.assertSame(Complex.NaN,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,396,"ComplexUtils.pow(Complex.ZERO, Complex.I));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,397,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,398,"ComplexUtils.pow(Complex.ONE, Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,399,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,400,"ComplexUtils.pow(Complex.I, Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,401,"TestUtils.assertEquals(Complex.ONE,"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,402,"ComplexUtils.pow(new Complex(-1, 3), Complex.ZERO), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,405,public void testpowNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,406,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,407,"Complex z = ComplexUtils.pow(null, Complex.ONE);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,408,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,409,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,410,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,412,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,413,"Complex z = ComplexUtils.pow(Complex.ONE, null);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,414,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,415,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,416,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,426,public void testSinInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,427,"TestUtils.assertSame(infInf, ComplexUtils.sin(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,428,"TestUtils.assertSame(infNegInf, ComplexUtils.sin(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,429,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,430,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,431,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,432,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,433,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,434,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,437,public void testSinNaN() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,438,assertTrue(ComplexUtils.sin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,441,public void testSinNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,442,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,443,Complex z = ComplexUtils.sin(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,444,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,445,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,446,// expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,131,ublic void testSinNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,132,ssertTrue(ComplexUtils.sin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,460,public void testSinhInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,461,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,462,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,463,"TestUtils.assertSame(infInf, ComplexUtils.sinh(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,464,"TestUtils.assertSame(negInfInf, ComplexUtils.sinh(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,465,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,466,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,467,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,468,"TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,471,public void testsinhNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,472,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,473,Complex z = ComplexUtils.sinh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,474,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,475,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,476,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,510,public void testSqrtPolar() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,511,double r = 1;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,512,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,513,r += i;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,514,double theta = 0;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,515,for (int j =0; j < 11; j++) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,516,theta += pi /12;
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,517,"Complex z = ComplexUtils.polar2Complex(r, theta);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,518,"Complex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,519,"TestUtils.assertEquals(sqrtz, ComplexUtils.sqrt(z), 10e-12);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,524,public void testSqrtNaN() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,525,assertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,528,public void testSqrtInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,529,"TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,530,"TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,531,"TestUtils.assertSame(infZero, ComplexUtils.sqrt(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,532,"TestUtils.assertSame(zeroInf, ComplexUtils.sqrt(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,533,"TestUtils.assertSame(infNaN, ComplexUtils.sqrt(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,534,"TestUtils.assertSame(infNaN, ComplexUtils.sqrt(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,535,"TestUtils.assertSame(nanInf, ComplexUtils.sqrt(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,536,"TestUtils.assertSame(nanNegInf, ComplexUtils.sqrt(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,539,public void testSqrtNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,540,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,541,Complex z = ComplexUtils.sqrt(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,542,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,543,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,544,// expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,175,ublic void testSqrtNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,176,ssertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,558,public void testSqrt1zNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,559,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,560,Complex z = ComplexUtils.sqrt1z(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,561,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,562,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,563,// expected
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,573,public void testTanNaN() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,574,assertTrue(ComplexUtils.tan(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,577,public void testTanInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,578,"TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,579,"TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,580,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,581,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,582,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,583,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,584,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,585,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,588,public void testTanCritical() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,589,"TestUtils.assertSame(infNaN, ComplexUtils.tan(new Complex(pi/2, 0)));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,590,"TestUtils.assertSame(negInfNaN, ComplexUtils.tan(new Complex(-pi/2, 0)));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,593,public void testTanNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,594,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,595,Complex z = ComplexUtils.tan(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,596,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,597,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,598,// expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,195,ublic void testTanNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,196,ssertTrue(ComplexUtils.tan(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,612,public void testTanhInf() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,613,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,614,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,615,"TestUtils.assertSame(nanZero, ComplexUtils.tanh(infOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,616,"TestUtils.assertSame(nanZero, ComplexUtils.tanh(negInfOne));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,617,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,618,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,619,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,620,"TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfNegInf));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,623,public void testTanhCritical() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,624,"TestUtils.assertSame(nanInf, ComplexUtils.tanh(new Complex(0, pi/2)));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,627,public void testTanhNull() {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,628,try {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,629,Complex z = ComplexUtils.tanh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,630,"fail(""Expecting NullPointerException"");"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,631,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,632,// expected
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,135,nt populationSize = 3456;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,nt sampleSize = 789;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,nt numberOfSucceses = 101;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,ouble[][] data = {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,139,"0.0, 2.75646034603961e-12, 2.75646034603961e-12, 1.0},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,140,"1.0, 8.55705370142386e-11, 8.83269973602783e-11, 0.999999999997244},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,"2.0, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"3.0, 1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,143,"4.0, 9.94501711734089e-8, 1.14123796761385e-7, 0.999999985326375},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,144,"5.0, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,"20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,135,int populationSize = 3456;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,int sampleSize = 789;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,int numberOfSucceses = 101;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,double[][] data = {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,139,"{0.0, 2.75646034603961e-12, 2.75646034603961e-12, 1.0},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,140,"{1.0, 8.55705370142386e-11, 8.83269973602783e-11, 0.999999999997244},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,"{2.0, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"{3.0, 1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,143,"{4.0, 9.94501711734089e-8, 1.14123796761385e-7, 0.999999985326375},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,144,"{5.0, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,"{20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,"estHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,"testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"rivate void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,163,"ypergeometricDistributionImpl dist = new HypergeometricDistributionImpl(populationSize, numberOfSucceses, sampleSize);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,164,or (int i = 0; i < data.length; ++i) {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,165,nt x = (int)data[i][0];
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,166,ouble pdf = data[i][1];
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,167,ouble actualPdf = dist.probability(x);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"estUtils.assertRelativelyEquals(pdf, actualPdf, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,163,"HypergeometricDistributionImpl dist = new HypergeometricDistributionImpl(populationSize, numberOfSucceses, sampleSize);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,164,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,165,int x = (int)data[i][0];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,166,double pdf = data[i][1];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,167,double actualPdf = dist.probability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"TestUtils.assertRelativelyEquals(pdf, actualPdf, 1.0e-9);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,ouble cdf = data[i][2];
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,171,ouble actualCdf = dist.cumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,172,"estUtils.assertRelativelyEquals(cdf, actualCdf, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,double cdf = data[i][2];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,171,double actualCdf = dist.cumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,172,"TestUtils.assertRelativelyEquals(cdf, actualCdf, 1.0e-9);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,174,ouble cdf1 = data[i][3];
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,175,ouble actualCdf1 = dist.upperCumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,176,"estUtils.assertRelativelyEquals(cdf1, actualCdf1, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,174,double cdf1 = data[i][3];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,175,double actualCdf1 = dist.upperCumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,176,"TestUtils.assertRelativelyEquals(cdf1, actualCdf1, 1.0e-9);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,181,nt populationSize = 26896;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,182,nt sampleSize = 895;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,183,nt numberOfSucceses = 55;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,184,ouble[][] data = {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,185,"0.0, 0.155168304750504, 0.155168304750504, 1.0},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,181,int populationSize = 26896;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,182,int sampleSize = 895;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,183,int numberOfSucceses = 55;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,184,double[][] data = {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,185,"{0.0, 0.155168304750504, 0.155168304750504, 1.0},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,187,"2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,188,"3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,189,"4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,190,"5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,187,"{2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,188,"{3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,189,"{4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,190,"{5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,204,"estHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,204,"testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,141,ouble mean = 1.0;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,142,hile (mean <= 10000000.0) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,143,ist.setMean(mean);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,ouble x = mean * 2.0;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,146,ouble dx = x / 10.0;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,147,hile (x >= 0) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,148,ry {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,149,ist.cumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,150, catch (MathException ex) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,151,"ail(""mean of "" + mean + "" and x of "" + x + "" caused "" + ex.getMessage());"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,153, -= dx;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,156,ean *= 10.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,141,double mean = 1.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,142,while (mean <= 10000000.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,143,dist.setMean(mean);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,double x = mean * 2.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,146,double dx = x / 10.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,147,while (x >= 0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,148,try {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,149,dist.cumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,150,} catch (MathException ex) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,151,"fail(""mean of "" + mean + "" and x of "" + x + "" caused "" + ex.getMessage());"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,153,x -= dx;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,156,mean *= 10.0;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,161,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,162,ouble mean = 1.0;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,163,hile (mean <= 10000000.0) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,164,ist.setMean(mean);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,166,ouble p = 0.1;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,167,ouble dp = p;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,168,hile (p < 1.0) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,169,ry {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,170,ist.inverseCumulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,171, catch (MathException ex) {
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,172,"ail(""mean of "" + mean + "" and p of "" + p + "" caused "" + ex.getMessage());"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,174, += dp;
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,177,ean *= 10.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,161,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,162,double mean = 1.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,163,while (mean <= 10000000.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,164,dist.setMean(mean);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,166,double p = 0.1;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,167,double dp = p;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,168,while (p < 1.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,169,try {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,170,dist.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,171,} catch (MathException ex) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,172,"fail(""mean of "" + mean + "" and p of "" + p + "" caused "" + ex.getMessage());"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,174,p += dp;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,177,mean *= 10.0;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,119,double[] bounds = empiricalDistribution2.getUpperBounds();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,120,"assertEquals(bounds.length, 100);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,121,"assertEquals(bounds[99], 1.0, 10e-12);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,"andomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,425,"randomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,426,} catch (NoSuchProviderException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,434,} catch (NoSuchProviderException ex) {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,414,ouble[] single = {1.0};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,414,double[] single = {1.0};
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,34,tatic final long serialVersionUID = -8837442489133392138L;
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,34,private static final long serialVersionUID = -8837442489133392138L;
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,78,".evaluate(d, 0, d.length, -1.0);"
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,79,ail();
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,78,"p.evaluate(d, 0, d.length, -1.0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,79,fail();
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,81,/ success
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,81,// success
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,84,".evaluate(d, 0, d.length, 101.0);"
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,85,ail();
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,84,"p.evaluate(d, 0, d.length, 101.0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,85,fail();
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,87,/ success
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,87,// success

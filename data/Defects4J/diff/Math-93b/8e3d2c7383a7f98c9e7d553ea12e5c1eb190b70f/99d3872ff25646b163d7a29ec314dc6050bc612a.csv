is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,21,"       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,21,"*       ""This sumLog includes software developed by the"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74, @version $Revision: 1.9 $ $Date: 2003/06/17 17:10:15 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,* @version $Revision: 1.10 $ $Date: 2003/06/18 13:47:35 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,** hold the window size **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,rivate int windowSize = Univariate.INFINITE_WINDOW;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,"** Just in case the windowSize is not infinite, we need to"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,83,  keep an array to remember values 0 to N
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,rivate DoubleArray doubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,rivate int n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,** min of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,91,rivate double min = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,** max of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,rivate double max = Double.MIN_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,** product of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97,rivate double product = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,** mean of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100,rivate double mean = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,** running ( variance * (n - 1) ) of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,103,rivate double pre_variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,** variance of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,rivate double variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,** running sum of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,rivate double sum = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,** running sum of squares that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,rivate double sumsq = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,114,** running sum of 3rd powers that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115,rivate double sumCube = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,** running sum of 4th powers that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,118,rivate double sumQuad = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,** Creates new univariate with an infinite window */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,ublic UnivariateImpl() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,lear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,** Creates a new univariate with a fixed window **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,126,ublic UnivariateImpl(int window) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,indowSize = window;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,oubleArray = new FixedDoubleArray( window );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,132, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,134,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,135,nsertValue(v);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139, @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,eturn mean ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,f ((product <= 0.0) || (n == 0)) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,152,"eturn Math.pow(product,( 1.0 / (double) n ) );"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157, @see org.apache.commons.math.stat.Univariate#getProduct()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,ublic double getProduct() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,160,eturn product;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,ouble variance = getVariance();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,f ((variance == 0.0) || (variance == Double.NaN)) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,170,eturn variance;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,eturn Math.sqrt(variance);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177, Returns the variance of the values that have been added via West's
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,178, algorithm as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179," <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180," J. G. Lewis 1979, <i>Communications of the ACM</i>,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,181," vol. 22 no. 9, pp. 526-531.</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,183, @return The variance of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184,         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,186,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,187,eturn variance ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,191, Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (6) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,194, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195,         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,197,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,199,f( n < 1) return Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,200,f( n <= 2 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,202,"eturn ( 2 * Math.pow(sum, 3) - 3 * sum * sumsq + ((double) (n * n)) * sumCube ) /"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203, (double) (n * (n - 1) * (n - 2)) ) ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,207, Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (7) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,210, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211,         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,213,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,215,f( n < 1) return Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216,f( n <= 3 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,218,"ouble x1 = -6 * Math.pow(sum, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219,"ouble x2 = 12 * ((double) n) * Math.pow(sum, 2) * sumsq;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,"ouble x3 = -3 * ((double) (n * (n - 1))) * Math.pow(sumsq,2);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,221,ouble x4 = -4 * ((double) (n * (n + 1))) * sum * sumCube;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,"ouble x5 = Math.pow(((double) n),2) * ((double) (n+1)) * sumQuad;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,224,eturn (x1 + x2 + x3 + x4 + x5) /
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225, (double) (n * (n - 1) * (n - 2) * (n - 3)) );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,229," Called in ""addValue"" to insert a new value into the statistic."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,230, @param v The value to be added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,232,rivate void insertValue(double v) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,"/ The default value of product is NaN, if you"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,234,/ try to retrieve the product for a univariate with
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,235,"/ no values, we return NaN."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,237,"/ If this is the first call to insertValue, we want"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,238,"/ to set product to 1.0, so that our first element"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,239,"/ is not ""cancelled"" out by the NaN."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,241,"/ For the first value added, the mean is that value,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,242,/ and the variance is zero.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,243,f( n == 0 ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,244,roduct = 1.0 ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,245,ean = v ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,246,re_variance = 0.0 ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,247,ariance = 0.0 ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,250,f( windowSize != Univariate.INFINITE_WINDOW ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,251,f( windowSize == n ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,252,ouble discarded = doubleArray.addElementRolling( v );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254,/ Remove the influence of the discarded
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,255,um -= discarded;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,256,umsq -= discarded * discarded;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,257,"umCube -= Math.pow(discarded, 3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258,"umQuad -= Math.pow(discarded, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,260,f(discarded == min) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,261,in = doubleArray.getMin();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,262, else if(discarded == max){
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,263,ax = doubleArray.getMax();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,266,f(product != 0.0){
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,267,/ can safely remove discarded value
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,268,roduct *= v / discarded;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,269, else if(discarded == 0.0){
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,270,/ need to recompute product
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,271,roduct = 1.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,272,ouble[] elements = doubleArray.getElements();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,273,or( int i = 0; i < elements.length; i++ ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,274,roduct *= elements[i];
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,276, // else product = 0 and will still be 0 after discard
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,278, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,oubleArray.addElement( v );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280, += 1 ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,281,f (v < min) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,282,in = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,284,f (v > max) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,285,ax = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,287,roduct *= v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,289, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,290,/ If the windowSize is infinite please don't take the time to
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,291,/ worry about storing any values.  We don't need to discard the
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,292,/ influence of any single item.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293, += 1 ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,f (v < min) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,in = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,297,f (v > max) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,298,ax = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,300,roduct *= v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,302,f ( n > 1 )
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,304,ouble deviationFromMean = v - mean ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,305,ouble deviationFromMean_overN = deviationFromMean / n ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,306,ean += deviationFromMean_overN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,307,re_variance += (n - 1) * deviationFromMean * deviationFromMean_overN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,308,ariance = pre_variance / (n - 1) ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,312,um += v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,313,umsq += v * v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,314,"umCube += Math.pow(v,3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,315,"umQuad += Math.pow(v,4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,318,** Getter for property max.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,319, @return Value of property max.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,321,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,322,f (n == 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,323,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,324, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,325,eturn max;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,329,** Getter for property min.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,330, @return Value of property min.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,332,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,333,f (n == 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,334,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,335, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,336,eturn min;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,340,** Getter for property n.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,341, @return Value of property n.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,343,ublic int getN() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,344,eturn n;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,347,** Getter for property sum.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,348, @return Value of property sum.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,350,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,351,eturn sum;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,354,** Getter for property sumsq.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355, @return Value of property sumsq.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,357,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,358,eturn sumsq;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,361,** Getter for property sumCube.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,362, @return Value of property sumCube.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,364,ublic double getSumCube() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,365,eturn sumCube;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,368,** Getter for property sumQuad.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,369, @return Value of property sumQuad.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,ublic double getSumQuad() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,372,eturn sumQuad;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,376, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,378, have been added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,379, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,381,ublic String toString() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,382,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,383,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,384,"utBuffer.append(""n: "" + n + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,385,"utBuffer.append(""min: "" + min + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,386,"utBuffer.append(""max: "" + max + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,387,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,388,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,389,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,390,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,391,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,395," Resets all sums, product, mean, and variance to 0; resets min and max."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,397,ublic void clear() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,398,his.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,399,his.n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,400,his.min = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,401,his.max = Double.MIN_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,402,his.product = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,403,his.mean = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,404,his.variance = this.pre_variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,407,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,408, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,410,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,411,eturn windowSize;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,414,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,415, @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,417,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,418,"tring msg = ""A fixed window size must be set via the "" +"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,419,"UnivariateImpl constructor"";"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,420,hrow new RuntimeException( msg );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,private int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,"/** Just in case the windowSize is not infinite, we need to"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,83,*  keep an array to remember values 0 to N
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,private DoubleArray doubleArray;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,private int n = 0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,/** sum of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,91,private double sum = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,/** sum of the square of each value that has been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,private double sumsq = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,/** min of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97,private double min = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,/** max of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100,private double max = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,/** sumLog of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,103,private double sumLog = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,/** mean of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,private double mean = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,/** second moment of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,private double s2 = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,/** third moment of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,private double s3 = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,114,/** fourth moment of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115,private double s4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,/** variance of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,118,private double variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,/** skewness of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,private double skewness = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,/** kurtosis of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,private double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,126,/** Creates new univariate with an infinite window */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,public UnivariateImpl() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,130,/** Creates a new univariate with a fixed window **/
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131,public UnivariateImpl(int window) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,132,setWindowSize(window);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,135,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136,* @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,138,public int getN() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139,return n;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,* @see org.apache.commons.math.stat.Univariate#getSum()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,public double getSum() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,147,return StatUtils.sum(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,return sum;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,153,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,154,* @see org.apache.commons.math.stat.Univariate#getSumsq()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,156,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,158,return StatUtils.sumSq(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,161,return sumsq;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,* @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,public double getMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,168,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,return StatUtils.mean(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,return mean;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176,* Returns the standard deviation for this collection of values
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,* @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,181,if (getN() != 0) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,182,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184,return (stdDev);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,188,* Returns the variance of the values that have been added via West's
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,189,* algorithm as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,190,"* <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,191,"* J. G. Lewis 1979, <i>Communications of the ACM</i>,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192,"* vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,194,* @return The variance of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195,*         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,197,public double getVariance() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,198,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,199,variance = StatUtils.variance(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,201,return variance;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,205,* Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,206,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (6) for k-Statistics</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,209,*         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211,public double getSkewness() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,212,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,213,return StatUtils.skewness(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,215,return skewness;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219,* Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (7) for k-Statistics</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,223,*         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225,public double getKurtosis() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,226,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,227,return StatUtils.kurtosis(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,229,return kurtosis;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,232,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,* @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,235,public double getMax() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,236,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,237,return StatUtils.max(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,239,return max;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,242,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,243,* @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,245,public double getMin() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,246,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,247,return StatUtils.min(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,249,return min;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,252,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,253,* @see org.apache.commons.math.stat.Univariate#getProduct()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,255,public double getProduct() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,256,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,257,return StatUtils.product(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,260,return sumLog;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,263,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,264,* @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,266,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,268,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,269,return StatUtils.geometricMean(doubleArray.getElements());
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,272,if (n == 0) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,273,return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,274,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,275,return Math.exp(sumLog / (double) n);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,"/* If windowSize is set to Infinite, moments are calculated using the following"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,281,* recursive strategy
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,282,* </a>.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,283,"* Otherwise, stat methods delegate to StatUtils."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,284,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,286,public void addValue(double value) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,288,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,289,/* then all getters deligate to StatUtils
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,290,* and this clause simply adds/rolls a value in the storage array
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,292,if (windowSize == n) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293,doubleArray.addElementRolling(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,n++;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,296,doubleArray.addElement(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,299,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,300,/* If the windowSize is infinite don't store any values and there
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,301,* is no need to discard the influence of any single item.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,303,n++;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,305,if (n <= 1) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,306,"/* if n <= 1, initialize the sumLog, min, max, mean, variance and pre-variance */"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,307,sumLog = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,308,sum = min = max = mean = value;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,309,"sumsq = Math.pow(value, 2);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,310,variance = s2 = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,311,skewness = kurtosis = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,313,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,314,/* otherwise calc these values */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,315,sumLog += Math.log(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,316,sum += value;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,317,"sumsq += Math.pow(value, 2);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,318,"min = Math.min(min, value);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,319,"max = Math.max(max, value);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,321,double dev = value - mean;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,322,double v = dev / ((double) n);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,323,"double v2 = Math.pow(v, 2);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,324,double n1 = ((double) n - 1);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,326,s4 += v
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,328,- 4.0 * s3
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,329,"+ v * (6.0 * s2 + n1 * (1 + Math.pow((double) n, 3)) * v2));"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,331,"s3 += v * (-3.0 * s2 + (double) n * n1 * (n - 2) * Math.pow(v, 2));"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,332,s2 += n1 * dev * v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,334,mean += v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,335,variance =
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,336,(n <= 1) ? 0.0 : s2 / n1;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,337,skewness =
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,338,(n <= 2) ? 0.0 : s3 / ((double) n * Math.sqrt(variance) * variance);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,339,kurtosis =
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,340,"(n <= 3) ? 0.0 : s4 / ((double) n * Math.pow(variance, 2)) - 3;"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,346,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,347,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,348,* have been added.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,349,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,351,public String toString() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,352,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,353,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,354,"outBuffer.append(""n: "" + n + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355,"outBuffer.append(""min: "" + min + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,356,"outBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,357,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,358,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,359,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,360,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,361,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,364,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,365,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,367,public void clear() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,368,this.n = 0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,369,this.min = this.max = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,370,this.sumLog = this.mean = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,this.variance = this.skewness = this.kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,372,this.s2 = this.s3 = this.s4 = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,373,if (doubleArray != null)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,374,doubleArray = new FixedDoubleArray(windowSize);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,378,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,380,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,381,return windowSize;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,384,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,385,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,387,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,388,clear();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,389,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,390,doubleArray = new FixedDoubleArray(windowSize);

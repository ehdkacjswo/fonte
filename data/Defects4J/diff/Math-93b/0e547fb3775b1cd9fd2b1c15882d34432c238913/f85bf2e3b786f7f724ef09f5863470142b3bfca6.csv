is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,225,"* @deprecated as of release 2.0, replaced by {@link DecompositionSolver#getInverse()}"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,227,@Deprecated
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,234,"* @deprecated as of release 2.0, replaced by {@link LUDecomposition#getDeterminant()}"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,236,@Deprecated
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,248,"* @deprecated as of release 2.0, replaced by the boolean negation of"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,249,* {@link DecompositionSolver#isNonSingular()}
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,251,@Deprecated
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,320,"* @deprecated as of release 2.0, replaced by {@link DecompositionSolver#solve(double[])}"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,322,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,317, Returns the solution vector for a linear system with coefficient
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,318, matrix = this and constant vector = <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,320, @param b  constant vector
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,321," @return vector of solution values to AX = b, where A is *this"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,322, @throws IllegalArgumentException if this.rowDimension != b.length
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,323, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,325,"ealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,335,"* @deprecated as of release 2.0, replaced by {@link DecompositionSolver#solve(RealMatrix)}"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,337,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,58,rotected double data[][] = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,58,protected double data[][];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,60,** Entries of cached LU decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,61,  All updates to data (other than luDecompose()) *must* set this to null
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,60,/** Cached LU decomposition.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,61,"* @deprecated as of release 2.0, since all methods using this are deprecated"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,63,rotected double lu[][] = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65,** Permutation associated with LU decomposition */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,66,rotected int[] permutation = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,68,** Parity of the permutation associated with the LU decomposition */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,69,rotected int parity = 1;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,71,** Bound to determine effective singularity in LU decomposition */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,72,rivate static final double TOO_SMALL = 10E-12;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,63,private LUDecomposition lu;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,172, Create a new RealMatrix which is a copy of this.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,174, @return  the cloned matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,162,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,181, Compute the sum of this and <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,183, @param m    matrix to be added
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,184, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,185, @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,167,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,234, Compute  this minus <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,236, @param m    matrix to be subtracted
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,237, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,238, @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,214,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,287, Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,289, @param d    value to be added to each entry
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,290, @return     d + this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,261,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,307, Returns the result of multiplying each entry of this by <code>d</code>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,308, @param d  value to multiply all entries by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,309, @return d * this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,276,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,326, Returns the result of postmultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,327, @param m    matrix to postmultiply by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,328, @return     this*m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,329, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,330,             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,291,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388, Returns the result of premultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,389, @param m    matrix to premultiply by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,390, @return     m * this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,391, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,392,             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,347,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,399, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,400, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,401, Makes a fresh copy of the underlying data.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,403, @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,352,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,412, Does not make a fresh copy of the underlying data.</p>
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,360,* Does <strong>not</strong> make a fresh copy of the underlying data.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,422, @return norm
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,368,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,437, Gets a submatrix. Rows and columns are indicated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,438, counting from 0 to n-1.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,440, @param startRow Initial row index
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,441, @param endRow Final row index
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,442, @param startColumn Initial column index
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,443, @param endColumn Final column index
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,444, @return The subMatrix containing the data of the
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,445,         specified rows and columns
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,446, @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,381,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,468, Gets a submatrix. Rows and columns are indicated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,469, counting from 0 to n-1.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,471, @param selectedRows Array of row indices must be non-empty
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,472, @param selectedColumns Array of column indices must be non-empty
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,473, @return The subMatrix containing the data in the
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,474,     specified rows and columns
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,475, @exception MatrixIndexException  if supplied row or column index arrays
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,476,     are not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,401,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,566, Returns the entries in row number <code>row</code> as a row matrix.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,567, Row indices start at 0.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,569, @param row  the row to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,570, @return row matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,571, @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,489,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,584, Returns the entries in column number <code>column</code>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585, as a column matrix.  Column indices start at 0.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,587, @param column the column to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,588, @return column matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,589, @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,614, Returns the entries in row number <code>row</code> as an array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,615, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,616, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,617, unless <code>0 <= row < rowDimension.</code></p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,619, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,620, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,621, @throws MatrixIndexException if the specified row index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,523,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,634, Returns the entries in column number <code>col</code> as an array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,635, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,636, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,637, unless <code>0 <= column < columnDimension.</code></p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,639, @param col the column to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,640, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,641, @throws MatrixIndexException if the specified column index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,534,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,656, Returns the entry in the specified row and column.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,657, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,658, Row and column indices start at 0 and must satisfy
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,659, <ul>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,660, <li><code>0 <= row < rowDimension</code></li>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,661, <li><code> 0 <= column < columnDimension</code></li>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,662, </ul>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,663, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,665, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,666, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,667," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,668, @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,547,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,680, Returns the transpose matrix.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,682, @return transpose matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,557,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,698, Returns the inverse matrix if this matrix is invertible.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,700, @return inverse matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,701, @throws InvalidMatrixException if this is not invertible
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,571,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,704,eturn solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,573,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,574,lu = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,576,return lu.getInverse();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,708, @return determinant
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,709, @throws InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,579,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,580,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,712,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,713,"hrow new InvalidMatrixException(""matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,715,f (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,716,eturn 0d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,717, else {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,718,ouble det = parity;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,719,or (int i = 0; i < this.getRowDimension(); i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,720,et *= lu[i][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,722,eturn det;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,582,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,583,lu = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,return lu.getDeterminant();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,727, @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,588,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,734, @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,593,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,594,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,738,ry {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,739,uDecompose();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,740,eturn false;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,741, catch (InvalidMatrixException ex) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,742,eturn true;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,744, else { // LU decomp must have been successfully performed
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,745,eturn false; // so the matrix is not singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,597,lu = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,599,return !lu.isNonSingular();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,750, @return rowDimension
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,602,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,757, @return columnDimension
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,607,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,764, @return trace
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,765, @throws IllegalArgumentException if the matrix is not square
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,612,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,779, @param v vector to operate on
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,780, @throws IllegalArgumentException if columnDimension != v.length
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,781, @return resulting vector
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,624,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,836, @param v vector to premultiply by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,837, @throws IllegalArgumentException if rowDimension != v.length
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,838, @return resulting matrix
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,677,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,891, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,892, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,893, <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,895, @param b  array of constant forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,896, to solve
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,897, @return solution array
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,898, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,899, @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,728,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,729,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,903,inal int nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,904,inal int nCol  = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,906,f (b.length != nRows) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,907,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,909,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,910,"hrow new InvalidMatrixException(""coefficient matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,912,f (isSingular()) { // side effect: compute LU decomp
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,913,"hrow new InvalidMatrixException(""Matrix is singular."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,916,inal double[] bp = new double[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,918,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,919,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,920,p[row] = b[permutation[row]];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,923,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,924,or (int col = 0; col < nCol; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,925,or (int i = col + 1; i < nCol; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,926,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,930,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,931,or (int col = nCol - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,932,p[col] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,933,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,934,p[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,731,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,732,lu = new LUDecompositionImpl(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,938,eturn bp;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,734,return lu.solve(b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,943,ublic RealVector solve(RealVector b)
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,944,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,945,ry {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,946,eturn solve((RealVectorImpl) b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,947, catch (ClassCastException cce) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,949,inal int nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,950,inal int nCol  = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,952,f (b.getDimension() != nRows) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,953,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,955,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,956,"hrow new InvalidMatrixException(""coefficient matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,958,f (isSingular()) { // side effect: compute LU decomp
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,959,"hrow new InvalidMatrixException(""Matrix is singular."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,962,inal double[] bp = new double[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,964,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,965,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,966,p[row] = b.getEntry(permutation[row]);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,969,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,970,or (int col = 0; col < nCol; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,971,or (int i = col + 1; i < nCol; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,972,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,976,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,977,or (int col = nCol - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,978,p[col] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,979,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,980,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,984,"eturn new RealVectorImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,990, Returns the solution vector for a linear system with coefficient
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,991, matrix = this and constant vector = <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,993, @param b  constant vector
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,994," @return vector of solution values to AX = b, where A is *this"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,995, @throws IllegalArgumentException if this.rowDimension != b.length
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,996, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,998,ealVectorImpl solve(RealVectorImpl b)
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,999,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1000,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1004, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1005, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1006, <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1008, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1009, to solve
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1010, @return matrix of solution vectors
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1011, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1012, @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,738,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1015,f (b.getRowDimension() != this.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1016,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1018,f (!this.isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1019,"hrow new InvalidMatrixException(""coefficient matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1021,f (this.isSingular()) { // side effect: compute LU decomp
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1022,"hrow new InvalidMatrixException(""Matrix is singular."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1025,inal int nCol  = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1026,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1027,inal int nRowB = b.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1029,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1030,inal double[][] bp = new double[nRowB][nColB];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1031,or (int row = 0; row < nRowB; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1032,inal double[] bpRow = bp[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1033,inal int pRow = permutation[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1034,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1035,"pRow[col] = b.getEntry(pRow, col);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1039,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1040,or (int col = 0; col < nCol; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1041,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1042,or (int i = col + 1; i < nCol; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1043,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1044,inal double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1045,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1046,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1051,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1052,or (int col = nCol - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1053,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1054,inal double luDiag = lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1055,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1056,pCol[j] /= luDiag;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1058,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1059,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1060,inal double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1061,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1062,pI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,740,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,741,lu = new LUDecompositionImpl(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1067,"eturn new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,743,return lu.solve(b);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,763,"* @deprecated as of release 2.0, replaced by {@link LUDecomposition}"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,765,@Deprecated
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1091,inal int nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1092,inal int nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1093,f (nRows != nCols) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1094,"hrow new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1096,u = getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1098,/ Initialize permutation array and parity
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1099,ermutation = new int[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1100,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1101,ermutation[row] = row;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1103,arity = 1;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1105,/ Loop over columns
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1106,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1108,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1110,/ upper
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1111,or (int row = 0; row < col; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1112,inal double[] luRow = lu[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1113,um = luRow[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1114,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1115,um -= luRow[i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1117,uRow[col] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1120,/ lower
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1121,nt max = col; // permutation row
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1122,ouble largest = 0d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1123,or (int row = col; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1124,inal double[] luRow = lu[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1125,um = luRow[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1126,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1127,um -= luRow[i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1129,uRow[col] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1131,/ maintain best permutation choice
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1132,f (Math.abs(sum) > largest) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1133,argest = Math.abs(sum);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1134,ax = row;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1138,/ Singularity check
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1139,f (Math.abs(lu[max][col]) < TOO_SMALL) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1140,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1141,"hrow new InvalidMatrixException(""matrix is singular"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1144,/ Pivot if necessary
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1145,f (max != col) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1146,ouble tmp = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1147,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1148,mp = lu[max][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1149,u[max][i] = lu[col][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1150,u[col][i] = tmp;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1152,nt temp = permutation[max];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1153,ermutation[max] = permutation[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1154,ermutation[col] = temp;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1155,arity = -parity;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1158,"/ Divide the lower elements by the ""winning"" diagonal elt."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1159,inal double luDiag = lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1160,or (int row = col + 1; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1161,u[row][col] /= luDiag;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,767,if (lu == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,768,lu = new LUDecompositionImpl(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1245,/------------------------ Protected methods
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1248,  Returns the LU decomposition as a RealMatrix.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1249,  Returns a fresh copy of the cached LU matrix if this has been computed;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1250,  otherwise the composition is computed and cached for use by other methods.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1251,"  Since a copy is returned in either case, changes to the returned matrix do not"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1252,  affect the LU decomposition property.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1253, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1254, The matrix returned is a compact representation of the LU decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1255," Elements below the main diagonal correspond to entries of the ""L"" matrix;"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1256," elements on and above the main diagonal correspond to entries of the ""U"""
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1257, matrix.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1258, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1259, Example: <pre>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1261,     Returned matrix                L                  U
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1262,         2  3  1                   1  0  0            2  3  1
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1263,         5  4  6                   5  1  0            0  4  6
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1264,         1  7  8                   1  7  1            0  0  8
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1265, </pre>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1267," The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1268,  where permuteRows reorders the rows of the matrix to follow the order determined
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1269,  by the <a href=#getPermutation()>permutation</a> property.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1271, @return LU decomposition matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1272, @throws InvalidMatrixException if the matrix is non-square or singular.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1274,rotected RealMatrix getLUMatrix() throws InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1275,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1276,uDecompose();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1278,eturn new RealMatrixImpl(lu);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1282, Returns the permutation associated with the lu decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1283," The entries of the array represent a permutation of the numbers 0, ... , nRows - 1."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1284, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1285, Example:
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1286," permutation = [1, 2, 0] means current 2nd row is first, current third row is second"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1287, and current first row is last.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1288, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1289, Returns a fresh copy of the array.</p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1291, @return the permutation
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1293,rotected int[] getPermutation() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1294,inal int[] out = new int[permutation.length];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1295,"ystem.arraycopy(permutation, 0, out, 0, permutation.length);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1296,eturn out;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,213,** test isSingular */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,214,ublic void testIsSingular() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,215,ealMatrixImpl m = new RealMatrixImpl(singular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,216,"ssertTrue(""singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,217, = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,218,"ssertTrue(""big singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,219, = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,220,"ssertTrue(""identity nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,221, = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,222,"ssertTrue(""testData nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,225,** test inverse */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,226,ublic void testInverse() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,227,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,228,ealMatrix mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,229,"ssertClose(""inverse"",mInv,m.inverse(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,230,"ssertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,232,/ Not square
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,233, = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,234,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,235,.inverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,236,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,237, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,238,/ expected
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,241,/ Singular
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,242, = new RealMatrixImpl(singular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,243,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,244,.inverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,245,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,246, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,247,/ expected
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,251,** test solve */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,252,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,253,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,254,ealMatrix mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,255,/ being a bit slothful here -- actually testing that X = A^-1 * B
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,"ssertClose(""inverse-operate"", mInv.operate(testVector),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,257,".solve(testVector), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,258,"ssertClose(""inverse-operate"", mInv.operate(testVector),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,259,".solve(new RealVectorImpl(testVector)).getData(), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,260,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,261,.solve(testVector2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,262,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,263, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,266,ealMatrix bs = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,267,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,268,s.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,269,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,270, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,273,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,274,.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,275,"ail(""Expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,276, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,279,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,280,ew RealMatrixImpl(testData2).solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,281,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,282, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,285,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,286,new RealMatrixImpl(testData2)).luDecompose();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,287,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,288, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,293,** test determinant */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,294,ublic void testDeterminant() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,295,ealMatrix m = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,296,"ssertEquals(""singular determinant"",0,m.getDeterminant(),0);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,297, = new RealMatrixImpl(detData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,298,"ssertEquals(""nonsingular test"",-3d,m.getDeterminant(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,300,"/ Examples verified against R (version 1.8.1, Red Hat Linux 9)"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,301, = new RealMatrixImpl(detData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,302,"ssertEquals(""nonsingular R test 1"",-2d,m.getDeterminant(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,303, = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,304,"ssertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,306,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,307,ew RealMatrixImpl(testData2).getDeterminant();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,308,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,309, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,365,"ssertClose(""inverse-transpose"",m.inverse().transpose(),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,366,".transpose().inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,RealMatrix mIT = new LUDecompositionImpl(m).getInverse().transpose();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getInverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,266,"assertClose(""inverse-transpose"", mIT, mTI, normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,442,ublic void testLUDecomposition() throws Exception {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,443,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,444,ealMatrix lu = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,445,"ssertClose(""LU decomposition"", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,446,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,447,/ access LU decomposition on same object to verify caching.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,448,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,449,"ssertClose(""LU decomposition"", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,450,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,452, = new RealMatrixImpl(luData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,453,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,454,"ssertClose(""LU decomposition"", lu, (RealMatrix) new RealMatrixImpl(luDataLUDecomposition), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,455,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,456, = new RealMatrixImpl(testDataMinus);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,457,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,458,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,459, = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,460,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,461,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,462,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,463, = new RealMatrixImpl(bigSingular); // singular
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,464,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,465,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,466, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,467,/ expected
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,469,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,470, = new RealMatrixImpl(testData2);  // not square
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,471,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,472,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,473, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,474,/ expected
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,491,ealMatrix pInverse = p.inverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,355,RealMatrix pInverse = new LUDecompositionImpl(p).getInverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,499,ouble[] solution = coefficients.solve(constants);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,double[] solution = new LUDecompositionImpl(coefficients).solve(constants);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,833,** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,834,"rotected void verifyDecomposition(RealMatrix matrix, RealMatrix lu) throws Exception{"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,835,nt n = matrix.getRowDimension();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,836,ouble[][] lowerData = new double[n][n];
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,837,ouble[][] upperData = new double[n][n];
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,838,"plitLU(lu, lowerData, upperData);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,839,ealMatrix lower =new RealMatrixImpl(lowerData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,840,ealMatrix upper = new RealMatrixImpl(upperData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,841,nt[] permutation = ((RealMatrixImpl) matrix).getPermutation();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,842,"ealMatrix permuted = permuteRows(matrix, permutation);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,843,"ssertClose(""lu decomposition does not work"", permuted, lower.multiply(upper), normTolerance);"

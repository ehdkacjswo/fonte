is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,597,ase Token.NE:
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,598,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,599,ase Token.SHNE: {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,597,case Token.NE: {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,603,/ We do not want to warn about explicit comparisons to VOID. People
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,604,/ often do this if they think their type annotations screwed up.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,606,/ We do want to warn about cases where people compare things like
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,607,/ (Array|null) == (Function|null)
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,608,/ because it probably means they screwed up.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,610,"/ This heuristic here is not perfect, but should catch cases we"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,611,/ care about without too many false negatives.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,615,ernaryValue result = TernaryValue.UNKNOWN;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,616,f (n.getType() == Token.EQ || n.getType() == Token.NE) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,617,esult = leftTypeRestricted.testForEquality(
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,618,ightTypeRestricted);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,603,TernaryValue result =
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,604,leftTypeRestricted.testForEquality(rightTypeRestricted);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,605,if (result != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,622, else {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,623,/ SHEQ or SHNE
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,624,f (!leftTypeRestricted.canTestForShallowEqualityWith(
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,625,ightTypeRestricted)) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,626,esult = n.getType() == Token.SHEQ ?
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,627,ernaryValue.FALSE : TernaryValue.TRUE;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,631,f (result != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,616,case Token.SHEQ:
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,617,case Token.SHNE: {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,618,leftType = getJSType(n.getFirstChild());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,619,rightType = getJSType(n.getLastChild());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,621,JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,622,JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,623,if (!leftTypeRestricted.canTestForShallowEqualityWith(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,624,rightTypeRestricted)) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,625,"report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,626,rightType.toString());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,628,"ensureTyped(t, n, BOOLEAN_TYPE);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,629,break;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,654,f (isEmptyType() || that.isEmptyType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,655,eturn isSubtype(that) || that.isSubtype(this);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,657,eturn !getGreatestSubtype(that).isEmptyType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,654,return this.isSubtype(that) || that.isSubtype(this);
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,2192,"condition always evaluates to true\n"" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,2192,"""condition always evaluates to the same value\n"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6401,"condition always evaluates to false\n"" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6401,"""condition always evaluates to the same value\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2650,"condition always evaluates to true\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2650,"""condition always evaluates to the same value\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2736,ublic void testComparison14() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2737,"estTypes(""/** @type {function((Array|string), Object): number} */"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2738,"function f(x, y) { return x === y; }"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2739,"inconsistent return type\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2740,"found   : boolean\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2741,"required: number"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8500,"condition always evaluates to false\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8492,"""condition always evaluates to the same value\n"" +"
False,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,416,ublic void testShallowEquality() {
False,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,417,ssertTrue(
False,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,418,"egistry.createUnionType(ARRAY_TYPE, STRING_TYPE)"
False,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,419,canTestForShallowEqualityWith(OBJECT_TYPE));

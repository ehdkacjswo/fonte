is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AliasStrings.java,src/com/google/javascript/jscomp/AliasStrings.java,133,parent.isRegExp() &&
False,src/com/google/javascript/jscomp/AliasStrings.java,src/com/google/javascript/jscomp/AliasStrings.java,134,"NodeUtil.isObjectLitKey(n, parent)) {"
True,src/com/google/javascript/jscomp/AliasStrings.java,src/com/google/javascript/jscomp/AliasStrings.java,133,!parent.isRegExp()) {
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,116,"/ Object literal keys may be STRING, GET, SET. Get and Set"
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,117,/ are skipped because they can not be named.
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,118,f (keyNode.isString()) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,116,"// Object literal keys may be STRING_KEY, GETTER_DEF, SETTER_DEF."
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,117,// Get and Set are skipped because they can not be named.
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,118,if (keyNode.isStringKey()) {
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,682,ase Token.STRING:
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,682,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,724,"alidateNodeType(Token.STRING, n);"
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,724,"validateNodeType(Token.STRING_KEY, n);"
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,107,Type == Token.STRING)) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,107,pType == Token.STRING_KEY)) {
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,60,parent.isRegExp() &&
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,61,"NodeUtil.isObjectLitKey(n, parent)) {"
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,60,!parent.isRegExp()) {
True,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,23,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,92,keyNode.setType(Token.STRING_KEY);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,631,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,632,Preconditions.checkState(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,633,"childCount == 1, ""Object lit key must have 1 child"");"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,634,addJsString(n);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,635,break;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,632,f (childCount !=
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,633,(n.getParent() != null &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,634,.getParent().isObjectLit()) ? 1 : 0)) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,635,hrow new IllegalStateException(
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,636,"Unexpected String children: "" + n.getParent().toStringTree());"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,638,Preconditions.checkState(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,639,"childCount == 0, ""A string may not have children"");"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,661,reconditions.checkState(c.isString());
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,663,Preconditions.checkState(c.isStringKey());
False,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,49,ase Token.STRING:
False,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,50,"f (NodeUtil.isObjectLitKey(n, parent) &&"
False,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,51,odeUtil.isValidPropertyName(n.getString())) {
True,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,49,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,50,if (NodeUtil.isValidPropertyName(n.getString())) {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,351,ase Token.STRING:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,351,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,146,f (node.isName() || node.isString()) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,146,if (node.isName() || node.isString() || node.isStringKey()) {
False,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,19,mport java.util.Iterator;
False,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,20,mport java.util.List;
False,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,21,mport java.util.Set;
False,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,22,mport java.util.logging.Logger;
False,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,25,mport com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,21,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,27,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,29,import java.util.Iterator;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,30,import java.util.List;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,31,import java.util.Set;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,32,import java.util.logging.Logger;
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,217,currentProp.setType(Token.STRING);
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,243,f (child.isString()) {
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,243,// TODO: handle getters or setters?
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,244,if (child.isStringKey()) {
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,246,"R.string(child.getString()),"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,247,"IR.stringKey(child.getString()),"
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,321,ase Token.STRING:
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,321,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,330,ase Token.STRING:
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,330,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,478,ase Token.STRING:
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,478,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,635,f (!aNode.isString()) {
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,636,"hrow new MalformedException(""STRING node expected as OBJLIT key"","
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,635,if (!aNode.isStringKey()) {
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,636,"throw new MalformedException(""STRING_KEY node expected as OBJLIT key"","
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,f (key.isString()
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,if (key.isStringKey()
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,212,ase Token.STRING:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,212,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1349, else if (objLitParent.isString()) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1349,} else if (objLitParent.isStringKey()) {
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,91,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/NodeNameExtractor.java,src/com/google/javascript/jscomp/NodeNameExtractor.java,75,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,181,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,475,ase Token.STRING:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,476,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,805,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1227,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2044,ase Token.STRING:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2045,eturn parent.isObjectLit();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2047,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2060,ase Token.STRING:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2062,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,174," else if (NodeUtil.isObjectLitKey(n, parent) &&"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,175,.isString() &&
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,176,sMarkedExpose(n)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,174,} else if (n.isStringKey() && isMarkedExpose(n)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,207," else if (n.isString() && NodeUtil.isObjectLitKey(n, parent)) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,205,} else if (n.isStringKey()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,401,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,418,|| n.isStringKey()
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,249,ode newProperty = IR.string(propertyName)
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,249,Node newProperty = IR.stringKey(propertyName)
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1494,ase Token.STRING:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1494,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,576,f (!key.isString()
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,576,if (!key.isStringKey()
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,274,ode objKeyNode = IR.string(entry.getKey())
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,274,Node objKeyNode = IR.stringKey(entry.getKey())
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1382," else if (NodeUtil.isObjectLitKey(n, parent) && n.isString()) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1382,} else if (n.isStringKey()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,506,/ Object literal keys are handled with OBJECTLIT
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,507,"f (!NodeUtil.isObjectLitKey(n, n.getParent())) {"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,508,"nsureTyped(t, n, STRING_TYPE);"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,509, else {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,510,/ Object literal keys are not typeable
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,511,ypeable = false;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,506,"ensureTyped(t, n, STRING_TYPE);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,507,break;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,509,case Token.STRING_KEY:
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,510,typeable = false;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,689,f (qObjName != null && name.isString()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,689,if (qObjName != null && name.isStringKey()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,568,/ Defer keys to the Token.OBJECTLIT case
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,569,"f (!NodeUtil.isObjectLitKey(n, n.getParent())) {"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,570,.setJSType(getNativeType(STRING_TYPE));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,568,n.setJSType(getNativeType(STRING_TYPE));
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,694,ode = IR.number(((Number) name).doubleValue());
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,694,node = IR.stringKey(getStringValue(((Number) name).doubleValue()));
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,696,ode = IR.string((String) name);
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,696,node = IR.stringKey((String) name);
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,708,private static String getStringValue(double value) {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,709,long longValue = (long) value;
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,711,"// Return ""1"" instead of ""1.0"""
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,712,if (longValue == value) {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,713,return Long.toString(longValue);
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,714,} else {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,715,return Double.toString(value);
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,642,ase Token.STRING:
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,642,case Token.STRING_KEY:
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,646,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,647,tem = new JsonML(TagType.DataProp);
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,648,ame = key.getDouble();
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,649,reak;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,813,key.setType(Token.STRING_KEY);
False,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,376,ropdef.isString() || propdef.isGetterDef() || propdef.isSetterDef());
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,376,propdef.isStringKey() ||
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,377,propdef.isGetterDef() || propdef.isSetterDef());
False,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,386,reconditions.checkState(string.isString());
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,387,Preconditions.checkState(string.isStringKey());
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,418,public static Node stringKey(String s) {
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,419,"return Node.newString(Token.STRING_KEY, s);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1525, else if (type == Token.STRING) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1526,nt quoted1 = this.getIntProp(QUOTED_PROP);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1527,nt quoted2 = node.getIntProp(QUOTED_PROP);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1528,f (quoted1 != quoted2) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1529,eturn false;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1525,} else if (type == Token.STRING || type == Token.STRING_KEY) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1526,if (type == Token.STRING_KEY) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1527,int quoted1 = this.getIntProp(QUOTED_PROP);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1528,int quoted2 = node.getIntProp(QUOTED_PROP);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1529,if (quoted1 != quoted2) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1530,return false;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2352,public boolean isStringKey() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2353,return this.getType() == Token.STRING_KEY;
True,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,157,"STRING_KEY     = 154, // object literal key"
True,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,215,"case STRING_KEY:      return ""STRING_KEY"";"
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,74,"mmutableSet.of(""DEF STRING null -> NUMBER"","
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,74,"ImmutableSet.of(""DEF STRING_KEY null -> NUMBER"","
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,80,"mmutableSet.<String>of(""DEF STRING null -> NUMBER""));"
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,80,"ImmutableSet.<String>of(""DEF STRING_KEY null -> NUMBER""));"
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,84,"mmutableSet.<String>of(""DEF STRING null -> NUMBER""));"
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,84,"ImmutableSet.<String>of(""DEF STRING_KEY null -> NUMBER""));"
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,89,"DEF STRING null -> NUMBER"","
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,89,"""DEF STRING_KEY null -> NUMBER"","
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,294,"DEF STRING null -> EXTERN NUMBER"","
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,294,"""DEF STRING_KEY null -> EXTERN NUMBER"","
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,98,"            STRING 1 1 [quoted: 1] [source_file: FileName.js] [length: 1]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,98,"""            STRING_KEY 1 1 [quoted: 1] [source_file: FileName.js] [length: 1]\n"" +"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,180,"ssertEquals(Token.STRING, key.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,180,"assertEquals(Token.STRING_KEY, key.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,192,"ssertEquals(Token.STRING, key.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,192,"assertEquals(Token.STRING_KEY, key.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,761,"ssertEquals(Token.STRING, number.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,761,"assertEquals(Token.STRING_KEY, number.getType());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,27,ublic class ErrorPass implements CompilerPass {
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,28,rivate final AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,29,rivate final JSError error;
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,31,"ublic ErrorPass(AbstractCompiler compiler, DiagnosticType error) {"
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,32,"his(compiler, JSError.make(error));"
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,27,class ErrorPass implements CompilerPass {
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,28,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,29,private final JSError error;
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,35,"ublic ErrorPass(AbstractCompiler compiler, JSError error) {"
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,36,his.compiler = compiler;
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,37,his.error = error;
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,31,"ErrorPass(AbstractCompiler compiler, DiagnosticType error) {"
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,32,"this(compiler, JSError.make(error));"
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,35,"ErrorPass(AbstractCompiler compiler, JSError error) {"
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,36,this.compiler = compiler;
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,37,this.error = error;
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,40,Override
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,41,"ublic void process(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,42,ompiler.report(error);
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,40,@Override
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,41,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/ErrorPass.java,src/com/google/javascript/jscomp/ErrorPass.java,42,compiler.report(error);
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1288,case Token.SHEQ:
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1293,case Token.SHNE:
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1312,case Token.SHEQ:
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1317,case Token.SHNE:
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1339,case Token.SHEQ:
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,1341,case Token.SHNE:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,47, 1) Splits var statements contains multiple declarations into individual
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,48, statements.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,49," 2) Splits chained assign statements such as ""a = b = c = 0"" into individual"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,50," statements.  These are split as follows ""c = 0; b = c; a = b"". Unfortunately,"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,51," not all such statements can be broken up, for instance:"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,52,"   ""a[next()] = a[next()] = 0"""
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,53, can not be made into
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,54,"   ""a[next()] = 0; a[next()] = a[next()];"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,55, 3) init expressions in FOR statements are extracted and placed before the
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,56," statement. For example: ""for(var a=0;;);"" becomes ""var a=0;for(;;);"""
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,57, 4) WHILE statements are converted to FOR statements. For example:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,58," ""while(true);"" becomes ""for(;true;);"""
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,59," 5) Renames constant variables, as marked with an IS_CONSTANT_NAME annotation,"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,60,   to include a suffix of NodeUtil.CONSTANT_MARKER which is used by constant
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,61,   inlining.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,47,"* 1) Simplifies the AST by splitting var statements, moving initializiers"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,48,"*    out of for loops, and converting whiles to fors."
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,49,* 2) Makes all variable names globally unique (extern or otherwise) so that
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,50,"*    no value is ever shadowed (note: ""arguments"" may require special"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,51,*    handling).
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,52,* 3) Removes duplicate variable declarations.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,53,* 4) Marks constants with the IS_CONSTANT_NAME annotation.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,66,"lass Normalize implements CompilerPass, Callback {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,58,class Normalize implements CompilerPass {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,88,"odeTraversal.traverse(compiler, root, this);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,80,"NodeTraversal.traverse(compiler, root,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,81,"new NormalizeStatements(compiler, assertOnChange));"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,99,Override
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,100,"ublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,101,"oStatementNormalizations(t, n, parent);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,103,eturn true;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,233,Override
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,234,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,235,witch (n.getType()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,236,ase Token.WHILE:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,237,f (CONVERT_WHILE_TO_FOR) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,238,ode expr = n.getFirstChild();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,239,.setType(Token.FOR);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,240,".addChildBefore(new Node(Token.EMPTY), expr);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,241,".addChildAfter(new Node(Token.EMPTY), expr);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,242,"eportCodeChange(""WHILE node"");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,244,reak;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,249, Do normalizations that introduce new siblings or parents.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,220,* Simplify the AST:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,221,"*   - VAR declarations split, so they represent exactly one child"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,222,*     declaration.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,223,*   - WHILEs are converted to FORs
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,224,*   - FOR loop are initializers are moved out of the FOR structure
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,225,"*   - LABEL node of children other than LABEL, BLOCK, WHILE, FOR, or DO are"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,226,*     moved into a block.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,251,"rivate void doStatementNormalizations(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,252,f (n.getType() == Token.LABEL) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,253,ormalizeLabels(n);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,228,static class NormalizeStatements implements Callback {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,229,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,230,private final boolean assertOnChange;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,256,"/ Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,257,/ are the only legal place for VARs and FOR statements.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,258,f (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,259,"xtractForInitializer(n, null, null);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,232,"NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,233,this.compiler = compiler;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,234,this.assertOnChange = assertOnChange;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,262,"/ Only inspect the children of SCRIPTs, BLOCKs, as all these"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,263,/ are the only legal place for VARs.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,264,f (NodeUtil.isStatementBlock(n)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,265,plitVarDeclarations(n);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,237,private void reportCodeChange(String changeDescription) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,238,if (assertOnChange) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,239,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,240,"""Normalize constraints violated:\n"" + changeDescription);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,242,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,268,f (n.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,269,oveNamedFunctions(n.getLastChild());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,245,@Override
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,246,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,247,"doStatementNormalizations(t, n, parent);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,273,/ TODO(johnlenz): Move this to NodeTypeNormalizer once the unit tests are
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,274,/ fixed.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,276, Limit the number of special cases where LABELs need to be handled. Only
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,277, BLOCK and loops are allowed to be labeled.  Loop labels must remain in
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,278, place as the named continues are not allowed for labeled blocks.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,280,rivate void normalizeLabels(Node n) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,281,reconditions.checkArgument(n.getType() == Token.LABEL);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,283,ode last = n.getLastChild();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,284,witch (last.getType()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,285,ase Token.LABEL:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,286,ase Token.BLOCK:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,287,ase Token.FOR:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,288,ase Token.WHILE:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,289,ase Token.DO:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,290,eturn;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,291,efault:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,292,ode block = new Node(Token.BLOCK);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,293,".replaceChild(last, block);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,294,lock.addChildToFront(last);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,295,"eportCodeChange(""LABEL normalization"");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,296,eturn;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,249,return true;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,301, Bring the initializers out of FOR loops.  These need to be placed
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,302, before any associated LABEL nodes. This needs to be done from the top
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,303, level label first so this is called as a pre-order callback (from
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,304, shouldTraverse).
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,306, @param n The node to inspect.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,307, @param before The node to insert the initializer before.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,308, @param beforeParent The parent of the node before which the initializer
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,309,     will be inserted.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,311,rivate void extractForInitializer(
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,312,"ode n, Node before, Node beforeParent) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,314,"or (Node next, c = n.getFirstChild(); c != null; c = next) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,315,ext = c.getNext();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,316,ode insertBefore = (before == null) ? c : before;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,317,ode insertBeforeParent = (before == null) ? n : beforeParent;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,318,witch (c.getType()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,319,ase Token.LABEL:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,320,"xtractForInitializer(c, insertBefore, insertBeforeParent);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,321,reak;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,322,ase Token.FOR:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,323,f (!NodeUtil.isForIn(c)
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,324,& c.getFirstChild().getType() != Token.EMPTY) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,325,ode init = c.getFirstChild();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,326,".replaceChild(init, new Node(Token.EMPTY));"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,328,ode newStatement;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,329,"/ Only VAR statements, and expressions are allowed,"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,330,/ but are handled differently.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,331,f (init.getType() == Token.VAR) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,332,ewStatement = init;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,333, else {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,334,ewStatement = NodeUtil.newExpr(init);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,337,"nsertBeforeParent.addChildBefore(newStatement, insertBefore);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,338,"eportCodeChange(""FOR initializer"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,252,@Override
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,253,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,254,switch (n.getType()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,255,case Token.WHILE:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,256,if (CONVERT_WHILE_TO_FOR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,257,Node expr = n.getFirstChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,258,n.setType(Token.FOR);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,259,"n.addChildBefore(new Node(Token.EMPTY), expr);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,260,"n.addChildAfter(new Node(Token.EMPTY), expr);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,261,"reportCodeChange(""WHILE node"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,268,* Do normalizations that introduce new siblings or parents.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,270,private void doStatementNormalizations(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,271,"NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,272,if (n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,273,normalizeLabels(n);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,347, Split a var node such as:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,348,"   var a, b;"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,349, into individual statements:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,350,   var a;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,   var b;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352, @param n The whose children we should inspect.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,rivate void splitVarDeclarations(Node n) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,355,"or (Node next, c = n.getFirstChild(); c != null; c = next) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,356,ext = c.getNext();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,f (c.getType() == Token.VAR) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,f (assertOnChange && !c.hasChildren()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,359,"hrow new IllegalStateException(""Empty VAR node."");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,276,"// Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,277,// are the only legal place for VARs and FOR statements.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,278,if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,279,"extractForInitializer(n, null, null);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,282,"// Only inspect the children of SCRIPTs, BLOCKs, as all these"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,283,// are the only legal place for VARs.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,284,if (NodeUtil.isStatementBlock(n)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,285,splitVarDeclarations(n);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,362,hile (c.getFirstChild() != c.getLastChild()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,363,ode name = c.getFirstChild();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,364,.removeChild(name);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,365,"ode newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno());"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,366,".addChildBefore(newVar, c);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,367,"eportCodeChange(""VAR with multiple children"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,288,if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,289,moveNamedFunctions(n.getLastChild());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,293,// TODO(johnlenz): Move this to NodeTypeNormalizer once the unit tests are
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,294,// fixed.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,296,* Limit the number of special cases where LABELs need to be handled. Only
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,297,* BLOCK and loops are allowed to be labeled.  Loop labels must remain in
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,298,* place as the named continues are not allowed for labeled blocks.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,300,private void normalizeLabels(Node n) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,301,Preconditions.checkArgument(n.getType() == Token.LABEL);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,303,Node last = n.getLastChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,304,switch (last.getType()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,305,case Token.LABEL:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,306,case Token.BLOCK:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,307,case Token.FOR:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,308,case Token.WHILE:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,309,case Token.DO:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,310,return;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,311,default:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,312,Node block = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,313,"n.replaceChild(last, block);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,314,block.addChildToFront(last);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,315,"reportCodeChange(""LABEL normalization"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,316,return;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,321,* Bring the initializers out of FOR loops.  These need to be placed
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,322,* before any associated LABEL nodes. This needs to be done from the top
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,323,* level label first so this is called as a pre-order callback (from
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,324,* shouldTraverse).
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,326,* @param n The node to inspect.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,327,* @param before The node to insert the initializer before.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,328,* @param beforeParent The parent of the node before which the initializer
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,329,*     will be inserted.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,331,private void extractForInitializer(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,332,"Node n, Node before, Node beforeParent) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,334,"for (Node next, c = n.getFirstChild(); c != null; c = next) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,335,next = c.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,336,Node insertBefore = (before == null) ? c : before;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,337,Node insertBeforeParent = (before == null) ? n : beforeParent;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,338,switch (c.getType()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,339,case Token.LABEL:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,340,"extractForInitializer(c, insertBefore, insertBeforeParent);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,341,break;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,342,case Token.FOR:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,343,if (!NodeUtil.isForIn(c)
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,344,&& c.getFirstChild().getType() != Token.EMPTY) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,345,Node init = c.getFirstChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,346,"c.replaceChild(init, new Node(Token.EMPTY));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,348,Node newStatement;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,349,"// Only VAR statements, and expressions are allowed,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,350,// but are handled differently.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,if (init.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,newStatement = init;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,353,} else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,newStatement = NodeUtil.newExpr(init);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,"insertBeforeParent.addChildBefore(newStatement, insertBefore);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,"reportCodeChange(""FOR initializer"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,360,break;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,374, Move all the functions that are valid at the execution of the first
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,375, statement of the function to the beginning of the function definition.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,377,rivate void moveNamedFunctions(Node functionBody) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,378,reconditions.checkState(
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,379,unctionBody.getParent().getType() == Token.FUNCTION);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,380,ode previous = null;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,381,ode current = functionBody.getFirstChild();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,382,"/ Skip any declarations at the beginning of the function body, they"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,383,/ are already in the right place.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,384,hile (current != null && NodeUtil.isFunctionDeclaration(current)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,385,revious = current;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,386,urrent = current.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,366,* Split a var node such as:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,367,"*   var a, b;"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,368,* into individual statements:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,369,*   var a;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,370,*   var b;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,371,* @param n The whose children we should inspect.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,373,private void splitVarDeclarations(Node n) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,374,"for (Node next, c = n.getFirstChild(); c != null; c = next) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,375,next = c.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,376,if (c.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,377,if (assertOnChange && !c.hasChildren()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,378,"throw new IllegalStateException(""Empty VAR node."");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,381,while (c.getFirstChild() != c.getLastChild()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,382,Node name = c.getFirstChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,383,c.removeChild(name);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,384,Node newVar = new Node(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,385,"Token.VAR, name, n.getLineno(), n.getCharno());"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,386,"n.addChildBefore(newVar, c);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,387,"reportCodeChange(""VAR with multiple children"");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,389,/ Find any remaining declarations and move them.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,390,ode insertAfter = previous;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,391,hile (current != null) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,392,/ Save off the next node as the current node maybe removed.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,393,ode next = current.getNext();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,394,f (NodeUtil.isFunctionDeclaration(current)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,395,/ Remove the declaration from the body.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,396,reconditions.checkNotNull(previous);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,397,unctionBody.removeChildAfter(previous);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,399,/ Readd the function at the top of the function body (after any
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,400,/ previous declarations).
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,401,"nsertAfter = addToFront(functionBody, current, insertAfter);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,402,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,403, else {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,404,/ Update the previous only if the current node hasn't been moved.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,394,* Move all the functions that are valid at the execution of the first
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,395,* statement of the function to the beginning of the function definition.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,397,private void moveNamedFunctions(Node functionBody) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,398,Preconditions.checkState(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,399,functionBody.getParent().getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,400,Node previous = null;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,401,Node current = functionBody.getFirstChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,402,"// Skip any declarations at the beginning of the function body, they"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,403,// are already in the right place.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,404,while (current != null && NodeUtil.isFunctionDeclaration(current)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,406,current = current.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,409,// Find any remaining declarations and move them.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,410,Node insertAfter = previous;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,411,while (current != null) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,412,// Save off the next node as the current node maybe removed.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,413,Node next = current.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,414,if (NodeUtil.isFunctionDeclaration(current)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,415,// Remove the declaration from the body.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,416,Preconditions.checkNotNull(previous);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,417,functionBody.removeChildAfter(previous);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,419,// Readd the function at the top of the function body (after any
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,420,// previous declarations).
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,421,"insertAfter = addToFront(functionBody, current, insertAfter);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,422,"reportCodeChange(""Move function declaration not at top of function"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,423,} else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,424,// Update the previous only if the current node hasn't been moved.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,425,previous = current;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,427,current = next;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,407,urrent = next;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,412," @param after The child node to insert the newChild after, or null if"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,413,     newChild should be added to the front of parent's child list.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,414, @return The inserted child node.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,416,"rivate Node addToFront(Node parent, Node newChild, Node after) {"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,417,f (after == null) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,418,arent.addChildToFront(newChild);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,419, else {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,420,"arent.addChildAfter(newChild, after);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,432,"* @param after The child node to insert the newChild after, or null if"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,433,*     newChild should be added to the front of parent's child list.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,434,* @return The inserted child node.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,436,"private Node addToFront(Node parent, Node newChild, Node after) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,437,if (after == null) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,438,parent.addChildToFront(newChild);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,439,} else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,440,"parent.addChildAfter(newChild, after);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,442,return newChild;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,422,eturn newChild;
True,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,19,import com.google.javascript.jscomp.Normalize.NormalizeStatements;
False,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,79,"function(){var b; var a=0;var i=(\""length\"" in b);for (;a<2;a++) foo()}"");"
True,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,80,"""function(){var b; var a=0;var i=(\""length\"" in b);"" +"
True,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,81,"""for (;a<2;a++) foo()}"");"
False,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,91,ormalize normalizePass;
True,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,92,NormalizeStatements normalizePass;
False,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,97,"ormalizePass = new Normalize(compiler, false);"
True,test/com/google/javascript/jscomp/DenormalizeTest.java,test/com/google/javascript/jscomp/DenormalizeTest.java,98,"normalizePass = new NormalizeStatements(compiler, false);"
False,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,733,"old(""true == true"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,739,"// ===, !== comparison tests"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,740,public void testFoldComparison2() {
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,741,"fold(""x = 0 === 0"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,742,"fold(""x = 1 === 2"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,743,"fold(""x = 'abc' === 'def'"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,744,"fold(""x = 'abc' === 'abc'"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,745,"fold(""x = \""\"" === ''"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,746,"fold(""x = foo() === bar()"", ""x = foo()===bar()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,748,"fold(""x = 1 !== 0"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,749,"fold(""x = 'abc' !== 'def'"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,750,"fold(""x = 'a' !== 'a'"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,752,"fold(""x = y === y"", ""x = y===y"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,754,"fold(""x = true === true"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,755,"fold(""x = true === true"", ""x = true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,756,"fold(""x = false === null"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,757,"fold(""x = false === true"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,758,"fold(""x = true === null"", ""x = false"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,760,"fold(""0 === 0"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,761,"fold(""1 === 2"", ""0"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,762,"fold(""'abc' === 'def'"", ""0"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,763,"fold(""'abc' === 'abc'"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,764,"fold(""\""\"" === ''"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,765,"fold(""foo() === bar()"", ""foo()===bar()"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,767,// TODO(johnlenz): It would be nice to handle these cases as well.
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,768,"foldSame(""1 === '1'"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,769,"foldSame(""1 === true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,770,"foldSame(""1 !== '1'"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,771,"foldSame(""1 !== true"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,773,"fold(""1 !== 0"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,774,"fold(""'abc' !== 'def'"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,775,"fold(""'a' !== 'a'"", ""0"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,777,"fold(""x === x"", ""x===x"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,779,"fold(""true === true"", ""1"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,780,"fold(""false === null"", ""0"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,781,"fold(""false === true"", ""0"");"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,782,"fold(""true === null"", ""0"");"

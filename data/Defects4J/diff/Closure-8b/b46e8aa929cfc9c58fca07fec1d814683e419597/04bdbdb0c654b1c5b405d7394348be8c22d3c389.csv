is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,694,eturn matchIndex;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,694,return matchIndex + separator.length();
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,702,reconditions.checkArgument(stringValue != null);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,709,"/ If a separator is not specified, return the entire string as"
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,710,/ the only element of an array.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,708,"/* If a separator is not specified, return the entire string as"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,709,* the only element of an array.
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,717,"/ If an empty string is specified for the separator, split apart each"
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,718,/ character of the string.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,717,"/* If an empty string is specified for the separator, split apart each"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,718,* character of the string.
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,724,"nt startIndex = 0, matchIndex;"
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,725,hile ((matchIndex =
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,725,"int startIndex = 0, matchEndIndex;"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,726,while ((matchEndIndex =
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,728,"plitStrings.add(stringValue.substring(startIndex, matchIndex));"
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,730,tartIndex = matchIndex + separator.length();
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,733,f (splitStrings.size() < limit) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,734,f (startIndex < stringValue.length()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,735,plitStrings.add(stringValue.substring(startIndex));
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,736, else {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,737,"plitStrings.add("""");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,729,if (separator.length() == 0) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,730,matchEndIndex++;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,732,"splitStrings.add(stringValue.substring(startIndex,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,733,matchEndIndex - separator.length()));
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,734,startIndex = matchEndIndex;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,736,if (startIndex < stringValue.length() && splitStrings.size() < limit) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,737,splitStrings.add(stringValue.substring(startIndex));
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,21,import com.google.common.base.Splitter;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,22,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,24,import com.google.common.collect.Iterables;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,32,mport java.io.InputStreamReader;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,34,mport java.util.HashSet;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,36,import java.io.Reader;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,37,import java.util.List;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,52,"private static final Splitter LINE_SPLITTER = Splitter.on(""\n"");"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,64,* # <optional-comment>
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,75,* Loads legacy warnings list from the set of strings. During development line
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,76,* numbers are changed very often - we just cut them and compare without ones.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,78,* @return known legacy warnings without line numbers.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,70,or (String match : whitelist) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,71,"esult.add(LINE_NUMBER.matcher(match).replaceFirst("":""));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,82,for (String line : whitelist) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,83,String trimmed = line.trim();
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,84,if (trimmed.isEmpty() || trimmed.charAt(0) == '#') {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,85,// strip out empty lines and comments.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,86,continue;
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,89,// Strip line number for matching.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,90,"result.add(LINE_NUMBER.matcher(trimmed).replaceFirst("":""));"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,109, Loads legacy warnings list from the file. As during development line
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,110, numbers are changed very often - we just cut it and compare without ones.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,112, @return known legacy warnings without line numbers.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,128,* Loads legacy warnings list from the file.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,129,* @return The lines of the file.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,120, Loads legacy warnings list from the file. As during development line
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,121, numbers are changed very often - we just cut it and compare without ones.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,123, @return known legacy warnings without line numbers.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,137,* Loads legacy warnings list from the file.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,138,* @return The lines of the file.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,126,nputSupplier<InputStreamReader> supplier) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,127,reconditions.checkNotNull(supplier);
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,129,et<String> result = new HashSet<String>();
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,141,InputSupplier<? extends Reader> supplier) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,132,or (String line : CharStreams.readLines(supplier)) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,133,ine = line.trim();
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,134,f (line.isEmpty() || line.charAt(0) == '#') {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,135,ontinue;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,138,esult.add(line);
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,143,return loadWhitelistedJsWarnings(supplier.getInput());
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,150,* Loads legacy warnings list from the file.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,151,* @return The lines of the file.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,153,// TODO(nicksantos): This is a weird API.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,154,static Set<String> loadWhitelistedJsWarnings(Reader reader)
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,155,throws IOException {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,156,Preconditions.checkNotNull(reader);
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,157,Set<String> result = Sets.newHashSet();
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,159,for (String line : CharStreams.readLines(reader)) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,160,result.add(line);
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,151,"ublic static String formatWarning(JSError error, boolean withLineNumber) {"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,171,"* @param withMetaData If true, include metadata that's useful to humans"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,172,*     This metadata won't be used for matching the warning.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,174,"public static String formatWarning(JSError error, boolean withMetaData) {"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,154,f (withLineNumber) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,177,if (withMetaData) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,157,tring descriptionFirstLine = getFirstLine(error.description);
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,158,f (!withLineNumber) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,159,escriptionFirstLine =
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,160,"INE_NUMBER.matcher(descriptionFirstLine).replaceAll("":"");"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,180,List<String> lines = ImmutableList.copyOf(
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,181,LINE_SPLITTER.split(error.description));
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,182,"sb.append(""  "").append(lines.get(0));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,184,// Add the rest of the message as a comment.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,185,if (withMetaData) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,186,for (int i = 1; i < lines.size(); i++) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,187,"sb.append(""\n# "").append(lines.get(i));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,189,"sb.append(""\n"");"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,162,"b.append(""  "").append(descriptionFirstLine);"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,179,rivate boolean withLineNumber = false;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,194, Sets whether line number are recorded in the whitelist.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,196, The line numbers are not used by the compiler. The whitelist will still
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,197, match any line in the file. This ensures that unrelated changes in
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,198, the file don't make the build fail.
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,200, The line numbers are only there to make it easier for humans to find
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,201, the problem.
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,220,/** We now always record the line number. */
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,221,@Deprecated
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,204,his.withLineNumber = line;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,244,"arning.getType(), formatWarning(warning, withLineNumber));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,262,"warning.getType(),"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,263,"formatWarning(warning, true /* withLineNumber */));"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,251,println(getFirstLine(type.format.toPattern()));
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,270,.println(Iterables.get(
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,271,"LINE_SPLITTER.split(type.format.toPattern()), 0));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,277,out.flush();
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,208,"old(""x = 'aaaaa'.split('a')"", ""x = ['', '', '', '', '', '']"");"
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,209,"old(""x = 'xyx'.split('x')"", ""x = ['', 'y', '']"");"
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,211,/ Empty separator
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,208,"fold(""x = 'aaaaa'.split('a')"", ""x = ['', '', '', '', '']"");"
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,215,/ Empty separator AND empty string
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,216,"old(""x = ''.split('')"", ""x = []"");"
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,218,/ Separator equals string
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,219,"old(""x = 'aaa'.split('aaa')"", ""x = ['','']"");"
False,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,220,"old(""x = ' '.split(' ')"", ""x = ['','']"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,27,mport com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition;
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,143, else {
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,144,"esult.add(new UnknownDefinition(useSite, false));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,247,JSModule providedModule = provided.explicitModule;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,249,"// This must be non-null, because there was an explicit provide."
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,250,Preconditions.checkNotNull(providedModule);
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,249,odule != provided.firstModule /* covers null case */ &&
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,250,"moduleGraph.dependsOn(module,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,251,rovided.firstModule)) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,254,module != providedModule &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,255,"!moduleGraph.dependsOn(module, providedModule)) {"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,254,"rovided.firstModule.getName(),"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,258,"providedModule.getName(),"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,672,private JSModule explicitModule = null;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,703,explicitModule = module;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,20,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,22,import java.util.Set;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,25,* A pass that analyzes side effects to determine when it is safe to move
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,26,* code from one program point to another.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,28,"* In its current form, SideEffectsAnalysis is very incomplete; this is"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,29,* mostly a sketch to prototype the interface and the broad strokes of
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,30,* a possible implementation based on flow-insensitive MOD and REF sets.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,32,* See:
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,34,"* Banning, John. “An efficient way to find the side effects of procedure"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,35,*      calls and the aliases of variables.” POPL ‘79.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,37,* For an introduction to MOD and REF sets.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,39,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,41,public class SideEffectsAnalysis implements CompilerPass {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,43,/** The location abstraction used to calculate the effects of code */
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,44,private LocationAbstraction locationAbstraction;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,46,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,47,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,48,locationAbstraction = new DegenerateLocationAbstraction();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,50,"// Currently performs no analysis. In the future, this method"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,51,// will construct a callgraph and calculate side effects summaries
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,52,// for all functions.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,53,// TODO(dcc): Add per-function side effects summaries.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,57,* Determines whether it is safe to move code ({@code source}) across
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,58,* an environment to another program point (immediately preceding
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,59,* {@code destination}).
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,61,"* <p>The notion of ""environment"" is optimization-specific, but it should"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,62,* include any code that could be executed between the source program point
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,63,* and the destination program point.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,65,* {@code destination} must not be a descendant of {@code source}.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,67,* @param source The node that would be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,68,* @param environment An environment representing the code across which
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,69,*    the source will be moved.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,70,* @param destination The node before which the source would be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,71,* @return Whether it is safe to move the source to the destination
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,73,"public boolean safeToMoveBefore(Node source,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,74,"AbstractMotionEnvironment environment,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,75,Node destination) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,76,Preconditions.checkNotNull(locationAbstraction);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,77,"Preconditions.checkArgument(!nodeHasAncestor(destination, source));"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,79,// It is always safe to move pure code.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,80,if (isPure(source)) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,81,return true;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,84,LocationSummary sourceLocationSummary =
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,85,locationAbstraction.calculateLocationSummary(source);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,87,EffectLocation sourceModSet = sourceLocationSummary.getModSet();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,89,"// If the source has side effects, then we require that the source"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,90,// is executed exactly as many times as the destination.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,91,if (!sourceModSet.isEmpty() &&
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,92,"!nodesHaveSameControlFlow(source, destination)) {"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,93,return false;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,96,EffectLocation sourceRefSet = sourceLocationSummary.getRefSet();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,98,Set<Node> environmentNodes = environment.calculateEnvironment();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,100,LocationSummary environmentLocationSummary =
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,101,locationAbstraction.calculateLocationSummary(environmentNodes);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,103,EffectLocation environmentModSet = environmentLocationSummary.getModSet();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,105,EffectLocation environmentRefSet = environmentLocationSummary.getRefSet();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,107,// If MOD(environment) intersects REF(source) then moving the
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,108,// source across the environment could cause the source
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,109,// to read an incorrect value.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,110,// If REF(environment) intersects MOD(source) then moving the
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,111,// source across the environment could cause the environment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,112,// to read an incorrect value.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,113,// If MOD(environment) intersects MOD(source) then moving the
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,114,// source across the environment could cause some later code that reads
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,115,// a modified location to get an incorrect value.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,117,if (!environmentModSet.intersectsLocation(sourceRefSet)
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,118,&& !environmentRefSet.intersectsLocation(sourceModSet)
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,119,&& !environmentModSet.intersectsLocation(sourceModSet)) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,120,return true;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,123,return false;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,127,"* Is the node pure? That is, is it side effect free and does it not depend"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,128,* on its environment?
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,130,private boolean isPure(Node node) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,131,"// For now, we conservatively assume all code is not pure."
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,132,// TODO(dcc): Implement isPure().
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,133,return false;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,137,"* Do the two nodes have the same control flow properties? That is,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,138,* will node1 be executed every time node2 is executed and vice versa?
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,140,"private boolean nodesHaveSameControlFlow(Node node1, Node node2) {"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,141,"// For now, we conservatively assume not."
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,142,// TODO(dcc): Implement nodesHaveSameControlFlow().
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,143,return false;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,146,"private static boolean nodeHasAncestor(Node node, Node possibleAncestor) {"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,147,// Note node is not in node.getAncestors()
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,149,for (Node ancestor : node.getAncestors()) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,150,if (ancestor == possibleAncestor) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,151,return true;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,155,return false;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,159,"* Represents an environment across which code might be moved, i.e. the set"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,160,* of code that could be run in between the source and the destination.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,162,* SideEffectAnalysis characterizes the code to be moved and the environment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,163,* in order to determine if they interact in such a way as to make the move
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,164,* unsafe.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,166,"* Since determining the environment for an optimization can be tricky,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,167,* we provide several concrete subclasses that common classes of optimizations
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,168,* may be able to reuse.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,170,public abstract static class AbstractMotionEnvironment {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,173,* Calculates the set of nodes that this environment represnts.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,175,public abstract Set<Node> calculateEnvironment();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,179,* An environment for motion within a function. Given a
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,180,* control flow graph and a source and destination node in the control
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,181,"* flow graph, instances of this object will calculate the environment between"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,182,* the source and destination.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,184,public static class IntraproceduralMotionEnvironment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,185,extends AbstractMotionEnvironment {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,188,* Creates an intraprocedural motion environment.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,190,* @param controlFlowGraph A control flow graph for function in which
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,191,* code will be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,192,* @param cfgSource The code to be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,193,* @param cfgDestination The node immediately before which cfgSource
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,194,* will be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,196,public IntraproceduralMotionEnvironment(
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,197,"ControlFlowGraph<Node> controlFlowGraph,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,198,"Node cfgSource,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,199,Node cfgDestination) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,203,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,204,public Set<Node> calculateEnvironment() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,205,// TODO(dcc): Implement IntraproceduralMotionEnvironment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,206,return null;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,211,* An environment for motion between modules. Given a
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,212,"* module graph and as well as source and destination nodes and modules,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,213,* instances of this object will calculate the environment between the source
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,214,* and destination.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,216,public static class CrossModuleMotionEnvironment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,217,extends AbstractMotionEnvironment {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,220,* Creates a cross module code motion environment.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,222,* @param sourceNode The code to be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,223,* @param sourceModule The module for the code to be moved
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,224,* @param destinationNode The node before which sourceNode will be inserted
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,225,* @param destinationModule The module that destination is in
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,226,* @param moduleGraph The module graph of the entire program
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,228,"public CrossModuleMotionEnvironment(Node sourceNode,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,229,"JSModule sourceModule,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,230,"Node destinationNode,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,231,"JSModule destinationModule,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,232,JSModuleGraph moduleGraph) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,236,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,237,public Set<Node> calculateEnvironment() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,238,// TODO(dcc): Implement CrossModuleMotionEnvironment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,239,return null;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,243,* A low-level concrete environment that allows the client to specify
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,244,* the environment nodes directly. Clients may wish to use this environment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,245,* if none  of the higher-level environments fit their needs.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,247,public static class RawMotionEnvironment
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,248,extends AbstractMotionEnvironment {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,249,Set<Node> environment;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,251,public RawMotionEnvironment(Set<Node> environment) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,252,this.environment = environment;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,255,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,256,public Set<Node> calculateEnvironment() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,257,return environment;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,262,* A combined representation for location set summaries.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,264,"* Basically, it is often easier to shuffle MOD/REF around together; this is"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,265,* a value class for that purpose.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,267,private static class LocationSummary {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,269,private EffectLocation modSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,270,private EffectLocation refSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,272,"public LocationSummary(EffectLocation modSet, EffectLocation refSet) {"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,273,this.modSet = modSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,274,this.refSet = refSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,277,public EffectLocation getModSet() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,278,return modSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,281,public EffectLocation getRefSet() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,282,return refSet;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,287,* Interface representing the notion of an effect location -- an abstract
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,288,* location that can be modified or referenced.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,290,* <p>Since there are an infinite number of possible concrete locations
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,291,"* in a running program, this abstraction must be imprecise (i.e. there"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,292,* will be some distinct concrete locations that are indistinguishable
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,293,* under the abstraction).
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,295,* <p>Different location abstractions will provide their
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,296,"* own implementations of this interface, based on the level and kind"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,297,* of precision they provide.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,299,private static interface EffectLocation {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,302,* Does the receiver's effect location intersect a given effect location?
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,303,"* That is, could any of the concrete storage locations (fields, variables,"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,304,* etc.) represented by the receiver be contained in the set of concrete
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,305,* storage locations represented by the given abstract effect location.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,307,public boolean intersectsLocation(EffectLocation otherLocation);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,310,* Returns the result of merging the given effect location with
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,311,* the receiver. The concrete locations represented by the result must
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,312,* include all the concrete locations represented by each of the merged
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,313,"* locations and may also possibly include more (i.e., a join may"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,314,* introduce a loss of precision).
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,316,public EffectLocation join(EffectLocation otherLocation);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,319,* Does the effect location represent any possible concrete locations?
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,321,public boolean isEmpty();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,325,"* An abstract class representing a location abstraction. (Here ""abstraction"""
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,326,* means an imprecise representation of concrete side effects.)
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,328,* <p>Implementations of this class will each provide own their
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,329,* implementation(s) of SideEffectLocation and methods to determine the side
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,330,* effect locations of a given piece of code.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,332,private abstract static class LocationAbstraction  {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,334,/** Calculates the abstraction-specific side effects
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,335,* for the node.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,337,abstract LocationSummary calculateLocationSummary(Node node);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,340,* Returns an abstraction-specific EffectLocation representing
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,341,* no location.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,343,* <p>The bottom location joined with any location should return
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,344,* that location.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,346,abstract EffectLocation getBottomLocation();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,349,* Calculates the abstraction-specific side effects
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,350,* for the node.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,352,public LocationSummary calculateLocationSummary(Set<Node> nodes) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,353,EffectLocation modAccumulator = getBottomLocation();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,354,EffectLocation refAccumulator = getBottomLocation();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,356,for (Node node : nodes) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,357,LocationSummary nodeLocationSummary = calculateLocationSummary(node);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,359,modAccumulator = modAccumulator.join(nodeLocationSummary.getModSet());
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,360,refAccumulator = refAccumulator.join(nodeLocationSummary.getRefSet());
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,363,"return new LocationSummary(modAccumulator, refAccumulator);"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,367,* A very imprecise location abstraction in which there are only two abstract
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,368,* locations: one representing all concrete locations and one for bottom
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,369,* (no concrete locations).
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,371,* This implementation is a thin wrapper on NodeUtil.mayHaveSideEffects()
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,372,* and NodeUtil.canBeSideEffected() -- it doesn't add any real value other
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,373,* than to prototype the LocationAbstraction interface.
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,375,private static class DegenerateLocationAbstraction
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,376,extends LocationAbstraction {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,378,private static final EffectLocation EVERY_LOCATION =
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,379,new DenegenerateEffectLocation();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,381,private static final EffectLocation NO_LOCATION =
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,382,new DenegenerateEffectLocation();
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,384,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,385,EffectLocation getBottomLocation() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,386,return NO_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,389,@Override
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,390,public LocationSummary calculateLocationSummary(Node node) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,391,"return new LocationSummary(calculateModSet(node), calculateRefSet(node));"
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,394,EffectLocation calculateRefSet(Node node) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,395,if (NodeUtil.canBeSideEffected(node)) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,396,return EVERY_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,397,} else {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,398,return NO_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,402,EffectLocation calculateModSet(Node node) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,403,if (NodeUtil.mayHaveSideEffects(node)) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,404,return EVERY_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,405,} else {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,406,return NO_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,410,private static class DenegenerateEffectLocation implements EffectLocation {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,411,public EffectLocation join(EffectLocation otherLocation) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,412,if (otherLocation == EVERY_LOCATION) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,413,return otherLocation;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,414,} else {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,415,return this;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,419,public boolean intersectsLocation(EffectLocation otherLocation) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,420,return this == EVERY_LOCATION && otherLocation == EVERY_LOCATION;
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,423,public boolean isEmpty() {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,424,return this == NO_LOCATION;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,278,oid reset() {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,278,public void reset() {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,146,tatic final DiagnosticType INTERFACE_FUNCTION_MEMBERS_ONLY =
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,146,static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,148,"JSC_INTERFACE_FUNCTION_MEMBERS_ONLY"","
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,149,"interface members can only be plain functions or {0}"");"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,148,"""JSC_INVALID_INTERFACE_MEMBER_DECLARATION"","
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,149,"""interface members can only be empty property declarations,"""
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,150,"+ "" empty functions{0}"");"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,238,"NTERFACE_FUNCTION_MEMBERS_ONLY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,239,"INVALID_INTERFACE_MEMBER_DECLARATION,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1049,// Only 2 values are allowed for methods:
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1050,//    goog.abstractMethod
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1051,//    function () {};
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1052,"// or for properties, no assignment such as:"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1053,//    InterfaceFoo.prototype.foobar;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1060,// This is bad i18n style but we don't localize our compiler errors.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1061,String abstractMethodMessage = (abstractMethodName != null)
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1062,"? "", or "" + abstractMethodName"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1053,".makeError(object, INTERFACE_FUNCTION_MEMBERS_ONLY,"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1054,bstractMethodName));
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1065,"t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1066,abstractMethodMessage));
False,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,173,"SSIGN_BITAND  = 89,  // |="
True,src/com/google/javascript/rhino/Token.java,src/com/google/javascript/rhino/Token.java,173,"ASSIGN_BITAND  = 89,  // &="
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5912,"interface members can only be plain functions"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5913," or goog.abstractMethod"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5912,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5913,"+ ""empty functions, or goog.abstractMethod"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5919,"interface members can only be plain functions"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5920," or goog.abstractMethod"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5919,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5920,"+ ""empty functions, or goog.abstractMethod"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5970,"interface members can only be plain functions or goog.abstractMethod"""
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5970,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5971,"+ ""empty functions, or goog.abstractMethod"""
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,734,public void testProvideInIndependentModules2b() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,735,// TODO(nicksantos): Make this an error.
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,736,test(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,737,createModuleStar(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,738,"""goog.provide('apps');"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,739,"""goog.provide('apps.foo'); apps.foo = function() {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,740,"""goog.provide('apps.foo.B');""),"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,741,new String[] {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,742,"""var apps = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,743,"""apps.foo = function() {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,744,"""apps.foo.B = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,748,public void testProvideInIndependentModules3() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,749,test(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,750,createModuleStar(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,751,"""goog.provide('apps');"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,752,"""goog.provide('apps.foo.B');"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,753,"""goog.provide('apps.foo'); goog.require('apps.foo');""),"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,754,new String[] {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,755,"""var apps = {}; apps.foo = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,756,"""apps.foo.B = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,761,public void testProvideInIndependentModules3b() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,762,// TODO(nicksantos): Make this an error.
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,763,test(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,764,createModuleStar(
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,765,"""goog.provide('apps');"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,766,"""goog.provide('apps.foo.B');"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,767,"""goog.provide('apps.foo'); apps.foo = function() {}; "" +"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,768,"""goog.require('apps.foo');""),"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,769,new String[] {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,770,"""var apps = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,771,"""apps.foo.B = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,772,"""apps.foo = function() {};"","
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,19,import com.google.common.collect.ImmutableSet;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,23,* Tests for SideEffectsAnalysis.
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,25,* @author dcc@google.com (Devin Coughlin)
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,28,public class SideEffectsAnalysisTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,30,SideEffectsAnalysis currentProcessor = null;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,32,Compiler currentCompiler = null;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,34,Node currentJsRoot = null;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,36,@Override
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,37,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,38,currentCompiler = compiler;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,39,currentProcessor = new SideEffectsAnalysis();
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,41,return currentProcessor;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,44,@Override
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,45,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,46,super.setUp();
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,47,currentProcessor = null;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,50,public void testSafeToMoveConstantAcrossEmpty() {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,51,"SideEffectsAnalysis analysis = compileAndRun(""1; 2;"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,53,Node expression1 = rootJsNodeAtIndex(0);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,54,Node expression2 = rootJsNodeAtIndex(1);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,56,"assertTrue(analysis.safeToMoveBefore(expression1,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,57,"environment(), expression2));"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,60,public void testSafeToMoveConstantAcrossConstants() {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,61,"SideEffectsAnalysis analysis = compileAndRun(""1; 2; 3;"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,63,Node expression1 = rootJsNodeAtIndex(0);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,64,Node expression2 = rootJsNodeAtIndex(1);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,65,Node expression3 = rootJsNodeAtIndex(2);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,67,"assertTrue(analysis.safeToMoveBefore(expression1,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,68,"environment(expression2), expression3));"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,71,public void testNotSafeToMoveIncrementAcrossRead() {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,72,"SideEffectsAnalysis analysis = compileAndRun(""x++; foo(x); 3;"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,74,Node expression1 = rootJsNodeAtIndex(0);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,75,Node expression2 = rootJsNodeAtIndex(1);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,76,Node expression3 = rootJsNodeAtIndex(2);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,78,"assertFalse(analysis.safeToMoveBefore(expression1,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,79,"environment(expression2), expression3));"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,82,public void testNotSafeToMoveReadAcrossIncrement() {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,83,"SideEffectsAnalysis analysis = compileAndRun(""foo(x); x++; 3;"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,85,Node expression1 = rootJsNodeAtIndex(0);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,86,Node expression2 = rootJsNodeAtIndex(1);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,87,Node expression3 = rootJsNodeAtIndex(2);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,89,"assertFalse(analysis.safeToMoveBefore(expression1,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,90,"environment(expression2), expression3));"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,93,public void testNotSafeToMoveWriteAcrossWrite() {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,94,"SideEffectsAnalysis analysis = compileAndRun(""x = 7; x = 3; 3;"");"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,96,Node expression1 = rootJsNodeAtIndex(0);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,97,Node expression2 = rootJsNodeAtIndex(1);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,98,Node expression3 = rootJsNodeAtIndex(2);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,100,"assertFalse(analysis.safeToMoveBefore(expression1,"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,101,"environment(expression2), expression3));"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,104,Node rootJsNodeAtIndex(int index) {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,105,// We assume currentJsRoot is:
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,106,// BLOCK
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,107,//   SCRIPT
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,108,//     child0
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,109,//     child1
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,110,Node scriptNode = currentJsRoot.getFirstChild();
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,112,return scriptNode.getChildAtIndex(index);
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,115,private SideEffectsAnalysis.AbstractMotionEnvironment environment(
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,116,Node ...nodes) {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,118,return new SideEffectsAnalysis.RawMotionEnvironment(
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,119,ImmutableSet.copyOf(nodes));
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,122,private SideEffectsAnalysis compileAndRun(String js) {
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,123,"testSame("""", js, null);"
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,125,currentJsRoot = currentCompiler.jsRoot;
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,127,return currentProcessor;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6091,"/      ""cannot reference an interface ouside of its definition"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6091,"//      ""e of its definition"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6170,/public void testWarnDataPropertyOnInterface2() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6171,"/  testTypes(""/** @interface */ function T() {};\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6172,"/      ""/** @type {number} */T.prototype.x;"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6173,"/      ""interface members can only be plain functions"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6170,public void testDataPropertyOnInterface2() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6171,"testTypes(""/** @interface */ function T() {};\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6172,"""/** @type {number} */T.prototype.x;"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6179,"interface members can only be plain functions"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6180," or goog.abstractMethod"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6178,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6179,"+ ""empty functions, or goog.abstractMethod"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6186,"interface members can only be plain functions"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6187," or goog.abstractMethod"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6185,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6186,"+ ""empty functions, or goog.abstractMethod"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6237,"interface members can only be plain functions or goog.abstractMethod"""
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6236,"""interface members can only be empty property declarations, """
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6237,"+ ""empty functions, or goog.abstractMethod"""

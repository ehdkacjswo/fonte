is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,506,public void injectMockAnnotationFieldIsNull(String field) {
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,507,"throw new MockitoException(""Field '"" + field + ""' annotated with @InjectMock is null.\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,508,"""Please make sure the instance is created *before* MockitoAnnotations.initMocks();\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,509,"""Example of correct usage:\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,510,"""   class SomeTest {\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,511,"""      @InjectMock private Foo foo = new Foo();\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,512,"""      \n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,513,"""      @Before public void setUp() {\n"" +"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,514,"""         MockitoAnnotations.initMock(this);\n"""
True,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,20,import org.mockito.internal.util.reflection.FieldReader;
True,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,91,"if(new FieldReader(testClass, field).isNull()) {"
True,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,src/org/mockito/internal/configuration/InjectingAnnotationEngine.java,92,new Reporter().injectMockAnnotationFieldIsNull(field.getName());
False,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,34,"hrow new MockitoException(""Cannot create a @Spy for '"" + field.getName() + ""' field because the instance is missing\n"" +"
True,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,34,"throw new MockitoException(""Cannot create a @Spy for '"" + field.getName() + ""' field because the *instance* is missing\n"" +"
True,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,src/org/mockito/internal/configuration/SpyAnnotationEngine.java,35,"""The instance must be created *before* initMocks();\n"" +"
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,1,package org.mockito.internal.util.reflection;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,3,import java.lang.reflect.Field;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,5,import org.mockito.exceptions.base.MockitoException;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,7,public class FieldReader {
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,9,final Object target;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,10,final Field field;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,11,final AccessibilityChanger changer = new AccessibilityChanger();
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,13,"public FieldReader(Object target, Field field) {"
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,14,this.target = target;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,15,this.field = field;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,16,changer.enableAccess(field);
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,19,public boolean isNull() {
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,20,try {
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,21,return field.get(target) == null;
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,22,} catch (Exception e) {
True,src/org/mockito/internal/util/reflection/FieldReader.java,src/org/mockito/internal/util/reflection/FieldReader.java,23,"throw new MockitoException(""Cannot read state from field: "" + field + "", on instance: "" + target);"
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,5,package org.mockito.internal.util.reflection;
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,7,import org.junit.Test;
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,8,import org.mockitoutil.TestBase;
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,10,"@SuppressWarnings(""unused"")"
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,11,public class FieldReaderTest extends TestBase {
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,13,class Foo {
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,14,private final String isNull = null;
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,15,"private final String notNull = """";"
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,18,@Test
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,19,public void shouldKnowWhenNull() throws Exception {
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,20,//when
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,21,"FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(""isNull""));"
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,22,//then
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,23,assertTrue(reader.isNull());
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,26,@Test
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,27,public void shouldKnowWhenNotNull() throws Exception {
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,28,//when
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,29,"FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(""notNull""));"
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,30,//then
True,test/org/mockito/internal/util/reflection/FieldReaderTest.java,test/org/mockito/internal/util/reflection/FieldReaderTest.java,31,assertFalse(reader.isNull());
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,9,import org.mockito.exceptions.base.MockitoException;
False,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,13,"SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,14,"@SuppressWarnings({""unchecked"", ""unused""})"
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,66,@Test(expected=MockitoException.class)
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,67,public void shouldProvideDecentExceptionWhenInjectMockInstanceIsNull() throws Exception {
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,68,MockitoAnnotations.initMocks(new Object() {
True,test/org/mockitousage/annotation/MockInjectionTest.java,test/org/mockitousage/annotation/MockInjectionTest.java,69,@InjectMock Object iAmNull = null;
False,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,14,"SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,14,"@SuppressWarnings({""unchecked"", ""unused""})"
False,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,33,"SuppressWarnings(""unused"")"
False,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,47,"/TODO unsupported combinations of annotations (spy - captor, spy - mock)"
False,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,48,/TODO unsupported combinations of annotations (captor - mock)
True,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,46,@Test(expected=MockitoException.class)
True,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,47,public void shouldProvideDecentExceptionWhenSpyInstanceIsNull() throws Exception {
True,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,48,MockitoAnnotations.initMocks(new Object() {
True,test/org/mockitousage/annotation/SpyAnnotationTest.java,test/org/mockitousage/annotation/SpyAnnotationTest.java,49,@Spy String spy = null;

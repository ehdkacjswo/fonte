is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,30,Answer a;
False,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,31,eturn answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);
True,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,32,a = answers.size() == 1 ? answers.peek() : answers.poll();
True,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java,34,return a.answer(invocation);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,1,package org.mockitousage.bugs;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,2,import java.util.concurrent.ExecutorService;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,3,import java.util.concurrent.Executors;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,4,import java.util.concurrent.TimeUnit;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,5,import java.util.concurrent.atomic.AtomicInteger;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,7,import org.junit.Assert;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,8,import org.junit.Test;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,9,import org.mockito.Mockito;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,10,import org.mockito.invocation.InvocationOnMock;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,11,import org.mockito.stubbing.Answer;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,13,//see bug 190
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,14,public class ShouldNotDeadlockAnswerExecution {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,16,@Test
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,17,public void failIfMockIsSharedBetweenThreads() throws Exception {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,18,Service service = Mockito.mock(Service.class);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,19,ExecutorService threads = Executors.newCachedThreadPool();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,20,AtomicInteger counter = new AtomicInteger(2);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,22,// registed answer on verySlowMethod
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,24,Mockito.when(service.verySlowMethod()).thenAnswer(new LockingAnswer(counter));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,26,// execute verySlowMethod twice in separate threads
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,28,threads.execute(new ServiceRunner(service));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,29,threads.execute(new ServiceRunner(service));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,31,// waiting for threads to finish
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,33,threads.shutdown();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,35,"if (!threads.awaitTermination(1000, TimeUnit.MILLISECONDS)) {"
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,36,// threads were timed-out
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,37,Assert.fail();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,41,@Test
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,42,public void successIfEveryThreadHasItsOwnMock() throws Exception {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,43,Service service1 = Mockito.mock(Service.class);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,44,Service service2 = Mockito.mock(Service.class);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,45,ExecutorService threads = Executors.newCachedThreadPool();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,46,AtomicInteger counter = new AtomicInteger(2);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,48,// registed answer on verySlowMethod
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,50,Mockito.when(service1.verySlowMethod()).thenAnswer(new LockingAnswer(counter));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,51,Mockito.when(service2.verySlowMethod()).thenAnswer(new LockingAnswer(counter));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,53,// execute verySlowMethod twice in separate threads
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,55,threads.execute(new ServiceRunner(service1));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,56,threads.execute(new ServiceRunner(service2));
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,58,// waiting for threads to finish
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,60,threads.shutdown();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,62,"if (!threads.awaitTermination(500, TimeUnit.MILLISECONDS)) {"
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,63,// threads were timed-out
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,64,Assert.fail();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,70,class LockingAnswer implements Answer<String> {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,72,private AtomicInteger counter;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,74,public LockingAnswer(AtomicInteger counter) {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,75,this.counter = counter;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,79,* Decrement counter and wait until counter has value 0
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,81,public String answer(InvocationOnMock invocation) throws Throwable {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,82,counter.decrementAndGet();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,84,while (counter.get() != 0) {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,85,Thread.sleep(10);
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,88,return null;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,93,class ServiceRunner implements Runnable {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,95,private Service service;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,97,public ServiceRunner(Service service) {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,98,this.service = service;
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,101,public void run() {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,102,service.verySlowMethod();
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,107,interface Service {
True,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java,109,String verySlowMethod();

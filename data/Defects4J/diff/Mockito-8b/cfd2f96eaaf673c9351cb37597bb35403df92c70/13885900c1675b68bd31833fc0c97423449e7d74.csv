is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,3,* This program is made available under the terms of the MIT License.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,23,mport java.util.concurrent.atomic.AtomicInteger;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,33,     if the mock settings is set to be serializable it will add the {@link AcrossJVMMockitoMockSerilizable} interface.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,34,     This interface defines a the {@link AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerilizable#writeReplace()}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,36,*     if the mock settings is set to be serializable it will add the {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable} interface.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,37,*     This interface defines a the {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable#writeReplace()}
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,44, <p><strong>Only one instance per mock.</strong></p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,47,* <p><strong>Only one instance per mock! See {@link MethodInterceptorFilter}</strong></p>
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,46, not thread-safe prototype !!!!
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,49,* TODO Use (and create) MockitoMock interface to identify a Mockito mock
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,50,* TODO Document external related classes
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,51,* TODO Use a constant for the class annotation marker
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,52,* TODO Use proper MockitoException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,53,"* TODO offer a way to disable completely this behavior, or maybe enable this behavior only with a specific setting"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,54,* TODO place Mockito mock identification logic in MockUtil
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,55,* TODO check the class is mockable in the deserialization side
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,58,* @since 1.9.6
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,52,rivate boolean currentlySerializing = false;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,53,olatile AtomicInteger returningProxyCounter = new AtomicInteger(0);
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,54,olatile AtomicInteger returningWrapperCounter = new AtomicInteger(0);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,62,private boolean instanceLocalCurrentlySerializingFlag = false;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,64,ublic Object writeReplace(Object proxy) throws ObjectStreamException {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,73,* Custom implementation of the <code>writeReplace</code> method for serialization.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,75,* Here's how it's working and why :
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,76,* <ol>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,77,*     <li>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,78,"*         <p>When first entering in this method, it's because some is serializing the mock, with some code like :"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,79,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,80,*     objectOutputStream.writeObject(mock);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,81,* </code></pre>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,82,"*         So, {@link ObjectOutputStream} will track the <code>writeReplace</code> method in the instance and"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,83,"*         execute it, which is wanted to replace the mock by another type that will encapsulate the actual mock."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,84,"*         At this point, the code will return an {@link AcrossJVMMockSerializationProxy}.</p>"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,85,*     </li>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,86,*     <li>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,87,"*         <p>Now, in the constructor {@link AcrossJVMMockSerializationProxy#AcrossJVMMockSerializationProxy(Object)}"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,88,*         the mock is being serialized in a custom way (using {@link MockitoMockObjectOutputStream}) to a
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,89,*         byte array. So basically it means the code is performing double nested serialization of the passed
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,90,*         <code>mockitoMock</code>.</p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,92,*         <p>However the <code>ObjectOutputStream</code> will still detect the custom
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,93,*         <code>writeReplace</code> and execute it.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,94,*         <em>(For that matter disabling replacement via {@link ObjectOutputStream#enableReplaceObject(boolean)}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,95,"*         doesn't disable the <code>writeReplace</code> call, but just just toggle replacement in the"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,96,"*         written stream, <strong><code>writeReplace</code> is always called by"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,97,*         <code>ObjectOutputStream</code></strong>.)</em></p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,99,"*         <p>In order to avoid this recursion, obviously leading to a {@link StackOverflowError}, this method is using"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,100,"*         a flag that marks the mock as already being replaced, and then shouldn't replace itself again."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,101,"*         <strong>This flag is local to this class</strong>, which means the flag of this class unfortunately needs"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,102,"*         to be protected against concurrent access, hence the reentrant lock.</p>"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,103,*     </li>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,104,* </ol>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,107,* @param mockitoMock The Mockito mock to be serialized.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,108,* @return A wrapper ({@link AcrossJVMMockSerializationProxy}) to be serialized by the calling ObjectOutputStream.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,109,* @throws ObjectStreamException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,111,public Object writeReplace(Object mockitoMock) throws ObjectStreamException {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,113,// reentrant lock for critical section. could it be improved ?
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,69,f(isCurrentlySerializing()) {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,70,"ystem.out.println(""["" + returningProxyCounter.getAndIncrement() + ""] retuning proxy"");"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,71,eturn proxy;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,117,if(mockIsCurrentlyBeingReplaced()) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,118,return mockitoMock;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,73,arkMockAsSerializing();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,75,"ystem.out.println(""["" + returningWrapperCounter.getAndIncrement() + ""] returning wrapper"");"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,120,mockReplacementStarted();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,77,eturn new AcrossJVMMockSerializationProxy(proxy);         // stackoverflow
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,122,return new AcrossJVMMockSerializationProxy(mockitoMock);
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,79,hrow new NotSerializableException(proxy.getClass().getCanonicalName()); // TODO throw our own serialization exception
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,124,throw new NotSerializableException(mockitoMock.getClass().getCanonicalName()); // TODO throw our own serialization exception
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,82,nmarkMockAsSerializing();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,127,mockReplacementCompleted();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,87,rivate void unmarkMockAsSerializing() {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,88,urrentlySerializing = false;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,132,private void mockReplacementCompleted() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,133,instanceLocalCurrentlySerializingFlag = false;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,91,rivate void markMockAsSerializing() {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,92,urrentlySerializing = true;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,136,private void mockReplacementStarted() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,137,instanceLocalCurrentlySerializingFlag = true;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,95,rivate boolean isCurrentlySerializing() {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,96,eturn currentlySerializing;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,140,private boolean mockIsCurrentlyBeingReplaced() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,141,return instanceLocalCurrentlySerializingFlag;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,145,* Enable serialization serialization that will work across classloaders / and JVM.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,147,* <p>Only enable if settings says the mock should be serializable. In this case add the
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,148,* {@link AcrossJVMMockitoMockSerializable} to the extra interface list.</p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,150,* @param settings Mock creation settings.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,151,* @param <T> Type param to not be bothered by the generics
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,101,/ havin faith that this set is modifiable
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,103,ettings.getExtraInterfaces().add(AcrossJVMMockitoMockSerilizable.class);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,155,// havin faith that this set is modifiable
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,156,// TODO use a proper way to add the interface
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,157,settings.getExtraInterfaces().add(AcrossJVMMockitoMockSerializable.class);
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,109, This is the serialization proxy that will encapsulate the real mock data.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,163,* This is the serialization proxy that will encapsulate the real mock data as a byte array.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,165,* <p>When called in the constructor it will serialize the mock in a byte array using a
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,166,* custom {@link MockitoMockObjectOutputStream} that will annotate the mock class in the stream.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,167,* other information are used in this class in order to facilitate deserialization.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,168,* </p>
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,111, It will allow deserilization of the mock in another classloader/vm through custom deserilization ObjectInputStream
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,170,* <p>Deserialization of the mock will be performed by the {@link #readResolve()} method via
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,171,* the custom {@link MockitoMockObjectInputStream} that will be in charge of creating the mock class.</p>
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,120,ublic AcrossJVMMockSerializationProxy(Object proxy) throws IOException {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,121,ockCreationSettings mockSettings = new MockUtil().getMockHandler(proxy).getMockSettings();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,180,* Creates the wrapper that be used in the serialization stream.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,182,"* <p>Immediately serializes the Mockito mock using specifically crafted {@link MockitoMockObjectOutputStream},"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,183,* in a byte array.</p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,185,* @param mockitoMock The Mockito mock to serialize.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,186,* @throws IOException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,188,public AcrossJVMMockSerializationProxy(Object mockitoMock) throws IOException {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,126,bjectOutputStream.writeObject(proxy);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,192,objectOutputStream.writeObject(mockitoMock);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,197,MockCreationSettings mockSettings = new MockUtil().getMockHandler(mockitoMock).getMockSettings();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,205,* Resolves the proxy to a new deserialized instance of the Mockito mock.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,207,* <p>Uses the custom crafted {@link MockitoMockObjectInputStream} to deserialize the mock.</p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,209,* @return A deserialized instance of the Mockito mock.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,210,* @throws ObjectStreamException
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,140,"bjectInputStream mockitoMockObjectInputStream = new MockitoMockObjectInputStream(bis, typeToMock, extraInterfaces);"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,215,"ObjectInputStream objectInputStream = new MockitoMockObjectInputStream(bis, typeToMock, extraInterfaces);"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,142,bject object = mockitoMockObjectInputStream.readObject();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,217,Object deserializedMock = objectInputStream.readObject();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,145,ockitoMockObjectInputStream.close();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,146,eturn object;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,220,objectInputStream.close();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,222,return deserializedMock;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,233,* Special Mockito aware <code>ObjectInputStream</code> that will resolve the Mockito proxy class.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,235,* <p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,236,*     This specificaly crafted ObjectInoutStream has the most important role to resolve the Mockito generated
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,237,*     class. It is doing so via the {@link #resolveClass(java.io.ObjectStreamClass)} which looks in the stream
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,238,*     for a Mockito marker. If this marker is found it will try to resolve the mockito class otherwise it
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,239,*     delegates class resolution to the default super behavior.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,240,*     The mirror method used for serializing the mock is {@link MockitoMockObjectOutputStream#annotateClass(Class)}.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,241,* </p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,243,* <p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,244,"*     When this marker is found, {@link ClassImposterizer} methods are being used to create the mock class."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,245,*     <em>Note that behind the <code>ClassImposterizer</code> there is CGLIB and the
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,246,*     {@link org.mockito.internal.creation.jmock.SearchingClassLoader} that will look if this enhanced class has
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,247,*     already been created in an accessible classloader ; so basically this code trusts the ClassImposterizer
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,248,*     code.</em>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,249,* </p>
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,165,nableResolveObject(true);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,259,enableResolveObject(true); // ensure resolving is enabled
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,263,* Resolve the Mockito proxy class if it is marked as such.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,265,* <p>Uses the fields {@link #typeToMock} and {@link #extraInterfaces} to
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,266,* create the Mockito proxy class as the <code>ObjectStreamClass</code>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,267,* doesn't carry useful information for this purpose.</p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,269,"* @param desc Description of the class in the stream, not used."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,270,* @return The class that will be used to deserialize the instance mock.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,271,* @throws IOException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,272,* @throws ClassNotFoundException
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,170,bject anObject = readObject();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,171,"f (""MockitoProxyMarker"".equals(anObject)) {"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,172,lassImposterizer.INSTANCE.canImposterise(typeToMock);
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,173,"lassImposterizer.INSTANCE.setConstructorsAccessible(typeToMock, true);"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,174,lass<?> proxyClass = ClassImposterizer.INSTANCE.createProxyClass(
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,175,"ypeToMock,"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,176,xtraInterfaces.toArray(new Class[extraInterfaces.size()])
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,179,ry {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,180,"ew FieldSetter(desc, desc.getClass().getDeclaredField(""name"")).set(proxyClass.getCanonicalName());"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,181, catch (NoSuchFieldException e) {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,182,.printStackTrace();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,185,eturn proxyClass;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,276,if (notMarkedAsAMockitoMock(readObject())) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,277,return super.resolveClass(desc);
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,188,eturn super.resolveClass(desc);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,280,// TODO check the class is mockable in the deserialization side
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,281,ClassImposterizer.INSTANCE.canImposterise(typeToMock);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,283,// create the Mockito mock class before it can even be deserialized
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,284,"ClassImposterizer.INSTANCE.setConstructorsAccessible(typeToMock, true);"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,285,Class<?> proxyClass = ClassImposterizer.INSTANCE.createProxyClass(
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,286,"typeToMock,"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,287,extraInterfaces.toArray(new Class[extraInterfaces.size()])
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,290,"hackClassNameToMatchNewlyCreatedClass(desc, proxyClass);"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,292,return proxyClass;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,195,ublic interface AcrossJVMMockitoMockSerilizable {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,196,ublic Object writeReplace() throws java.io.ObjectStreamException;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,297,* Hack the <code>name</code> field of the given <code>ObjectStreamClass</code> with
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,298,* the <code>newProxyClass</code>.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,300,* The parent ObjectInputStream will check the name of the class in the stream matches the name of the one
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,301,* that is created in this method.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,303,* The CGLIB classes uses a hash of the classloader and/or maybe some other data that allow them to be
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,304,* relatively unique in a JVM.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,306,"* When names differ, which happens when the mock is deserialized in another ClassLoader, a"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,307,"* <code>java.io.InvalidObjectException</code> is thrown, so this part of the code is hacking through"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,308,* the given <code>ObjectStreamClass</code> to change the name with the newly created class.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,310,* @param desc The <code>ObjectStreamClass</code> that will be hacked.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,311,* @param proxyClass The proxy class whose name will be applied.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,312,* @throws InvalidObjectException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,314,"private void hackClassNameToMatchNewlyCreatedClass(ObjectStreamClass desc, Class<?> proxyClass) throws InvalidObjectException {"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,315,try {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,316,"new FieldSetter(desc, desc.getClass().getDeclaredField(""name"")).set(proxyClass.getCanonicalName());"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,317,} catch (NoSuchFieldException e) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,318,"throw new InvalidObjectException(""Wow, the class 'ObjectStreamClass' in the JDK don't have the field 'name', this is definitely a bug, in our code, please report used JDK, eventually code sample.\n"" + e.toString());"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,323,* Read the stream class annotation and identify it as a Mockito mock or not.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,325,* @param marker The marker to identify.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,326,"* @return <code>true</code> if not marked as a Mockito, <code>false</code> if the class annotation marks a Mockito mock."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,327,* @throws IOException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,328,* @throws ClassNotFoundException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,330,"private boolean notMarkedAsAMockitoMock(Object marker) throws IOException, ClassNotFoundException {"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,331,"return !""MockitoProxyMarker"".equals(marker);"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,337,* Special Mockito aware <code>ObjectOutputStream</code>.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,339,* <p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,340,*     This output stream has the role of marking in the stream the Mockito class. This
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,341,*     marking process is necessary to identify the proxy class that will need to be recreated.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,343,*     The mirror method used for deserializing the mock is
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,344,*     {@link MockitoMockObjectInputStream#resolveClass(ObjectStreamClass)}.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,345,* </p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,354,* Annotates (marks) the class if this class is a Mockito mock.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,356,* @param cl The class to annotate.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,357,* @throws IOException
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,361,writeObject(mockitoProxyClassMarker(cl));
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,362,"// might be also useful later, for embedding classloader info ...maybe ...maybe not"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,366,* Returns the Mockito marker if this class is a Mockito mock.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,368,* @param cl The class to mark.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,369,"* @return The marker if this is a Mockito proxy class, otherwise returns a void marker."
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,371,private String mockitoProxyClassMarker(Class<?> cl) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,372,// TODO place logic in MockUtil
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,208,"riteObject(""MockitoProxyMarker"");"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,374,"return ""MockitoProxyMarker"";"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,210,"riteObject("""");"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,376,"return """";"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,212,"/ might be also useful later, for embedding classloader info maybe"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,382,* Simple interface that hold a correct <code>writeReplace</code> signature that can be seen by an
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,383,* <code>ObjectOutputStream</code>.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,385,* It will be applied before the creation of the mock when the mock setting says it should serializable.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,387,* @see #enableSerializationAcrossJVM(org.mockito.mock.MockCreationSettings)
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,389,public interface AcrossJVMMockitoMockSerializable {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,390,public Object writeReplace() throws java.io.ObjectStreamException;
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,23,xecutorService executorService = Executors.newFixedThreadPool(200);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,25,// given
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,26,int iterations = 2;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,27,int threadingFactor = 200;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,28,final ExecutorService executorService = Executors.newFixedThreadPool(threadingFactor);
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,30,nt iterations = 1;
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,31,nt threadingFactor = 100;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,31,// when
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,35,inal CyclicBarrier barrier = new CyclicBarrier(threadingFactor);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,34,final CyclicBarrier barrier_that_will_wait_until_threads_are_ready = new CyclicBarrier(threadingFactor);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,36,// prepare all threads by submitting a callable
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,37,//  - that will serialize the mock a 'threadingFactor' times
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,38,//  - that will use the mock a 'threadingFactor' times
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,38,inal int finalJ = j;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,40,// submit a callable that will serialize the mock 'iMethods'
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,41,"ystem.out.println(""["" + finalJ + ""] waiting here"");"
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,42,arrier.await();
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,43,"ystem.out.println(""["" + finalJ + ""] serializing now"");"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,43,barrier_that_will_wait_until_threads_are_ready.await();
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,45,eturn read_stream_and_deserialize_it_in_class_loader_B(SimpleSerializationUtil.serializeMock(iMethods).toByteArray());
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,46,byte[] mockBytes = SimpleSerializationUtil.serializeMock(iMethods).toByteArray();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,47,return read_stream_and_deserialize_it_in_class_loader_B(mockBytes);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,51,// submit a callable that will only use the mock 'iMethods'
False,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,50,arrier.await();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,54,barrier_that_will_wait_until_threads_are_ready.await();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,60,// ensure we are getting the futures

is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,6,import java.io.InputStream;
False,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,10,tring readPluginClass(Reader reader) throws IOException {
False,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,11,or(String line: IOUtil.readLines(reader)) {
True,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,11,String readPluginClass(InputStream input) throws IOException {
True,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,src/org/mockito/internal/configuration/plugins/PluginFileReader.java,12,for(String line: IOUtil.readLines(input)) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,1,package org.mockito.internal.configuration.plugins;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,3,import org.mockito.exceptions.base.MockitoException;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,4,import org.mockito.internal.util.io.IOUtil;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,5,import org.mockito.plugins.PluginSwitcher;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,7,import java.io.InputStream;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,8,import java.net.URL;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,10,class PluginFinder {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,12,private final PluginSwitcher pluginSwitcher;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,14,public PluginFinder(PluginSwitcher pluginSwitcher) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,15,this.pluginSwitcher = pluginSwitcher;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,18,String findPluginClass(Iterable<URL> resources) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,19,for (URL resource : resources) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,20,InputStream s = null;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,21,try {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,22,s = resource.openStream();
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,23,String pluginClassName = new PluginFileReader().readPluginClass(s);
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,24,if (pluginClassName == null) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,25,//For backwards compatibility
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,26,//If the resource does not have plugin class name we're ignoring it
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,27,continue;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,29,if (!pluginSwitcher.isEnabled(pluginClassName)) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,30,continue;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,32,return pluginClassName;
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,33,} catch(Exception e) {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,34,"throw new MockitoException(""Problems reading plugin implementation from: "" + resource, e);"
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,35,} finally {
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,36,IOUtil.closeQuietly(s);
True,src/org/mockito/internal/configuration/plugins/PluginFinder.java,src/org/mockito/internal/configuration/plugins/PluginFinder.java,39,return null;
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,5,import org.mockito.internal.util.collections.Iterables;
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,7,mport java.io.*;
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,8,import java.io.IOException;
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,10,mport java.util.Collections;
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,58,//TODO SF refactor
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,59,or (URL resource : Collections.list(resources)) {
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,60,ry {
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,61,nputStream in = resource.openStream();
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,62,"nputStreamReader reader = new InputStreamReader(in, ""UTF-8"");"
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,63,tring className = new PluginFileReader().readPluginClass(reader);
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,64,f (className == null) {
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,65,/For backwards compatibility
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,66,/If the resource does not have plugin class name we're ignoring it
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,67,ontinue;
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,69,f (!pluginSwitcher.isEnabled(className)) {
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,70,ontinue;
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,72,lass<?> pluginClass = loader.loadClass(className);
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,60,try {
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,61,String foundPluginClass = new PluginFinder(pluginSwitcher).findPluginClass(Iterables.toIterable(resources));
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,62,if (foundPluginClass != null) {
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,63,Class<?> pluginClass = loader.loadClass(foundPluginClass);
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,75, catch (Exception e) {
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,76,hrow new MockitoConfigurationException(
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,77,"Failed to load "" + service + "" using "" + resource, e);"
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,67,return result;
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,68,} catch (Exception e) {
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,69,throw new MockitoConfigurationException(
True,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,70,"""Failed to load "" + service + "" implementation declared in "" + resources, e);"
False,src/org/mockito/internal/configuration/plugins/PluginLoader.java,src/org/mockito/internal/configuration/plugins/PluginLoader.java,80,eturn result;
False,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,30,ublic static Collection<String> readLines(Reader reader) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,30,public static Collection<String> readLines(InputStream is) {
False,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,32,ufferedReader r = new BufferedReader(reader);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,32,BufferedReader r = new BufferedReader(new InputStreamReader(is));
False,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,39,"hrow new MockitoException(""Problems reading from: "" + reader, e);"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,39,"throw new MockitoException(""Problems reading from: "" + is, e);"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,7,import java.io.ByteArrayInputStream;
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,9,import java.io.InputStream;
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,28,"ssertNull(reader.readPluginClass(new StringReader("""")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,29,"ssertNull(reader.readPluginClass(new StringReader(""  "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,30,"ssertNull(reader.readPluginClass(new StringReader("" \n "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,30,"assertNull(reader.readPluginClass(impl("""")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,31,"assertNull(reader.readPluginClass(impl(""  "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,32,"assertNull(reader.readPluginClass(impl("" \n "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,33,"ssertNull(reader.readPluginClass(new StringReader(""#foo"")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,34,"ssertNull(reader.readPluginClass(new StringReader(""  # foo  "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,35,"ssertNull(reader.readPluginClass(new StringReader(""  # # # java.langString # "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,36,"ssertNull(reader.readPluginClass(new StringReader(""  \n # foo \n # foo \n "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,35,"assertNull(reader.readPluginClass(impl(""#foo"")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,36,"assertNull(reader.readPluginClass(impl(""  # foo  "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,37,"assertNull(reader.readPluginClass(impl(""  # # # java.langString # "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,38,"assertNull(reader.readPluginClass(impl(""  \n # foo \n # foo \n "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,41,private InputStream impl(String s) {
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,42,return new ByteArrayInputStream(s.getBytes());
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,41,"ssertEquals(""java.lang.String"", reader.readPluginClass(new StringReader(""java.lang.String"")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,42,"ssertEquals(""x"", reader.readPluginClass(new StringReader(""x"")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,43,"ssertEquals(""x y z"", reader.readPluginClass(new StringReader("" x y z "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,44,"ssertEquals(""foo.Foo"", reader.readPluginClass(new StringReader("" #my class\n  foo.Foo \n #other class "")));"
False,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,45,"ssertEquals(""foo.Foo"", reader.readPluginClass(new StringReader(""foo.Foo  # cool class"")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,47,"assertEquals(""java.lang.String"", reader.readPluginClass(impl(""java.lang.String"")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,48,"assertEquals(""x"", reader.readPluginClass(impl(""x"")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,49,"assertEquals(""x y z"", reader.readPluginClass(impl("" x y z "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,50,"assertEquals(""foo.Foo"", reader.readPluginClass(impl("" #my class\n  foo.Foo \n #other class "")));"
True,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java,51,"assertEquals(""foo.Foo"", reader.readPluginClass(impl(""foo.Foo  # cool class"")));"
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,1,package org.mockito.internal.configuration.plugins;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,3,import org.junit.Rule;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,4,import org.junit.Test;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,5,import org.junit.rules.TemporaryFolder;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,6,import org.mockito.InjectMocks;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,7,import org.mockito.Mock;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,8,import org.mockito.internal.util.io.IOUtil;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,9,import org.mockito.plugins.PluginSwitcher;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,10,import org.mockitoutil.TestBase;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,12,import java.io.File;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,14,import static java.util.Arrays.asList;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,16,public class PluginFinderTest extends TestBase {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,18,@Mock PluginSwitcher switcher;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,19,@InjectMocks PluginFinder finder;
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,20,public @Rule TemporaryFolder tmp = new TemporaryFolder();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,22,@Test public void empty_resources() {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,23,assertNull(finder.findPluginClass((Iterable) asList()));
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,26,@Test public void no_valid_impl() throws Exception {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,27,File f = tmp.newFile();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,29,//when
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,30,"IOUtil.writeText(""  \n  "", f);"
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,32,//then
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,33,assertNull(finder.findPluginClass((Iterable) asList(f.toURI().toURL())));
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,36,@Test public void single_implementation() throws Exception {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,37,File f = tmp.newFile();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,39,//when
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,40,"IOUtil.writeText(""  foo.Foo  "", f);"
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,42,//then
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,43,"assertEquals(""foo.Foo"", finder.findPluginClass((Iterable) asList(f.toURI().toURL())));"
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,46,@Test public void multiple_implementations() {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,47,fail();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,50,@Test public void multiple_empty_implementations() {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,51,fail();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,54,@Test public void single_usable_impl() {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,55,fail();
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,58,@Test public void problems_loading_impl() {
True,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,test/org/mockito/internal/configuration/plugins/PluginFinderTest.java,59,fail();
False,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,9,mport java.io.FileReader;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,9,import java.io.FileInputStream;
False,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,31,"ssertEquals(asList(""foo"", """", ""bar""), IOUtil.readLines(new FileReader(file)));"
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,31,"assertEquals(asList(""foo"", """", ""bar""), IOUtil.readLines(new FileInputStream(file)));"

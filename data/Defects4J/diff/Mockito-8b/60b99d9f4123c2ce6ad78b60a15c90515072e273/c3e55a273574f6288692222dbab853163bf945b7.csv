is_addition,old_file_path,new_file_path,line_num,content
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,21,private boolean enableClassCache = true;
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,38,"//for testing purposes, allow to override the annotation engine"
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,39,public void overrideEnableClassCache(boolean enableClassCache) {
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,40,this.enableClassCache = enableClassCache;
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,74,@Override
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,75,public boolean enableClassCache() {
True,test/org/mockito/configuration/MockitoConfiguration.java,test/org/mockito/configuration/MockitoConfiguration.java,76,return enableClassCache;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,1,package org.mockitousage.configuration;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,4,import org.fest.assertions.Condition;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,5,import org.junit.Test;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,6,import org.mockito.internal.configuration.ConfigurationAccess;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,8,import java.net.MalformedURLException;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,9,import java.net.URL;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,10,import java.net.URLClassLoader;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,11,import java.util.concurrent.Callable;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,13,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,14,import static org.junit.Assert.fail;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,15,import static org.mockito.Mockito.mock;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,17,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,18,public class ClassCacheVersusClassReloadingTest {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,20,private SimplePerRealmReloadingClassLoader testMethodClassLoaderRealm = new SimplePerRealmReloadingClassLoader(reloadMockito());
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,22,@Test
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,23,public void should_throw_ClassCastException_on_second_call() throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,24,"doInNewChildRealm(testMethodClassLoaderRealm, ""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,26,try {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,27,"doInNewChildRealm(testMethodClassLoaderRealm, ""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,28,"fail(""should have raised a ClasCastException when Objenis Cache is enabled"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,29,} catch (ClassCastException e) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,30,"assertThat(e).satisfies(thatCceIsThrownFrom(""org.mockito.internal.creation.jmock.ClassImposterizer.imposterise""));"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,34,@Test
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,35,public void should_not_throw_ClassCastException_when_objenesis_cache_disabled() throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,36,prepareMockitoAndDisableObjenesisCache();
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,38,"doInNewChildRealm(testMethodClassLoaderRealm, ""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,39,"doInNewChildRealm(testMethodClassLoaderRealm, ""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,42,private Condition<Throwable> thatCceIsThrownFrom(final String stacktraceElementDescription) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,43,return new Condition<Throwable>() {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,44,@Override
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,45,public boolean matches(Throwable throwable) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,46,return throwable.getStackTrace()[1].toString().contains(stacktraceElementDescription);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,51,public static class DoTheMocking implements Callable {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,52,public Object call() throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,53,"Class clazz = this.getClass().getClassLoader().loadClass(""org.mockitousage.MethodsImpl"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,54,return mock(clazz);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,59,"private static void doInNewChildRealm(ClassLoader parentRealm, String callableCalledInClassLoaderRealm) throws Exception {"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,60,"new SimplePerRealmReloadingClassLoader(parentRealm, reloadScope()).doInRealm(callableCalledInClassLoaderRealm);"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,63,private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadScope() {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,64,return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,65,public boolean needReload(String qualifiedName) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,66,"return ""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking"".equals(qualifiedName)"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,67,"|| ""org.mockitousage.MethodsImpl"".equals(qualifiedName);"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,72,private void prepareMockitoAndDisableObjenesisCache() throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,73,"testMethodClassLoaderRealm.doInRealm(""org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$PrepareMockito"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,76,public static class PrepareMockito implements Callable {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,77,public Object call() throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,78,"Class.forName(""org.mockito.Mockito"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,79,ConfigurationAccess.getConfig().overrideEnableClassCache(false);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,80,return Boolean.TRUE;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,84,private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadMockito() {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,85,return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,86,public boolean needReload(String qualifiedName) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,87,"return qualifiedName.contains(""org.mockito"")"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,88,"&& !qualifiedName.contains(""org.mockito.cglib"");"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,94,* Custom classloader to load classes in hierarchic realm.
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,96,* Each class can be reloaded in the realm if the LoadClassPredicate says so.
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,98,private static class SimplePerRealmReloadingClassLoader extends URLClassLoader {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,100,private ReloadClassPredicate reloadClassPredicate;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,102,public SimplePerRealmReloadingClassLoader(ReloadClassPredicate reloadClassPredicate) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,103,super(new URL[]{obtainClassPath(SimplePerRealmReloadingClassLoader.class)});
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,104,this.reloadClassPredicate = reloadClassPredicate;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,107,"public SimplePerRealmReloadingClassLoader(ClassLoader parentClassLoader, ReloadClassPredicate reloadClassPredicate) {"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,108,"super(new URL[]{obtainClassPath(SimplePerRealmReloadingClassLoader.class)}, parentClassLoader);"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,109,this.reloadClassPredicate = reloadClassPredicate;
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,112,private static URL obtainClassPath(Class<SimplePerRealmReloadingClassLoader> aClass) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,113,"String path = aClass.getName().replace('.', '/') + "".class"";"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,114,String url = aClass.getClassLoader().getResource(path).toExternalForm();
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,116,try {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,117,"return new URL(url.substring(0, url.length() - path.length()));"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,118,} catch (MalformedURLException e) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,119,"throw new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,123,@Override
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,124,public Class<?> loadClass(String qualifiedName) throws ClassNotFoundException {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,125,if(reloadClassPredicate.needReload(qualifiedName)) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,126,// return customLoadClass(qualifiedName);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,127,return findClass(qualifiedName);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,129,return super.loadClass(qualifiedName);
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,132,public Object doInRealm(String callableCalledInClassLoaderRealm) throws Exception {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,133,Callable<?> callableInRealm = (Callable<?>) this.loadClass(callableCalledInClassLoaderRealm).newInstance();
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,134,return callableInRealm.call();
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,137,public static interface ReloadClassPredicate {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,138,boolean needReload(String qualifiedName);

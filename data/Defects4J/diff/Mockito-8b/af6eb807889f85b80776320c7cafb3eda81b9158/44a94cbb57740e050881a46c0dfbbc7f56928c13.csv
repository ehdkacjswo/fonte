is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,1,package org.mockito.internal.junit;
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,3,import org.mockito.exceptions.verification.ArgumentsAreDifferent;
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,6,"* If JUnit is used, we can use an exception that extends from ComparisonFailure"
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,7,* and hence provide a better IDE support as the comparison result is comparable
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,9,class FriendlyExceptionMaker {
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,11,private final JUnitDetecter detecter;
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,13,FriendlyExceptionMaker(JUnitDetecter detecter) {
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,14,this.detecter = detecter;
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,17,"public AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {"
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,18,if (!detecter.hasJUnit()) {
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,19,return new ArgumentsAreDifferent(message);
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,22,try {
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,23,"Class<?> clazz = Class.forName(""org.mockito.exceptions.verification.junit.ArgumentsAreDifferent"");"
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,24,"AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);"
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,25,return throwable;
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,26,} catch (Throwable t) {
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,27,//            throw the default exception in case of problems
True,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,src/org/mockito/internal/junit/FriendlyExceptionMaker.java,28,return new ArgumentsAreDifferent(message);
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,1,package org.mockito.internal.junit;
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,3,class JUnitDetecter {
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,5,private boolean hasJUnit;
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,7,JUnitDetecter() {
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,8,try {
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,9,"Class.forName(""junit.framework.ComparisonFailure"");"
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,10,hasJUnit = true;
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,11,} catch (Throwable t) {
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,12,hasJUnit = false;
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,16,public boolean hasJUnit() {
True,src/org/mockito/internal/junit/JUnitDetecter.java,src/org/mockito/internal/junit/JUnitDetecter.java,17,return hasJUnit;
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,7,mport org.mockito.exceptions.verification.ArgumentsAreDifferent;
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,11,rivate static boolean hasJUnit;
True,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,9,private static JUnitDetecter detecter = new JUnitDetecter();
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,13,tatic {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,14,ry {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,15,"lass.forName(""junit.framework.ComparisonFailure"");"
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,16,asJUnit = true;
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,17, catch (Throwable t) {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,18,asJUnit = false;
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,23,eturn hasJUnit;
True,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,12,return detecter.hasJUnit();
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,27,f (!hasJUnit) {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,28,eturn new ArgumentsAreDifferent(message);
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,31,ry {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,32,"lass<?> clazz = Class.forName(""org.mockito.exceptions.verification.junit.ArgumentsAreDifferent"");"
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,33,"ssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);"
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,34,eturn throwable;
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,35, catch (Throwable t) {
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,36,/            throw the default exception in case of problems
False,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,37,eturn new ArgumentsAreDifferent(message);
True,src/org/mockito/internal/junit/JUnitTool.java,src/org/mockito/internal/junit/JUnitTool.java,16,"return new FriendlyExceptionMaker(detecter).createArgumentsAreDifferentException(message, wanted, actual);"

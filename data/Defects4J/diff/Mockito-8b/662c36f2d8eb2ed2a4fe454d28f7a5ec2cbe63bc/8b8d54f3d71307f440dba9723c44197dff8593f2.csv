is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,44,eturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();
True,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,44,return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());
False,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,63,"rivate <T> Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {"
True,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,63,"private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {"
True,src/org/mockito/internal/util/MockName.java,src/org/mockito/internal/util/MockName.java,27,if (className.length() == 0) {
True,src/org/mockito/internal/util/MockName.java,src/org/mockito/internal/util/MockName.java,28,"//it's an anonymous class, let's get name from the parent"
True,src/org/mockito/internal/util/MockName.java,src/org/mockito/internal/util/MockName.java,29,className = clazz.getSuperclass().getSimpleName();
False,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,65,rivate interface SomeInterface {};
False,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,67,rivate class SomeClass {};
False,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,68,rivate class ClassWithoutConstructor {};
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,65,final class FinalClass {}
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,66,class SomeClass {}
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,67,interface SomeInterface {}
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,69,@Test
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,70,public void shouldKnowIfCanImposterize() throws Exception {
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,71,assertFalse(ClassImposterizer.INSTANCE.canImposterise(FinalClass.class));
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,72,assertFalse(ClassImposterizer.INSTANCE.canImposterise(int.class));
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,74,assertTrue(ClassImposterizer.INSTANCE.canImposterise(SomeClass.class));
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,75,assertTrue(ClassImposterizer.INSTANCE.canImposterise(SomeInterface.class));
True,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java,78,private class ClassWithoutConstructor {}
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,1,package org.mockito.internal.util;
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,3,import org.junit.Test;
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,4,import org.mockitoutil.TestBase;
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,6,public class MockNameTest extends TestBase {
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,8,@Test
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,9,public void shouldProvideTheNameForClass() throws Exception {
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,10,//when
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,11,"String name = new MockName(null, SomeClass.class).toString();"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,12,//then
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,13,"assertEquals(""someClass"", name);"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,16,@Test
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,17,public void shouldProvideTheNameForAnonymousClass() throws Exception {
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,18,//given
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,19,SomeInterface anonymousInstance = new SomeInterface() {};
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,20,//when
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,21,"String name = new MockName(null, anonymousInstance.getClass()).toString();"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,22,//then
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,23,"assertEquals(""someInterface"", name);"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,26,@Test
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,27,public void shouldProvideTheGivenName() throws Exception {
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,28,//when
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,29,"String name = new MockName(""The Hulk"", SomeClass.class).toString();"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,30,//then
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,31,"assertEquals(""The Hulk"", name);"
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,34,private class SomeClass {}
True,test/org/mockito/internal/util/MockNameTest.java,test/org/mockito/internal/util/MockNameTest.java,35,private class SomeInterface {}
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,158,nterface Foo {}
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,158,interface Foo {
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,159,String print();
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,161,ublic void shouldDealWithAnonymousClasses() {
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,162,ry {
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,163,py(new Foo() {});
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,164,ail();
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,165, catch (MockitoException e) {
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,166,"ssertContains(""cannot mock"", e.getMessage());"
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,163,public void shouldAllowSpyingAnonymousClasses() {
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,164,//when
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,165,Foo spy = spy(new Foo() {
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,166,public String print() {
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,167,"return ""foo"";"
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,171,//then
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,172,"assertEquals(""foo"", spy.print());"
False,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,172,"ist real = Arrays.asList(new String[] {""first"", ""second""});"
True,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,test/org/mockitousage/spies/SpyingOnRealObjectsTest.java,177,"List real = Arrays.asList(""first"", ""second"");"

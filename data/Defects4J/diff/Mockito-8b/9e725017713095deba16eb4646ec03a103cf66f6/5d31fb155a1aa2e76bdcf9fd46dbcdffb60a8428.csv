is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,236,* This is particularly useful for spying on abstract classes. See also {@link Mockito#spy(Class)}.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,237,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,238,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,239,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,240,"* //Robust API, via settings builder:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,241,"* OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,243,* //Mocking a non-static inner abstract class:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,244,"* InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,245,* </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,242, Useful for mocking non-static inner classes in conjunction with {@link #useConstructor()}
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,252,* Makes it possible to mock non-static inner classes in conjunction with {@link #useConstructor()}.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,253,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,254,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,255,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,256,"* InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,257,* </code></pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,63,"*      <a href=""#30"">30. (new) Spying or mocking abstract classes (Since 1.10.12)</a><br/>"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,950,"* <h3 id=""30"">30. <a class=""meaningful_link"" href=""#spying_abstract_classes"">(new) Spying or mocking abstract classes (Since 1.10.12)</h3>"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,952,* It is now possible to conveniently spy on abstract classes. Note that overusing spies hints at code design smells (see {@link #spy(Object)}.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,953,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,954,"* Previously, spying was only possible on instances of objects."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,955,* New API makes it possible to use constructor when creating an instance of the mock.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,956,* This is particularly useful for mocking abstract classes because the user is no longer required to provide an instance of the abstract class.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,957,"* At the moment, only parameter-less constructor is supported, let us know if it is not enough."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,959,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,960,"*   //convenience API, new overloaded spy() method:"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,961,*   SomeAbstract spy = spy(SomeAbstract.class);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,963,"*   //Robust API, via settings builder:"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,964,"*   OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,966,*   //Mocking a non-static inner abstract class:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,967,"*   InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,968,* </code></pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,970,* For more information please see {@link MockSettings#useConstructor()}.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1375,* Please refer to the documentation of {@link #spy(Object)}.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1376,* Overusing spies hints at code design smells.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1377,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1378,"* This method, in contrast to the original {@link #spy(Object)}, creates a spy based on class instead of an object."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1379,* Sometimes it is more convenient to create spy based on the class and avoid providing an instance of a spied object.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1380,* This is particularly useful for spying on abstract classes because they cannot be instantiated.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1381,* See also {@link MockSettings#useConstructor()}.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1382,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1383,* Examples:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1384,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1385,*   SomeAbstract spy = spy(SomeAbstract.class);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1387,"*   //Robust API, via settings builder:"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1388,"*   OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1390,*   //Mocking a non-static inner abstract class:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1391,"*   InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1392,* </code></pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1394,* @param classToSpy the class to spy
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1395,* @param <T> type of the spy
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1396,* @return a spy of the provided class
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1398,public static <T> T spy(Class<T> classToSpy) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1399,"return MOCKITO_CORE.mock(classToSpy, withSettings()"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1400,.useConstructor()
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1401,.defaultAnswer(CALLS_REAL_METHODS));
False,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,9,mport static org.mockito.Mockito.CALLS_REAL_METHODS;
False,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,10,mport static org.mockito.Mockito.mock;
False,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,11,mport static org.mockito.Mockito.withSettings;
True,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,9,import static org.mockito.Mockito.*;
False,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,38,/the message is a part of state of the mocked type that gets initialized in constructor
True,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,36,"assertEquals(""hey!"", mock.getMessage());"
True,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,39,@Test
True,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,40,public void can_spy_abstract_classes() {
True,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,41,AbstractMessage mock = spy(AbstractMessage.class);
False,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,46,/the message is a part of state of the mocked type that gets initialized in constructor
